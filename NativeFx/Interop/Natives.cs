// Generated by Native Wrapper Generator, for NativeFx
// 2022/10/17 16:45:52 | DO NOT MODIFY UNLESS REQUIRED
namespace NativeFx.Interop;
using System;
using GTA.Native;
using GTA;
using GTA.Math;

public static class Natives 
{
#region SYSTEM
/// <summary>
/// Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use &quot;static void WAIT(DWORD time);&quot; found in main.h
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EDE34FBADD967A6<br />
/// </para>
/// </remarks>
public static void Wait(int ms)
{
Function.Call((Hash)0x4EDE34FBADD967A6, ms);
}

/// <summary>
/// Examples:<br /> g_384A = SYSTEM::START_NEW_SCRIPT(&quot;cellphone_flashhand&quot;, 1424);<br /> l_10D = SYSTEM::START_NEW_SCRIPT(&quot;taxiService&quot;, 1828);<br /> SYSTEM::START_NEW_SCRIPT(&quot;AM_MP_YACHT&quot;, 5000);<br /> SYSTEM::START_NEW_SCRIPT(&quot;emergencycall&quot;, 512);<br /> SYSTEM::START_NEW_SCRIPT(&quot;emergencycall&quot;, 512); <br /> SYSTEM::START_NEW_SCRIPT(&quot;FM_maintain_cloud_header_data&quot;, 1424);<br /> SYSTEM::START_NEW_SCRIPT(&quot;FM_Mission_Controller&quot;, 31000);<br /> SYSTEM::START_NEW_SCRIPT(&quot;tennis_family&quot;, 3650);<br /> SYSTEM::START_NEW_SCRIPT(&quot;Celebrations&quot;, 3650);<br /><br />Decompiled examples of usage when starting a script:<br /> <br />    SCRIPT::REQUEST_SCRIPT(a_0);<br />    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {<br />        SYSTEM::START_NEW_SCRIPT(a_0, v_3);<br />        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);<br />        return 1;<br />    }<br /> <br />or:<br /><br />    v_2 = &quot;MrsPhilips2&quot;;<br />    SCRIPT::REQUEST_SCRIPT(v_2);<br />    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {<br />    SCRIPT::REQUEST_SCRIPT(v_2);<br />    SYSTEM::WAIT(0);<br />    }<br />    sub_8792(36);<br />    SYSTEM::START_NEW_SCRIPT(v_2, 17000);<br />    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE81651AD79516E48<br />
/// </para>
/// </remarks>
public static int StartNewScript(string scriptName, int stackSize)
{
return Function.Call<int>((Hash)0xE81651AD79516E48, scriptName, stackSize);
}

/// <summary>
/// return : script thread id, 0 if failed<br />Pass pointer to struct of args in p1, size of struct goes into p2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8BA7F44DF1575E1<br />
/// </para>
/// </remarks>
public static int StartNewScriptWithArgs(string scriptName, int /* bug: structure */ args, int argCount, int stackSize)
{
return Function.Call<int>((Hash)0xB8BA7F44DF1575E1, scriptName, args, argCount, stackSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB1C67C3A5333A92<br />
/// </para>
/// </remarks>
public static int StartNewScriptWithNameHash(uint scriptHash, int stackSize)
{
return Function.Call<int>((Hash)0xEB1C67C3A5333A92, scriptHash, stackSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4BB298BD441BE78<br />
/// </para>
/// </remarks>
public static int StartNewScriptWithNameHashAndArgs(uint scriptHash, int /* bug: structure */ args, int argCount, int stackSize)
{
return Function.Call<int>((Hash)0xC4BB298BD441BE78, scriptHash, args, argCount, stackSize);
}

/// <summary>
/// Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83666F9FB8FEBD4B<br />
/// </para>
/// </remarks>
public static int Timera()
{
return Function.Call<int>((Hash)0x83666F9FB8FEBD4B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9D9444186B5A374<br />
/// </para>
/// </remarks>
public static int Timerb()
{
return Function.Call<int>((Hash)0xC9D9444186B5A374);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1B1E9A034A63A62<br />
/// </para>
/// </remarks>
public static void Settimera(int value)
{
Function.Call((Hash)0xC1B1E9A034A63A62, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AE11BC36633DE4E<br />
/// </para>
/// </remarks>
public static void Settimerb(int value)
{
Function.Call((Hash)0x5AE11BC36633DE4E, value);
}

/// <summary>
/// Gets the current frame time.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0000000050597EE2<br />
/// </para>
/// </remarks>
public static float Timestep()
{
return Function.Call<float>((Hash)0x0000000050597EE2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BADBFA3B172435F<br />
/// </para>
/// </remarks>
public static float Sin(float value)
{
return Function.Call<float>((Hash)0x0BADBFA3B172435F, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0FFB162F40A139C<br />
/// </para>
/// </remarks>
public static float Cos(float value)
{
return Function.Call<float>((Hash)0xD0FFB162F40A139C, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71D93B57D07F9804<br />
/// </para>
/// </remarks>
public static float Sqrt(float value)
{
return Function.Call<float>((Hash)0x71D93B57D07F9804, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3621CC40F31FE2E<br />
/// </para>
/// </remarks>
public static float Pow(float @base, float exponent)
{
return Function.Call<float>((Hash)0xE3621CC40F31FE2E, @base, exponent);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xE816E655DE37FE20<br />
/// </para>
/// </remarks>
public static float Log10(float value)
{
return Function.Call<float>((Hash)0xE816E655DE37FE20, value);
}

/// <summary>
/// Calculates the magnitude of a vector.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x652D2EEEF1D3E62C<br />
/// </para>
/// </remarks>
public static float Vmag(float x, float y, float z)
{
return Function.Call<float>((Hash)0x652D2EEEF1D3E62C, x, y, z);
}

/// <summary>
/// Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8CEACB4F35AE058<br />
/// </para>
/// </remarks>
public static float Vmag2(float x, float y, float z)
{
return Function.Call<float>((Hash)0xA8CEACB4F35AE058, x, y, z);
}

/// <summary>
/// Calculates distance between vectors.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A488C176D52CCA5<br />
/// </para>
/// </remarks>
public static float Vdist(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<float>((Hash)0x2A488C176D52CCA5, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB7A628320EFF8E47<br />
/// </para>
/// </remarks>
public static float Vdist2(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<float>((Hash)0xB7A628320EFF8E47, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDD95A39E5544DE8<br />
/// </para>
/// </remarks>
public static int ShiftLeft(int value, int bitShift)
{
return Function.Call<int>((Hash)0xEDD95A39E5544DE8, value, bitShift);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97EF1E5BCE9DC075<br />
/// </para>
/// </remarks>
public static int ShiftRight(int value, int bitShift)
{
return Function.Call<int>((Hash)0x97EF1E5BCE9DC075, value, bitShift);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF34EE736CF047844<br />
/// </para>
/// </remarks>
public static int Floor(float value)
{
return Function.Call<int>((Hash)0xF34EE736CF047844, value);
}

/// <summary>
/// I&apos;m guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11E019C8F43ACC8A<br />
/// </para>
/// </remarks>
public static int Ceil(float value)
{
return Function.Call<int>((Hash)0x11E019C8F43ACC8A, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2DB717A73826179<br />
/// </para>
/// </remarks>
public static int Round(float value)
{
return Function.Call<int>((Hash)0xF2DB717A73826179, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBDA792448DB5A89<br />
/// </para>
/// </remarks>
public static float ToFloat(int value)
{
return Function.Call<float>((Hash)0xBBDA792448DB5A89, value);
}

/// <summary>
/// THREAD_PRIO_HIGHEST = 0<br />THREAD_PRIO_NORMAL = 1<br />THREAD_PRIO_LOWEST = 2<br />THREAD_PRIO_MANUAL_UPDATE = 100
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x42B65DEEF2EDF2A1<br />
/// </para>
/// </remarks>
public static void SetThisThreadPriority(int priority)
{
Function.Call((Hash)0x42B65DEEF2EDF2A1, priority);
}

#endregion
#region APP
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x846AA8E7D55EE5B6<br />
/// </para>
/// </remarks>
public static bool AppDataValid()
{
return Function.Call<bool>((Hash)0x846AA8E7D55EE5B6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3A58A12C77D9D4B<br />
/// </para>
/// </remarks>
public static int AppGetInt(string property)
{
return Function.Call<int>((Hash)0xD3A58A12C77D9D4B, property);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1514FB24C02C2322<br />
/// </para>
/// </remarks>
public static float AppGetFloat(string property)
{
return Function.Call<float>((Hash)0x1514FB24C02C2322, property);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x749B023950D2311C<br />
/// </para>
/// </remarks>
public static string AppGetString(string property)
{
return Function.Call<string>((Hash)0x749B023950D2311C, property);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x607E8E3D3E4F9611<br />
/// </para>
/// </remarks>
public static void AppSetInt(string property, int value)
{
Function.Call((Hash)0x607E8E3D3E4F9611, property, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25D7687C68E0DAA4<br />
/// </para>
/// </remarks>
public static void AppSetFloat(string property, float value)
{
Function.Call((Hash)0x25D7687C68E0DAA4, property, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FF2FCEC4B7721B4<br />
/// </para>
/// </remarks>
public static void AppSetString(string property, string value)
{
Function.Call((Hash)0x3FF2FCEC4B7721B4, property, value);
}

/// <summary>
/// Called in the gamescripts like:<br />APP::APP_SET_APP(&quot;car&quot;);<br />APP::APP_SET_APP(&quot;dog&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFD0406ADAF90D2B<br />
/// </para>
/// </remarks>
public static void AppSetApp(string appName)
{
Function.Call((Hash)0xCFD0406ADAF90D2B, appName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x262AB456A3D21F93<br />
/// </para>
/// </remarks>
public static void AppSetBlock(string blockName)
{
Function.Call((Hash)0x262AB456A3D21F93, blockName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FE1DF3342DB7DBA<br />
/// </para>
/// </remarks>
public static void AppClearBlock()
{
Function.Call((Hash)0x5FE1DF3342DB7DBA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE41C65E07A5F05FC<br />
/// </para>
/// </remarks>
public static void AppCloseApp()
{
Function.Call((Hash)0xE41C65E07A5F05FC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8E3FCF72EAC0EF8<br />
/// </para>
/// </remarks>
public static void AppCloseBlock()
{
Function.Call((Hash)0xE8E3FCF72EAC0EF8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71EEE69745088DA0<br />
/// </para>
/// </remarks>
public static bool AppHasLinkedSocialClubAccount()
{
return Function.Call<bool>((Hash)0x71EEE69745088DA0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA52279A7271517F<br />
/// </para>
/// </remarks>
public static bool AppHasSyncedData(string appName)
{
return Function.Call<bool>((Hash)0xCA52279A7271517F, appName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95C5D356CDA6E85F<br />
/// </para>
/// </remarks>
public static void AppSaveData()
{
Function.Call((Hash)0x95C5D356CDA6E85F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9853A2BE3DED1A6<br />
/// </para>
/// </remarks>
public static int AppGetDeletedFileStatus()
{
return Function.Call<int>((Hash)0xC9853A2BE3DED1A6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44151AEA95C8A003<br />
/// </para>
/// </remarks>
public static bool AppDeleteAppData(string appName)
{
return Function.Call<bool>((Hash)0x44151AEA95C8A003, appName);
}

#endregion
#region AUDIO
/// <summary>
/// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny<br /><br />AUDIO::PLAY_PED_RINGTONE(&quot;Remote_Ring&quot;, PLAYER::PLAYER_PED_ID(), 1);<br />AUDIO::PLAY_PED_RINGTONE(&quot;Dial_and_Remote_Ring&quot;, PLAYER::PLAYER_PED_ID(), 1);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9E56683CA8E11A5<br />
/// </para>
/// </remarks>
public static void PlayPedRingtone(string ringtoneName, int /* Ped */ ped, bool p2)
{
Function.Call((Hash)0xF9E56683CA8E11A5, ringtoneName, ped, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E8E5E20937E3137<br />
/// </para>
/// </remarks>
public static bool IsPedRingtonePlaying(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x1E8E5E20937E3137, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C5AE23EFA885092<br />
/// </para>
/// </remarks>
public static void StopPedRingtone(int /* Ped */ ped)
{
Function.Call((Hash)0x6C5AE23EFA885092, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7497D2CE2C30D24C<br />
/// </para>
/// </remarks>
public static bool IsMobilePhoneCallOngoing()
{
return Function.Call<bool>((Hash)0x7497D2CE2C30D24C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8B1B2425604CDD0<br />
/// </para>
/// </remarks>
public static bool IsMobileInterferenceActive()
{
return Function.Call<bool>((Hash)0xC8B1B2425604CDD0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2C91A0B572AAE56<br />
/// </para>
/// </remarks>
public static void CreateNewScriptedConversation()
{
Function.Call((Hash)0xD2C91A0B572AAE56);
}

/// <summary>
/// NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,<br />GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it&apos;s &apos;z&apos;. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.<br /><br />p0 is -1, 0 - 35<br />p1 is a char or string (whatever you wanna call it)<br />p2 is Global 10597 + i * 6. &apos;i&apos; is a while(i &lt; 70) loop<br />p3 is again -1, 0 - 35 <br />p4 is again -1, 0 - 35 <br />p5 is either 0 or 1 (bool ?)<br />p6 is either 0 or 1 (The func to determine this is bool)<br />p7 is either 0 or 1 (The func to determine this is bool)<br />p8 is either 0 or 1 (The func to determine this is bool)<br />p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)<br />p10 is either 0 or 1 (The func to determine this is bool)<br />p11 is either 0 or 1 (The func to determine this is bool)<br />p12 is unknown as in TU27 X360 scripts it only goes to p11.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5EF963405593646<br />
/// </para>
/// </remarks>
public static void AddLineToConversation(int index, string p1, string p2, int p3, int p4, bool p5, bool p6, bool p7, bool p8, int p9, bool p10, bool p11, bool p12)
{
Function.Call((Hash)0xC5EF963405593646, index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}

/// <summary>
/// 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:<br /><br />AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, &quot;DINAPOLI&quot;);<br /><br />=================================================<br />One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95D9F4BC443956E7<br />
/// </para>
/// </remarks>
public static void AddPedToConversation(int index, int /* Ped */ ped, string p2)
{
Function.Call((Hash)0x95D9F4BC443956E7, index, ped, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33E3C6C6F2F0B506<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPositionForNullConvPed(int /* bug: Any */ p0, float p1, float p2, float p3)
{
Function.Call((Hash)0x33E3C6C6F2F0B506, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x892B6AB8F33606F5<br />
/// </para>
/// </remarks>
public static void SetEntityForNullConvPed(int p0, int /* Entity */ entity)
{
Function.Call((Hash)0x892B6AB8F33606F5, p0, entity);
}

/// <summary>
/// This native controls where the game plays audio from. By default the microphone is positioned on the player.<br />When p0 is true the game will play audio from the 3 positions inputted.<br />It is recommended to set all 3 positions to the same value as mixing different positions doesn&apos;t seem to work well.<br />The scripts mostly use it with only one position such as in fbi3.c: <br />AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6AE90EDDE95C762<br />
/// </para>
/// </remarks>
public static void SetMicrophonePosition(bool toggle, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3)
{
Function.Call((Hash)0xB6AE90EDDE95C762, toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B568201DD99F0EB<br />
/// </para>
/// </remarks>
public static void SetConversationAudioControlledByAnim(bool p0)
{
Function.Call((Hash)0x0B568201DD99F0EB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61631F5DF50D1C34<br />
/// </para>
/// </remarks>
public static void SetConversationAudioPlaceholder(bool p0)
{
Function.Call((Hash)0x61631F5DF50D1C34, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x252E5F915EABB675<br />
/// </para>
/// </remarks>
public static void StartScriptPhoneConversation(bool p0, bool p1)
{
Function.Call((Hash)0x252E5F915EABB675, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6004BCB0E226AAEA<br />
/// </para>
/// </remarks>
public static void PreloadScriptPhoneConversation(bool p0, bool p1)
{
Function.Call((Hash)0x6004BCB0E226AAEA, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B17C62C9635D2DC<br />
/// </para>
/// </remarks>
public static void StartScriptConversation(bool p0, bool p1, bool p2, bool p3)
{
Function.Call((Hash)0x6B17C62C9635D2DC, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B3CAD6166916D87<br />
/// </para>
/// </remarks>
public static void PreloadScriptConversation(bool p0, bool p1, bool p2, bool p3)
{
Function.Call((Hash)0x3B3CAD6166916D87, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23641AFE870AF385<br />
/// </para>
/// </remarks>
public static void StartPreloadedConversation()
{
Function.Call((Hash)0x23641AFE870AF385);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE73364DB90778FFA<br />
/// </para>
/// </remarks>
public static bool GetIsPreloadedConversationReady()
{
return Function.Call<bool>((Hash)0xE73364DB90778FFA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16754C556D2EDE3D<br />
/// </para>
/// </remarks>
public static bool IsScriptedConversationOngoing()
{
return Function.Call<bool>((Hash)0x16754C556D2EDE3D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF0D54BE7A776737<br />
/// </para>
/// </remarks>
public static bool IsScriptedConversationLoaded()
{
return Function.Call<bool>((Hash)0xDF0D54BE7A776737);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x480357EE890C295A<br />
/// </para>
/// </remarks>
public static int GetCurrentScriptedConversationLine()
{
return Function.Call<int>((Hash)0x480357EE890C295A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8530AD776CD72B12<br />
/// </para>
/// </remarks>
public static void PauseScriptedConversation(bool p0)
{
Function.Call((Hash)0x8530AD776CD72B12, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AEB285D1818C9AC<br />
/// </para>
/// </remarks>
public static void RestartScriptedConversation()
{
Function.Call((Hash)0x9AEB285D1818C9AC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD79DEEFB53455EBA<br />
/// </para>
/// </remarks>
public static int StopScriptedConversation(bool p0)
{
return Function.Call<int>((Hash)0xD79DEEFB53455EBA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9663FE6B7A61EB00<br />
/// </para>
/// </remarks>
public static void SkipToNextScriptedConversationLine()
{
Function.Call((Hash)0x9663FE6B7A61EB00);
}

/// <summary>
/// Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), &quot;CST4_CFAA&quot;, &quot;FRANKLIN&quot;);<br />Voicelines can be found in GTAV\x64\audio\sfx in files starting with &quot;SS_&quot; which seems to mean scripted speech.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA018A12E5C5C2FA6<br />
/// </para>
/// </remarks>
public static void InterruptConversation(int /* Ped */ ped, string voiceline, string speaker)
{
Function.Call((Hash)0xA018A12E5C5C2FA6, ped, voiceline, speaker);
}

/// <summary>
/// One call found in the b617d scripts:<br /><br />AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), &quot;CONV_INTERRUPT_QUIT_IT&quot;, &quot;LESTER&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A694D7A68F8DC38<br />
/// </para>
/// </remarks>
public static void InterruptConversationAndPause(int /* Ped */ ped, string p1, string speaker)
{
Function.Call((Hash)0x8A694D7A68F8DC38, ped, p1, speaker);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA19F5572C38B564<br />
/// </para>
/// </remarks>
public static int GetVariationChosenForScriptedLine(int /* bug: structure */ p0)
{
return Function.Call<int>((Hash)0xAA19F5572C38B564, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB542DE8C3D1CB210<br />
/// </para>
/// </remarks>
public static void SetNoDuckingForConversation(bool p0)
{
Function.Call((Hash)0xB542DE8C3D1CB210, p0);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6ED9D5092438D91<br />
/// </para>
/// </remarks>
public static void RegisterScriptWithAudio(int p0)
{
Function.Call((Hash)0xC6ED9D5092438D91, p0);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8638BE228D4751A<br />
/// </para>
/// </remarks>
public static void UnregisterScriptWithAudio()
{
Function.Call((Hash)0xA8638BE228D4751A);
}

/// <summary>
/// All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm<br />Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7345BDD95E62E0F2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool RequestMissionAudioBank(string p0, bool p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x7345BDD95E62E0F2, p0, p1, p2);
}

/// <summary>
/// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz<br />Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE02FFBED8CA9D99<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool RequestAmbientAudioBank(string p0, bool p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xFE02FFBED8CA9D99, p0, p1, p2);
}

/// <summary>
/// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6<br />Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F844A8B08D76685<br />
/// </para>
/// </remarks>
public static bool RequestScriptAudioBank(string p0, bool p1, int p2)
{
return Function.Call<bool>((Hash)0x2F844A8B08D76685, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x40763EA7B9B783E7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HintMissionAudioBank(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x40763EA7B9B783E7, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F8C0E370AE62F5C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HintAmbientAudioBank(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x8F8C0E370AE62F5C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB380A29641EC31A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HintScriptAudioBank(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xFB380A29641EC31A, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EC92A1BF0857187<br />
/// </para>
/// </remarks>
public static void ReleaseMissionAudioBank()
{
Function.Call((Hash)0x0EC92A1BF0857187);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65475A218FFAA93D<br />
/// </para>
/// </remarks>
public static void ReleaseAmbientAudioBank()
{
Function.Call((Hash)0x65475A218FFAA93D);
}

/// <summary>
/// Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77ED170667F50170<br />
/// </para>
/// </remarks>
public static void ReleaseNamedScriptAudioBank(string audioBank)
{
Function.Call((Hash)0x77ED170667F50170, audioBank);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A2D8AD0A9EB9C3F<br />
/// </para>
/// </remarks>
public static void ReleaseScriptAudioBank()
{
Function.Call((Hash)0x7A2D8AD0A9EB9C3F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19AF7ED9B9D23058<br />
/// </para>
/// </remarks>
public static void UnhintAmbientAudioBank()
{
Function.Call((Hash)0x19AF7ED9B9D23058);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AC92EED5E4793AB<br />
/// </para>
/// </remarks>
public static void UnhintScriptAudioBank()
{
Function.Call((Hash)0x9AC92EED5E4793AB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x11579D940949C49E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UnhintNamedScriptAudioBank(int /* bug: Any */ p0)
{
Function.Call((Hash)0x11579D940949C49E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x430386FE9BF80B45<br />
/// </para>
/// </remarks>
public static int GetSoundId()
{
return Function.Call<int>((Hash)0x430386FE9BF80B45);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x353FC880830B88FA<br />
/// </para>
/// </remarks>
public static void ReleaseSoundId(int soundId)
{
Function.Call((Hash)0x353FC880830B88FA, soundId);
}

/// <summary>
/// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FF4944CC209192D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaySound(int soundId, string audioName, string audioRef, bool p3, int /* bug: Any */ p4, bool p5)
{
Function.Call((Hash)0x7FF4944CC209192D, soundId, audioName, audioRef, p3, p4, p5);
}

/// <summary>
/// List: https://pastebin.com/DCeRiaLJ<br /><br />All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67C540AA08E4A6F5<br />
/// </para>
/// </remarks>
public static void PlaySoundFrontend(int soundId, string audioName, string audioRef, bool p3)
{
Function.Call((Hash)0x67C540AA08E4A6F5, soundId, audioName, audioRef, p3);
}

/// <summary>
/// Only call found in the b617d scripts:<br /><br />AUDIO::PLAY_DEFERRED_SOUND_FRONTEND(&quot;BACK&quot;, &quot;HUD_FREEMODE_SOUNDSET&quot;);<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCADA5A0D0702381E<br />
/// </para>
/// </remarks>
public static void PlayDeferredSoundFrontend(string soundName, string soundsetName)
{
Function.Call((Hash)0xCADA5A0D0702381E, soundName, soundsetName);
}

/// <summary>
/// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0 <br />No changes made in b678d.<br /><br />gtaforums.com/topic/795622-audio-for-mods<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE65F427EB70AB1ED<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaySoundFromEntity(int soundId, string audioName, int /* Entity */ entity, string audioRef, bool isNetwork, int /* bug: Any */ p5)
{
Function.Call((Hash)0xE65F427EB70AB1ED, soundId, audioName, entity, audioRef, isNetwork, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x5B9853296731E88D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaySoundFromEntityHash(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x5B9853296731E88D, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW<br /><br />gtaforums.com/topic/795622-audio-for-mods<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D8686B622B88120<br />
/// </para>
/// </remarks>
public static void PlaySoundFromCoord(int soundId, string audioName, float x, float y, float z, string audioRef, bool isNetwork, int range, bool p8)
{
Function.Call((Hash)0x8D8686B622B88120, soundId, audioName, x, y, z, audioRef, isNetwork, range, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x7EC3C679D0E7E46B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UpdateSoundCoord(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x7EC3C679D0E7E46B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3B0C41BA5CC0BB5<br />
/// </para>
/// </remarks>
public static void StopSound(int soundId)
{
Function.Call((Hash)0xA3B0C41BA5CC0BB5, soundId);
}

/// <summary>
/// Could this be used alongside either, <br />SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It&apos;d be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DE3F0A134FFBC0D<br />
/// </para>
/// </remarks>
public static int GetNetworkIdFromSoundId(int soundId)
{
return Function.Call<int>((Hash)0x2DE3F0A134FFBC0D, soundId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75262FD12D0A1C84<br />
/// </para>
/// </remarks>
public static int GetSoundIdFromNetworkId(int netId)
{
return Function.Call<int>((Hash)0x75262FD12D0A1C84, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD6B3148A78AE9B6<br />
/// </para>
/// </remarks>
public static void SetVariableOnSound(int soundId, int /* bug: structure */ p1, float p2)
{
Function.Call((Hash)0xAD6B3148A78AE9B6, soundId, p1, p2);
}

/// <summary>
/// From the scripts, p0:<br /><br />&quot;ArmWrestlingIntensity&quot;,<br />&quot;INOUT&quot;,<br />&quot;Monkey_Stream&quot;,<br />&quot;ZoomLevel&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F9D3834AEB9EF79<br />
/// </para>
/// </remarks>
public static void SetVariableOnStream(string p0, float p1)
{
Function.Call((Hash)0x2F9D3834AEB9EF79, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2A9CDABCEA04BD6<br />
/// </para>
/// </remarks>
public static void OverrideUnderwaterStream(int /* bug: structure */ p0, bool p1)
{
Function.Call((Hash)0xF2A9CDABCEA04BD6, p0, p1);
}

/// <summary>
/// AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(&quot;inTunnel&quot;, 1.0);<br />AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM(&quot;inTunnel&quot;, 0.0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x733ADF241531E5C2<br />
/// </para>
/// </remarks>
public static void SetVariableOnUnderWaterStream(string variableName, float value)
{
Function.Call((Hash)0x733ADF241531E5C2, variableName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCBDCE714A7C88E5<br />
/// </para>
/// </remarks>
public static bool HasSoundFinished(int soundId)
{
return Function.Call<bool>((Hash)0xFCBDCE714A7C88E5, soundId);
}

/// <summary>
/// Plays ambient speech. See also _0x444180DB.<br /><br />ped: The ped to play the ambient speech.<br />speechName: Name of the speech to play, eg. &quot;GENERIC_HI&quot;.<br />speechParam: Can be one of the following:<br />SPEECH_PARAMS_STANDARD<br />SPEECH_PARAMS_ALLOW_REPEAT<br />SPEECH_PARAMS_BEAT<br />SPEECH_PARAMS_FORCE<br />SPEECH_PARAMS_FORCE_FRONTEND<br />SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND<br />SPEECH_PARAMS_FORCE_NORMAL<br />SPEECH_PARAMS_FORCE_NORMAL_CLEAR<br />SPEECH_PARAMS_FORCE_NORMAL_CRITICAL<br />SPEECH_PARAMS_FORCE_SHOUTED<br />SPEECH_PARAMS_FORCE_SHOUTED_CLEAR<br />SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL<br />SPEECH_PARAMS_FORCE_PRELOAD_ONLY<br />SPEECH_PARAMS_MEGAPHONE<br />SPEECH_PARAMS_HELI<br />SPEECH_PARAMS_FORCE_MEGAPHONE<br />SPEECH_PARAMS_FORCE_HELI<br />SPEECH_PARAMS_INTERRUPT<br />SPEECH_PARAMS_INTERRUPT_SHOUTED<br />SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR<br />SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL<br />SPEECH_PARAMS_INTERRUPT_NO_FORCE<br />SPEECH_PARAMS_INTERRUPT_FRONTEND<br />SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND<br />SPEECH_PARAMS_ADD_BLIP<br />SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT<br />SPEECH_PARAMS_ADD_BLIP_FORCE<br />SPEECH_PARAMS_ADD_BLIP_SHOUTED<br />SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE<br />SPEECH_PARAMS_ADD_BLIP_INTERRUPT<br />SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE<br />SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED<br />SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR<br />SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL<br />SPEECH_PARAMS_SHOUTED<br />SPEECH_PARAMS_SHOUTED_CLEAR<br />SPEECH_PARAMS_SHOUTED_CRITICAL<br /><br />Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL<br /><br />Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E04FEDD28D42462<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlayPedAmbientSpeechNative(int /* Ped */ ped, string speechName, string speechParam, int /* bug: Any */ p3)
{
Function.Call((Hash)0x8E04FEDD28D42462, ped, speechName, speechParam, p3);
}

/// <summary>
/// Plays ambient speech. See also _0x5C57B85D.<br /><br />See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.<br /><br />Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6941B4A3A8FBBB9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlayPedAmbientSpeechAndCloneNative(int /* Ped */ ped, string speechName, string speechParam, int /* bug: Any */ p3)
{
Function.Call((Hash)0xC6941B4A3A8FBBB9, ped, speechName, speechParam, p3);
}

/// <summary>
/// This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.<br /><br />EX (C#):<br />GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, &quot;GENERIC_INSULT_HIGH&quot;, &quot;s_m_y_sheriff_01_white_full_01&quot;, &quot;SPEECH_PARAMS_FORCE_SHOUTED&quot;, 0);<br /><br />The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.<br /><br />Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3523634255FC3318<br />
/// </para>
/// </remarks>
public static void PlayPedAmbientSpeechWithVoiceNative(int /* Ped */ ped, string speechName, string voiceName, string speechParam, bool p4)
{
Function.Call((Hash)0x3523634255FC3318, ped, speechName, voiceName, speechParam, p4);
}

/// <summary>
/// Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED640017ED337E45<br />
/// </para>
/// </remarks>
public static void PlayAmbientSpeechFromPositionNative(string speechName, string voiceName, float x, float y, float z, string speechParam)
{
Function.Call((Hash)0xED640017ED337E45, speechName, voiceName, x, y, z, speechParam);
}

/// <summary>
/// This native enables the audio flag &quot;TrevorRageIsOverridden&quot; and sets the voice effect to `voiceEffect`
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13AD665062541A7E<br />
/// </para>
/// </remarks>
public static void OverrideTrevorRage(string voiceEffect)
{
Function.Call((Hash)0x13AD665062541A7E, voiceEffect);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE78503B10C4314E0<br />
/// </para>
/// </remarks>
public static void ResetTrevorRage()
{
Function.Call((Hash)0xE78503B10C4314E0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA241BB04110F091<br />
/// </para>
/// </remarks>
public static void SetPlayerAngry(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEA241BB04110F091, ped, toggle);
}

/// <summary>
/// Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);<br /><br />Last 2 parameters always seem to be 0.<br /><br />EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);<br /><br />Known Pain IDs<br />________________________<br /><br />1 - Doesn&apos;t seem to do anything. Does NOT crash the game like previously said. (Latest patch)<br />6 - Scream (Short)<br />7 - Scared Scream (Kinda Long)<br />8 - On Fire<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC9AE166038A5CEC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlayPain(int /* Ped */ ped, int painID, int p1, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBC9AE166038A5CEC, ped, painID, p1, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE4AC0439F607045<br />
/// </para>
/// </remarks>
public static void ReleaseWeaponAudio()
{
Function.Call((Hash)0xCE4AC0439F607045);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD01005D2BA2EB778<br />
/// </para>
/// </remarks>
public static void ActivateAudioSlowmoMode(string p0)
{
Function.Call((Hash)0xD01005D2BA2EB778, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDC635D5B3262C56<br />
/// </para>
/// </remarks>
public static void DeactivateAudioSlowmoMode(string p0)
{
Function.Call((Hash)0xDDC635D5B3262C56, p0);
}

/// <summary>
/// Audio List<br />gtaforums.com/topic/795622-audio-for-mods/<br /><br />All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C8065A3B780185B<br />
/// </para>
/// </remarks>
public static void SetAmbientVoiceName(int /* Ped */ ped, string name)
{
Function.Call((Hash)0x6C8065A3B780185B, ped, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x9A53DED9921DE990<br />
/// </para>
/// </remarks>
public static void SetAmbientVoiceNameHash(int /* Ped */ ped, uint hash)
{
Function.Call((Hash)0x9A53DED9921DE990, ped, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x5E203DA2BA15D436<br />
/// </para>
/// </remarks>
public static uint GetAmbientVoiceNameHash(int /* Ped */ ped)
{
return Function.Call<uint>((Hash)0x5E203DA2BA15D436, ped);
}

/// <summary>
/// Assigns some ambient voice to the ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40CF0D12D142A9E8<br />
/// </para>
/// </remarks>
public static void SetPedVoiceFull(int /* Ped */ ped)
{
Function.Call((Hash)0x40CF0D12D142A9E8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x1B7ABE26CBCBF8C7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedRaceAndVoiceGroup(int /* Ped */ ped, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x1B7ABE26CBCBF8C7, ped, p1, p2);
}

/// <summary>
/// From the scripts:<br /><br />AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;PAIGE_PVG&quot;));<br />AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;TALINA_PVG&quot;));<br />AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;FEMALE_LOST_BLACK_PVG&quot;));<br />AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;FEMALE_LOST_WHITE_PVG&quot;));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CDC8C3B89F661B3<br />
/// </para>
/// </remarks>
public static void SetPedVoiceGroup(int /* Ped */ ped, uint voiceGroupHash)
{
Function.Call((Hash)0x7CDC8C3B89F661B3, ped, voiceGroupHash);
}

/// <summary>
/// Dat151RelType == 29
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x0BABC1345ABBFB16<br />
/// </para>
/// </remarks>
public static void SetPedVoiceGroupFromRaceToPvg(int /* Ped */ ped, uint voiceGroupHash)
{
Function.Call((Hash)0x0BABC1345ABBFB16, ped, voiceGroupHash);
}

/// <summary>
/// BOOL p1: 0 = Female; 1 = Male
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5342D390CDA41D6<br />
/// </para>
/// </remarks>
public static void SetPedGender(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0xA5342D390CDA41D6, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A73D05A607734C7<br />
/// </para>
/// </remarks>
public static void StopCurrentPlayingSpeech(int /* Ped */ ped)
{
Function.Call((Hash)0x7A73D05A607734C7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8BEC0CA6F0EDB0F<br />
/// </para>
/// </remarks>
public static void StopCurrentPlayingAmbientSpeech(int /* Ped */ ped)
{
Function.Call((Hash)0xB8BEC0CA6F0EDB0F, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9072C8B49907BFAD<br />
/// </para>
/// </remarks>
public static bool IsAmbientSpeechPlaying(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x9072C8B49907BFAD, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC9AA18DCC7084F4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsScriptedSpeechPlaying(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xCC9AA18DCC7084F4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x729072355FA39EC9<br />
/// </para>
/// </remarks>
public static bool IsAnySpeechPlaying(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x729072355FA39EC9, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x30CA2EF91D15ADF8<br />
/// </para>
/// </remarks>
public static bool IsAnyPositionalSpeechPlaying()
{
return Function.Call<bool>((Hash)0x30CA2EF91D15ADF8);
}

/// <summary>
/// Checks if the ped can play the speech or has the speech file, last parameter is usually false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49B99BF3FDA89A7A<br />
/// </para>
/// </remarks>
public static bool DoesContextExistForThisPed(int /* Ped */ ped, string speechName, bool unk)
{
return Function.Call<bool>((Hash)0x49B99BF3FDA89A7A, ped, speechName, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x049E937F18F4020C<br />
/// </para>
/// </remarks>
public static bool IsPedInCurrentConversation(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x049E937F18F4020C, ped);
}

/// <summary>
/// Sets the ped drunk sounds.  Only works with PLAYER_PED_ID<br /><br />====================================================<br /><br />As mentioned above, this only sets the drunk sound to ped/player.<br /><br />To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET<br /><br />Below is an example<br /><br />if (!Function.Call&lt;bool&gt;(Hash.HAS_ANIM_SET_LOADED, &quot;move_m@drunk@verydrunk&quot;))<br />                {<br />                    Function.Call(Hash.REQUEST_ANIM_SET, &quot;move_m@drunk@verydrunk&quot;);<br />                }<br />                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, &quot;move_m@drunk@verydrunk&quot;, 0x3E800000);<br /><br /><br /><br />And to stop the effect use<br />RESET_PED_MOVEMENT_CLIPSET
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95D2D383D5396B8A<br />
/// </para>
/// </remarks>
public static void SetPedIsDrunk(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x95D2D383D5396B8A, ped, toggle);
}

/// <summary>
/// Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.<br />This native is works only when you call it on the ped with right model (ac_chop only ?)<br />Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE066C7006C49C0A<br />
/// </para>
/// </remarks>
public static void PlayAnimalVocalization(int /* Ped */ pedHandle, int p1, string speechName)
{
Function.Call((Hash)0xEE066C7006C49C0A, pedHandle, p1, speechName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC265DF9FB44A9FBD<br />
/// </para>
/// </remarks>
public static bool IsAnimalVocalizationPlaying(int /* Ped */ pedHandle)
{
return Function.Call<bool>((Hash)0xC265DF9FB44A9FBD, pedHandle);
}

/// <summary>
/// mood can be 0 or 1 (it&apos;s not a boolean value!). Effects audio of the animal.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC97B29285B1DC3B<br />
/// </para>
/// </remarks>
public static void SetAnimalMood(int /* Ped */ animal, int mood)
{
Function.Call((Hash)0xCC97B29285B1DC3B, animal, mood);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB35CE999E8EF317E<br />
/// </para>
/// </remarks>
public static bool IsMobilePhoneRadioActive()
{
return Function.Call<bool>((Hash)0xB35CE999E8EF317E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF286C554784F3DF<br />
/// </para>
/// </remarks>
public static void SetMobilePhoneRadioState(bool state)
{
Function.Call((Hash)0xBF286C554784F3DF, state);
}

/// <summary>
/// Returns 255 (radio off index) if the function fails.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8AF77C4C06ADC93<br />
/// </para>
/// </remarks>
public static int GetPlayerRadioStationIndex()
{
return Function.Call<int>((Hash)0xE8AF77C4C06ADC93);
}

/// <summary>
/// Returns active radio station name
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6D733C32076AD03<br />
/// </para>
/// </remarks>
public static string GetPlayerRadioStationName()
{
return Function.Call<string>((Hash)0xF6D733C32076AD03);
}

/// <summary>
/// Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB28ECA15046CA8B9<br />
/// </para>
/// </remarks>
public static string GetRadioStationName(int radioStation)
{
return Function.Call<string>((Hash)0xB28ECA15046CA8B9, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA571991A7FE6CCEB<br />
/// </para>
/// </remarks>
public static int GetPlayerRadioStationGenre()
{
return Function.Call<int>((Hash)0xA571991A7FE6CCEB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA151A7394A214E65<br />
/// </para>
/// </remarks>
public static bool IsRadioRetuning()
{
return Function.Call<bool>((Hash)0xA151A7394A214E65);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0626A247D2405330<br />
/// </para>
/// </remarks>
public static bool IsRadioFadedOut()
{
return Function.Call<bool>((Hash)0x0626A247D2405330);
}

/// <summary>
/// Tune Forward...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF266D1D0EB1195D<br />
/// </para>
/// </remarks>
public static void SetRadioRetuneUp()
{
Function.Call((Hash)0xFF266D1D0EB1195D);
}

/// <summary>
/// Tune Backwards...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD6BCF9E94425DF9<br />
/// </para>
/// </remarks>
public static void SetRadioRetuneDown()
{
Function.Call((Hash)0xDD6BCF9E94425DF9);
}

/// <summary>
/// List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k<br />An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC69EDA28699D5107<br />
/// </para>
/// </remarks>
public static void SetRadioToStationName(string stationName)
{
Function.Call((Hash)0xC69EDA28699D5107, stationName);
}

/// <summary>
/// List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k<br />An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B9C0099CB942AC6<br />
/// </para>
/// </remarks>
public static void SetVehRadioStation(int /* Vehicle */ vehicle, string radioStation)
{
Function.Call((Hash)0x1B9C0099CB942AC6, vehicle, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x3E45765F3FBB582F<br />
/// </para>
/// </remarks>
public static void SetVehHasNormalRadio(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x3E45765F3FBB582F, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x0BE4BE946463F917<br />
/// </para>
/// </remarks>
public static bool IsVehicleRadioOn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x0BE4BE946463F917, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1805D05E6D4FE10<br />
/// </para>
/// </remarks>
public static void SetVehForcedRadioThisFrame(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xC1805D05E6D4FE10, vehicle);
}

/// <summary>
/// Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACF57305B12AF907<br />
/// </para>
/// </remarks>
public static void SetEmitterRadioStation(string emitterName, string radioStation)
{
Function.Call((Hash)0xACF57305B12AF907, emitterName, radioStation);
}

/// <summary>
/// Example:<br />AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)&quot;LOS_SANTOS_VANILLA_UNICORN_01_STAGE&quot;, false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)&quot;LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM&quot;, false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)&quot;LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM&quot;, false);<br /><br />This turns off surrounding sounds not connected directly to peds.<br /><br />Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x399D2D3B33F1B8EB<br />
/// </para>
/// </remarks>
public static void SetStaticEmitterEnabled(string emitterName, bool toggle)
{
Function.Call((Hash)0x399D2D3B33F1B8EB, emitterName, toggle);
}

/// <summary>
/// Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x651D3228960D08AF<br />
/// </para>
/// </remarks>
public static void LinkStaticEmitterToEntity(string emitterName, int /* Entity */ entity)
{
Function.Call((Hash)0x651D3228960D08AF, emitterName, entity);
}

/// <summary>
/// Sets radio station by index.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA619B168B8A8570F<br />
/// </para>
/// </remarks>
public static void SetRadioToStationIndex(int radioStation)
{
Function.Call((Hash)0xA619B168B8A8570F, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7F26C6E9CC9EBB8<br />
/// </para>
/// </remarks>
public static void SetFrontendRadioActive(bool active)
{
Function.Call((Hash)0xF7F26C6E9CC9EBB8, active);
}

/// <summary>
/// &quot;news&quot; that play on the radio after you&apos;ve done something in story mode(?)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB165AB7C248B2DC1<br />
/// </para>
/// </remarks>
public static void UnlockMissionNewsStory(int newsStory)
{
Function.Call((Hash)0xB165AB7C248B2DC1, newsStory);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66E49BF55B4B1874<br />
/// </para>
/// </remarks>
public static bool IsMissionNewsStoryUnlocked(int newsStory)
{
return Function.Call<bool>((Hash)0x66E49BF55B4B1874, newsStory);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50B196FC9ED6545B<br />
/// </para>
/// </remarks>
public static int GetAudibleMusicTrackTextId()
{
return Function.Call<int>((Hash)0x50B196FC9ED6545B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD536C4D33DCC900<br />
/// </para>
/// </remarks>
public static void PlayEndCreditsMusic(bool play)
{
Function.Call((Hash)0xCD536C4D33DCC900, play);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DDBBDD98E2E9C25<br />
/// </para>
/// </remarks>
public static void SkipRadioForward()
{
Function.Call((Hash)0x6DDBBDD98E2E9C25);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x344F393B027E38C3<br />
/// </para>
/// </remarks>
public static void FreezeRadioStation(string radioStation)
{
Function.Call((Hash)0x344F393B027E38C3, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC00454CF60B91DD<br />
/// </para>
/// </remarks>
public static void UnfreezeRadioStation(string radioStation)
{
Function.Call((Hash)0xFC00454CF60B91DD, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1AA9F53CE982990<br />
/// </para>
/// </remarks>
public static void SetRadioAutoUnfreeze(bool toggle)
{
Function.Call((Hash)0xC1AA9F53CE982990, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88795F13FACDA88D<br />
/// </para>
/// </remarks>
public static void SetInitialPlayerStation(string radioStation)
{
Function.Call((Hash)0x88795F13FACDA88D, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19F21E63AE6EAE4E<br />
/// </para>
/// </remarks>
public static void SetUserRadioControlEnabled(bool toggle)
{
Function.Call((Hash)0x19F21E63AE6EAE4E, toggle);
}

/// <summary>
/// Only found this one in the decompiled scripts:<br /><br />AUDIO::SET_RADIO_TRACK(&quot;RADIO_03_HIPHOP_NEW&quot;, &quot;ARM1_RADIO_STARTS&quot;);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB39786F201FEE30B<br />
/// </para>
/// </remarks>
public static void SetRadioTrack(string radioStation, string radioTrack)
{
Function.Call((Hash)0xB39786F201FEE30B, radioStation, radioTrack);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x2CB0075110BE1E56<br />
/// </para>
/// </remarks>
public static void SetRadioTrackWithStartOffset(string radioStationName, string mixName, int p2)
{
Function.Call((Hash)0x2CB0075110BE1E56, radioStationName, mixName, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x55ECF4D13D9903B0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetNextRadioTrack(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x55ECF4D13D9903B0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB6F1CAEC68B0BCE<br />
/// </para>
/// </remarks>
public static void SetVehicleRadioLoud(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xBB6F1CAEC68B0BCE, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x032A116663A4D5AC<br />
/// </para>
/// </remarks>
public static bool CanVehicleReceiveCbRadio(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x032A116663A4D5AC, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1098355A16064BB3<br />
/// </para>
/// </remarks>
public static void SetMobileRadioEnabledDuringGameplay(bool toggle)
{
Function.Call((Hash)0x1098355A16064BB3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x109697E2FFBAC8A1<br />
/// </para>
/// </remarks>
public static bool DoesPlayerVehHaveRadio()
{
return Function.Call<bool>((Hash)0x109697E2FFBAC8A1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F43D83FD6738741<br />
/// </para>
/// </remarks>
public static bool IsPlayerVehRadioEnable()
{
return Function.Call<bool>((Hash)0x5F43D83FD6738741);
}

/// <summary>
/// can&apos;t seem to enable radio on cop cars etc
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B988190C0AA6C0B<br />
/// </para>
/// </remarks>
public static void SetVehicleRadioEnabled(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x3B988190C0AA6C0B, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xDA07819E452FFE8F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPositionedPlayerVehicleRadioEmitterEnabled(int /* bug: Any */ p0)
{
Function.Call((Hash)0xDA07819E452FFE8F, p0);
}

/// <summary>
/// Examples:<br /><br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;END_CREDITS_KILL_MICHAEL&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;END_CREDITS_KILL_MICHAEL&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;END_CREDITS_KILL_TREVOR&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;END_CREDITS_SAVE_MICHAEL_TREVOR&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;OFF_ROAD_RADIO_ROCK_LIST&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_06_COUNTRY&quot;, &quot;MAGDEMO2_RADIO_DINGHY&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_16_SILVERLAKE&quot;, &quot;SEA_RACE_RADIO_PLAYLIST&quot;, 1);<br />AUDIO::SET_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;, &quot;OFF_ROAD_RADIO_ROCK_LIST&quot;, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E404A9361F75BB2<br />
/// </para>
/// </remarks>
public static void SetCustomRadioTrackList(string radioStation, string trackListName, bool p2)
{
Function.Call((Hash)0x4E404A9361F75BB2, radioStation, trackListName, p2);
}

/// <summary>
/// 3 calls in the b617d scripts, removed duplicate.<br /><br />AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_16_SILVERLAKE&quot;);<br />AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST(&quot;RADIO_01_CLASS_ROCK&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1654F24A88A8E3FE<br />
/// </para>
/// </remarks>
public static void ClearCustomRadioTrackList(string radioStation)
{
Function.Call((Hash)0x1654F24A88A8E3FE, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1620ECB50E01DE7<br />
/// </para>
/// </remarks>
public static int GetNumUnlockedRadioStations()
{
return Function.Call<int>((Hash)0xF1620ECB50E01DE7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D67489793FF428B<br />
/// </para>
/// </remarks>
public static int FindRadioStationIndex(uint stationNameHash)
{
return Function.Call<int>((Hash)0x8D67489793FF428B, stationNameHash);
}

/// <summary>
/// 6 calls in the b617d scripts, removed identical lines:<br /><br />AUDIO::SET_RADIO_STATION_MUSIC_ONLY(&quot;RADIO_01_CLASS_ROCK&quot;, 1);<br />AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);<br />AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x774BD811F656A122<br />
/// </para>
/// </remarks>
public static void SetRadioStationMusicOnly(string radioStation, bool toggle)
{
Function.Call((Hash)0x774BD811F656A122, radioStation, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C96CDB04FCA358E<br />
/// </para>
/// </remarks>
public static void SetRadioFrontendFadeTime(float fadeTime)
{
Function.Call((Hash)0x2C96CDB04FCA358E, fadeTime);
}

/// <summary>
/// AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST(&quot;RADIO_16_SILVERLAKE&quot;, &quot;MIRRORPARK_LOCKED&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x031ACB6ABA18C729<br />
/// </para>
/// </remarks>
public static void UnlockRadioStationTrackList(string radioStation, string trackListName)
{
Function.Call((Hash)0x031ACB6ABA18C729, radioStation, trackListName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xFF5E5EA2DCEEACF3<br />
/// </para>
/// </remarks>
public static void LockRadioStationTrackList(string radioStation, string trackListName)
{
Function.Call((Hash)0xFF5E5EA2DCEEACF3, radioStation, trackListName);
}

/// <summary>
/// Just a nullsub (i.e. does absolutely nothing) since build 1604.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x47AED84213A47510<br />
/// </para>
/// </remarks>
public static void UpdateUnlockableDjRadioTracks(bool enableMixes)
{
Function.Call((Hash)0x47AED84213A47510, enableMixes);
}

/// <summary>
/// Disables the radio station (hides it from the radio wheel).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x477D9DB48F889591<br />
/// </para>
/// </remarks>
public static void LockRadioStation(string radioStationName, bool toggle)
{
Function.Call((Hash)0x477D9DB48F889591, radioStationName, toggle);
}

/// <summary>
/// Doesn&apos;t have an effect in Story Mode.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x4CAFEBFA21EC188D<br />
/// </para>
/// </remarks>
public static void SetRadioStationAsFavourite(string radioStation, bool toggle)
{
Function.Call((Hash)0x4CAFEBFA21EC188D, radioStation, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x2B1784DB08AFEA79<br />
/// </para>
/// </remarks>
public static bool IsRadioStationFavourited(string radioStation)
{
return Function.Call<bool>((Hash)0x2B1784DB08AFEA79, radioStation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xC64A06D939F826F5<br />
/// </para>
/// </remarks>
public static bool GetNextAudibleBeat(ref float p0, ref float p1, ref int p2)
{
var nativeAssistPointerVar0 = p0;
var nativeAssistPointerVar1 = p1;
var nativeAssistPointerVar2 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC64A06D939F826F5, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
p0 = nativeAssistPointerVar0;
p1 = nativeAssistPointerVar1;
p2 = nativeAssistPointerVar2;
return retVal;
}

/// <summary>
/// Changes start time of a tracklist (milliseconds)<br />R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x4E0AF9114608257C<br />
/// </para>
/// </remarks>
public static void ForceMusicTrackList(string radioStation, string trackListName, int milliseconds)
{
Function.Call((Hash)0x4E0AF9114608257C, radioStation, trackListName, milliseconds);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x3E65CDE5215832C1<br />
/// </para>
/// </remarks>
public static int GetCurrentTrackPlayTime(string radioStationName)
{
return Function.Call<int>((Hash)0x3E65CDE5215832C1, radioStationName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x34D66BC058019CE0<br />
/// </para>
/// </remarks>
public static uint GetCurrentTrackSoundName(string radioStationName)
{
return Function.Call<uint>((Hash)0x34D66BC058019CE0, radioStationName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3365489E0DD50F9<br />
/// </para>
/// </remarks>
public static void SetVehicleMissileWarningEnabled(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xF3365489E0DD50F9, vehicle, toggle);
}

/// <summary>
/// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDA07E5950085E46<br />
/// </para>
/// </remarks>
public static void SetAmbientZoneState(string zoneName, bool p1, bool p2)
{
Function.Call((Hash)0xBDA07E5950085E46, zoneName, p1, p2);
}

/// <summary>
/// This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);<br /><br />Still needs more research.<br /><br />Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x218DD44AAAC964FF<br />
/// </para>
/// </remarks>
public static void ClearAmbientZoneState(string zoneName, bool p1)
{
Function.Call((Hash)0x218DD44AAAC964FF, zoneName, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9748FA4DE50CCE3E<br />
/// </para>
/// </remarks>
public static void SetAmbientZoneListState(int /* bug: structure */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x9748FA4DE50CCE3E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x120C48C614909FA4<br />
/// </para>
/// </remarks>
public static void ClearAmbientZoneListState(int /* bug: structure */ p0, bool p1)
{
Function.Call((Hash)0x120C48C614909FA4, p0, p1);
}

/// <summary>
/// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D6650420CEC9D3B<br />
/// </para>
/// </remarks>
public static void SetAmbientZoneStatePersistent(string ambientZone, bool p1, bool p2)
{
Function.Call((Hash)0x1D6650420CEC9D3B, ambientZone, p1, p2);
}

/// <summary>
/// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3638DAE8C4045E1<br />
/// </para>
/// </remarks>
public static void SetAmbientZoneListStatePersistent(string ambientZone, bool p1, bool p2)
{
Function.Call((Hash)0xF3638DAE8C4045E1, ambientZone, p1, p2);
}

/// <summary>
/// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01E2817A479A7F9B<br />
/// </para>
/// </remarks>
public static bool IsAmbientZoneEnabled(string ambientZone)
{
return Function.Call<bool>((Hash)0x01E2817A479A7F9B, ambientZone);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x5D2BFAAB8D956E0E<br />
/// </para>
/// </remarks>
public static void RefreshClosestOceanShoreline()
{
Function.Call((Hash)0x5D2BFAAB8D956E0E);
}

/// <summary>
/// All occurrences found in b617d, sorted alphabetically and identical lines removed: <br /><br />AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(&quot;_AK&quot;);<br />AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(&quot;_CUSTOM&quot;);<br />AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(&quot;_TOOTHLESS&quot;);<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B4BF5F0859204D9<br />
/// </para>
/// </remarks>
public static void SetCutsceneAudioOverride(string name)
{
Function.Call((Hash)0x3B4BF5F0859204D9, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCC29F935ED07688<br />
/// </para>
/// </remarks>
public static void SetVariableOnSynchSceneAudio(string variableName, float value)
{
Function.Call((Hash)0xBCC29F935ED07688, variableName, value);
}

/// <summary>
/// Plays the given police radio message.<br /><br />All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr<br />Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFEBD56D9BD1EB16<br />
/// </para>
/// </remarks>
public static int PlayPoliceReport(string name, float p1)
{
return Function.Call<int>((Hash)0xDFEBD56D9BD1EB16, name, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4F90FAF7670B16F<br />
/// </para>
/// </remarks>
public static void CancelAllPoliceReports()
{
Function.Call((Hash)0xB4F90FAF7670B16F);
}

/// <summary>
/// Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.<br />Only works on vehicles with a police siren.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B9025BDA76822B6<br />
/// </para>
/// </remarks>
public static void BlipSiren(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x1B9025BDA76822B6, vehicle);
}

/// <summary>
/// Overrides the vehicle&apos;s horn hash.<br />When changing this hash on a vehicle, it will not return the &apos;overwritten&apos; hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)<br /><br />vehicle - the vehicle whose horn should be overwritten<br />mute - p1 seems to be an option for muting the horn<br />p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3CDC1E622CCE0356<br />
/// </para>
/// </remarks>
public static void OverrideVehHorn(int /* Vehicle */ vehicle, bool @override, int hornHash)
{
Function.Call((Hash)0x3CDC1E622CCE0356, vehicle, @override, hornHash);
}

/// <summary>
/// Checks whether the horn of a vehicle is currently played.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D6BFC12B05C6121<br />
/// </para>
/// </remarks>
public static bool IsHornActive(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x9D6BFC12B05C6121, vehicle);
}

/// <summary>
/// Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x395BF71085D1B1D9<br />
/// </para>
/// </remarks>
public static void SetAggressiveHorns(bool toggle)
{
Function.Call((Hash)0x395BF71085D1B1D9, toggle);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02E93C796ABD3A97<br />
/// </para>
/// </remarks>
public static void SetRadioPositionAudioMute(bool p0)
{
Function.Call((Hash)0x02E93C796ABD3A97, p0);
}

/// <summary>
/// SET_VEHICLE_CONVERSATIONS_PERSIST?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58BB377BEC7CD5F4<br />
/// </para>
/// </remarks>
public static void SetVehicleConversationsPersist(bool p0, bool p1)
{
Function.Call((Hash)0x58BB377BEC7CD5F4, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x9BD7BD55E4533183<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleConversationsPersistNew(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x9BD7BD55E4533183, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD11FA52EB849D978<br />
/// </para>
/// </remarks>
public static bool IsStreamPlaying()
{
return Function.Call<bool>((Hash)0xD11FA52EB849D978);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E72BBDBCA58A3DB<br />
/// </para>
/// </remarks>
public static int GetStreamPlayTime()
{
return Function.Call<int>((Hash)0x4E72BBDBCA58A3DB);
}

/// <summary>
/// Example:<br />AUDIO::LOAD_STREAM(&quot;CAR_STEAL_1_PASSBY&quot;, &quot;CAR_STEAL_1_SOUNDSET&quot;);<br /><br />All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w<br /><br />Stream names often ends with &quot;_MASTER&quot;, &quot;_SMALL&quot; or &quot;_STREAM&quot;. Also &quot;_IN&quot;, &quot;_OUT&quot; and numbers.   <br /><br />soundSet is often set to 0 in the scripts. These are common to end the soundSets: &quot;_SOUNDS&quot;, &quot;_SOUNDSET&quot; and numbers.<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F1F957154EC51DF<br />
/// </para>
/// </remarks>
public static bool LoadStream(string streamName, string soundSet)
{
return Function.Call<bool>((Hash)0x1F1F957154EC51DF, streamName, soundSet);
}

/// <summary>
/// Example:<br />AUDIO::LOAD_STREAM_WITH_START_OFFSET(&quot;STASH_TOXIN_STREAM&quot;, 2400, &quot;FBI_05_SOUNDS&quot;);<br /><br />Only called a few times in the scripts.<br /><br />Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59C16B79F53B3712<br />
/// </para>
/// </remarks>
public static bool LoadStreamWithStartOffset(string streamName, int startOffset, string soundSet)
{
return Function.Call<bool>((Hash)0x59C16B79F53B3712, streamName, startOffset, soundSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89049DD63C08B5D1<br />
/// </para>
/// </remarks>
public static void PlayStreamFromPed(int /* Ped */ ped)
{
Function.Call((Hash)0x89049DD63C08B5D1, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB70374A758007DFA<br />
/// </para>
/// </remarks>
public static void PlayStreamFromVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xB70374A758007DFA, vehicle);
}

/// <summary>
/// Used with AUDIO::LOAD_STREAM<br /><br />Example from finale_heist2b.c4:<br />TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, &quot;push_out_vault_l&quot;, 4.0, -1.5, 5, 713, 4.0, 0);<br />                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);<br />                    PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2/*14*/], 0, 0);<br />                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);<br />                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);<br />                    if (AUDIO::LOAD_STREAM(&quot;Gold_Cart_Push_Anim_01&quot;, &quot;BIG_SCORE_3B_SOUNDS&quot;)) {<br />                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);<br />                    }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBAA9B64D76356FD<br />
/// </para>
/// </remarks>
public static void PlayStreamFromObject(int /* Object */ @object)
{
Function.Call((Hash)0xEBAA9B64D76356FD, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58FCE43488F9F5F4<br />
/// </para>
/// </remarks>
public static void PlayStreamFrontend()
{
Function.Call((Hash)0x58FCE43488F9F5F4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21442F412E8DE56B<br />
/// </para>
/// </remarks>
public static void PlayStreamFromPosition(float x, float y, float z)
{
Function.Call((Hash)0x21442F412E8DE56B, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4718A1419D18151<br />
/// </para>
/// </remarks>
public static void StopStream()
{
Function.Call((Hash)0xA4718A1419D18151);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D64D7405520E3D3<br />
/// </para>
/// </remarks>
public static void StopPedSpeaking(int /* Ped */ ped, bool shaking)
{
Function.Call((Hash)0x9D64D7405520E3D3, ped, shaking);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xF8AD2EED7C47E8FE<br />
/// </para>
/// </remarks>
public static void BlockAllSpeechFromPed(int /* Ped */ ped, bool p1, bool p2)
{
Function.Call((Hash)0xF8AD2EED7C47E8FE, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xAB6781A5F3101470<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StopPedSpeakingSynced(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xAB6781A5F3101470, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9A41C1E940FB0E8<br />
/// </para>
/// </remarks>
public static void DisablePedPainAudio(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xA9A41C1E940FB0E8, ped, toggle);
}

/// <summary>
/// Common in the scripts:<br />AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x932C2D096A2C3FFF<br />
/// </para>
/// </remarks>
public static bool IsAmbientSpeechDisabled(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x932C2D096A2C3FFF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xA8A7D434AFB4B97B<br />
/// </para>
/// </remarks>
public static void BlockSpeechContextGroup(string p0, int p1)
{
Function.Call((Hash)0xA8A7D434AFB4B97B, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x2ACABED337622DF2<br />
/// </para>
/// </remarks>
public static void UnblockSpeechContextGroup(string p0)
{
Function.Call((Hash)0x2ACABED337622DF2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1FEF0683B96EBCF2<br />
/// </para>
/// </remarks>
public static void SetSirenWithNoDriver(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1FEF0683B96EBCF2, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xF584CF8529B51434<br />
/// </para>
/// </remarks>
public static void SetSirenBypassMpDriverCheck(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xF584CF8529B51434, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x66C3FB05206041BA<br />
/// </para>
/// </remarks>
public static void TriggerSirenAudio(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x66C3FB05206041BA, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C11908013EA4715<br />
/// </para>
/// </remarks>
public static void SetHornPermanentlyOn(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x9C11908013EA4715, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76D683C108594D0E<br />
/// </para>
/// </remarks>
public static void SetHornEnabled(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x76D683C108594D0E, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5564483E407F914<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAudioVehiclePriority(int /* Vehicle */ vehicle, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE5564483E407F914, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D3AF56E94C9AE98<br />
/// </para>
/// </remarks>
public static void SetHornPermanentlyOnTime(int /* Vehicle */ vehicle, float time)
{
Function.Call((Hash)0x9D3AF56E94C9AE98, vehicle, time);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA932DE350266EF8<br />
/// </para>
/// </remarks>
public static void UseSirenAsHorn(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xFA932DE350266EF8, vehicle, toggle);
}

/// <summary>
/// This native sets the audio of the specified vehicle to the audioName (p1).<br /><br />Use the audioNameHash found in vehicles.meta<br /><br />Example:<br />_SET_VEHICLE_AUDIO(veh, &quot;ADDER&quot;);<br />The selected vehicle will now have the audio of the Adder.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F0C413926060B38<br />
/// </para>
/// </remarks>
public static void ForceUseAudioGameObject(int /* Vehicle */ vehicle, string audioName)
{
Function.Call((Hash)0x4F0C413926060B38, vehicle, audioName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xCA4CEA6AE0000A7E<br />
/// </para>
/// </remarks>
public static void PreloadVehicleAudioBank(uint vehicleModel)
{
Function.Call((Hash)0xCA4CEA6AE0000A7E, vehicleModel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1F8157B8C3F171C<br />
/// </para>
/// </remarks>
public static void SetVehicleStartupRevSound(int /* Vehicle */ vehicle, string p1, string p2)
{
Function.Call((Hash)0xF1F8157B8C3F171C, vehicle, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2DCCD8E16E20997<br />
/// </para>
/// </remarks>
public static void ResetVehicleStartupRevSound(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xD2DCCD8E16E20997, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x97FFB4ADEED08066<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleForceReverseWarning(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x97FFB4ADEED08066, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DB8010EE71FDEF2<br />
/// </para>
/// </remarks>
public static bool IsVehicleAudiblyDamaged(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x5DB8010EE71FDEF2, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59E7B488451F4D3A<br />
/// </para>
/// </remarks>
public static void SetVehicleAudioEngineDamageFactor(int /* Vehicle */ vehicle, float damageFactor)
{
Function.Call((Hash)0x59E7B488451F4D3A, vehicle, damageFactor);
}

/// <summary>
/// intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)<br />Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01BB4D577D38BD9E<br />
/// </para>
/// </remarks>
public static void SetVehicleAudioBodyDamageFactor(int /* Vehicle */ vehicle, float intensity)
{
Function.Call((Hash)0x01BB4D577D38BD9E, vehicle, intensity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C073274E065C6D2<br />
/// </para>
/// </remarks>
public static void EnableVehicleFanbeltDamage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1C073274E065C6D2, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BE4BC731D039D5A<br />
/// </para>
/// </remarks>
public static void EnableVehicleExhaustPops(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x2BE4BC731D039D5A, vehicle, toggle);
}

/// <summary>
/// SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);<br />SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); <br /><br />Will give a boost-soundeffect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A04DE7CAB2739A1<br />
/// </para>
/// </remarks>
public static void SetVehicleBoostActive(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x4A04DE7CAB2739A1, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FDDAD856E36988A<br />
/// </para>
/// </remarks>
public static void SetPlayerVehicleAlarmAudioActive(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x6FDDAD856E36988A, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06C0023BED16DD6B<br />
/// </para>
/// </remarks>
public static void SetScriptUpdateDoorAudio(uint doorHash, bool toggle)
{
Function.Call((Hash)0x06C0023BED16DD6B, doorHash, toggle);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A539D52857EA82D<br />
/// </para>
/// </remarks>
public static void PlayVehicleDoorOpenSound(int /* Vehicle */ vehicle, int doorId)
{
Function.Call((Hash)0x3A539D52857EA82D, vehicle, doorId);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62A456AA4769EF34<br />
/// </para>
/// </remarks>
public static void PlayVehicleDoorCloseSound(int /* Vehicle */ vehicle, int doorId)
{
Function.Call((Hash)0x62A456AA4769EF34, vehicle, doorId);
}

/// <summary>
/// Works for planes only.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC15907D667F7CFB2<br />
/// </para>
/// </remarks>
public static void EnableStallWarningSounds(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xC15907D667F7CFB2, vehicle, toggle);
}

/// <summary>
/// Hardcoded to return 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D28DC1671E334FD<br />
/// </para>
/// </remarks>
public static bool IsGameInControlOfMusic()
{
return Function.Call<bool>((Hash)0x6D28DC1671E334FD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BD3F52BA9B1E4E8<br />
/// </para>
/// </remarks>
public static void SetGpsActive(bool active)
{
Function.Call((Hash)0x3BD3F52BA9B1E4E8, active);
}

/// <summary>
/// Called 38 times in the scripts. There are 5 different audioNames used.<br /> One unknown removed below.<br /><br />AUDIO::PLAY_MISSION_COMPLETE_AUDIO(&quot;DEAD&quot;);<br />AUDIO::PLAY_MISSION_COMPLETE_AUDIO(&quot;FRANKLIN_BIG_01&quot;);<br />AUDIO::PLAY_MISSION_COMPLETE_AUDIO(&quot;GENERIC_FAILED&quot;);<br />AUDIO::PLAY_MISSION_COMPLETE_AUDIO(&quot;TREVOR_SMALL_01&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB138AAB8A70D3C69<br />
/// </para>
/// </remarks>
public static void PlayMissionCompleteAudio(string audioName)
{
Function.Call((Hash)0xB138AAB8A70D3C69, audioName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19A30C23F5827F8A<br />
/// </para>
/// </remarks>
public static bool IsMissionCompletePlaying()
{
return Function.Call<bool>((Hash)0x19A30C23F5827F8A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F259F82D873B8B8<br />
/// </para>
/// </remarks>
public static bool IsMissionCompleteReadyForUi()
{
return Function.Call<bool>((Hash)0x6F259F82D873B8B8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF154B8D1775B2DEC<br />
/// </para>
/// </remarks>
public static void BlockDeathJingle(bool toggle)
{
Function.Call((Hash)0xF154B8D1775B2DEC, toggle);
}

/// <summary>
/// Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.<br /><br />List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC<br />Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x013A80FC08F6E4F2<br />
/// </para>
/// </remarks>
public static bool StartAudioScene(string scene)
{
return Function.Call<bool>((Hash)0x013A80FC08F6E4F2, scene);
}

/// <summary>
/// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFE8422B3B94E688<br />
/// </para>
/// </remarks>
public static void StopAudioScene(string scene)
{
Function.Call((Hash)0xDFE8422B3B94E688, scene);
}

/// <summary>
/// ??
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAC7FC81A75EC1A1<br />
/// </para>
/// </remarks>
public static void StopAudioScenes()
{
Function.Call((Hash)0xBAC7FC81A75EC1A1);
}

/// <summary>
/// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB65B60556E2A9225<br />
/// </para>
/// </remarks>
public static bool IsAudioSceneActive(string scene)
{
return Function.Call<bool>((Hash)0xB65B60556E2A9225, scene);
}

/// <summary>
/// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF21A9EF089A2668<br />
/// </para>
/// </remarks>
public static void SetAudioSceneVariable(string scene, string variable, float value)
{
Function.Call((Hash)0xEF21A9EF089A2668, scene, variable, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5F377B175A699C5<br />
/// </para>
/// </remarks>
public static void SetAudioScriptCleanupTime(int time)
{
Function.Call((Hash)0xA5F377B175A699C5, time);
}

/// <summary>
/// All found occurrences in b678d:<br />https://pastebin.com/ceu67jz8
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x153973AB99FE8980<br />
/// </para>
/// </remarks>
public static void AddEntityToAudioMixGroup(int /* Entity */ entity, string groupName, float p2)
{
Function.Call((Hash)0x153973AB99FE8980, entity, groupName, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18EB48CFC41F2EA0<br />
/// </para>
/// </remarks>
public static void RemoveEntityFromAudioMixGroup(int /* Entity */ entity, float p1)
{
Function.Call((Hash)0x18EB48CFC41F2EA0, entity, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x845FFC3A4FEEFA3E<br />
/// </para>
/// </remarks>
public static bool AudioIsMusicPlaying()
{
return Function.Call<bool>((Hash)0x845FFC3A4FEEFA3E);
}

/// <summary>
/// This is an alias of AUDIO_IS_MUSIC_PLAYING.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x2DD39BF3E2F9C47F<br />
/// </para>
/// </remarks>
public static bool AudioIsScriptedMusicPlaying()
{
return Function.Call<bool>((Hash)0x2DD39BF3E2F9C47F);
}

/// <summary>
/// All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P<br />Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E5185B72EF5158A<br />
/// </para>
/// </remarks>
public static bool PrepareMusicEvent(string eventName)
{
return Function.Call<bool>((Hash)0x1E5185B72EF5158A, eventName);
}

/// <summary>
/// All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P<br />Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B17A90291133DA5<br />
/// </para>
/// </remarks>
public static bool CancelMusicEvent(string eventName)
{
return Function.Call<bool>((Hash)0x5B17A90291133DA5, eventName);
}

/// <summary>
/// List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W<br /><br />All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P<br />Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x706D57B0F50DA710<br />
/// </para>
/// </remarks>
public static bool TriggerMusicEvent(string eventName)
{
return Function.Call<bool>((Hash)0x706D57B0F50DA710, eventName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA097AB275061FB21<br />
/// </para>
/// </remarks>
public static bool IsMusicOneshotPlaying()
{
return Function.Call<bool>((Hash)0xA097AB275061FB21);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7A0D23DC414507B<br />
/// </para>
/// </remarks>
public static int GetMusicPlaytime()
{
return Function.Call<int>((Hash)0xE7A0D23DC414507B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x159B7318403A1CD8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetGlobalRadioSignalLevel(int /* bug: Any */ p0)
{
Function.Call((Hash)0x159B7318403A1CD8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBE20329593DEC9D<br />
/// </para>
/// </remarks>
public static void RecordBrokenGlass(float x, float y, float z, float radius)
{
Function.Call((Hash)0xFBE20329593DEC9D, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB32209EFFDC04913<br />
/// </para>
/// </remarks>
public static void ClearAllBrokenGlass()
{
Function.Call((Hash)0xB32209EFFDC04913);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70B8EC8FC108A634<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ScriptOverridesWindElevation(bool p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x70B8EC8FC108A634, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x149AEE66F0CB3A99<br />
/// </para>
/// </remarks>
public static void SetPedWallaDensity(float p0, float p1)
{
Function.Call((Hash)0x149AEE66F0CB3A99, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BF907833BE275DE<br />
/// </para>
/// </remarks>
public static void SetPedInteriorWallaDensity(float p0, float p1)
{
Function.Call((Hash)0x8BF907833BE275DE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x062D5EAD4DA2FA6A<br />
/// </para>
/// </remarks>
public static void ForcePedPanicWalla()
{
Function.Call((Hash)0x062D5EAD4DA2FA6A);
}

/// <summary>
/// Example:<br /><br />bool prepareAlarm = AUDIO::PREPARE_ALARM(&quot;PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS&quot;);<br />Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D74AE343DB65533<br />
/// </para>
/// </remarks>
public static bool PrepareAlarm(string alarmName)
{
return Function.Call<bool>((Hash)0x9D74AE343DB65533, alarmName);
}

/// <summary>
/// Example:<br /><br />This will start the alarm at Fort Zancudo.<br /><br />AUDIO::START_ALARM(&quot;PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS&quot;, 1);<br /><br />First parameter (char) is the name of the alarm.<br />Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.<br /><br />----------<br /><br />It DOES make a difference but it has to do with the duration or something I dunno yet<br /><br />----------<br /><br /> Found in the b617d scripts:<br /><br /> AUDIO::START_ALARM(&quot;AGENCY_HEIST_FIB_TOWER_ALARMS&quot;, 0);<br /> AUDIO::START_ALARM(&quot;AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER&quot;, 1);<br /> AUDIO::START_ALARM(&quot;AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B&quot;, 0);<br /> AUDIO::START_ALARM(&quot;BIG_SCORE_HEIST_VAULT_ALARMS&quot;, a_0);<br /> AUDIO::START_ALARM(&quot;FBI_01_MORGUE_ALARMS&quot;, 1);<br /> AUDIO::START_ALARM(&quot;FIB_05_BIOTECH_LAB_ALARMS&quot;, 0);<br /> AUDIO::START_ALARM(&quot;JEWEL_STORE_HEIST_ALARMS&quot;, 0);<br /> AUDIO::START_ALARM(&quot;PALETO_BAY_SCORE_ALARM&quot;, 1);<br /> AUDIO::START_ALARM(&quot;PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM&quot;, 0);<br /> AUDIO::START_ALARM(&quot;PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS&quot;, 1);<br /> AUDIO::START_ALARM(&quot;PORT_OF_LS_HEIST_SHIP_ALARMS&quot;, 0);<br /> AUDIO::START_ALARM(&quot;PRISON_ALARMS&quot;, 0);<br /> AUDIO::START_ALARM(&quot;PROLOGUE_VAULT_ALARMS&quot;, 0);<br />Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0355EF116C4C97B2<br />
/// </para>
/// </remarks>
public static void StartAlarm(string alarmName, bool p2)
{
Function.Call((Hash)0x0355EF116C4C97B2, alarmName, p2);
}

/// <summary>
/// Example:<br /><br />This will stop the alarm at Fort Zancudo.<br /><br />AUDIO::STOP_ALARM(&quot;PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS&quot;, 1);<br /><br />First parameter (char) is the name of the alarm.<br />Second parameter (bool) has to be true (1) to have any effect.<br />Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1CADDCD98415A41<br />
/// </para>
/// </remarks>
public static void StopAlarm(string alarmName, bool toggle)
{
Function.Call((Hash)0xA1CADDCD98415A41, alarmName, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F794A877ADD4C92<br />
/// </para>
/// </remarks>
public static void StopAllAlarms(bool stop)
{
Function.Call((Hash)0x2F794A877ADD4C92, stop);
}

/// <summary>
/// Example:<br /><br />bool playing = AUDIO::IS_ALARM_PLAYING(&quot;PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS&quot;);<br />Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x226435CB96CCFC8C<br />
/// </para>
/// </remarks>
public static bool IsAlarmPlaying(string alarmName)
{
return Function.Call<bool>((Hash)0x226435CB96CCFC8C, alarmName);
}

/// <summary>
/// Returns hash of default vehicle horn<br /><br />Hash is stored in audVehicleAudioEntity
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02165D55000219AC<br />
/// </para>
/// </remarks>
public static uint GetVehicleDefaultHorn(int /* Vehicle */ vehicle)
{
return Function.Call<uint>((Hash)0x02165D55000219AC, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACB5DCCA1EC76840<br />
/// </para>
/// </remarks>
public static uint GetVehicleDefaultHornIgnoreMods(int /* Vehicle */ vehicle)
{
return Function.Call<uint>((Hash)0xACB5DCCA1EC76840, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF54BB7B61036F335<br />
/// </para>
/// </remarks>
public static void ResetPedAudioFlags(int /* Ped */ ped)
{
Function.Call((Hash)0xF54BB7B61036F335, ped);
}

/// <summary>
/// Enables/disables ped&apos;s &quot;loud&quot; footstep sound.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x0653B735BFBDFE87<br />
/// </para>
/// </remarks>
public static void SetPedFootstepsEventsEnabled(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x0653B735BFBDFE87, ped, toggle);
}

/// <summary>
/// Enables/disables ped&apos;s &quot;quiet&quot; footstep sound.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x29DA3CA8D8B2692D<br />
/// </para>
/// </remarks>
public static void SetPedClothEventsEnabled(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x29DA3CA8D8B2692D, ped, toggle);
}

/// <summary>
/// Sets audio flag &quot;OverridePlayerGroundMaterial&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2CC78CD3D0B50F9<br />
/// </para>
/// </remarks>
public static void OverridePlayerGroundMaterial(uint hash, bool toggle)
{
Function.Call((Hash)0xD2CC78CD3D0B50F9, hash, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF4DC1784BE94DFA<br />
/// </para>
/// </remarks>
public static void UseFootstepScriptSweeteners(int /* Ped */ ped, bool p1, uint hash)
{
Function.Call((Hash)0xBF4DC1784BE94DFA, ped, p1, hash);
}

/// <summary>
/// Sets audio flag &quot;OverrideMicrophoneSettings&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75773E11BA459E90<br />
/// </para>
/// </remarks>
public static void OverrideMicrophoneSettings(uint hash, bool toggle)
{
Function.Call((Hash)0x75773E11BA459E90, hash, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD57AAAE0E2214D11<br />
/// </para>
/// </remarks>
public static void FreezeMicrophone()
{
Function.Call((Hash)0xD57AAAE0E2214D11);
}

/// <summary>
/// If value is set to true, and ambient siren sound will be played.<br />Appears to enable/disable an audio flag.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x552369F549563AD5<br />
/// </para>
/// </remarks>
public static void DistantCopCarSirens(bool value)
{
Function.Call((Hash)0x552369F549563AD5, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43FA0DFC5DF87815<br />
/// </para>
/// </remarks>
public static void SetSirenCanBeControlledByAudio(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x43FA0DFC5DF87815, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xB81CF134AEB56FFB<br />
/// </para>
/// </remarks>
public static void EnableStuntJumpAudio()
{
Function.Call((Hash)0xB81CF134AEB56FFB);
}

/// <summary>
/// Possible flag names:<br />&quot;ActivateSwitchWheelAudio&quot;<br />&quot;AllowAmbientSpeechInSlowMo&quot;<br />&quot;AllowCutsceneOverScreenFade&quot;<br />&quot;AllowForceRadioAfterRetune&quot;<br />&quot;AllowPainAndAmbientSpeechToPlayDuringCutscene&quot;<br />&quot;AllowPlayerAIOnMission&quot;<br />&quot;AllowPoliceScannerWhenPlayerHasNoControl&quot;<br />&quot;AllowRadioDuringSwitch&quot;<br />&quot;AllowRadioOverScreenFade&quot;<br />&quot;AllowScoreAndRadio&quot;<br />&quot;AllowScriptedSpeechInSlowMo&quot;<br />&quot;AvoidMissionCompleteDelay&quot;<br />&quot;DisableAbortConversationForDeathAndInjury&quot;<br />&quot;DisableAbortConversationForRagdoll&quot;<br />&quot;DisableBarks&quot;<br />&quot;DisableFlightMusic&quot;<br />&quot;DisableReplayScriptStreamRecording&quot;<br />&quot;EnableHeadsetBeep&quot;<br />&quot;ForceConversationInterrupt&quot;<br />&quot;ForceSeamlessRadioSwitch&quot;<br />&quot;ForceSniperAudio&quot;<br />&quot;FrontendRadioDisabled&quot;<br />&quot;HoldMissionCompleteWhenPrepared&quot;<br />&quot;IsDirectorModeActive&quot;<br />&quot;IsPlayerOnMissionForSpeech&quot;<br />&quot;ListenerReverbDisabled&quot;<br />&quot;LoadMPData&quot;<br />&quot;MobileRadioInGame&quot;<br />&quot;OnlyAllowScriptTriggerPoliceScanner&quot;<br />&quot;PlayMenuMusic&quot;<br />&quot;PoliceScannerDisabled&quot;<br />&quot;ScriptedConvListenerMaySpeak&quot;<br />&quot;SpeechDucksScore&quot;<br />&quot;SuppressPlayerScubaBreathing&quot;<br />&quot;WantedMusicDisabled&quot;<br />&quot;WantedMusicOnMission&quot;<br /><br />-------------------------------<br />No added flag names between b393d and b573d, including b573d.<br /><br />#######################################################################<br /><br />&quot;IsDirectorModeActive&quot; is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.<br /><br />-----------------------------------------------------------------------<br /><br />All flag IDs and hashes:<br /><br />ID: 00 | Hash: 0x0FED7A7F<br />ID: 01 | Hash: 0x20A7858F<br />ID: 02 | Hash: 0xA11C2259<br />ID: 03 | Hash: 0x08DE4700<br />ID: 04 | Hash: 0x989F652F<br />ID: 05 | Hash: 0x3C9E76BA<br />ID: 06 | Hash: 0xA805FEB0<br />ID: 07 | Hash: 0x4B94EA26<br />ID: 08 | Hash: 0x803ACD34<br />ID: 09 | Hash: 0x7C741226<br />ID: 10 | Hash: 0x31DB9EBD<br />ID: 11 | Hash: 0xDF386F18<br />ID: 12 | Hash: 0x669CED42<br />ID: 13 | Hash: 0x51F22743<br />ID: 14 | Hash: 0x2052B35C<br />ID: 15 | Hash: 0x071472DC<br />ID: 16 | Hash: 0xF9928BCC<br />ID: 17 | Hash: 0x7ADBDD48<br />ID: 18 | Hash: 0xA959BA1A<br />ID: 19 | Hash: 0xBBE89B60<br />ID: 20 | Hash: 0x87A08871<br />ID: 21 | Hash: 0xED1057CE<br />ID: 22 | Hash: 0x1584AD7A<br />ID: 23 | Hash: 0x8582CFCB<br />ID: 24 | Hash: 0x7E5E2FB0<br />ID: 25 | Hash: 0xAE4F72DB<br />ID: 26 | Hash: 0x5D16D1FA<br />ID: 27 | Hash: 0x06B2F4B8<br />ID: 28 | Hash: 0x5D4CDC96<br />ID: 29 | Hash: 0x8B5A48BA<br />ID: 30 | Hash: 0x98FBD539<br />ID: 31 | Hash: 0xD8CB0473<br />ID: 32 | Hash: 0x5CBB4874<br />ID: 33 | Hash: 0x2E9F93A9<br />ID: 34 | Hash: 0xD93BEA86<br />ID: 35 | Hash: 0x92109B7D<br />ID: 36 | Hash: 0xB7EC9E4D<br />ID: 37 | Hash: 0xCABDBB1D<br />ID: 38 | Hash: 0xB3FD4A52<br />ID: 39 | Hash: 0x370D94E5<br />ID: 40 | Hash: 0xA0F7938F<br />ID: 41 | Hash: 0xCBE1CE81<br />ID: 42 | Hash: 0xC27F1271<br />ID: 43 | Hash: 0x9E3258EB<br />ID: 44 | Hash: 0x551CDA5B<br />ID: 45 | Hash: 0xCB6D663C<br />ID: 46 | Hash: 0x7DACE87F<br />ID: 47 | Hash: 0xF9DE416F<br />ID: 48 | Hash: 0x882E6E9E<br />ID: 49 | Hash: 0x16B447E7<br />ID: 50 | Hash: 0xBD867739<br />ID: 51 | Hash: 0xA3A58604<br />ID: 52 | Hash: 0x7E046BBC<br />ID: 53 | Hash: 0xD95FDB98<br />ID: 54 | Hash: 0x5842C0ED<br />ID: 55 | Hash: 0x285FECC6<br />ID: 56 | Hash: 0x9351AC43<br />ID: 57 | Hash: 0x50032E75<br />ID: 58 | Hash: 0xAE6D0D59<br />ID: 59 | Hash: 0xD6351785<br />ID: 60 | Hash: 0xD25D71BC<br />ID: 61 | Hash: 0x1F7F6423<br />ID: 62 | Hash: 0xE24C3AA6<br />ID: 63 | Hash: 0xBFFDD2B7
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9EFD5C25018725A<br />
/// </para>
/// </remarks>
public static void SetAudioFlag(string flagName, bool toggle)
{
Function.Call((Hash)0xB9EFD5C25018725A, flagName, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7ABCACA4985A766<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PrepareSynchronizedAudioEvent(string p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xC7ABCACA4985A766, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x029FE7CD1B7E2E75<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PrepareSynchronizedAudioEventForScene(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x029FE7CD1B7E2E75, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B2FD4560E55DD2D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PlaySynchronizedAudioEvent(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8B2FD4560E55DD2D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92D6A88E64A94430<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StopSynchronizedAudioEvent(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x92D6A88E64A94430, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8EDE9BDBCCBA6D4<br />
/// </para>
/// </remarks>
public static void InitSynchSceneAudioWithPosition(int /* bug: structure */ p0, float x, float y, float z)
{
Function.Call((Hash)0xC8EDE9BDBCCBA6D4, p0, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x950A154B8DAB6185<br />
/// </para>
/// </remarks>
public static void InitSynchSceneAudioWithEntity(string p0, int /* Entity */ p1)
{
Function.Call((Hash)0x950A154B8DAB6185, p0, p1);
}

/// <summary>
/// Needs to be called every frame.<br />Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12561FCBB62D5B9C<br />
/// </para>
/// </remarks>
public static void SetAudioSpecialEffectMode(int mode)
{
Function.Call((Hash)0x12561FCBB62D5B9C, mode);
}

/// <summary>
/// Found in the b617d scripts, duplicates removed:  <br /><br />AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(&quot;V_CARSHOWROOM_PS_WINDOW_UNBROKEN&quot;, &quot;V_CARSHOWROOM_PS_WINDOW_BROKEN&quot;);<br /><br /> AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(&quot;V_CIA_PS_WINDOW_UNBROKEN&quot;, &quot;V_CIA_PS_WINDOW_BROKEN&quot;);<br /><br /> AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(&quot;V_DLC_HEIST_APARTMENT_DOOR_CLOSED&quot;, &quot;V_DLC_HEIST_APARTMENT_DOOR_OPEN&quot;);<br /><br /> AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(&quot;V_FINALEBANK_PS_VAULT_INTACT&quot;, &quot;V_FINALEBANK_PS_VAULT_BLOWN&quot;);<br /><br /> AUDIO::SET_PORTAL_SETTINGS_OVERRIDE(&quot;V_MICHAEL_PS_BATHROOM_WITH_WINDOW&quot;, &quot;V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x044DBAD7A7FA2BE5<br />
/// </para>
/// </remarks>
public static void SetPortalSettingsOverride(string p0, string p1)
{
Function.Call((Hash)0x044DBAD7A7FA2BE5, p0, p1);
}

/// <summary>
///  Found in the b617d scripts, duplicates removed: <br /><br /> AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(&quot;V_CARSHOWROOM_PS_WINDOW_UNBROKEN&quot;);<br /> AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(&quot;V_CIA_PS_WINDOW_UNBROKEN&quot;);<br /> AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(&quot;V_DLC_HEIST_APARTMENT_DOOR_CLOSED&quot;);<br /> AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(&quot;V_FINALEBANK_PS_VAULT_INTACT&quot;);<br /> AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE(&quot;V_MICHAEL_PS_BATHROOM_WITH_WINDOW&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4BBFD9CD8B3922B<br />
/// </para>
/// </remarks>
public static void RemovePortalSettingsOverride(string p0)
{
Function.Call((Hash)0xB4BBFD9CD8B3922B, p0);
}

/// <summary>
/// STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4E6DD5566D28C82<br />
/// </para>
/// </remarks>
public static void StopSmokeGrenadeExplosionSounds()
{
Function.Call((Hash)0xE4E6DD5566D28C82);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A48AB4445D499BE<br />
/// </para>
/// </remarks>
public static int GetMusicVolSlider()
{
return Function.Call<int>((Hash)0x3A48AB4445D499BE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4ADA3F19BE4A6047<br />
/// </para>
/// </remarks>
public static void RequestTennisBanks(int /* Ped */ ped)
{
Function.Call((Hash)0x4ADA3F19BE4A6047, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0150B6FF25A9E2E5<br />
/// </para>
/// </remarks>
public static void UnrequestTennisBanks()
{
Function.Call((Hash)0x0150B6FF25A9E2E5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBEF34B1D9624D5DD<br />
/// </para>
/// </remarks>
public static void SetSkipMinigunSpinUpAudio(bool p0)
{
Function.Call((Hash)0xBEF34B1D9624D5DD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x806058BBDC136E06<br />
/// </para>
/// </remarks>
public static void StopCutsceneAudio()
{
Function.Call((Hash)0x806058BBDC136E06);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x544810ED9DB6BBE6<br />
/// </para>
/// </remarks>
public static bool HasLoadedMpDataSet()
{
return Function.Call<bool>((Hash)0x544810ED9DB6BBE6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B50ABB1FE3746F4<br />
/// </para>
/// </remarks>
public static bool HasLoadedSpDataSet()
{
return Function.Call<bool>((Hash)0x5B50ABB1FE3746F4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xD53F3A29BCE2580E<br />
/// </para>
/// </remarks>
public static int GetVehicleHornSoundIndex(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xD53F3A29BCE2580E, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x0350E7E17BA767D0<br />
/// </para>
/// </remarks>
public static void SetVehicleHornSoundIndex(int /* Vehicle */ vehicle, int value)
{
Function.Call((Hash)0x0350E7E17BA767D0, vehicle, value);
}

#endregion
#region BRAIN
/// <summary>
/// BRAIN::ADD_SCRIPT_TO_RANDOM_PED(&quot;pb_prostitute&quot;, ${s_f_y_hooker_01}, 100, 0);<br /><br />- Nacorpio<br /><br />-----<br /><br />Hardcoded to not work in Multiplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EE5367468A65CCC<br />
/// </para>
/// </remarks>
public static void AddScriptToRandomPed(string name, uint model, float p2, float p3)
{
Function.Call((Hash)0x4EE5367468A65CCC, name, model, p2, p3);
}

/// <summary>
/// Registers a script for any object with a specific model hash.<br /><br />BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(&quot;ob_telescope&quot;, ${prop_telescope_01}, 100, 4.0, -1, 9);<br /><br />- Nacorpio
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BE84C318BA6EC22<br />
/// </para>
/// </remarks>
public static void RegisterObjectScriptBrain(string scriptName, uint modelHash, int p2, float activationRange, int p4, int p5)
{
Function.Call((Hash)0x0BE84C318BA6EC22, scriptName, modelHash, p2, activationRange, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCBA154209823057<br />
/// </para>
/// </remarks>
public static bool IsObjectWithinBrainActivationRange(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0xCCBA154209823057, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3CDC7136613284BD<br />
/// </para>
/// </remarks>
public static void RegisterWorldPointScriptBrain(string scriptName, float activationRange, int p2)
{
Function.Call((Hash)0x3CDC7136613284BD, scriptName, activationRange, p2);
}

/// <summary>
/// Gets whether the world point the calling script is registered to is within desired range of the player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5042CC6F5E3D450<br />
/// </para>
/// </remarks>
public static bool IsWorldPointWithinBrainActivationRange()
{
return Function.Call<bool>((Hash)0xC5042CC6F5E3D450);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67AA4D73F0CFA86B<br />
/// </para>
/// </remarks>
public static void EnableScriptBrainSet(int brainSet)
{
Function.Call((Hash)0x67AA4D73F0CFA86B, brainSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14D8518E9760F08F<br />
/// </para>
/// </remarks>
public static void DisableScriptBrainSet(int brainSet)
{
Function.Call((Hash)0x14D8518E9760F08F, brainSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B40ED49D7D6FF84<br />
/// </para>
/// </remarks>
public static void ReactivateAllWorldBrainsThatAreWaitingTillOutOfRange()
{
Function.Call((Hash)0x0B40ED49D7D6FF84);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D953DF78EBF8158<br />
/// </para>
/// </remarks>
public static void ReactivateAllObjectBrainsThatAreWaitingTillOutOfRange()
{
Function.Call((Hash)0x4D953DF78EBF8158);
}

/// <summary>
/// Possible values:<br /><br />act_cinema<br />am_mp_carwash_launch<br />am_mp_carwash_control<br />am_mp_property_ext<br />chop<br />fairgroundHub<br />launcher_BasejumpHeli<br />launcher_BasejumpPack<br />launcher_CarWash<br />launcher_golf<br />launcher_Hunting_Ambient<br />launcher_MrsPhilips<br />launcher_OffroadRacing<br />launcher_pilotschool<br />launcher_Racing<br />launcher_rampage<br />launcher_rampage<br />launcher_range<br />launcher_stunts<br />launcher_stunts<br />launcher_tennis<br />launcher_Tonya<br />launcher_Triathlon<br />launcher_Yoga<br />ob_mp_bed_low<br />ob_mp_bed_med
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D6840CEE8845831<br />
/// </para>
/// </remarks>
public static void ReactivateNamedWorldBrainsWaitingTillOutOfRange(string scriptName)
{
Function.Call((Hash)0x6D6840CEE8845831, scriptName);
}

/// <summary>
/// Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar<br /><br />Here are possible values of argument - <br /><br />&quot;ob_tv&quot;<br />&quot;launcher_Darts&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E91B04E08773030<br />
/// </para>
/// </remarks>
public static void ReactivateNamedObjectBrainsWaitingTillOutOfRange(string scriptName)
{
Function.Call((Hash)0x6E91B04E08773030, scriptName);
}

#endregion
#region CAM
/// <summary>
/// ease - smooth transition between the camera&apos;s positions<br />easeTime - Time in milliseconds for the transition to happen<br /><br />If you have created a script (rendering) camera, and want to go back to the <br />character (gameplay) camera, call this native with render set to 0.<br />Setting ease to 1 will smooth the transition.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07E5B515DB0636FC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RenderScriptCams(bool render, bool ease, int easeTime, bool p3, bool p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x07E5B515DB0636FC, render, ease, easeTime, p3, p4, p5);
}

/// <summary>
/// This native makes the gameplay camera zoom into first person/third person with a special effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC819F3CBB62BF692<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StopRenderingScriptCamsUsingCatchUp(bool render, float p1, int p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xC819F3CBB62BF692, render, p1, p2, p3);
}

/// <summary>
/// &quot;DEFAULT_SCRIPTED_CAMERA&quot;<br />&quot;DEFAULT_ANIMATED_CAMERA&quot;<br />&quot;DEFAULT_SPLINE_CAMERA&quot;<br />&quot;DEFAULT_SCRIPTED_FLY_CAMERA&quot;<br />&quot;TIMED_SPLINE_CAMERA&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3981DCE61D9E13F<br />
/// </para>
/// </remarks>
public static int CreateCam(string camName, bool p1)
{
return Function.Call<int>((Hash)0xC3981DCE61D9E13F, camName, p1);
}

/// <summary>
/// camName is always set to &quot;DEFAULT_SCRIPTED_CAMERA&quot; in Rockstar&apos;s scripts.<br />------------<br />Camera names found in the b617d scripts:<br />&quot;DEFAULT_ANIMATED_CAMERA&quot;<br />&quot;DEFAULT_SCRIPTED_CAMERA&quot;<br />&quot;DEFAULT_SCRIPTED_FLY_CAMERA&quot;<br />&quot;DEFAULT_SPLINE_CAMERA&quot;<br />------------<br />Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it&apos;s always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB51194800B257161<br />
/// </para>
/// </remarks>
public static int CreateCamWithParams(string camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, int p9)
{
return Function.Call<int>((Hash)0xB51194800B257161, camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E3CF89C6BCCA67D<br />
/// </para>
/// </remarks>
public static int CreateCamera(uint camHash, bool p1)
{
return Function.Call<int>((Hash)0x5E3CF89C6BCCA67D, camHash, p1);
}

/// <summary>
/// p9 uses 2 by default
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6ABFA3E16460F22D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int CreateCameraWithParams(uint camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, int /* bug: Any */ p9)
{
return Function.Call<int>((Hash)0x6ABFA3E16460F22D, camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
}

/// <summary>
/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x865908C81A2C22E9<br />
/// </para>
/// </remarks>
public static void DestroyCam(int /* Cam */ cam, bool bScriptHostCam)
{
Function.Call((Hash)0x865908C81A2C22E9, cam, bScriptHostCam);
}

/// <summary>
/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E5FB15663F79120<br />
/// </para>
/// </remarks>
public static void DestroyAllCams(bool bScriptHostCam)
{
Function.Call((Hash)0x8E5FB15663F79120, bScriptHostCam);
}

/// <summary>
/// Returns whether or not the passed camera handle exists.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7A932170592B50E<br />
/// </para>
/// </remarks>
public static bool DoesCamExist(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0xA7A932170592B50E, cam);
}

/// <summary>
/// Set camera as active/inactive.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x026FB97D0A425F84<br />
/// </para>
/// </remarks>
public static void SetCamActive(int /* Cam */ cam, bool active)
{
Function.Call((Hash)0x026FB97D0A425F84, cam, active);
}

/// <summary>
/// Returns whether or not the passed camera handle is active.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFB2B516207D3534<br />
/// </para>
/// </remarks>
public static bool IsCamActive(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0xDFB2B516207D3534, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02EC0AF5C5A49B7A<br />
/// </para>
/// </remarks>
public static bool IsCamRendering(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0x02EC0AF5C5A49B7A, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5234F9F10919EABA<br />
/// </para>
/// </remarks>
public static int GetRenderingCam()
{
return Function.Call<int>((Hash)0x5234F9F10919EABA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAC038F7459AE5AE<br />
/// </para>
/// </remarks>
public static Vector3 GetCamCoord(int /* Cam */ cam)
{
return Function.Call<Vector3>((Hash)0xBAC038F7459AE5AE, cam);
}

/// <summary>
/// The last parameter, as in other &quot;ROT&quot; methods, is usually 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D304C1C955E3E12<br />
/// </para>
/// </remarks>
public static Vector3 GetCamRot(int /* Cam */ cam, int rotationOrder)
{
return Function.Call<Vector3>((Hash)0x7D304C1C955E3E12, cam, rotationOrder);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3330A45CCCDB26A<br />
/// </para>
/// </remarks>
public static float GetCamFov(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xC3330A45CCCDB26A, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC520A34DAFBF24B1<br />
/// </para>
/// </remarks>
public static float GetCamNearClip(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xC520A34DAFBF24B1, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB60A9CFEB21CA6AA<br />
/// </para>
/// </remarks>
public static float GetCamFarClip(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xB60A9CFEB21CA6AA, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0xC2612D223D915A1C<br />
/// </para>
/// </remarks>
public static float GetCamNearDof(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xC2612D223D915A1C, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x255F8DAFD540D397<br />
/// </para>
/// </remarks>
public static float GetCamFarDof(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0x255F8DAFD540D397, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x06D153C0B99B6128<br />
/// </para>
/// </remarks>
public static float GetCamDofStrength(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0x06D153C0B99B6128, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFD8727AEA3CCEBA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCamParams(int /* Cam */ cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, int /* bug: Any */ p8, int p9, int p10, int p11)
{
Function.Call((Hash)0xBFD8727AEA3CCEBA, cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
}

/// <summary>
/// Sets the position of the cam.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D41783FB745E42E<br />
/// </para>
/// </remarks>
public static void SetCamCoord(int /* Cam */ cam, float posX, float posY, float posZ)
{
Function.Call((Hash)0x4D41783FB745E42E, cam, posX, posY, posZ);
}

/// <summary>
/// Sets the rotation of the cam.<br />Last parameter unknown.<br /><br />Last parameter seems to always be set to 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85973643155D0B07<br />
/// </para>
/// </remarks>
public static void SetCamRot(int /* Cam */ cam, float rotX, float rotY, float rotZ, int rotationOrder)
{
Function.Call((Hash)0x85973643155D0B07, cam, rotX, rotY, rotZ, rotationOrder);
}

/// <summary>
/// Sets the field of view of the cam.<br />---------------------------------------------<br />Min: 1.0f<br />Max: 130.0f
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB13C14F66A00D047<br />
/// </para>
/// </remarks>
public static void SetCamFov(int /* Cam */ cam, float fieldOfView)
{
Function.Call((Hash)0xB13C14F66A00D047, cam, fieldOfView);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7848EFCCC545182<br />
/// </para>
/// </remarks>
public static void SetCamNearClip(int /* Cam */ cam, float nearClip)
{
Function.Call((Hash)0xC7848EFCCC545182, cam, nearClip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE306F2A904BF86E<br />
/// </para>
/// </remarks>
public static void SetCamFarClip(int /* Cam */ cam, float farClip)
{
Function.Call((Hash)0xAE306F2A904BF86E, cam, farClip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xAABD62873FFB1A33<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForceCamFarClip(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xAABD62873FFB1A33, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F0F77FBA9A8F2E6<br />
/// </para>
/// </remarks>
public static void SetCamMotionBlurStrength(int /* Cam */ cam, float strength)
{
Function.Call((Hash)0x6F0F77FBA9A8F2E6, cam, strength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FA4BF0A7AB7DE2C<br />
/// </para>
/// </remarks>
public static void SetCamNearDof(int /* Cam */ cam, float nearDOF)
{
Function.Call((Hash)0x3FA4BF0A7AB7DE2C, cam, nearDOF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDD91296CD01AEE0<br />
/// </para>
/// </remarks>
public static void SetCamFarDof(int /* Cam */ cam, float farDOF)
{
Function.Call((Hash)0xEDD91296CD01AEE0, cam, farDOF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EE29B4D7D5DF897<br />
/// </para>
/// </remarks>
public static void SetCamDofStrength(int /* Cam */ cam, float dofStrength)
{
Function.Call((Hash)0x5EE29B4D7D5DF897, cam, dofStrength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3CF48F6F96E749DC<br />
/// </para>
/// </remarks>
public static void SetCamDofPlanes(int /* Cam */ cam, float p1, float p2, float p3, float p4)
{
Function.Call((Hash)0x3CF48F6F96E749DC, cam, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16A96863A17552BB<br />
/// </para>
/// </remarks>
public static void SetCamUseShallowDofMode(int /* Cam */ cam, bool toggle)
{
Function.Call((Hash)0x16A96863A17552BB, cam, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA13B0222F3D94A94<br />
/// </para>
/// </remarks>
public static void SetUseHiDof()
{
Function.Call((Hash)0xA13B0222F3D94A94);
}

/// <summary>
/// Only used in R* Script fm_mission_controller_2020
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x731A880555DA3647<br />
/// </para>
/// </remarks>
public static void SetUseHiDofOnSyncedSceneThisUpdate()
{
Function.Call((Hash)0x731A880555DA3647);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF55E4046F6F831DC<br />
/// </para>
/// </remarks>
public static void SetCamDofOverriddenFocusDistance(int /* Cam */ camera, float p1)
{
Function.Call((Hash)0xF55E4046F6F831DC, camera, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE111A7C0D200CBC5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCamDofOverriddenFocusDistanceBlendLevel(int /* bug: Any */ p0, float p1)
{
Function.Call((Hash)0xE111A7C0D200CBC5, p0, p1);
}

/// <summary>
/// This native has its name defined inside its codE<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DD234D6F3914C5B<br />
/// </para>
/// </remarks>
public static void SetCamDofFnumberOfLens(int /* Cam */ camera, float p1)
{
Function.Call((Hash)0x7DD234D6F3914C5B, camera, p1);
}

/// <summary>
/// Native name labeled within its code
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x47B595D60664CFFA<br />
/// </para>
/// </remarks>
public static void SetCamDofFocalLengthMultiplier(int /* Cam */ camera, float multiplier)
{
Function.Call((Hash)0x47B595D60664CFFA, camera, multiplier);
}

/// <summary>
/// This native has a name defined inside its code
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC669EEA5D031B7DE<br />
/// </para>
/// </remarks>
public static void SetCamDofFocusDistanceBias(int /* Cam */ camera, float p1)
{
Function.Call((Hash)0xC669EEA5D031B7DE, camera, p1);
}

/// <summary>
/// This native has a name defined inside its code
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3654A441402562D<br />
/// </para>
/// </remarks>
public static void SetCamDofMaxNearInFocusDistance(int /* Cam */ camera, float p1)
{
Function.Call((Hash)0xC3654A441402562D, camera, p1);
}

/// <summary>
/// This native has a name defined inside its code
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C654B4943BDDF7C<br />
/// </para>
/// </remarks>
public static void SetCamDofMaxNearInFocusDistanceBlendLevel(int /* Cam */ camera, float p1)
{
Function.Call((Hash)0x2C654B4943BDDF7C, camera, p1);
}

/// <summary>
/// Last param determines if its relative to the Entity
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEDB7D269E8C60E3<br />
/// </para>
/// </remarks>
public static void AttachCamToEntity(int /* Cam */ cam, int /* Entity */ entity, float xOffset, float yOffset, float zOffset, bool isRelative)
{
Function.Call((Hash)0xFEDB7D269E8C60E3, cam, entity, xOffset, yOffset, zOffset, isRelative);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61A3DBA14AB7F411<br />
/// </para>
/// </remarks>
public static void AttachCamToPedBone(int /* Cam */ cam, int /* Ped */ ped, int boneIndex, float x, float y, float z, bool heading)
{
Function.Call((Hash)0x61A3DBA14AB7F411, cam, ped, boneIndex, x, y, z, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x149916F50C34A40D<br />
/// </para>
/// </remarks>
public static void HardAttachCamToPedBone(int /* Cam */ cam, int /* Ped */ ped, int boneIndex, float p3, float p4, float p5, float p6, float p7, float p8, bool p9)
{
Function.Call((Hash)0x149916F50C34A40D, cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// Example from am_mp_drone script: <br /><br />CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x202A5ED9CE01D6E7<br />
/// </para>
/// </remarks>
public static void HardAttachCamToEntity(int /* Cam */ cam, int /* Entity */ entity, float xRot, float yRot, float zRot, float xOffset, float yOffset, float zOffset, bool isRelative)
{
Function.Call((Hash)0x202A5ED9CE01D6E7, cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
}

/// <summary>
/// This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x8DB3F12A02CAEF72<br />
/// </para>
/// </remarks>
public static void AttachCamToVehicleBone(int /* Cam */ cam, int /* Vehicle */ vehicle, int boneIndex, bool relativeRotation, float rotX, float rotY, float rotZ, float offsetX, float offsetY, float offsetZ, bool fixedDirection)
{
Function.Call((Hash)0x8DB3F12A02CAEF72, cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2FABBE87F4BAD82<br />
/// </para>
/// </remarks>
public static void DetachCam(int /* Cam */ cam)
{
Function.Call((Hash)0xA2FABBE87F4BAD82, cam);
}

/// <summary>
/// The native seems to only be called once.<br /><br />The native is used as so,<br />CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &amp;l_525, 4));<br />In the exile1 script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45F1DE9C34B93AE6<br />
/// </para>
/// </remarks>
public static void SetCamInheritRollVehicle(int /* Cam */ cam, bool p1)
{
Function.Call((Hash)0x45F1DE9C34B93AE6, cam, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF75497BB865F0803<br />
/// </para>
/// </remarks>
public static void PointCamAtCoord(int /* Cam */ cam, float x, float y, float z)
{
Function.Call((Hash)0xF75497BB865F0803, cam, x, y, z);
}

/// <summary>
/// p5 always seems to be 1 i.e TRUE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5640BFF86B16E8DC<br />
/// </para>
/// </remarks>
public static void PointCamAtEntity(int /* Cam */ cam, int /* Entity */ entity, float p2, float p3, float p4, bool p5)
{
Function.Call((Hash)0x5640BFF86B16E8DC, cam, entity, p2, p3, p4, p5);
}

/// <summary>
/// Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it&apos;s always 1. Please correct p0-p5 if any prove to be wrong. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68B2B5F33BA63C41<br />
/// </para>
/// </remarks>
public static void PointCamAtPedBone(int /* Cam */ cam, int /* Ped */ ped, int boneIndex, float x, float y, float z, bool p6)
{
Function.Call((Hash)0x68B2B5F33BA63C41, cam, ped, boneIndex, x, y, z, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF33AB75780BA57DE<br />
/// </para>
/// </remarks>
public static void StopCamPointing(int /* Cam */ cam)
{
Function.Call((Hash)0xF33AB75780BA57DE, cam);
}

/// <summary>
/// Allows you to aim and shoot at the direction the camera is facing.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C1DC7770C51DC8D<br />
/// </para>
/// </remarks>
public static void SetCamAffectsAiming(int /* Cam */ cam, bool toggle)
{
Function.Call((Hash)0x8C1DC7770C51DC8D, cam, toggle);
}

/// <summary>
/// Rotates the radar to match the camera&apos;s Z rotation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x661B5C8654ADD825<br />
/// </para>
/// </remarks>
public static void SetCamControlsMiniMapHeading(int /* Cam */ cam, bool toggle)
{
Function.Call((Hash)0x661B5C8654ADD825, cam, toggle);
}

/// <summary>
/// When set to true shadows appear more smooth but less detailed.<br />Set to false by default.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2767257A320FC82<br />
/// </para>
/// </remarks>
public static void SetCamIsInsideVehicle(int /* Cam */ cam, bool toggle)
{
Function.Call((Hash)0xA2767257A320FC82, cam, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x271017B9BA825366<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AllowMotionBlurDecay(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0x271017B9BA825366, p0, p1);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B93E0107865DD40<br />
/// </para>
/// </remarks>
public static void SetCamDebugName(int /* Cam */ camera, string name)
{
Function.Call((Hash)0x1B93E0107865DD40, camera, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x77C3CEC46BE286F6<br />
/// </para>
/// </remarks>
public static int GetDebugCam()
{
return Function.Call<int>((Hash)0x77C3CEC46BE286F6);
}

/// <summary>
/// I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.<br /><br />p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one<br /><br />p8 big values ~100 will slow down the camera movement before reaching this node<br /><br />p9 != 0 seems to override the rotation/pitch (bool?)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8609C75EC438FB3B<br />
/// </para>
/// </remarks>
public static void AddCamSplineNode(int /* Cam */ camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int smoothingStyle, int rotationOrder)
{
Function.Call((Hash)0x8609C75EC438FB3B, camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
}

/// <summary>
/// p0 is the spline camera to which the node is being added.<br />p1 is the camera used to create the node.<br />p3 is always 3 in scripts. It might be smoothing style or rotation order.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A9F2A468B328E74<br />
/// </para>
/// </remarks>
public static void AddCamSplineNodeUsingCameraFrame(int /* Cam */ cam, int /* Cam */ cam2, int length, int p3)
{
Function.Call((Hash)0x0A9F2A468B328E74, cam, cam2, length, p3);
}

/// <summary>
/// p0 is the spline camera to which the node is being added.<br />p1 is the camera used to create the node.<br />p3 is always 3 in scripts. It might be smoothing style or rotation order.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FB82563989CF4FB<br />
/// </para>
/// </remarks>
public static void AddCamSplineNodeUsingCamera(int /* Cam */ cam, int /* Cam */ cam2, int length, int p3)
{
Function.Call((Hash)0x0FB82563989CF4FB, cam, cam2, length, p3);
}

/// <summary>
/// p2 is always 2 in scripts. It might be smoothing style or rotation order.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x609278246A29CA34<br />
/// </para>
/// </remarks>
public static void AddCamSplineNodeUsingGameplayFrame(int /* Cam */ cam, int length, int p2)
{
Function.Call((Hash)0x609278246A29CA34, cam, length, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x242B5874F0A4E052<br />
/// </para>
/// </remarks>
public static void SetCamSplinePhase(int /* Cam */ cam, float p1)
{
Function.Call((Hash)0x242B5874F0A4E052, cam, p1);
}

/// <summary>
/// Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.<br /><br />(returns 1.0f when no nodes has been added, reached end of non existing spline)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5349E36C546509A<br />
/// </para>
/// </remarks>
public static float GetCamSplinePhase(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xB5349E36C546509A, cam);
}

/// <summary>
/// I&apos;m pretty sure the parameter is the camera as usual, but I am not certain so I&apos;m going to leave it as is.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9D0E694C8282C96<br />
/// </para>
/// </remarks>
public static float GetCamSplineNodePhase(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xD9D0E694C8282C96, cam);
}

/// <summary>
/// I named p1 as timeDuration as it is obvious. I&apos;m assuming tho it is ran in ms(Milliseconds) as usual.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1381539FEE034CDA<br />
/// </para>
/// </remarks>
public static void SetCamSplineDuration(int /* Cam */ cam, int timeDuration)
{
Function.Call((Hash)0x1381539FEE034CDA, cam, timeDuration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1B0F412F109EA5D<br />
/// </para>
/// </remarks>
public static void SetCamSplineSmoothingStyle(int /* Cam */ cam, int smoothingStyle)
{
Function.Call((Hash)0xD1B0F412F109EA5D, cam, smoothingStyle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB22B17DF858716A6<br />
/// </para>
/// </remarks>
public static int GetCamSplineNodeIndex(int /* Cam */ cam)
{
return Function.Call<int>((Hash)0xB22B17DF858716A6, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83B8201ED82A9A2D<br />
/// </para>
/// </remarks>
public static void SetCamSplineNodeEase(int /* Cam */ cam, int easingFunction, int p2, float p3)
{
Function.Call((Hash)0x83B8201ED82A9A2D, cam, easingFunction, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6385DEB180F319F<br />
/// </para>
/// </remarks>
public static void SetCamSplineNodeVelocityScale(int /* Cam */ cam, int p1, float scale)
{
Function.Call((Hash)0xA6385DEB180F319F, cam, p1, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40B62FA033EB0346<br />
/// </para>
/// </remarks>
public static void OverrideCamSplineVelocity(int /* Cam */ cam, int p1, float p2, float p3)
{
Function.Call((Hash)0x40B62FA033EB0346, cam, p1, p2, p3);
}

/// <summary>
/// Max value for p1 is 15.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DCF7C708D292D55<br />
/// </para>
/// </remarks>
public static void OverrideCamSplineMotionBlur(int /* Cam */ cam, int p1, float p2, float p3)
{
Function.Call((Hash)0x7DCF7C708D292D55, cam, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7BF1A54AE67AC070<br />
/// </para>
/// </remarks>
public static void SetCamSplineNodeExtraFlags(int /* Cam */ cam, int p1, int flags)
{
Function.Call((Hash)0x7BF1A54AE67AC070, cam, p1, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0290F35C0AD97864<br />
/// </para>
/// </remarks>
public static bool IsCamSplinePaused(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0x0290F35C0AD97864, cam);
}

/// <summary>
/// Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FBDA379383A52A4<br />
/// </para>
/// </remarks>
public static void SetCamActiveWithInterp(int /* Cam */ camTo, int /* Cam */ camFrom, int duration, int easeLocation, int easeRotation)
{
Function.Call((Hash)0x9FBDA379383A52A4, camTo, camFrom, duration, easeLocation, easeRotation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x036F97C908C2B52C<br />
/// </para>
/// </remarks>
public static bool IsCamInterpolating(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0x036F97C908C2B52C, cam);
}

/// <summary>
/// Possible shake types (updated b617d):<br /><br />DEATH_FAIL_IN_EFFECT_SHAKE<br />DRUNK_SHAKE<br />FAMILY5_DRUG_TRIP_SHAKE<br />HAND_SHAKE<br />JOLT_SHAKE<br />LARGE_EXPLOSION_SHAKE<br />MEDIUM_EXPLOSION_SHAKE<br />SMALL_EXPLOSION_SHAKE<br />ROAD_VIBRATION_SHAKE<br />SKY_DIVING_SHAKE<br />VIBRATE_SHAKE<br /><br />Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A25241C340D3822<br />
/// </para>
/// </remarks>
public static void ShakeCam(int /* Cam */ cam, string type, float amplitude)
{
Function.Call((Hash)0x6A25241C340D3822, cam, type, amplitude);
}

/// <summary>
/// Example from michael2 script.<br /><br />CAM::ANIMATED_SHAKE_CAM(l_5069, &quot;shake_cam_all@&quot;, &quot;light&quot;, &quot;&quot;, 1f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2746EEAE3E577CD<br />
/// </para>
/// </remarks>
public static void AnimatedShakeCam(int /* Cam */ cam, string p1, string p2, string p3, float amplitude)
{
Function.Call((Hash)0xA2746EEAE3E577CD, cam, p1, p2, p3, amplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B24BFE83A2BE47B<br />
/// </para>
/// </remarks>
public static bool IsCamShaking(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0x6B24BFE83A2BE47B, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD93DB43B82BC0D00<br />
/// </para>
/// </remarks>
public static void SetCamShakeAmplitude(int /* Cam */ cam, float amplitude)
{
Function.Call((Hash)0xD93DB43B82BC0D00, cam, amplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDECF64367884AC3<br />
/// </para>
/// </remarks>
public static void StopCamShaking(int /* Cam */ cam, bool p1)
{
Function.Call((Hash)0xBDECF64367884AC3, cam, p1);
}

/// <summary>
/// CAM::SHAKE_SCRIPT_GLOBAL(&quot;HAND_SHAKE&quot;, 0.2);<br /><br />Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4C8CF9E353AFECA<br />
/// </para>
/// </remarks>
public static void ShakeScriptGlobal(string p0, float p1)
{
Function.Call((Hash)0xF4C8CF9E353AFECA, p0, p1);
}

/// <summary>
/// CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL(&quot;SHAKE_CAM_medium&quot;, &quot;medium&quot;, &quot;&quot;, 0.5f);<br /><br />Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2EAE3FB8CDBED31<br />
/// </para>
/// </remarks>
public static void AnimatedShakeScriptGlobal(string p0, string p1, string p2, float p3)
{
Function.Call((Hash)0xC2EAE3FB8CDBED31, p0, p1, p2, p3);
}

/// <summary>
/// In drunk_controller.c4, sub_309<br />if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {<br />    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC912AF078AF19212<br />
/// </para>
/// </remarks>
public static bool IsScriptGlobalShaking()
{
return Function.Call<bool>((Hash)0xC912AF078AF19212);
}

/// <summary>
/// In drunk_controller.c4, sub_309<br />if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {<br />    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C9D7949FA533490<br />
/// </para>
/// </remarks>
public static void StopScriptGlobalShaking(bool p0)
{
Function.Call((Hash)0x1C9D7949FA533490, p0);
}

/// <summary>
/// p1: 0..16
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x5D96CFB59DA076A0<br />
/// </para>
/// </remarks>
public static void TriggerVehiclePartBrokenCameraShake(int /* Vehicle */ vehicle, int p1, float p2)
{
Function.Call((Hash)0x5D96CFB59DA076A0, vehicle, p1, p2);
}

/// <summary>
/// Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.<br /><br />p9 is unknown at this time.<br />p10 throughout all the X360 Scripts is always 2.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A2D0FB2E7852392<br />
/// </para>
/// </remarks>
public static bool PlayCamAnim(int /* Cam */ cam, string animName, string animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, bool p9, int p10)
{
return Function.Call<bool>((Hash)0x9A2D0FB2E7852392, cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC90621D8A0CEECF2<br />
/// </para>
/// </remarks>
public static bool IsCamPlayingAnim(int /* Cam */ cam, string animName, string animDictionary)
{
return Function.Call<bool>((Hash)0xC90621D8A0CEECF2, cam, animName, animDictionary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4145A4C44FF3B5A6<br />
/// </para>
/// </remarks>
public static void SetCamAnimCurrentPhase(int /* Cam */ cam, float phase)
{
Function.Call((Hash)0x4145A4C44FF3B5A6, cam, phase);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA10B2DB49E92A6B0<br />
/// </para>
/// </remarks>
public static float GetCamAnimCurrentPhase(int /* Cam */ cam)
{
return Function.Call<float>((Hash)0xA10B2DB49E92A6B0, cam);
}

/// <summary>
/// Examples:<br /><br />CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), &quot;PLAYER_EXIT_L_CAM&quot;, &quot;mp_doorbell&quot;);<br /><br />CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], &quot;ah3b_attackheli_cam2&quot;, &quot;missheistfbi3b_helicrash&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE32EFE9AB4A9AA0C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PlaySynchronizedCamAnim(int /* bug: Any */ p0, int /* bug: Any */ p1, string animName, string animDictionary)
{
return Function.Call<bool>((Hash)0xE32EFE9AB4A9AA0C, p0, p1, animName, animDictionary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x503F5920162365B2<br />
/// </para>
/// </remarks>
public static void SetFlyCamHorizontalResponse(int /* Cam */ cam, float p1, float p2, float p3)
{
Function.Call((Hash)0x503F5920162365B2, cam, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xE827B9382CFB41BA<br />
/// </para>
/// </remarks>
public static void SetFlyCamVerticalResponse(int /* Cam */ cam, float p1, float p2, float p3)
{
Function.Call((Hash)0xE827B9382CFB41BA, cam, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9D02130ECDD1D77<br />
/// </para>
/// </remarks>
public static void SetFlyCamMaxHeight(int /* Cam */ cam, float height)
{
Function.Call((Hash)0xF9D02130ECDD1D77, cam, height);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC91C6C55199308CA<br />
/// </para>
/// </remarks>
public static void SetFlyCamCoordAndConstrain(int /* Cam */ cam, float x, float y, float z)
{
Function.Call((Hash)0xC91C6C55199308CA, cam, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8B5C4A79CC18B94<br />
/// </para>
/// </remarks>
public static void SetFlyCamVerticalControlsThisUpdate(int /* Cam */ cam)
{
Function.Call((Hash)0xC8B5C4A79CC18B94, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C48A1D6E3B33179<br />
/// </para>
/// </remarks>
public static bool WasFlyCamConstrainedOnPreviousUdpate(int /* Cam */ cam)
{
return Function.Call<bool>((Hash)0x5C48A1D6E3B33179, cam);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB16FCE9DDC7BA182<br />
/// </para>
/// </remarks>
public static bool IsScreenFadedOut()
{
return Function.Call<bool>((Hash)0xB16FCE9DDC7BA182);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A859503B0C08678<br />
/// </para>
/// </remarks>
public static bool IsScreenFadedIn()
{
return Function.Call<bool>((Hash)0x5A859503B0C08678);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x797AC7CB535BA28F<br />
/// </para>
/// </remarks>
public static bool IsScreenFadingOut()
{
return Function.Call<bool>((Hash)0x797AC7CB535BA28F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C544BC6C57AC575<br />
/// </para>
/// </remarks>
public static bool IsScreenFadingIn()
{
return Function.Call<bool>((Hash)0x5C544BC6C57AC575);
}

/// <summary>
/// Fades the screen in.<br /><br />duration: The time the fade should take, in milliseconds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4E8E24955024033<br />
/// </para>
/// </remarks>
public static void DoScreenFadeIn(int duration)
{
Function.Call((Hash)0xD4E8E24955024033, duration);
}

/// <summary>
/// Fades the screen out.<br /><br />duration: The time the fade should take, in milliseconds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x891B5B39AC6302AF<br />
/// </para>
/// </remarks>
public static void DoScreenFadeOut(int duration)
{
Function.Call((Hash)0x891B5B39AC6302AF, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCD4EA924F42D01A<br />
/// </para>
/// </remarks>
public static void SetWidescreenBorders(bool p0, int p1)
{
Function.Call((Hash)0xDCD4EA924F42D01A, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x4879E4FE39074CDF<br />
/// </para>
/// </remarks>
public static bool AreWidescreenBordersActive()
{
return Function.Call<bool>((Hash)0x4879E4FE39074CDF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14D6F5678D8F1B37<br />
/// </para>
/// </remarks>
public static Vector3 GetGameplayCamCoord()
{
return Function.Call<Vector3>((Hash)0x14D6F5678D8F1B37);
}

/// <summary>
/// p0 dosen&apos;t seem to change much, I tried it with 0, 1, 2:<br />0-Pitch(X): -70.000092<br />0-Roll(Y): -0.000001<br />0-Yaw(Z): -43.886459<br />1-Pitch(X): -70.000092<br />1-Roll(Y): -0.000001<br />1-Yaw(Z): -43.886463<br />2-Pitch(X): -70.000092<br />2-Roll(Y): -0.000002<br />2-Yaw(Z): -43.886467
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x837765A25378F0BB<br />
/// </para>
/// </remarks>
public static Vector3 GetGameplayCamRot(int rotationOrder)
{
return Function.Call<Vector3>((Hash)0x837765A25378F0BB, rotationOrder);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65019750A0324133<br />
/// </para>
/// </remarks>
public static float GetGameplayCamFov()
{
return Function.Call<float>((Hash)0x65019750A0324133);
}

/// <summary>
/// some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x487A82C650EB7799<br />
/// </para>
/// </remarks>
public static void SetGameplayCamMotionBlurScalingThisUpdate(float p0)
{
Function.Call((Hash)0x487A82C650EB7799, p0);
}

/// <summary>
/// some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0225778816FDC28C<br />
/// </para>
/// </remarks>
public static void SetGameplayCamMaxMotionBlurStrengthThisUpdate(float p0)
{
Function.Call((Hash)0x0225778816FDC28C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x743607648ADD4587<br />
/// </para>
/// </remarks>
public static float GetGameplayCamRelativeHeading()
{
return Function.Call<float>((Hash)0x743607648ADD4587);
}

/// <summary>
/// Sets the camera position relative to heading in float from -360 to +360.<br /><br />Heading is alwyas 0 in aiming camera.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4EC2312F4E5B1F1<br />
/// </para>
/// </remarks>
public static void SetGameplayCamRelativeHeading(float heading)
{
Function.Call((Hash)0xB4EC2312F4E5B1F1, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A6867B4845BEDA2<br />
/// </para>
/// </remarks>
public static float GetGameplayCamRelativePitch()
{
return Function.Call<float>((Hash)0x3A6867B4845BEDA2);
}

/// <summary>
/// This native sets the camera&apos;s pitch (rotation on the x-axis).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D0858B8EDFD2B7D<br />
/// </para>
/// </remarks>
public static void SetGameplayCamRelativePitch(float angle, float scalingFactor)
{
Function.Call((Hash)0x6D0858B8EDFD2B7D, angle, scalingFactor);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x7295C203DD659DFE<br />
/// </para>
/// </remarks>
public static void ResetGameplayCamFullAttachParentTransformTimer()
{
Function.Call((Hash)0x7295C203DD659DFE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x48608C3464F58AB4<br />
/// </para>
/// </remarks>
public static void ForceCameraRelativeHeadingAndPitch(float roll, float pitch, float yaw)
{
Function.Call((Hash)0x48608C3464F58AB4, roll, pitch, yaw);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x28B022A17B068A3A<br />
/// </para>
/// </remarks>
public static void ForceBonnetCameraRelativeHeadingAndPitch(float p0, float p1)
{
Function.Call((Hash)0x28B022A17B068A3A, p0, p1);
}

/// <summary>
/// Does nothing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x103991D4A307D472<br />
/// </para>
/// </remarks>
public static void SetFirstPersonShooterCameraHeading(float yaw)
{
Function.Call((Hash)0x103991D4A307D472, yaw);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x759E13EBC1C15C5A<br />
/// </para>
/// </remarks>
public static void SetFirstPersonShooterCameraPitch(float pitch)
{
Function.Call((Hash)0x759E13EBC1C15C5A, pitch);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x469F2ECDEC046337<br />
/// </para>
/// </remarks>
public static void SetScriptedCameraIsFirstPersonThisFrame(bool p0)
{
Function.Call((Hash)0x469F2ECDEC046337, p0);
}

/// <summary>
/// Possible shake types (updated b617d):<br /><br />DEATH_FAIL_IN_EFFECT_SHAKE<br />DRUNK_SHAKE<br />FAMILY5_DRUG_TRIP_SHAKE<br />HAND_SHAKE<br />JOLT_SHAKE<br />LARGE_EXPLOSION_SHAKE<br />MEDIUM_EXPLOSION_SHAKE<br />SMALL_EXPLOSION_SHAKE<br />ROAD_VIBRATION_SHAKE<br />SKY_DIVING_SHAKE<br />VIBRATE_SHAKE<br /><br />Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD55E49555E017CF<br />
/// </para>
/// </remarks>
public static void ShakeGameplayCam(string shakeName, float intensity)
{
Function.Call((Hash)0xFD55E49555E017CF, shakeName, intensity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x016C090630DF1F89<br />
/// </para>
/// </remarks>
public static bool IsGameplayCamShaking()
{
return Function.Call<bool>((Hash)0x016C090630DF1F89);
}

/// <summary>
/// Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script &quot;drunk_controller.ysc.c4&quot; to simulate making the player drunk.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA87E00932DB4D85D<br />
/// </para>
/// </remarks>
public static void SetGameplayCamShakeAmplitude(float amplitude)
{
Function.Call((Hash)0xA87E00932DB4D85D, amplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EF93E9F3D08C178<br />
/// </para>
/// </remarks>
public static void StopGameplayCamShaking(bool p0)
{
Function.Call((Hash)0x0EF93E9F3D08C178, p0);
}

/// <summary>
/// Forces gameplay cam to specified ped as if you were the ped or spectating it
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BBACBF51DA047A8<br />
/// </para>
/// </remarks>
public static void SetGameplayCamFollowPedThisUpdate(int /* Ped */ ped)
{
Function.Call((Hash)0x8BBACBF51DA047A8, ped);
}

/// <summary>
/// Examples when this function will return 0 are:<br />- During busted screen.<br />- When player is coming out from a hospital.<br />- When player is coming out from a police station.<br />- When player is buying gun from AmmuNation.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39B5D1B10383F0C8<br />
/// </para>
/// </remarks>
public static bool IsGameplayCamRendering()
{
return Function.Call<bool>((Hash)0x39B5D1B10383F0C8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3044240D2E0FA842<br />
/// </para>
/// </remarks>
public static bool IsInterpolatingFromScriptCams()
{
return Function.Call<bool>((Hash)0x3044240D2E0FA842);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x705A276EBFF3133D<br />
/// </para>
/// </remarks>
public static bool IsInterpolatingToScriptCams()
{
return Function.Call<bool>((Hash)0x705A276EBFF3133D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB90C6CCA48940F1<br />
/// </para>
/// </remarks>
public static void SetGameplayCamAltitudeFovScalingState(bool p0)
{
Function.Call((Hash)0xDB90C6CCA48940F1, p0);
}

/// <summary>
/// Shows the crosshair even if it wouldn&apos;t show normally. Only works for one frame, so make sure to call it repeatedly.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA7F0AD7E9BA676F<br />
/// </para>
/// </remarks>
public static void DisableGameplayCamAltitudeFovScalingThisUpdate()
{
Function.Call((Hash)0xEA7F0AD7E9BA676F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70FDA869F3317EA9<br />
/// </para>
/// </remarks>
public static bool IsGameplayCamLookingBehind()
{
return Function.Call<bool>((Hash)0x70FDA869F3317EA9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AED6301F67007D5<br />
/// </para>
/// </remarks>
public static void SetGameplayCamIgnoreEntityCollisionThisUpdate(int /* Entity */ entity)
{
Function.Call((Hash)0x2AED6301F67007D5, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49482F9FCD825AAA<br />
/// </para>
/// </remarks>
public static void DisableCamCollisionForObject(int /* Entity */ entity)
{
Function.Call((Hash)0x49482F9FCD825AAA, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xA7092AFE81944852<br />
/// </para>
/// </remarks>
public static void BypassCameraCollisionBuoyancyTestThisUpdate()
{
Function.Call((Hash)0xA7092AFE81944852);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD3151CD37EA2245<br />
/// </para>
/// </remarks>
public static void SetGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(int /* Entity */ entity)
{
Function.Call((Hash)0xFD3151CD37EA2245, entity);
}

/// <summary>
/// Sets some flag on cinematic camera
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xB1381B97F70C7B30<br />
/// </para>
/// </remarks>
public static void DisableFirstPersonCameraWaterClippingTestThisUpdate()
{
Function.Call((Hash)0xB1381B97F70C7B30);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD79DF9F4D26E1C9<br />
/// </para>
/// </remarks>
public static void SetFollowCamIgnoreAttachParentMovementThisUpdate()
{
Function.Call((Hash)0xDD79DF9F4D26E1C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE33D59DA70B58FDF<br />
/// </para>
/// </remarks>
public static bool IsSphereVisible(float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0xE33D59DA70B58FDF, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6D3D26810C8E0F9<br />
/// </para>
/// </remarks>
public static bool IsFollowPedCamActive()
{
return Function.Call<bool>((Hash)0xC6D3D26810C8E0F9);
}

/// <summary>
/// From the scripts:<br /><br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA&quot;, 0);<br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_ON_EXILE1_LADDER_CAMERA&quot;, 1500);<br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_SKY_DIVING_CAMERA&quot;, 0);<br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_SKY_DIVING_CAMERA&quot;, 3000);<br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA&quot;, 0);<br />CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE(&quot;FOLLOW_PED_SKY_DIVING_CAMERA&quot;, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44A113DD6FFC48D1<br />
/// </para>
/// </remarks>
public static bool SetFollowPedCamThisUpdate(string camName, int p1)
{
return Function.Call<bool>((Hash)0x44A113DD6FFC48D1, camName, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x271401846BD26E92<br />
/// </para>
/// </remarks>
public static void UseScriptCamForAmbientPopulationOriginThisFrame(bool p0, bool p1)
{
Function.Call((Hash)0x271401846BD26E92, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8391C309684595A<br />
/// </para>
/// </remarks>
public static void SetFollowPedCamLadderAlignThisUpdate()
{
Function.Call((Hash)0xC8391C309684595A);
}

/// <summary>
/// minimum: Degrees between -180f and 180f.<br />maximum: Degrees between -180f and 180f.<br /><br />Clamps the gameplay camera&apos;s current yaw.<br /><br />Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F993D26E0CA5E8E<br />
/// </para>
/// </remarks>
public static void SetThirdPersonCamRelativeHeadingLimitsThisUpdate(float minimum, float maximum)
{
Function.Call((Hash)0x8F993D26E0CA5E8E, minimum, maximum);
}

/// <summary>
/// minimum: Degrees between -90f and 90f.<br />maximum: Degrees between -90f and 90f.<br /><br />Clamps the gameplay camera&apos;s current pitch.<br /><br />Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA516C198B7DCA1E1<br />
/// </para>
/// </remarks>
public static void SetThirdPersonCamRelativePitchLimitsThisUpdate(float minimum, float maximum)
{
Function.Call((Hash)0xA516C198B7DCA1E1, minimum, maximum);
}

/// <summary>
/// Seems to animate the gameplay camera zoom.<br /><br />Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);<br />will animate the camera zooming in from 1000 meters away.<br /><br />Game scripts use it like this:<br /><br />// Setting this to 1 prevents V key from changing zoom<br />PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);<br /><br />// These restrict how far you can move cam up/down left/right<br />CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);<br />CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);<br /><br />CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF2E1F7742402E81<br />
/// </para>
/// </remarks>
public static void SetThirdPersonCamOrbitDistanceLimitsThisUpdate(float p0, float distance)
{
Function.Call((Hash)0xDF2E1F7742402E81, p0, distance);
}

/// <summary>
/// Forces gameplay cam to specified vehicle as if you were in it
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE9EA16D6E54CDCA4<br />
/// </para>
/// </remarks>
public static void SetInVehicleCamStateThisUpdate(int /* Vehicle */ p0, int p1)
{
Function.Call((Hash)0xE9EA16D6E54CDCA4, p0, p1);
}

/// <summary>
/// Disables first person camera for the current frame.<br /><br />Found in decompiled scripts:<br />GRAPHICS::DRAW_DEBUG_TEXT_2D(&quot;Disabling First Person Cam&quot;, 0.5, 0.8, 0.0, 0, 0, 255, 255);<br />CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE2EF5DA284CC8DF<br />
/// </para>
/// </remarks>
public static void DisableOnFootFirstPersonViewThisUpdate()
{
Function.Call((Hash)0xDE2EF5DA284CC8DF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59424BD75174C9B1<br />
/// </para>
/// </remarks>
public static void DisableFirstPersonFlashEffectThisUpdate()
{
Function.Call((Hash)0x59424BD75174C9B1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x9F97DA93681F87EA<br />
/// </para>
/// </remarks>
public static void BlockFirstPersonOrientationResetThisUpdate()
{
Function.Call((Hash)0x9F97DA93681F87EA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33E6C8EFD0CD93E9<br />
/// </para>
/// </remarks>
public static int GetFollowPedCamZoomLevel()
{
return Function.Call<int>((Hash)0x33E6C8EFD0CD93E9);
}

/// <summary>
/// Returns<br />0 - Third Person Close<br />1 - Third Person Mid<br />2 - Third Person Far<br />4 - First Person
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D4D46230B2C353A<br />
/// </para>
/// </remarks>
public static int GetFollowPedCamViewMode()
{
return Function.Call<int>((Hash)0x8D4D46230B2C353A);
}

/// <summary>
/// Sets the type of Player camera:<br /><br />0 - Third Person Close<br />1 - Third Person Mid<br />2 - Third Person Far<br />4 - First Person
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A4F9EDF1673F704<br />
/// </para>
/// </remarks>
public static void SetFollowPedCamViewMode(int viewMode)
{
Function.Call((Hash)0x5A4F9EDF1673F704, viewMode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBBDE6D335D6D496<br />
/// </para>
/// </remarks>
public static bool IsFollowVehicleCamActive()
{
return Function.Call<bool>((Hash)0xCBBDE6D335D6D496);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91EF6EE6419E5B97<br />
/// </para>
/// </remarks>
public static void SetFollowVehicleCamHighAngleModeThisUpdate(bool p0)
{
Function.Call((Hash)0x91EF6EE6419E5B97, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DFE13ECDC1EC196<br />
/// </para>
/// </remarks>
public static void SetFollowVehicleCamHighAngleModeEveryUpdate(bool p0, bool p1)
{
Function.Call((Hash)0x9DFE13ECDC1EC196, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x79C0E43EB9B944E2<br />
/// </para>
/// </remarks>
public static bool SetTableGamesCameraThisUpdate(uint hash)
{
return Function.Call<bool>((Hash)0x79C0E43EB9B944E2, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE82280AB767B690<br />
/// </para>
/// </remarks>
public static int GetFollowVehicleCamZoomLevel()
{
return Function.Call<int>((Hash)0xEE82280AB767B690);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19464CB6E4078C8A<br />
/// </para>
/// </remarks>
public static void SetFollowVehicleCamZoomLevel(int zoomLevel)
{
Function.Call((Hash)0x19464CB6E4078C8A, zoomLevel);
}

/// <summary>
/// Returns the type of camera:<br /><br />0 - Third Person Close<br />1 - Third Person Mid<br />2 - Third Person Far<br />4 - First Person
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4FF579AC0E3AAAE<br />
/// </para>
/// </remarks>
public static int GetFollowVehicleCamViewMode()
{
return Function.Call<int>((Hash)0xA4FF579AC0E3AAAE);
}

/// <summary>
/// Sets the type of Player camera in vehicles:<br /><br />0 - Third Person Close<br />1 - Third Person Mid<br />2 - Third Person Far<br />4 - First Person
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC253D7842768F48<br />
/// </para>
/// </remarks>
public static void SetFollowVehicleCamViewMode(int viewMode)
{
Function.Call((Hash)0xAC253D7842768F48, viewMode);
}

/// <summary>
/// context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE778F8C7E1142E2<br />
/// </para>
/// </remarks>
public static int GetCamViewModeForContext(int context)
{
return Function.Call<int>((Hash)0xEE778F8C7E1142E2, context);
}

/// <summary>
/// context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A2173E46DAECD12<br />
/// </para>
/// </remarks>
public static void SetCamViewModeForContext(int context, int viewMode)
{
Function.Call((Hash)0x2A2173E46DAECD12, context, viewMode);
}

/// <summary>
/// enum Context<br />{<br />	ON_FOOT,<br />	IN_VEHICLE,<br />	ON_BIKE,<br />	IN_BOAT,<br />	IN_AIRCRAFT,<br />	IN_SUBMARINE,<br />	IN_HELI,<br />	IN_TURRET<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19CAFA3C87F7C2FF<br />
/// </para>
/// </remarks>
public static int GetCamActiveViewModeContext()
{
return Function.Call<int>((Hash)0x19CAFA3C87F7C2FF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x6493CF69859B116A<br />
/// </para>
/// </remarks>
public static void UseVehicleCamStuntSettingsThisUpdate()
{
Function.Call((Hash)0x6493CF69859B116A);
}

/// <summary>
/// Sets gameplay camera to hash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x425A920FDB9A0DDA<br />
/// </para>
/// </remarks>
public static void UseDedicatedStuntCameraThisUpdate(string camName)
{
Function.Call((Hash)0x425A920FDB9A0DDA, camName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0AA27680A0BD43FA<br />
/// </para>
/// </remarks>
public static void ForceVehicleCamStuntSettingsThisUpdate()
{
Function.Call((Hash)0x0AA27680A0BD43FA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x5C90CAB09951A12F<br />
/// </para>
/// </remarks>
public static void SetFollowVehicleCamSeatThisUpdate(int seatIndex)
{
Function.Call((Hash)0x5C90CAB09951A12F, seatIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68EDDA28A5976D07<br />
/// </para>
/// </remarks>
public static bool IsAimCamActive()
{
return Function.Call<bool>((Hash)0x68EDDA28A5976D07);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74BD83EA840F6BC9<br />
/// </para>
/// </remarks>
public static bool IsAimCamActiveInAccurateMode()
{
return Function.Call<bool>((Hash)0x74BD83EA840F6BC9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E346D934122613F<br />
/// </para>
/// </remarks>
public static bool IsFirstPersonAimCamActive()
{
return Function.Call<bool>((Hash)0x5E346D934122613F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A31FE0049E542F6<br />
/// </para>
/// </remarks>
public static void DisableAimCamThisUpdate()
{
Function.Call((Hash)0x1A31FE0049E542F6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EC52CC40597D170<br />
/// </para>
/// </remarks>
public static float GetFirstPersonAimCamZoomFactor()
{
return Function.Call<float>((Hash)0x7EC52CC40597D170);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70894BD0915C5BCA<br />
/// </para>
/// </remarks>
public static void SetFirstPersonAimCamZoomFactor(float zoomFactor)
{
Function.Call((Hash)0x70894BD0915C5BCA, zoomFactor);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCED08CBE8EBB97C7<br />
/// </para>
/// </remarks>
public static void SetFirstPersonAimCamZoomFactorLimitsThisUpdate(float p0, float p1)
{
Function.Call((Hash)0xCED08CBE8EBB97C7, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F7F2B26DD3F18EE<br />
/// </para>
/// </remarks>
public static void SetFirstPersonAimCamRelativeHeadingLimitsThisUpdate(float p0, float p1)
{
Function.Call((Hash)0x2F7F2B26DD3F18EE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCFC632DB7673BF0<br />
/// </para>
/// </remarks>
public static void SetFirstPersonAimCamRelativePitchLimitsThisUpdate(float p0, float p1)
{
Function.Call((Hash)0xBCFC632DB7673BF0, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AF7B437918103B3<br />
/// </para>
/// </remarks>
public static void SetFirstPersonAimCamNearClipThisUpdate(float p0)
{
Function.Call((Hash)0x0AF7B437918103B3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42156508606DE65E<br />
/// </para>
/// </remarks>
public static void SetThirdPersonAimCamNearClipThisUpdate(float p0)
{
Function.Call((Hash)0x42156508606DE65E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4008EDF7D6E48175<br />
/// </para>
/// </remarks>
public static void SetAllowCustomVehicleDriveByCamThisUpdate(bool p0)
{
Function.Call((Hash)0x4008EDF7D6E48175, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x380B4968D1E09E55<br />
/// </para>
/// </remarks>
public static void ForceTightspaceCustomFramingThisUpdate()
{
Function.Call((Hash)0x380B4968D1E09E55);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA200EB1EE790F448<br />
/// </para>
/// </remarks>
public static Vector3 GetFinalRenderedCamCoord()
{
return Function.Call<Vector3>((Hash)0xA200EB1EE790F448);
}

/// <summary>
/// p0 seems to consistently be 2 across scripts<br /><br />Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B4E4C817FCC2DFB<br />
/// </para>
/// </remarks>
public static Vector3 GetFinalRenderedCamRot(int rotationOrder)
{
return Function.Call<Vector3>((Hash)0x5B4E4C817FCC2DFB, rotationOrder);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26903D9CD1175F2C<br />
/// </para>
/// </remarks>
public static Vector3 GetFinalRenderedRemotePlayerCamRot(int /* Player */ player, int rotationOrder)
{
return Function.Call<Vector3>((Hash)0x26903D9CD1175F2C, player, rotationOrder);
}

/// <summary>
/// Gets some camera fov
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80EC114669DAEFF4<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamFov()
{
return Function.Call<float>((Hash)0x80EC114669DAEFF4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F35F6732C3FBBA0<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedRemotePlayerCamFov(int /* Player */ player)
{
return Function.Call<float>((Hash)0x5F35F6732C3FBBA0, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0082607100D7193<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamNearClip()
{
return Function.Call<float>((Hash)0xD0082607100D7193);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFC8CBC606FDB0FC<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamFarClip()
{
return Function.Call<float>((Hash)0xDFC8CBC606FDB0FC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA03502FC581F7D9B<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamNearDof()
{
return Function.Call<float>((Hash)0xA03502FC581F7D9B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9780F32BCAF72431<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamFarDof()
{
return Function.Call<float>((Hash)0x9780F32BCAF72431);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x162F9D995753DC19<br />
/// </para>
/// </remarks>
public static float GetFinalRenderedCamMotionBlurStrength()
{
return Function.Call<float>((Hash)0x162F9D995753DC19);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD51ADCD2D8BC0FB3<br />
/// </para>
/// </remarks>
public static void SetGameplayCoordHint(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int unk)
{
Function.Call((Hash)0xD51ADCD2D8BC0FB3, x, y, z, duration, blendOutDuration, blendInDuration, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B486269ACD548D3<br />
/// </para>
/// </remarks>
public static void SetGameplayPedHint(int /* Ped */ ped, float x1, float y1, float z1, bool p4, int duration, int blendOutDuration, int blendInDuration)
{
Function.Call((Hash)0x2B486269ACD548D3, ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration);
}

/// <summary>
/// Focuses the camera on the specified vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2297E18F3E71C2E<br />
/// </para>
/// </remarks>
public static void SetGameplayVehicleHint(int /* Vehicle */ vehicle, float offsetX, float offsetY, float offsetZ, bool p4, int time, int easeInTime, int easeOutTime)
{
Function.Call((Hash)0xA2297E18F3E71C2E, vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83E87508A2CA2AC6<br />
/// </para>
/// </remarks>
public static void SetGameplayObjectHint(int /* Object */ @object, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime)
{
Function.Call((Hash)0x83E87508A2CA2AC6, @object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime);
}

/// <summary>
/// p8 could be some sort of flag. Scripts use:<br />-244429742<br />0<br />1726668277<br />1844968929
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x189E955A8313E298<br />
/// </para>
/// </remarks>
public static void SetGameplayEntityHint(int /* Entity */ entity, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime, int p8)
{
Function.Call((Hash)0x189E955A8313E298, entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE520FF1AD2785B40<br />
/// </para>
/// </remarks>
public static bool IsGameplayHintActive()
{
return Function.Call<bool>((Hash)0xE520FF1AD2785B40);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF46C581C61718916<br />
/// </para>
/// </remarks>
public static void StopGameplayHint(bool p0)
{
Function.Call((Hash)0xF46C581C61718916, p0);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCD078C2665D2973<br />
/// </para>
/// </remarks>
public static void StopGameplayHintBeingCancelledThisUpdate(bool p0)
{
Function.Call((Hash)0xCCD078C2665D2973, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x247ACBC4ABBC9D1C<br />
/// </para>
/// </remarks>
public static void StopCodeGameplayHint(bool p0)
{
Function.Call((Hash)0x247ACBC4ABBC9D1C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF72910D0F26F025<br />
/// </para>
/// </remarks>
public static bool IsCodeGameplayHintActive()
{
return Function.Call<bool>((Hash)0xBF72910D0F26F025);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x513403FB9C56211F<br />
/// </para>
/// </remarks>
public static void SetGameplayHintFov(float FOV)
{
Function.Call((Hash)0x513403FB9C56211F, FOV);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8BDBF3D573049A1<br />
/// </para>
/// </remarks>
public static void SetGameplayHintFollowDistanceScalar(float value)
{
Function.Call((Hash)0xF8BDBF3D573049A1, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1F8363DFAD03848<br />
/// </para>
/// </remarks>
public static void SetGameplayHintBaseOrbitPitchOffset(float value)
{
Function.Call((Hash)0xD1F8363DFAD03848, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D7B620DAE436138<br />
/// </para>
/// </remarks>
public static void SetGameplayHintCameraRelativeSideOffset(float xOffset)
{
Function.Call((Hash)0x5D7B620DAE436138, xOffset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC92717EF615B6704<br />
/// </para>
/// </remarks>
public static void SetGameplayHintCameraRelativeVerticalOffset(float yOffset)
{
Function.Call((Hash)0xC92717EF615B6704, yOffset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3433EADAAF7EE40<br />
/// </para>
/// </remarks>
public static void SetGameplayHintCameraBlendToFollowPedMediumViewMode(bool toggle)
{
Function.Call((Hash)0xE3433EADAAF7EE40, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51669F7D1FB53D9F<br />
/// </para>
/// </remarks>
public static void SetCinematicButtonActive(bool p0)
{
Function.Call((Hash)0x51669F7D1FB53D9F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB15162CB5826E9E8<br />
/// </para>
/// </remarks>
public static bool IsCinematicCamRendering()
{
return Function.Call<bool>((Hash)0xB15162CB5826E9E8);
}

/// <summary>
/// p0 argument found in the b617d scripts: &quot;DRUNK_SHAKE&quot;<br /><br />Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCE214D9ED58F3CF<br />
/// </para>
/// </remarks>
public static void ShakeCinematicCam(string p0, float p1)
{
Function.Call((Hash)0xDCE214D9ED58F3CF, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBC08F6B4CB8FF0A<br />
/// </para>
/// </remarks>
public static bool IsCinematicCamShaking()
{
return Function.Call<bool>((Hash)0xBBC08F6B4CB8FF0A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC724C701C30B2FE7<br />
/// </para>
/// </remarks>
public static void SetCinematicCamShakeAmplitude(float p0)
{
Function.Call((Hash)0xC724C701C30B2FE7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2238E588E588A6D7<br />
/// </para>
/// </remarks>
public static void StopCinematicCamShaking(bool p0)
{
Function.Call((Hash)0x2238E588E588A6D7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADFF1B2A555F5FBA<br />
/// </para>
/// </remarks>
public static void DisableCinematicBonnetCameraThisUpdate()
{
Function.Call((Hash)0xADFF1B2A555F5FBA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62ECFCFDEE7885D6<br />
/// </para>
/// </remarks>
public static void DisableCinematicVehicleIdleModeThisUpdate()
{
Function.Call((Hash)0x62ECFCFDEE7885D6);
}

/// <summary>
/// Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E4CFFF989258472<br />
/// </para>
/// </remarks>
public static void InvalidateCinematicVehicleIdleMode()
{
Function.Call((Hash)0x9E4CFFF989258472);
}

/// <summary>
/// Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4F2C0D4EE209E20<br />
/// </para>
/// </remarks>
public static void InvalidateIdleCam()
{
Function.Call((Hash)0xF4F2C0D4EE209E20);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA9D2AA3E326D720<br />
/// </para>
/// </remarks>
public static bool IsCinematicIdleCamRendering()
{
return Function.Call<bool>((Hash)0xCA9D2AA3E326D720);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F32C0D5A90A9B40<br />
/// </para>
/// </remarks>
public static bool IsCinematicFirstPersonVehicleInteriorCamRendering()
{
return Function.Call<bool>((Hash)0x4F32C0D5A90A9B40);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x741B0129D4560F31<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void CreateCinematicShot(int /* bug: Any */ p0, int p1, int /* bug: Any */ p2, int /* Entity */ entity)
{
Function.Call((Hash)0x741B0129D4560F31, p0, p1, p2, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC9F3371A7C28BC9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsCinematicShotActive(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xCC9F3371A7C28BC9, p0);
}

/// <summary>
/// Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7660C6E75D3A078E<br />
/// </para>
/// </remarks>
public static void StopCinematicShot(uint p0)
{
Function.Call((Hash)0x7660C6E75D3A078E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA41BCD7213805AAC<br />
/// </para>
/// </remarks>
public static void ForceCinematicRenderingThisUpdate(bool p0)
{
Function.Call((Hash)0xA41BCD7213805AAC, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC9DA9E8789F5246<br />
/// </para>
/// </remarks>
public static void SetCinematicNewsChannelActiveThisUpdate()
{
Function.Call((Hash)0xDC9DA9E8789F5246);
}

/// <summary>
/// Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCF0754AC3D6FD4E<br />
/// </para>
/// </remarks>
public static void SetCinematicModeActive(bool toggle)
{
Function.Call((Hash)0xDCF0754AC3D6FD4E, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F2300CB7FA7B7F6<br />
/// </para>
/// </remarks>
public static bool IsInVehicleMobilePhoneCameraRendering()
{
return Function.Call<bool>((Hash)0x1F2300CB7FA7B7F6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17FCA7199A530203<br />
/// </para>
/// </remarks>
public static bool DisableCinematicSlowMoThisUpdate()
{
return Function.Call<bool>((Hash)0x17FCA7199A530203);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xD7360051C885628B<br />
/// </para>
/// </remarks>
public static bool IsBonnetCinematicCamRendering()
{
return Function.Call<bool>((Hash)0xD7360051C885628B);
}

/// <summary>
/// Tests some cinematic camera flags
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xF5F1E89A970B7796<br />
/// </para>
/// </remarks>
public static bool IsCinematicCamInputActive()
{
return Function.Call<bool>((Hash)0xF5F1E89A970B7796);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x7B8A361C1813FBEF<br />
/// </para>
/// </remarks>
public static void IgnoreMenuPreferenceForBonnetCameraThisUpdate()
{
Function.Call((Hash)0x7B8A361C1813FBEF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB629FFD9285FA06<br />
/// </para>
/// </remarks>
public static void BypassCutsceneCamRenderingThisUpdate()
{
Function.Call((Hash)0xDB629FFD9285FA06);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x324C5AA411DA7737<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StopCutsceneCamShaking(int /* bug: Any */ p0)
{
Function.Call((Hash)0x324C5AA411DA7737, p0);
}

/// <summary>
/// Hardcoded to only work in multiplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12DED8CA53D47EA5<br />
/// </para>
/// </remarks>
public static void SetCutsceneCamFarClipThisUpdate(float p0)
{
Function.Call((Hash)0x12DED8CA53D47EA5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89215EC747DF244A<br />
/// </para>
/// </remarks>
public static int GetFocusPedOnScreen(float p0, int p1, float p2, float p3, float p4, float p5, float p6, int p7, int p8)
{
return Function.Call<int>((Hash)0x89215EC747DF244A, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A43C76F7FC7BA5F<br />
/// </para>
/// </remarks>
public static void DisableNearClipScanThisUpdate()
{
Function.Call((Hash)0x5A43C76F7FC7BA5F);
}

/// <summary>
/// if p0 is 0, effect is cancelled<br /><br />if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.<br /><br />if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80C8B1846639BB19<br />
/// </para>
/// </remarks>
public static void SetCamDeathFailEffectState(int p0)
{
Function.Call((Hash)0x80C8B1846639BB19, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C41E6BABC9E2112<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetFirstPersonFlashEffectType(int /* bug: Any */ p0)
{
Function.Call((Hash)0x5C41E6BABC9E2112, p0);
}

/// <summary>
/// From b617 scripts:<br /><br />CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(&quot;DINGHY&quot;);<br />CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(&quot;ISSI2&quot;);<br />CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(&quot;SPEEDO&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21E253A7F8DA5DFB<br />
/// </para>
/// </remarks>
public static void SetFirstPersonFlashEffectVehicleModelName(string vehicleName)
{
Function.Call((Hash)0x21E253A7F8DA5DFB, vehicleName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11FA5D3479C7DD47<br />
/// </para>
/// </remarks>
public static void SetFirstPersonFlashEffectVehicleModelHash(uint vehicleModel)
{
Function.Call((Hash)0x11FA5D3479C7DD47, vehicleModel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAF0FA793D05C592<br />
/// </para>
/// </remarks>
public static bool IsAllowedIndependentCameraModes()
{
return Function.Call<bool>((Hash)0xEAF0FA793D05C592);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x62374889A4D59F72<br />
/// </para>
/// </remarks>
public static void CameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate()
{
Function.Call((Hash)0x62374889A4D59F72);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BFCEB5EA1B161B6<br />
/// </para>
/// </remarks>
public static float ReplayGetMaxDistanceAllowedFromPlayer()
{
return Function.Call<float>((Hash)0x8BFCEB5EA1B161B6);
}

#endregion
#region CLOCK
/// <summary>
/// SET_CLOCK_TIME(12, 34, 56);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47C3B5848C3E45D8<br />
/// </para>
/// </remarks>
public static void SetClockTime(int hour, int minute, int second)
{
Function.Call((Hash)0x47C3B5848C3E45D8, hour, minute, second);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4055E40BD2DBEC1D<br />
/// </para>
/// </remarks>
public static void PauseClock(bool toggle)
{
Function.Call((Hash)0x4055E40BD2DBEC1D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8CA9670B9D83B3B<br />
/// </para>
/// </remarks>
public static void AdvanceClockTimeTo(int hour, int minute, int second)
{
Function.Call((Hash)0xC8CA9670B9D83B3B, hour, minute, second);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD716F30D8C8980E2<br />
/// </para>
/// </remarks>
public static void AddToClockTime(int hours, int minutes, int seconds)
{
Function.Call((Hash)0xD716F30D8C8980E2, hours, minutes, seconds);
}

/// <summary>
/// Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25223CA6B4D20B7F<br />
/// </para>
/// </remarks>
public static int GetClockHours()
{
return Function.Call<int>((Hash)0x25223CA6B4D20B7F);
}

/// <summary>
/// Gets the current ingame clock minute.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13D2B8ADD79640F2<br />
/// </para>
/// </remarks>
public static int GetClockMinutes()
{
return Function.Call<int>((Hash)0x13D2B8ADD79640F2);
}

/// <summary>
/// Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x494E97C2EF27C470<br />
/// </para>
/// </remarks>
public static int GetClockSeconds()
{
return Function.Call<int>((Hash)0x494E97C2EF27C470);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB096419DF0D06CE7<br />
/// </para>
/// </remarks>
public static void SetClockDate(int day, int month, int year)
{
Function.Call((Hash)0xB096419DF0D06CE7, day, month, year);
}

/// <summary>
/// Gets the current day of the week.<br /><br />0: Sunday<br />1: Monday<br />2: Tuesday<br />3: Wednesday<br />4: Thursday<br />5: Friday<br />6: Saturday
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD972E4BD7AEB235F<br />
/// </para>
/// </remarks>
public static int GetClockDayOfWeek()
{
return Function.Call<int>((Hash)0xD972E4BD7AEB235F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D10BC92A4DB1D35<br />
/// </para>
/// </remarks>
public static int GetClockDayOfMonth()
{
return Function.Call<int>((Hash)0x3D10BC92A4DB1D35);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBC72712E80257A1<br />
/// </para>
/// </remarks>
public static int GetClockMonth()
{
return Function.Call<int>((Hash)0xBBC72712E80257A1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x961777E64BDAF717<br />
/// </para>
/// </remarks>
public static int GetClockYear()
{
return Function.Call<int>((Hash)0x961777E64BDAF717);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F8B4D1C595B11DB<br />
/// </para>
/// </remarks>
public static int GetMillisecondsPerGameMinute()
{
return Function.Call<int>((Hash)0x2F8B4D1C595B11DB);
}

/// <summary>
/// Gets system time as year, month, day, hour, minute and second.<br /><br />Example usage:<br /><br />    int year;<br /> int month;<br />    int day;<br />  int hour;<br /> int minute;<br />   int second;<br /><br /> TIME::GET_POSIX_TIME(&amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA488F299A5B164E<br />
/// </para>
/// </remarks>
public static void GetPosixTime(ref int year, ref int month, ref int day, ref int hour, ref int minute, ref int second)
{
var nativeAssistPointerVar0 = year;
var nativeAssistPointerVar1 = month;
var nativeAssistPointerVar2 = day;
var nativeAssistPointerVar3 = hour;
var nativeAssistPointerVar4 = minute;
var nativeAssistPointerVar5 = second;
unsafe {
Function.Call((Hash)0xDA488F299A5B164E, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3, &nativeAssistPointerVar4, &nativeAssistPointerVar5);
}
year = nativeAssistPointerVar0;
month = nativeAssistPointerVar1;
day = nativeAssistPointerVar2;
hour = nativeAssistPointerVar3;
minute = nativeAssistPointerVar4;
second = nativeAssistPointerVar5;
}

/// <summary>
/// Gets current UTC time
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8117E09A19EEF4D3<br />
/// </para>
/// </remarks>
public static void GetUtcTime(ref int year, ref int month, ref int day, ref int hour, ref int minute, ref int second)
{
var nativeAssistPointerVar0 = year;
var nativeAssistPointerVar1 = month;
var nativeAssistPointerVar2 = day;
var nativeAssistPointerVar3 = hour;
var nativeAssistPointerVar4 = minute;
var nativeAssistPointerVar5 = second;
unsafe {
Function.Call((Hash)0x8117E09A19EEF4D3, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3, &nativeAssistPointerVar4, &nativeAssistPointerVar5);
}
year = nativeAssistPointerVar0;
month = nativeAssistPointerVar1;
day = nativeAssistPointerVar2;
hour = nativeAssistPointerVar3;
minute = nativeAssistPointerVar4;
second = nativeAssistPointerVar5;
}

/// <summary>
/// Gets local system time as year, month, day, hour, minute and second.<br /><br />Example usage:<br /><br />int year;<br />int month;<br />int day;<br />int hour;<br />int minute;<br />int second;<br />or use std::tm struct<br /><br />TIME::GET_LOCAL_TIME(&amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50C7A99057A69748<br />
/// </para>
/// </remarks>
public static void GetLocalTime(ref int year, ref int month, ref int day, ref int hour, ref int minute, ref int second)
{
var nativeAssistPointerVar0 = year;
var nativeAssistPointerVar1 = month;
var nativeAssistPointerVar2 = day;
var nativeAssistPointerVar3 = hour;
var nativeAssistPointerVar4 = minute;
var nativeAssistPointerVar5 = second;
unsafe {
Function.Call((Hash)0x50C7A99057A69748, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3, &nativeAssistPointerVar4, &nativeAssistPointerVar5);
}
year = nativeAssistPointerVar0;
month = nativeAssistPointerVar1;
day = nativeAssistPointerVar2;
hour = nativeAssistPointerVar3;
minute = nativeAssistPointerVar4;
second = nativeAssistPointerVar5;
}

#endregion
#region CUTSCENE
/// <summary>
/// flags: Usually 8<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A86743F475D9E09<br />
/// </para>
/// </remarks>
public static void RequestCutscene(string cutsceneName, int flags)
{
Function.Call((Hash)0x7A86743F475D9E09, cutsceneName, flags);
}

/// <summary>
/// flags: Usually 8<br /><br />playbackFlags: Which scenes should be played.<br />Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC23DE0E91C30B58C<br />
/// </para>
/// </remarks>
public static void RequestCutsceneWithPlaybackList(string cutsceneName, int playbackFlags, int flags)
{
Function.Call((Hash)0xC23DE0E91C30B58C, cutsceneName, playbackFlags, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x440AF51A3462B86F<br />
/// </para>
/// </remarks>
public static void RemoveCutscene()
{
Function.Call((Hash)0x440AF51A3462B86F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC59F528E9AB9F339<br />
/// </para>
/// </remarks>
public static bool HasCutsceneLoaded()
{
return Function.Call<bool>((Hash)0xC59F528E9AB9F339);
}

/// <summary>
/// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x228D3D94F8A11C3C<br />
/// </para>
/// </remarks>
public static bool HasThisCutsceneLoaded(string cutsceneName)
{
return Function.Call<bool>((Hash)0x228D3D94F8A11C3C, cutsceneName);
}

/// <summary>
/// Sets the cutscene&apos;s owning thread ID.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D9DF6ECA8768583<br />
/// </para>
/// </remarks>
public static void SetScriptCanStartCutscene(int threadId)
{
Function.Call((Hash)0x8D9DF6ECA8768583, threadId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB56BBBCC2955D9CB<br />
/// </para>
/// </remarks>
public static bool CanRequestAssetsForCutsceneEntity()
{
return Function.Call<bool>((Hash)0xB56BBBCC2955D9CB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71B74D2AE19338D0<br />
/// </para>
/// </remarks>
public static bool IsCutscenePlaybackFlagSet(int flag)
{
return Function.Call<bool>((Hash)0x71B74D2AE19338D0, flag);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C61C75BEE8184C2<br />
/// </para>
/// </remarks>
public static void SetCutsceneEntityStreamingFlags(string cutsceneEntName, int p1, int p2)
{
Function.Call((Hash)0x4C61C75BEE8184C2, cutsceneEntName, p1, p2);
}

/// <summary>
/// Simply loads the cutscene and doesn&apos;t do extra stuff that REQUEST_CUTSCENE does.<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06A3524161C502BA<br />
/// </para>
/// </remarks>
public static void RequestCutFile(string cutsceneName)
{
Function.Call((Hash)0x06A3524161C502BA, cutsceneName);
}

/// <summary>
/// Simply checks if the cutscene has loaded and doesn&apos;t check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1C996C2A744262E<br />
/// </para>
/// </remarks>
public static bool HasCutFileLoaded(string cutsceneName)
{
return Function.Call<bool>((Hash)0xA1C996C2A744262E, cutsceneName);
}

/// <summary>
/// Simply unloads the cutscene and doesn&apos;t do extra stuff that REMOVE_CUTSCENE does.<br />Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD00D76A7DFC9D852<br />
/// </para>
/// </remarks>
public static void RemoveCutFile(string cutsceneName)
{
Function.Call((Hash)0xD00D76A7DFC9D852, cutsceneName);
}

/// <summary>
/// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0ABC54DE641DC0FC<br />
/// </para>
/// </remarks>
public static int GetCutFileConcatCount(string cutsceneName)
{
return Function.Call<int>((Hash)0x0ABC54DE641DC0FC, cutsceneName);
}

/// <summary>
/// flags: Usually 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x186D5CB5E7B0FF7B<br />
/// </para>
/// </remarks>
public static void StartCutscene(int flags)
{
Function.Call((Hash)0x186D5CB5E7B0FF7B, flags);
}

/// <summary>
/// flags: Usually 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C9ADDA3244A1FBF<br />
/// </para>
/// </remarks>
public static void StartCutsceneAtCoords(float x, float y, float z, int flags)
{
Function.Call((Hash)0x1C9ADDA3244A1FBF, x, y, z, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7272775B4DC786E<br />
/// </para>
/// </remarks>
public static void StopCutscene(bool p0)
{
Function.Call((Hash)0xC7272775B4DC786E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD220BDD222AC4A1E<br />
/// </para>
/// </remarks>
public static void StopCutsceneImmediately()
{
Function.Call((Hash)0xD220BDD222AC4A1E);
}

/// <summary>
/// p3 could be heading. Needs more research.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB812B3FD1C01CF27<br />
/// </para>
/// </remarks>
public static void SetCutsceneOrigin(float x, float y, float z, float p3, int p4)
{
Function.Call((Hash)0xB812B3FD1C01CF27, x, y, z, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x011883F41211432A<br />
/// </para>
/// </remarks>
public static void SetCutsceneOriginAndOrientation(float x1, float y1, float z1, float x2, float y2, float z2, int p6)
{
Function.Call((Hash)0x011883F41211432A, x1, y1, z1, x2, y2, z2, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE625BEABBAFFDAB9<br />
/// </para>
/// </remarks>
public static int GetCutsceneTime()
{
return Function.Call<int>((Hash)0xE625BEABBAFFDAB9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE53B14A19E480D4<br />
/// </para>
/// </remarks>
public static int GetCutsceneTotalDuration()
{
return Function.Call<int>((Hash)0xEE53B14A19E480D4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x971D7B15BCDBEF99<br />
/// </para>
/// </remarks>
public static int GetCutsceneEndTime()
{
return Function.Call<int>((Hash)0x971D7B15BCDBEF99);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40C8656EDAEDD569<br />
/// </para>
/// </remarks>
public static bool WasCutsceneSkipped()
{
return Function.Call<bool>((Hash)0x40C8656EDAEDD569);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C0A893088881D57<br />
/// </para>
/// </remarks>
public static bool HasCutsceneFinished()
{
return Function.Call<bool>((Hash)0x7C0A893088881D57);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x991251AFC3981F84<br />
/// </para>
/// </remarks>
public static bool IsCutsceneActive()
{
return Function.Call<bool>((Hash)0x991251AFC3981F84);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3C2E180A40F031E<br />
/// </para>
/// </remarks>
public static bool IsCutscenePlaying()
{
return Function.Call<bool>((Hash)0xD3C2E180A40F031E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49010A6A396553D8<br />
/// </para>
/// </remarks>
public static int GetCutsceneSectionPlaying()
{
return Function.Call<int>((Hash)0x49010A6A396553D8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A2E9FDB9A8C62F6<br />
/// </para>
/// </remarks>
public static int GetEntityIndexOfCutsceneEntity(string cutsceneEntName, uint modelHash)
{
return Function.Call<int>((Hash)0x0A2E9FDB9A8C62F6, cutsceneEntName, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x583DF8E3D4AFBD98<br />
/// </para>
/// </remarks>
public static int GetCutsceneConcatSectionPlaying()
{
return Function.Call<int>((Hash)0x583DF8E3D4AFBD98);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CEBC1ED31E8925E<br />
/// </para>
/// </remarks>
public static bool IsCutsceneAuthorized(string cutsceneName)
{
return Function.Call<bool>((Hash)0x4CEBC1ED31E8925E, cutsceneName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x4FCD976DA686580C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int DoesCutsceneHandleExist(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x4FCD976DA686580C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE40C1C56DF95C2E8<br />
/// </para>
/// </remarks>
public static void RegisterEntityForCutscene(int /* Ped */ cutscenePed, string cutsceneEntName, int p2, uint modelHash, int p4)
{
Function.Call((Hash)0xE40C1C56DF95C2E8, cutscenePed, cutsceneEntName, p2, modelHash, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0741A26499654CD<br />
/// </para>
/// </remarks>
public static int GetEntityIndexOfRegisteredEntity(string cutsceneEntName, uint modelHash)
{
return Function.Call<int>((Hash)0xC0741A26499654CD, cutsceneEntName, modelHash);
}

/// <summary>
/// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F96F23FA9B73327<br />
/// </para>
/// </remarks>
public static void SetVehicleModelPlayerWillExitScene(uint modelHash)
{
Function.Call((Hash)0x7F96F23FA9B73327, modelHash);
}

/// <summary>
/// Only used twice in R* scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9896CE4721BE84BA<br />
/// </para>
/// </remarks>
public static void SetCutsceneTriggerArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
Function.Call((Hash)0x9896CE4721BE84BA, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// modelHash (p1) was always 0 in R* scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x645D0B458D8E17B5<br />
/// </para>
/// </remarks>
public static bool CanSetEnterStateForRegisteredEntity(string cutsceneEntName, uint modelHash)
{
return Function.Call<bool>((Hash)0x645D0B458D8E17B5, cutsceneEntName, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C6A6451C79E4662<br />
/// </para>
/// </remarks>
public static bool CanSetExitStateForRegisteredEntity(string cutsceneEntName, uint modelHash)
{
return Function.Call<bool>((Hash)0x4C6A6451C79E4662, cutsceneEntName, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2CBCD0930DFB420<br />
/// </para>
/// </remarks>
public static bool CanSetExitStateForCamera(bool p0)
{
return Function.Call<bool>((Hash)0xB2CBCD0930DFB420, p0);
}

/// <summary>
/// Toggles a value (bool) for cutscenes.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC61B86C9F61EB404<br />
/// </para>
/// </remarks>
public static void SetPadCanShakeDuringCutscene(bool toggle)
{
Function.Call((Hash)0xC61B86C9F61EB404, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8093F23ABACCC7D4<br />
/// </para>
/// </remarks>
public static void SetCutsceneFadeValues(bool p0, bool p1, bool p2, bool p3)
{
Function.Call((Hash)0x8093F23ABACCC7D4, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20746F7B1032A3C7<br />
/// </para>
/// </remarks>
public static void SetCutsceneMultiheadFade(bool p0, bool p1, bool p2, bool p3)
{
Function.Call((Hash)0x20746F7B1032A3C7, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06EE9048FD080382<br />
/// </para>
/// </remarks>
public static void SetCutsceneMultiheadFadeManual(bool p0)
{
Function.Call((Hash)0x06EE9048FD080382, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0FE76168A189DDB<br />
/// </para>
/// </remarks>
public static bool IsMultiheadFadeUp()
{
return Function.Call<bool>((Hash)0xA0FE76168A189DDB);
}

/// <summary>
/// Stops current cutscene with a fade transition<br />p0: always true in R* Scripts<br />You will need to manually fade the screen back in<br />SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F137B508DE238F2<br />
/// </para>
/// </remarks>
public static void NetworkSetMocapCutsceneCanBeSkipped(bool p0)
{
Function.Call((Hash)0x2F137B508DE238F2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE36A98D8AB3D3C66<br />
/// </para>
/// </remarks>
public static void SetCarGeneratorsCanUpdateDuringCutscene(bool p0)
{
Function.Call((Hash)0xE36A98D8AB3D3C66, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EDEF0CF8C1DAB3C<br />
/// </para>
/// </remarks>
public static bool CanUseMobilePhoneDuringCutscene()
{
return Function.Call<bool>((Hash)0x5EDEF0CF8C1DAB3C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41FAA8FB2ECE8720<br />
/// </para>
/// </remarks>
public static void SetCutsceneCanBeSkipped(bool p0)
{
Function.Call((Hash)0x41FAA8FB2ECE8720, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2131046957F31B04<br />
/// </para>
/// </remarks>
public static void SetCanDisplayMinimapDuringCutsceneThisUpdate()
{
Function.Call((Hash)0x2131046957F31B04);
}

/// <summary>
/// Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA01E7B6DEEFBBC9<br />
/// </para>
/// </remarks>
public static void SetCutscenePedComponentVariation(string cutsceneEntName, int p1, int p2, int p3, uint modelHash)
{
Function.Call((Hash)0xBA01E7B6DEEFBBC9, cutsceneEntName, p1, p2, p3, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A56C06EBEF2B0D9<br />
/// </para>
/// </remarks>
public static void SetCutscenePedComponentVariationFromPed(string cutsceneEntName, int /* Ped */ ped, uint modelHash)
{
Function.Call((Hash)0x2A56C06EBEF2B0D9, cutsceneEntName, ped, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x499EF20C5DB25C59<br />
/// </para>
/// </remarks>
public static bool DoesCutsceneEntityExist(string cutsceneEntName, uint modelHash)
{
return Function.Call<bool>((Hash)0x499EF20C5DB25C59, cutsceneEntName, modelHash);
}

/// <summary>
/// Thanks R*! ;)<br /><br />if ((l_161 == 0) || (l_161 == 2)) {<br />    sub_2ea27(&quot;Trying to set Jimmy prop variation&quot;);<br />    CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION(&quot;Jimmy_Boston&quot;, 1, 0, 0, 0);<br />}<br /><br />Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0546524ADE2E9723<br />
/// </para>
/// </remarks>
public static void SetCutscenePedPropVariation(string cutsceneEntName, int p1, int p2, int p3, uint modelHash)
{
Function.Call((Hash)0x0546524ADE2E9723, cutsceneEntName, p1, p2, p3, modelHash);
}

/// <summary>
/// Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x708BDD8CD795B043<br />
/// </para>
/// </remarks>
public static bool HasCutsceneCutThisFrame()
{
return Function.Call<bool>((Hash)0x708BDD8CD795B043);
}

#endregion
#region DATAFILE
/// <summary>
/// Adds the given request ID to the watch list.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD6875BBC0FC899C<br />
/// </para>
/// </remarks>
public static void DatafileWatchRequestId(int id)
{
Function.Call((Hash)0xAD6875BBC0FC899C, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CC86E78358D5119<br />
/// </para>
/// </remarks>
public static void DatafileClearWatchList()
{
Function.Call((Hash)0x6CC86E78358D5119);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCCAE5B92A830878<br />
/// </para>
/// </remarks>
public static bool DatafileIsValidRequestId(int index)
{
return Function.Call<bool>((Hash)0xFCCAE5B92A830878, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15FF52B809DB2353<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileHasLoadedFileData(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x15FF52B809DB2353, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8CC1EBE0B62E29F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileHasValidFileData(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xF8CC1EBE0B62E29F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22DA66936E0FFF37<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileSelectActiveFile(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x22DA66936E0FFF37, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F5EA1C01D65A100<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileDeleteRequestedFile(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8F5EA1C01D65A100, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC84527E235FCA219<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcCreateContent(int /* bug: structure */ data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName, bool publish, int /* bug: Any */ p7)
{
return Function.Call<bool>((Hash)0xC84527E235FCA219, data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5EFC3E847D60507<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcCreateMission(string contentName, string description, string tagsCsv, string contentTypeName, bool publish, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0xA5EFC3E847D60507, contentName, description, tagsCsv, contentTypeName, publish, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x648E7A5434AF7969<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcUpdateContent(string contentId, int /* bug: structure */ data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName, int /* bug: Any */ p7)
{
return Function.Call<bool>((Hash)0x648E7A5434AF7969, contentId, data, dataCount, contentName, description, tagsCsv, contentTypeName, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4645DE9980999E93<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcUpdateMission(string contentId, string contentName, string description, string tagsCsv, string contentTypeName, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x4645DE9980999E93, contentId, contentName, description, tagsCsv, contentTypeName, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x692D808C34A82143<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcSetPlayerData(string contentId, float rating, string contentTypeName, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x692D808C34A82143, contentId, rating, contentTypeName, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA69AC4ADE82B57A4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileSelectUgcData(int p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xA69AC4ADE82B57A4, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CB0BFA7A9342C3D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileSelectUgcStats(int p0, bool p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x9CB0BFA7A9342C3D, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52818819057F2B40<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileSelectUgcPlayerData(int p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x52818819057F2B40, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01095C95CD46B624<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileSelectCreatorStats(int p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x01095C95CD46B624, p0, p1);
}

/// <summary>
/// Loads a User-Generated Content (UGC) file. These files can be found in &quot;[GTA5]\data\ugc&quot; and &quot;[GTA5]\common\patch\ugc&quot;. They seem to follow a naming convention, most likely of &quot;[name]_[part].ugc&quot;. See example below for usage.<br /><br />Returns whether or not the file was successfully loaded.<br /><br />Example:<br />DATAFILE::DATAFILE_LOAD_OFFLINE_UGC(&quot;RockstarPlaylists&quot;) // loads &quot;rockstarplaylists_00.ugc&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5238C011AF405E4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileLoadOfflineUgc(string filename, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xC5238C011AF405E4, filename, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD27058A1CA2B13EE<br />
/// </para>
/// </remarks>
public static void DatafileCreate(int p0)
{
Function.Call((Hash)0xD27058A1CA2B13EE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AB9C1CFC8862DFB<br />
/// </para>
/// </remarks>
public static void DatafileDelete(int p0)
{
Function.Call((Hash)0x9AB9C1CFC8862DFB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2ED61456317B8178<br />
/// </para>
/// </remarks>
public static void DatafileStoreMissionHeader(int p0)
{
Function.Call((Hash)0x2ED61456317B8178, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC55854C7D7274882<br />
/// </para>
/// </remarks>
public static void DatafileFlushMissionHeader()
{
Function.Call((Hash)0xC55854C7D7274882);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x906B778CA1DC72B6<br />
/// </para>
/// </remarks>
public static IntPtr DatafileGetFileDict(int p0)
{
return Function.Call<IntPtr>((Hash)0x906B778CA1DC72B6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83BCCE3224735F05<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileStartSaveToCloud(string filename, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x83BCCE3224735F05, filename, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4DFDD9EB705F8140<br />
/// </para>
/// </remarks>
public static bool DatafileUpdateSaveToCloud(ref bool p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x4DFDD9EB705F8140, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBEDB96A7584AA8CF<br />
/// </para>
/// </remarks>
public static bool DatafileIsSavePending()
{
return Function.Call<bool>((Hash)0xBEDB96A7584AA8CF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xA6EEF01087181EDD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DatafileLoadOfflineUgcForAdditionalDataFile(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xA6EEF01087181EDD, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x6AD0BD5E087866CB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DatafileDeleteForAdditionalDataFile(int /* bug: Any */ p0)
{
Function.Call((Hash)0x6AD0BD5E087866CB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xDBF860CF1DB8E599<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static IntPtr DatafileGetFileDictForAdditionalDataFile(int /* bug: Any */ p0)
{
return Function.Call<IntPtr>((Hash)0xDBF860CF1DB8E599, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35124302A556A325<br />
/// </para>
/// </remarks>
public static void DatadictSetBool(int /* bug: structure */ objectData, string key, bool value)
{
Function.Call((Hash)0x35124302A556A325, objectData, key, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7E035450A7948D5<br />
/// </para>
/// </remarks>
public static void DatadictSetInt(int /* bug: structure */ objectData, string key, int value)
{
Function.Call((Hash)0xE7E035450A7948D5, objectData, key, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC27E1CC2D795105E<br />
/// </para>
/// </remarks>
public static void DatadictSetFloat(int /* bug: structure */ objectData, string key, float value)
{
Function.Call((Hash)0xC27E1CC2D795105E, objectData, key, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8FF3847DADD8E30C<br />
/// </para>
/// </remarks>
public static void DatadictSetString(int /* bug: structure */ objectData, string key, string value)
{
Function.Call((Hash)0x8FF3847DADD8E30C, objectData, key, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CD49B76338C7DEE<br />
/// </para>
/// </remarks>
public static void DatadictSetVector(int /* bug: structure */ objectData, string key, float valueX, float valueY, float valueZ)
{
Function.Call((Hash)0x4CD49B76338C7DEE, objectData, key, valueX, valueY, valueZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA358F56F10732EE1<br />
/// </para>
/// </remarks>
public static IntPtr DatadictCreateDict(int /* bug: structure */ objectData, string key)
{
return Function.Call<IntPtr>((Hash)0xA358F56F10732EE1, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B11728527CA6E5F<br />
/// </para>
/// </remarks>
public static IntPtr DatadictCreateArray(int /* bug: structure */ objectData, string key)
{
return Function.Call<IntPtr>((Hash)0x5B11728527CA6E5F, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1186940ED72FFEEC<br />
/// </para>
/// </remarks>
public static bool DatadictGetBool(int /* bug: structure */ objectData, string key)
{
return Function.Call<bool>((Hash)0x1186940ED72FFEEC, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78F06F6B1FB5A80C<br />
/// </para>
/// </remarks>
public static int DatadictGetInt(int /* bug: structure */ objectData, string key)
{
return Function.Call<int>((Hash)0x78F06F6B1FB5A80C, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06610343E73B9727<br />
/// </para>
/// </remarks>
public static float DatadictGetFloat(int /* bug: structure */ objectData, string key)
{
return Function.Call<float>((Hash)0x06610343E73B9727, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D2FD9E763B24472<br />
/// </para>
/// </remarks>
public static string DatadictGetString(int /* bug: structure */ objectData, string key)
{
return Function.Call<string>((Hash)0x3D2FD9E763B24472, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46CD3CB66E0825CC<br />
/// </para>
/// </remarks>
public static Vector3 DatadictGetVector(int /* bug: structure */ objectData, string key)
{
return Function.Call<Vector3>((Hash)0x46CD3CB66E0825CC, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6B9DDC412FCEEE2<br />
/// </para>
/// </remarks>
public static IntPtr DatadictGetDict(int /* bug: structure */ objectData, string key)
{
return Function.Call<IntPtr>((Hash)0xB6B9DDC412FCEEE2, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A983AA9DA2659ED<br />
/// </para>
/// </remarks>
public static IntPtr DatadictGetArray(int /* bug: structure */ objectData, string key)
{
return Function.Call<IntPtr>((Hash)0x7A983AA9DA2659ED, objectData, key);
}

/// <summary>
/// Types:<br />1 = Boolean<br />2 = Integer<br />3 = Float<br />4 = String<br />5 = Vector3<br />6 = Object<br />7 = Array
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x031C55ED33227371<br />
/// </para>
/// </remarks>
public static int DatadictGetType(int /* bug: structure */ objectData, string key)
{
return Function.Call<int>((Hash)0x031C55ED33227371, objectData, key);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8B0F5A43E928C76<br />
/// </para>
/// </remarks>
public static void DataarrayAddBool(int /* bug: structure */ arrayData, bool value)
{
Function.Call((Hash)0xF8B0F5A43E928C76, arrayData, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCABDB751D86FE93B<br />
/// </para>
/// </remarks>
public static void DataarrayAddInt(int /* bug: structure */ arrayData, int value)
{
Function.Call((Hash)0xCABDB751D86FE93B, arrayData, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57A995FD75D37F56<br />
/// </para>
/// </remarks>
public static void DataarrayAddFloat(int /* bug: structure */ arrayData, float value)
{
Function.Call((Hash)0x57A995FD75D37F56, arrayData, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F0661C155AEEEAA<br />
/// </para>
/// </remarks>
public static void DataarrayAddString(int /* bug: structure */ arrayData, string value)
{
Function.Call((Hash)0x2F0661C155AEEEAA, arrayData, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x407F8D034F70F0C2<br />
/// </para>
/// </remarks>
public static void DataarrayAddVector(int /* bug: structure */ arrayData, float valueX, float valueY, float valueZ)
{
Function.Call((Hash)0x407F8D034F70F0C2, arrayData, valueX, valueY, valueZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6889498B3E19C797<br />
/// </para>
/// </remarks>
public static IntPtr DataarrayAddDict(int /* bug: structure */ arrayData)
{
return Function.Call<IntPtr>((Hash)0x6889498B3E19C797, arrayData);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50C1B2874E50C114<br />
/// </para>
/// </remarks>
public static bool DataarrayGetBool(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<bool>((Hash)0x50C1B2874E50C114, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E5AE19425CD74BE<br />
/// </para>
/// </remarks>
public static int DataarrayGetInt(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<int>((Hash)0x3E5AE19425CD74BE, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0C527B525D7CFB5<br />
/// </para>
/// </remarks>
public static float DataarrayGetFloat(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<float>((Hash)0xC0C527B525D7CFB5, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3F2FFEB8D836F52<br />
/// </para>
/// </remarks>
public static string DataarrayGetString(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<string>((Hash)0xD3F2FFEB8D836F52, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D2064E5B64A628A<br />
/// </para>
/// </remarks>
public static Vector3 DataarrayGetVector(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<Vector3>((Hash)0x8D2064E5B64A628A, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B5FADCC4E3A145F<br />
/// </para>
/// </remarks>
public static IntPtr DataarrayGetDict(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<IntPtr>((Hash)0x8B5FADCC4E3A145F, arrayData, arrayIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x065DB281590CEA2D<br />
/// </para>
/// </remarks>
public static int DataarrayGetCount(int /* bug: structure */ arrayData)
{
return Function.Call<int>((Hash)0x065DB281590CEA2D, arrayData);
}

/// <summary>
/// Types:<br />1 = Boolean<br />2 = Integer<br />3 = Float<br />4 = String<br />5 = Vector3<br />6 = Object<br />7 = Array
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A0014ADB172A3C5<br />
/// </para>
/// </remarks>
public static int DataarrayGetType(int /* bug: structure */ arrayData, int arrayIndex)
{
return Function.Call<int>((Hash)0x3A0014ADB172A3C5, arrayData, arrayIndex);
}

#endregion
#region DECORATOR
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95AED7B8E39ECAA4<br />
/// </para>
/// </remarks>
public static bool DecorSetTime(int /* Entity */ entity, string propertyName, int timestamp)
{
return Function.Call<bool>((Hash)0x95AED7B8E39ECAA4, entity, propertyName, timestamp);
}

/// <summary>
/// This function sets metadata of type bool to specified entity.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B1E8E2ED1335B71<br />
/// </para>
/// </remarks>
public static bool DecorSetBool(int /* Entity */ entity, string propertyName, bool value)
{
return Function.Call<bool>((Hash)0x6B1E8E2ED1335B71, entity, propertyName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x211AB1DD8D0F363A<br />
/// </para>
/// </remarks>
public static bool DecorSetFloat(int /* Entity */ entity, string propertyName, float value)
{
return Function.Call<bool>((Hash)0x211AB1DD8D0F363A, entity, propertyName, value);
}

/// <summary>
/// Sets property to int.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0CE3AA5E1CA19E10<br />
/// </para>
/// </remarks>
public static bool DecorSetInt(int /* Entity */ entity, string propertyName, int value)
{
return Function.Call<bool>((Hash)0x0CE3AA5E1CA19E10, entity, propertyName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDACE671663F2F5DB<br />
/// </para>
/// </remarks>
public static bool DecorGetBool(int /* Entity */ entity, string propertyName)
{
return Function.Call<bool>((Hash)0xDACE671663F2F5DB, entity, propertyName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6524A2F114706F43<br />
/// </para>
/// </remarks>
public static float DecorGetFloat(int /* Entity */ entity, string propertyName)
{
return Function.Call<float>((Hash)0x6524A2F114706F43, entity, propertyName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA06C969B02A97298<br />
/// </para>
/// </remarks>
public static int DecorGetInt(int /* Entity */ entity, string propertyName)
{
return Function.Call<int>((Hash)0xA06C969B02A97298, entity, propertyName);
}

/// <summary>
/// Returns whether or not the specified property is set for the entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05661B80A8C9165F<br />
/// </para>
/// </remarks>
public static bool DecorExistOn(int /* Entity */ entity, string propertyName)
{
return Function.Call<bool>((Hash)0x05661B80A8C9165F, entity, propertyName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00EE9F297C738720<br />
/// </para>
/// </remarks>
public static bool DecorRemove(int /* Entity */ entity, string propertyName)
{
return Function.Call<bool>((Hash)0x00EE9F297C738720, entity, propertyName);
}

/// <summary>
/// https://alloc8or.re/gta5/doc/enums/eDecorType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FD90732F56403CE<br />
/// </para>
/// </remarks>
public static void DecorRegister(string propertyName, int type)
{
Function.Call((Hash)0x9FD90732F56403CE, propertyName, type);
}

/// <summary>
/// type: see DECOR_REGISTER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F14F9F870D6FBC8<br />
/// </para>
/// </remarks>
public static bool DecorIsRegisteredAsType(string propertyName, int type)
{
return Function.Call<bool>((Hash)0x4F14F9F870D6FBC8, propertyName, type);
}

/// <summary>
/// Called after all decorator type initializations.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9D14EEA259F9248<br />
/// </para>
/// </remarks>
public static void DecorRegisterLock()
{
Function.Call((Hash)0xA9D14EEA259F9248);
}

#endregion
#region DLC
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x241FCA5B1AA14F75<br />
/// </para>
/// </remarks>
public static bool AreAnyCcsPending()
{
return Function.Call<bool>((Hash)0x241FCA5B1AA14F75);
}

/// <summary>
/// Returns true if the given DLC pack is present.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x812595A0644CE1DE<br />
/// </para>
/// </remarks>
public static bool IsDlcPresent(uint dlcHash)
{
return Function.Call<bool>((Hash)0x812595A0644CE1DE, dlcHash);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2E07819EF1A5289<br />
/// </para>
/// </remarks>
public static bool DlcCheckCloudDataCorrect()
{
return Function.Call<bool>((Hash)0xF2E07819EF1A5289);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9489659372A81585<br />
/// </para>
/// </remarks>
public static int GetExtracontentCloudResult()
{
return Function.Call<int>((Hash)0x9489659372A81585);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA213B11DFF526300<br />
/// </para>
/// </remarks>
public static bool DlcCheckCompatPackConfiguration()
{
return Function.Call<bool>((Hash)0xA213B11DFF526300);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D30F648014A92B5<br />
/// </para>
/// </remarks>
public static bool GetEverHadBadPackOrder()
{
return Function.Call<bool>((Hash)0x8D30F648014A92B5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10D0A8F259E93EC9<br />
/// </para>
/// </remarks>
public static bool GetIsLoadingScreenActive()
{
return Function.Call<bool>((Hash)0x10D0A8F259E93EC9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xC4637A6D03C24CC3<br />
/// </para>
/// </remarks>
public static bool GetIsInitialLoadingScreenActive()
{
return Function.Call<bool>((Hash)0xC4637A6D03C24CC3);
}

/// <summary>
/// Sets the value of the specified variable to 0.<br />Always returns true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46E2B844905BC5F0<br />
/// </para>
/// </remarks>
public static bool HasCloudRequestsFinished(ref bool p0, int unused)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x46E2B844905BC5F0, &nativeAssistPointerVar0, unused);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).<br />Works in singleplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7C10C4A637992C9<br />
/// </para>
/// </remarks>
public static void OnEnterSp()
{
Function.Call((Hash)0xD7C10C4A637992C9);
}

/// <summary>
/// This loads the GTA:O dlc map parts (high end garages, apartments).<br />Works in singleplayer.<br />In order to use GTA:O heist IPL&apos;s you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0888C3502DBBEEF5<br />
/// </para>
/// </remarks>
public static void OnEnterMp()
{
Function.Call((Hash)0x0888C3502DBBEEF5);
}

#endregion
#region ENTITY
/// <summary>
/// Checks whether an entity exists in the game world.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7239B21A38F536BA<br />
/// </para>
/// </remarks>
public static bool DoesEntityExist(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x7239B21A38F536BA, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDE6DF5AE89981D2<br />
/// </para>
/// </remarks>
public static bool DoesEntityBelongToThisScript(int /* Entity */ entity, bool p1)
{
return Function.Call<bool>((Hash)0xDDE6DF5AE89981D2, entity, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x060D6E96F8B8E48D<br />
/// </para>
/// </remarks>
public static bool DoesEntityHaveDrawable(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x060D6E96F8B8E48D, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA95EA3317CC5064<br />
/// </para>
/// </remarks>
public static bool DoesEntityHavePhysics(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xDA95EA3317CC5064, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x764EB96874EFFDC1<br />
/// </para>
/// </remarks>
public static bool DoesEntityHaveSkeleton(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x764EB96874EFFDC1, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x2158E81A6AF65EA9<br />
/// </para>
/// </remarks>
public static bool DoesEntityHaveAnimDirector(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x2158E81A6AF65EA9, entity);
}

/// <summary>
/// P3 is always 3 as far as i cant tell<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20B711662962B472<br />
/// </para>
/// </remarks>
public static bool HasEntityAnimFinished(int /* Entity */ entity, string animDict, string animName, int p3)
{
return Function.Call<bool>((Hash)0x20B711662962B472, entity, animDict, animName, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95EB9964FF5C5C65<br />
/// </para>
/// </remarks>
public static bool HasEntityBeenDamagedByAnyObject(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x95EB9964FF5C5C65, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x605F5A140F202491<br />
/// </para>
/// </remarks>
public static bool HasEntityBeenDamagedByAnyPed(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x605F5A140F202491, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFD5033FDBA0A9C8<br />
/// </para>
/// </remarks>
public static bool HasEntityBeenDamagedByAnyVehicle(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xDFD5033FDBA0A9C8, entity);
}

/// <summary>
/// Entity 1 = Victim<br />Entity 2 = Attacker<br /><br />p2 seems to always be 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC86D67D52A707CF8<br />
/// </para>
/// </remarks>
public static bool HasEntityBeenDamagedByEntity(int /* Entity */ entity1, int /* Entity */ entity2, bool p2)
{
return Function.Call<bool>((Hash)0xC86D67D52A707CF8, entity1, entity2, p2);
}

/// <summary>
/// traceType is always 17 in the scripts.<br /><br />There is other codes used for traceType:<br />19 - in jewelry_prep1a<br />126 - in am_hunt_the_beast<br />256 &amp; 287 - in fm_mission_controller
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCDFF7B72D23A1AC<br />
/// </para>
/// </remarks>
public static bool HasEntityClearLosToEntity(int /* Entity */ entity1, int /* Entity */ entity2, int traceType)
{
return Function.Call<bool>((Hash)0xFCDFF7B72D23A1AC, entity1, entity2, traceType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x394BDE2A7BBA031E<br />
/// </para>
/// </remarks>
public static bool HasEntityClearLosToEntityAdjustForCover(int /* Entity */ entity1, int /* Entity */ entity2, int traceType)
{
return Function.Call<bool>((Hash)0x394BDE2A7BBA031E, entity1, entity2, traceType);
}

/// <summary>
/// Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.<br />This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0267D00AF114F17A<br />
/// </para>
/// </remarks>
public static bool HasEntityClearLosToEntityInFront(int /* Entity */ entity1, int /* Entity */ entity2)
{
return Function.Call<bool>((Hash)0x0267D00AF114F17A, entity1, entity2);
}

/// <summary>
/// Called on tick.<br />Tested with vehicles, returns true whenever the vehicle is touching any entity.<br /><br />Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BAD02F0368D9E14<br />
/// </para>
/// </remarks>
public static bool HasEntityCollidedWithAnything(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x8BAD02F0368D9E14, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C3D0A935F535C4C<br />
/// </para>
/// </remarks>
public static uint GetLastMaterialHitByEntity(int /* Entity */ entity)
{
return Function.Call<uint>((Hash)0x5C3D0A935F535C4C, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE465D4AB7CA6AE72<br />
/// </para>
/// </remarks>
public static Vector3 GetCollisionNormalOfLastHitForEntity(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0xE465D4AB7CA6AE72, entity);
}

/// <summary>
/// Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40FDEDB72F8293B2<br />
/// </para>
/// </remarks>
public static void ForceEntityAiAndAnimationUpdate(int /* Entity */ entity)
{
Function.Call((Hash)0x40FDEDB72F8293B2, entity);
}

/// <summary>
/// Returns a float value representing animation&apos;s current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.<br /><br />Example:<br />0.000000 - mark the starting of animation.<br />0.500000 - mark the midpoint of the animation.<br />1.000000 - mark the end of animation.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x346D81500D088F42<br />
/// </para>
/// </remarks>
public static float GetEntityAnimCurrentTime(int /* Entity */ entity, string animDict, string animName)
{
return Function.Call<float>((Hash)0x346D81500D088F42, entity, animDict, animName);
}

/// <summary>
/// Returns a float value representing animation&apos;s total playtime in milliseconds.<br /><br />Example:<br />GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),&quot;amb@world_human_yoga@female@base&quot;,&quot;base_b&quot;) <br />return 20800.000000<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50BD2730B191E360<br />
/// </para>
/// </remarks>
public static float GetEntityAnimTotalTime(int /* Entity */ entity, string animDict, string animName)
{
return Function.Call<float>((Hash)0x50BD2730B191E360, entity, animDict, animName);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEDDF04D62B8D790<br />
/// </para>
/// </remarks>
public static float GetAnimDuration(string animDict, string animName)
{
return Function.Call<float>((Hash)0xFEDDF04D62B8D790, animDict, animName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48C2BED9180FE123<br />
/// </para>
/// </remarks>
public static int GetEntityAttachedTo(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x48C2BED9180FE123, entity);
}

/// <summary>
/// Gets the current coordinates for a specified entity.<br />`entity` = The entity to get the coordinates from.<br />`alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FEF770D40960D5A<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityCoords(int /* Entity */ entity, bool alive)
{
return Function.Call<Vector3>((Hash)0x3FEF770D40960D5A, entity, alive);
}

/// <summary>
/// Gets the entity&apos;s forward vector.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A794A5A57F8DF91<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityForwardVector(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x0A794A5A57F8DF91, entity);
}

/// <summary>
/// Gets the X-component of the entity&apos;s forward vector.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BB4EF4214E0E6D5<br />
/// </para>
/// </remarks>
public static float GetEntityForwardX(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x8BB4EF4214E0E6D5, entity);
}

/// <summary>
/// Gets the Y-component of the entity&apos;s forward vector.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x866A4A5FAE349510<br />
/// </para>
/// </remarks>
public static float GetEntityForwardY(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x866A4A5FAE349510, entity);
}

/// <summary>
/// Returns the heading of the entity in degrees. Also know as the &quot;Yaw&quot; of an entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE83D4F9BA2A38914<br />
/// </para>
/// </remarks>
public static float GetEntityHeading(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0xE83D4F9BA2A38914, entity);
}

/// <summary>
/// Gets the heading of the entity physics in degrees, which tends to be more accurate than just &quot;GET_ENTITY_HEADING&quot;. This can be clearly seen while, for example, ragdolling a ped/player.<br /><br />NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x846BF6291198A71E<br />
/// </para>
/// </remarks>
public static float GetEntityHeadingFromEulers(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x846BF6291198A71E, entity);
}

/// <summary>
/// Returns an integer value of entity&apos;s current health.<br /><br />Example of range for ped:<br />- Player [0 to 200]<br />- Ped [100 to 200]<br />- Vehicle [0 to 1000]<br />- Object [0 to 1000]<br /><br />Health is actually a float value but this native casts it to int.<br />In order to get the actual value, do:<br />float health = *(float *)(entityAddress + 0x280);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEF059FAD016D209<br />
/// </para>
/// </remarks>
public static int GetEntityHealth(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xEEF059FAD016D209, entity);
}

/// <summary>
/// Return an integer value of entity&apos;s maximum health.<br /><br />Example:<br />- Player = 200<br />- Ped = 150
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15D757606D170C3C<br />
/// </para>
/// </remarks>
public static int GetEntityMaxHealth(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x15D757606D170C3C, entity);
}

/// <summary>
/// For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x166E7CF68597D8B5<br />
/// </para>
/// </remarks>
public static void SetEntityMaxHealth(int /* Entity */ entity, int value)
{
Function.Call((Hash)0x166E7CF68597D8B5, entity, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A504562485944DD<br />
/// </para>
/// </remarks>
public static float GetEntityHeight(int /* Entity */ entity, float X, float Y, float Z, bool atTop, bool inWorldCoords)
{
return Function.Call<float>((Hash)0x5A504562485944DD, entity, X, Y, Z, atTop, inWorldCoords);
}

/// <summary>
/// Return height (z-dimension) above ground. <br />Example: The pilot in a titan plane is 1.844176 above ground.<br /><br />How can i convert it to meters?<br />Everything seems to be in meters, probably this too.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DD55701034110E5<br />
/// </para>
/// </remarks>
public static float GetEntityHeightAboveGround(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x1DD55701034110E5, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xECB2FC7235A7D137<br />
/// </para>
/// </remarks>
public static void GetEntityMatrix(int /* Entity */ entity, ref Vector3 forwardVector, ref Vector3 rightVector, ref Vector3 upVector, ref Vector3 position)
{
var nativeAssistPointerVar0 = forwardVector;
var nativeAssistPointerVar1 = rightVector;
var nativeAssistPointerVar2 = upVector;
var nativeAssistPointerVar3 = position;
unsafe {
Function.Call((Hash)0xECB2FC7235A7D137, entity, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
forwardVector = nativeAssistPointerVar0;
rightVector = nativeAssistPointerVar1;
upVector = nativeAssistPointerVar2;
position = nativeAssistPointerVar3;
}

/// <summary>
/// Returns the model hash from the entity
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F47B058362C84B5<br />
/// </para>
/// </remarks>
public static uint GetEntityModel(int /* Entity */ entity)
{
return Function.Call<uint>((Hash)0x9F47B058362C84B5, entity);
}

/// <summary>
/// Converts world coords (posX - Z) to coords relative to the entity<br /><br />Example:<br />posX is given as 50<br />entity&apos;s x coord is 40<br />the returned x coord will then be 10 or -10, not sure haven&apos;t used this in a while (think it is 10 though).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2274BC1C4885E333<br />
/// </para>
/// </remarks>
public static Vector3 GetOffsetFromEntityGivenWorldCoords(int /* Entity */ entity, float posX, float posY, float posZ)
{
return Function.Call<Vector3>((Hash)0x2274BC1C4885E333, entity, posX, posY, posZ);
}

/// <summary>
/// Offset values are relative to the entity.<br /><br />x = left/right<br />y = forward/backward<br />z = up/down
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1899F328B0E12848<br />
/// </para>
/// </remarks>
public static Vector3 GetOffsetFromEntityInWorldCoords(int /* Entity */ entity, float offsetX, float offsetY, float offsetZ)
{
return Function.Call<Vector3>((Hash)0x1899F328B0E12848, entity, offsetX, offsetY, offsetZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD45DC2893621E1FE<br />
/// </para>
/// </remarks>
public static float GetEntityPitch(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0xD45DC2893621E1FE, entity);
}

/// <summary>
/// w is the correct parameter name!
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B3703D2D32DFA18<br />
/// </para>
/// </remarks>
public static void GetEntityQuaternion(int /* Entity */ entity, ref float x, ref float y, ref float z, ref float w)
{
var nativeAssistPointerVar0 = x;
var nativeAssistPointerVar1 = y;
var nativeAssistPointerVar2 = z;
var nativeAssistPointerVar3 = w;
unsafe {
Function.Call((Hash)0x7B3703D2D32DFA18, entity, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
x = nativeAssistPointerVar0;
y = nativeAssistPointerVar1;
z = nativeAssistPointerVar2;
w = nativeAssistPointerVar3;
}

/// <summary>
/// Displays the current ROLL axis of the entity [-180.0000/180.0000+]<br />(Sideways Roll) such as a vehicle tipped on its side
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x831E0242595560DF<br />
/// </para>
/// </remarks>
public static float GetEntityRoll(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x831E0242595560DF, entity);
}

/// <summary>
/// rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.<br /><br />rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.<br />What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.<br /><br />What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here&apos;s a picture for those of you who don&apos;t understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif<br /><br />Rotation Orders:<br />0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.<br />1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.<br />2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.<br />3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.<br />4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.<br />5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFBD61CC738D9EB9<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityRotation(int /* Entity */ entity, int rotationOrder)
{
return Function.Call<Vector3>((Hash)0xAFBD61CC738D9EB9, entity, rotationOrder);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x213B91045D09B983<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityRotationVelocity(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x213B91045D09B983, entity);
}

/// <summary>
/// Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6E9C38DB51D7748<br />
/// </para>
/// </remarks>
public static string GetEntityScript(int /* Entity */ entity, ref int /* ScrHandle* */ script)
{
var nativeAssistPointerVar0 = script;
string retVal;
unsafe {
retVal = Function.Call<string>((Hash)0xA6E9C38DB51D7748, entity, &nativeAssistPointerVar0);
}
script = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// result is in meters per second<br /><br />------------------------------------------------------------<br />So would the conversion to mph and km/h, be along the lines of this.<br /><br />float speed = GET_ENTITY_SPEED(veh);<br />float kmh = (speed * 3.6);<br />float mph = (speed * 2.236936);<br />------------------------------------------------------------
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5037BA82E12416F<br />
/// </para>
/// </remarks>
public static float GetEntitySpeed(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0xD5037BA82E12416F, entity);
}

/// <summary>
/// Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed). 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A8D700A51CB7B0D<br />
/// </para>
/// </remarks>
public static Vector3 GetEntitySpeedVector(int /* Entity */ entity, bool relative)
{
return Function.Call<Vector3>((Hash)0x9A8D700A51CB7B0D, entity, relative);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95EED5A694951F9F<br />
/// </para>
/// </remarks>
public static float GetEntityUprightValue(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0x95EED5A694951F9F, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4805D2B1D8CF94A9<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityVelocity(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x4805D2B1D8CF94A9, entity);
}

/// <summary>
/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7E3B9735C0F89D6<br />
/// </para>
/// </remarks>
public static int GetObjectIndexFromEntityIndex(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xD7E3B9735C0F89D6, entity);
}

/// <summary>
/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04A2A40C73395041<br />
/// </para>
/// </remarks>
public static int GetPedIndexFromEntityIndex(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x04A2A40C73395041, entity);
}

/// <summary>
/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B53F92932ADFAC0<br />
/// </para>
/// </remarks>
public static int GetVehicleIndexFromEntityIndex(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x4B53F92932ADFAC0, entity);
}

/// <summary>
/// Returns the coordinates of an entity-bone.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44A8FCB8ED227738<br />
/// </para>
/// </remarks>
public static Vector3 GetWorldPositionOfEntityBone(int /* Entity */ entity, int boneIndex)
{
return Function.Call<Vector3>((Hash)0x44A8FCB8ED227738, entity, boneIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7196842CB375CDB3<br />
/// </para>
/// </remarks>
public static Player GetNearestPlayerToEntity(int /* Entity */ entity)
{
return Function.Call<Player>((Hash)0x7196842CB375CDB3, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4DC9A62F844D9337<br />
/// </para>
/// </remarks>
public static Player GetNearestPlayerToEntityOnTeam(int /* Entity */ entity, int team)
{
return Function.Call<Player>((Hash)0x4DC9A62F844D9337, entity, team);
}

/// <summary>
/// Returns:<br />0 = no entity<br />1 = ped<br />2 = vehicle<br />3 = object
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8ACD366038D14505<br />
/// </para>
/// </remarks>
public static int GetEntityType(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x8ACD366038D14505, entity);
}

/// <summary>
/// A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6F5161F4534EDFF<br />
/// </para>
/// </remarks>
public static int GetEntityPopulationType(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xF6F5161F4534EDFF, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x731EC8A916BD11A1<br />
/// </para>
/// </remarks>
public static bool IsAnEntity(int /* ScrHandle */ handle)
{
return Function.Call<bool>((Hash)0x731EC8A916BD11A1, handle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x524AC5ECEA15343E<br />
/// </para>
/// </remarks>
public static bool IsEntityAPed(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x524AC5ECEA15343E, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A7B270912999B3C<br />
/// </para>
/// </remarks>
public static bool IsEntityAMissionEntity(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x0A7B270912999B3C, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6AC7003FA6E5575E<br />
/// </para>
/// </remarks>
public static bool IsEntityAVehicle(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x6AC7003FA6E5575E, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D68C8FD0FACA94E<br />
/// </para>
/// </remarks>
public static bool IsEntityAnObject(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x8D68C8FD0FACA94E, entity);
}

/// <summary>
/// Checks if entity is within x/y/zSize distance of x/y/z. <br /><br />Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20B60995556D004F<br />
/// </para>
/// </remarks>
public static bool IsEntityAtCoord(int /* Entity */ entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, bool p7, bool p8, int p9)
{
return Function.Call<bool>((Hash)0x20B60995556D004F, entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
}

/// <summary>
/// Checks if entity1 is within the box defined by x/y/zSize of entity2.<br /><br />Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x751B70C3D034E187<br />
/// </para>
/// </remarks>
public static bool IsEntityAtEntity(int /* Entity */ entity1, int /* Entity */ entity2, float xSize, float ySize, float zSize, bool p5, bool p6, int p7)
{
return Function.Call<bool>((Hash)0x751B70C3D034E187, entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
}

/// <summary>
/// Whether the entity is attached to any other entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB346476EF1A64897<br />
/// </para>
/// </remarks>
public static bool IsEntityAttached(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xB346476EF1A64897, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF511840CEEDE0CC<br />
/// </para>
/// </remarks>
public static bool IsEntityAttachedToAnyObject(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xCF511840CEEDE0CC, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1632E9A5F988D11<br />
/// </para>
/// </remarks>
public static bool IsEntityAttachedToAnyPed(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xB1632E9A5F988D11, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26AA915AD89BFB4B<br />
/// </para>
/// </remarks>
public static bool IsEntityAttachedToAnyVehicle(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x26AA915AD89BFB4B, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFBE71898A993728<br />
/// </para>
/// </remarks>
public static bool IsEntityAttachedToEntity(int /* Entity */ from, int /* Entity */ to)
{
return Function.Call<bool>((Hash)0xEFBE71898A993728, from, to);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F9532F3B5CC2551<br />
/// </para>
/// </remarks>
public static bool IsEntityDead(int /* Entity */ entity, bool p1)
{
return Function.Call<bool>((Hash)0x5F9532F3B5CC2551, entity, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x886E37EC497200B6<br />
/// </para>
/// </remarks>
public static bool IsEntityInAir(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x886E37EC497200B6, entity);
}

/// <summary>
/// `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``<br />`p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.<br />See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51210CED3DA1C78A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsEntityInAngledArea(int /* Entity */ entity, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ, int /* bug: Any */ p10)
{
return Function.Call<bool>((Hash)0x51210CED3DA1C78A, entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54736AA40E271165<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsEntityInArea(int /* Entity */ entity, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8, int /* bug: Any */ p9)
{
return Function.Call<bool>((Hash)0x54736AA40E271165, entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
}

/// <summary>
/// Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6463CF6AF527071<br />
/// </para>
/// </remarks>
public static bool IsEntityInZone(int /* Entity */ entity, string zone)
{
return Function.Call<bool>((Hash)0xB6463CF6AF527071, entity, zone);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFB0A0D8EDD145A3<br />
/// </para>
/// </remarks>
public static bool IsEntityInWater(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xCFB0A0D8EDD145A3, entity);
}

/// <summary>
/// Get how much of the entity is submerged.  1.0f is whole entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE81AFC1BC4CC41CE<br />
/// </para>
/// </remarks>
public static float GetEntitySubmergedLevel(int /* Entity */ entity)
{
return Function.Call<float>((Hash)0xE81AFC1BC4CC41CE, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x694E00132F2823ED<br />
/// </para>
/// </remarks>
public static void SetEntityRequiresMoreExpensiveRiverCheck(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x694E00132F2823ED, entity, toggle);
}

/// <summary>
/// Returns true if the entity is in between the minimum and maximum values for the 2d screen coords. <br />This means that it will return true even if the entity is behind a wall for example, as long as you&apos;re looking at their location. <br />Chipping
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE659E47AF827484B<br />
/// </para>
/// </remarks>
public static bool IsEntityOnScreen(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xE659E47AF827484B, entity);
}

/// <summary>
/// See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447<br /><br />Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), &quot;creatures@shark@move&quot;, &quot;attack_player&quot;, 3)<br /><br />p4 is always 3 in the scripts.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F0B79228E461EC9<br />
/// </para>
/// </remarks>
public static bool IsEntityPlayingAnim(int /* Entity */ entity, string animDict, string animName, int taskFlag)
{
return Function.Call<bool>((Hash)0x1F0B79228E461EC9, entity, animDict, animName, taskFlag);
}

/// <summary>
/// a static ped will not react to natives like &quot;APPLY_FORCE_TO_ENTITY&quot; or &quot;SET_ENTITY_VELOCITY&quot; and oftentimes will not react to task-natives like &quot;TASK::TASK_COMBAT_PED&quot;. The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.<br /><br />how can I make an entity static???
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1218E6886D3D8327<br />
/// </para>
/// </remarks>
public static bool IsEntityStatic(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x1218E6886D3D8327, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17FFC1B2BA35A494<br />
/// </para>
/// </remarks>
public static bool IsEntityTouchingEntity(int /* Entity */ entity, int /* Entity */ targetEntity)
{
return Function.Call<bool>((Hash)0x17FFC1B2BA35A494, entity, targetEntity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F42323798A58C8C<br />
/// </para>
/// </remarks>
public static bool IsEntityTouchingModel(int /* Entity */ entity, uint modelHash)
{
return Function.Call<bool>((Hash)0x0F42323798A58C8C, entity, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5333F526F6AB19AA<br />
/// </para>
/// </remarks>
public static bool IsEntityUpright(int /* Entity */ entity, float angle)
{
return Function.Call<bool>((Hash)0x5333F526F6AB19AA, entity, angle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DBD58820FA61D71<br />
/// </para>
/// </remarks>
public static bool IsEntityUpsidedown(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x1DBD58820FA61D71, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47D6F43D77935C75<br />
/// </para>
/// </remarks>
public static bool IsEntityVisible(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x47D6F43D77935C75, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD796CB5BA8F20E32<br />
/// </para>
/// </remarks>
public static bool IsEntityVisibleToScript(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xD796CB5BA8F20E32, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE31C2C72B8692B64<br />
/// </para>
/// </remarks>
public static bool IsEntityOccluded(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xE31C2C72B8692B64, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE5D2A122E09EC42<br />
/// </para>
/// </remarks>
public static bool WouldEntityBeOccluded(uint entityModelHash, float x, float y, float z, bool p4)
{
return Function.Call<bool>((Hash)0xEE5D2A122E09EC42, entityModelHash, x, y, z, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD05BFF0C0A12C68F<br />
/// </para>
/// </remarks>
public static bool IsEntityWaitingForWorldCollision(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xD05BFF0C0A12C68F, entity);
}

/// <summary>
/// Applies a force to the specified entity.<br /><br />**List of force types (p1)**:<br />public enum ForceType<br />{<br />    MinForce = 0,<br />    MaxForceRot = 1,<br />    MinForce2 = 2,<br />    MaxForceRot2 = 3,<br />    ForceNoRot = 4,<br />    ForceRotPlusForce = 5<br />}<br />Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.<br /><br />p6/relative - makes the xyz force not relative to world coords, but to something else<br />p7/highForce - setting false will make the force really low
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18FF00FC7EFF559E<br />
/// </para>
/// </remarks>
public static void ApplyForceToEntityCenterOfMass(int /* Entity */ entity, int forceType, float x, float y, float z, bool p5, bool isDirectionRel, bool isForceRel, bool p8)
{
Function.Call((Hash)0x18FF00FC7EFF559E, entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
}

/// <summary>
/// Documented here:<br />gtaforums.com/topic/885669-precisely-define-object-physics/<br />gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/<br /><br />forceFlags:<br />First bit (lowest): Strong force flag, factor 100<br />Second bit: Unkown flag<br />Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)<br />If higher bits are unequal 0 the function doesn&apos;t applay any forces at all.<br />(As integer possible values are 0-7)<br /><br />0: weak force<br />1: strong force<br />2: same as 0 (2nd bit?)<br />3: same as 1<br />4: weak momentum<br />5: strong momentum<br />6: same as 4<br />7: same as 5<br /><br />isLocal: vector defined in local (body-fixed) coordinate frame<br />isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.<br /><br />p8 !!! Whenever I set this !=0, my script stopped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5F68BE9613E2D18<br />
/// </para>
/// </remarks>
public static void ApplyForceToEntity(int /* Entity */ entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13)
{
Function.Call((Hash)0xC5F68BE9613E2D18, entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
}

/// <summary>
/// Attaches entity1 to bone (boneIndex) of entity2.<br /><br />boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2&apos;s centre if bone index given doesn&apos;t correspond to bone indexes for that entity type.<br /><br />useSoftPinning - if set to false attached entity will not detach when fixed<br />collision - controls collision between the two entities (FALSE disables collision).<br />isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)<br />vertexIndex - position of vertex<br />fixedRot - if false it ignores entity vector <br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B9BBD38AB0796DF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AttachEntityToEntity(int /* Entity */ entity1, int /* Entity */ entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot, int /* bug: Any */ p15)
{
Function.Call((Hash)0x6B9BBD38AB0796DF, entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x5C48B75732C8456C<br />
/// </para>
/// </remarks>
public static void AttachEntityBoneToEntityBone(int /* Entity */ entity1, int /* Entity */ entity2, int boneIndex1, int boneIndex2, bool p4, bool p5)
{
Function.Call((Hash)0x5C48B75732C8456C, entity1, entity2, boneIndex1, boneIndex2, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xFD1695C5D3B05439<br />
/// </para>
/// </remarks>
public static void AttachEntityBoneToEntityBoneYForward(int /* Entity */ entity1, int /* Entity */ entity2, int boneIndex1, int boneIndex2, bool p4, bool p5)
{
Function.Call((Hash)0xFD1695C5D3B05439, entity1, entity2, boneIndex1, boneIndex2, p4, p5);
}

/// <summary>
/// breakForce is the amount of force required to break the bond.<br />p14 - is always 1 in scripts<br />p15 - is 1 or 0 in scripts - unknoun what it does<br />p16 - controls collision between the two entities (FALSE disables collision).<br />p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)<br />p18 - is always 2 in scripts.<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3675780C92F90F9<br />
/// </para>
/// </remarks>
public static void AttachEntityToEntityPhysically(int /* Entity */ entity1, int /* Entity */ entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, bool fixedRot, bool p15, bool collision, bool p17, int p18)
{
Function.Call((Hash)0xC3675780C92F90F9, entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);
}

/// <summary>
/// Called to update entity attachments.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4080490ADC51C6F<br />
/// </para>
/// </remarks>
public static void ProcessEntityAttachments(int /* Entity */ entity)
{
Function.Call((Hash)0xF4080490ADC51C6F, entity);
}

/// <summary>
/// Returns the index of the bone. If the bone was not found, -1 will be returned. <br /><br />list:<br />https://pastebin.com/D7JMnX1g<br /><br />BoneNames:<br />  chassis,<br />  windscreen,<br />   seat_pside_r,<br /> seat_dside_r,<br /> bodyshell,<br />    suspension_lm,<br />    suspension_lr,<br />    platelight,<br />   attach_female,<br />    attach_male,<br />  bonnet,<br />   boot,<br /> chassis_dummy,  //Center of the dummy<br /> chassis_Control,    //Not found yet<br />   door_dside_f,   //Door left, front<br />    door_dside_r,   //Door left, back<br /> door_pside_f,   //Door right, front<br />   door_pside_r,   //Door right, back<br />    Gun_GripR,<br />    windscreen_f,<br /> platelight, //Position where the light above the numberplate is located<br />   VFX_Emitter,<br />  window_lf,  //Window left, front<br />  window_lr,  //Window left, back<br />   window_rf,  //Window right, front<br /> window_rr,  //Window right, back<br />  engine, //Position of the engine<br />  gun_ammo,<br /> ROPE_ATTATCH,   //Not misspelled. In script &quot;finale_heist2b.c4&quot;.<br />    wheel_lf,   //Wheel left, front<br />   wheel_lr,   //Wheel left, back<br />    wheel_rf,   //Wheel right, front<br />  wheel_rr,   //Wheel right, back<br />   exhaust,    //Exhaust. shows only the position of the stock-exhaust<br />   overheat,   //A position on the engine(not exactly sure, how to name it)<br />  misc_e, //Not a car-bone.<br /> seat_dside_f,   //Driver-seat<br /> seat_pside_f,   //Seat next to driver<br /> Gun_Nuzzle,<br />   seat_r<br /><br />I doubt that the function is case-sensitive, since I found a &quot;Chassis&quot; and a &quot;chassis&quot;. - Just tested: Definitely not case-sensitive.<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB71170B7E76ACBA<br />
/// </para>
/// </remarks>
public static int GetEntityBoneIndexByName(int /* Entity */ entity, string boneName)
{
return Function.Call<int>((Hash)0xFB71170B7E76ACBA, entity, boneName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA72CD9CA74A5ECBA<br />
/// </para>
/// </remarks>
public static void ClearEntityLastDamageEntity(int /* Entity */ entity)
{
Function.Call((Hash)0xA72CD9CA74A5ECBA, entity);
}

/// <summary>
/// Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE3CBE5BF394C9C9<br />
/// </para>
/// </remarks>
public static void DeleteEntity(ref int /* Entity* */ entity)
{
var nativeAssistPointerVar0 = entity;
unsafe {
Function.Call((Hash)0xAE3CBE5BF394C9C9, &nativeAssistPointerVar0);
}
entity = nativeAssistPointerVar0;
}

/// <summary>
/// If `collision` is set to true, both entities won&apos;t collide with the other until the distance between them is above 4 meters.<br />Set `dynamic` to true to keep velocity after dettaching
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x961AC54BF0613F5D<br />
/// </para>
/// </remarks>
public static void DetachEntity(int /* Entity */ entity, bool dynamic, bool collision)
{
Function.Call((Hash)0x961AC54BF0613F5D, entity, dynamic, collision);
}

/// <summary>
/// Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x428CA6DBD1094446<br />
/// </para>
/// </remarks>
public static void FreezeEntityPosition(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x428CA6DBD1094446, entity, toggle);
}

/// <summary>
/// True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.<br /><br />&quot;Allow Freeze If No Collision&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3910051CCECDB00C<br />
/// </para>
/// </remarks>
public static void SetEntityShouldFreezeWaitingOnCollision(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x3910051CCECDB00C, entity, toggle);
}

/// <summary>
/// delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.<br /><br />The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually &lt;1.0f values.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FB218262B810701<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PlayEntityAnim(int /* Entity */ entity, string animName, string animDict, float p3, bool loop, bool stayInAnim, bool p6, float delta, int /* bug: Any */ bitset)
{
return Function.Call<bool>((Hash)0x7FB218262B810701, entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
}

/// <summary>
/// p4 and p7 are usually 1000.0f.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC77720A12FE14A86<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PlaySynchronizedEntityAnim(int /* Entity */ entity, int syncedScene, string animation, string propName, float p4, float p5, int /* bug: Any */ p6, float p7)
{
return Function.Call<bool>((Hash)0xC77720A12FE14A86, entity, syncedScene, animation, propName, p4, p5, p6, p7);
}

/// <summary>
/// p6,p7 probably animname and animdict<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9C54555ED30FBC4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool PlaySynchronizedMapEntityAnim(float x1, float y1, float z1, float x2, int /* bug: Any */ y2, float z2, string p6, string p7, float p8, float p9, int /* bug: Any */ p10, float p11)
{
return Function.Call<bool>((Hash)0xB9C54555ED30FBC4, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10, p11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11E79CAB7183B6F5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StopSynchronizedMapEntityAnim(float x1, float y1, float z1, float x2, int /* bug: Any */ y2, float z2)
{
return Function.Call<bool>((Hash)0x11E79CAB7183B6F5, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28004F88151E03E0<br />
/// </para>
/// </remarks>
public static bool StopEntityAnim(int /* Entity */ entity, string animation, string animGroup, float p3)
{
return Function.Call<bool>((Hash)0x28004F88151E03E0, entity, animation, animGroup, p3);
}

/// <summary>
/// p1 sync task id?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43D3807C077261E3<br />
/// </para>
/// </remarks>
public static bool StopSynchronizedEntityAnim(int /* Entity */ entity, float p1, bool p2)
{
return Function.Call<bool>((Hash)0x43D3807C077261E3, entity, p1, p2);
}

/// <summary>
/// if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;CreateObject&quot;)))
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAF4CD9EA3E7E922<br />
/// </para>
/// </remarks>
public static bool HasAnimEventFired(int /* Entity */ entity, uint actionHash)
{
return Function.Call<bool>((Hash)0xEAF4CD9EA3E7E922, entity, actionHash);
}

/// <summary>
/// In the script &quot;player_scene_t_bbfight.c4&quot;:<br />&quot;if (ENTITY::FIND_ANIM_EVENT_PHASE(&amp;l_16E, &amp;l_19F[v_4/*16*/], v_9, &amp;v_A, &amp;v_B))&quot;<br />-- &amp;l_16E (p0) is requested as an anim dictionary earlier in the script.<br />-- &amp;l_19F[v_4/*16*/] (p1) is used in other natives in the script as the &quot;animation&quot; param.<br />-- v_9 (p2) is instantiated as &quot;victim_fall&quot;; I&apos;m guessing that&apos;s another anim<br />--v_A and v_B (p3 &amp; p4) are both set as -1.0, but v_A is used immediately after this native for: <br />&quot;if (v_A &lt; ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))&quot;<br />Both v_A and v_B are seemingly used to contain both Vector3&apos;s and floats, so I can&apos;t say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07F1BE2BCCAA27A7<br />
/// </para>
/// </remarks>
public static bool FindAnimEventPhase(string animDictionary, string animName, string p2, int /* bug: structure */ p3, int /* bug: structure */ p4)
{
return Function.Call<bool>((Hash)0x07F1BE2BCCAA27A7, animDictionary, animName, p2, p3, p4);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4487C259F0F70977<br />
/// </para>
/// </remarks>
public static void SetEntityAnimCurrentTime(int /* Entity */ entity, string animDictionary, string animName, float time)
{
Function.Call((Hash)0x4487C259F0F70977, entity, animDictionary, animName, time);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28D1A16553C51776<br />
/// </para>
/// </remarks>
public static void SetEntityAnimSpeed(int /* Entity */ entity, string animDictionary, string animName, float speedMultiplier)
{
Function.Call((Hash)0x28D1A16553C51776, entity, animDictionary, animName, speedMultiplier);
}

/// <summary>
/// Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.<br /><br />p1 has no effect when either its on or off <br />maybe a quick disassembly will tell us what it does<br /><br />p2 has no effect when either its on or off <br />maybe a quick disassembly will tell us what it does
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD738C3085FE7E11<br />
/// </para>
/// </remarks>
public static void SetEntityAsMissionEntity(int /* Entity */ entity, bool p1, bool p2)
{
Function.Call((Hash)0xAD738C3085FE7E11, entity, p1, p2);
}

/// <summary>
/// Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.<br />If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.<br />Entities marked as no longer needed, will be deleted as the engine sees fit.<br />Use this if you just want to just let the game delete the ped:<br />void MarkPedAsAmbientPed(Ped ped) {<br />  auto addr = getScriptHandleBaseAddress(ped);<br /><br />  if (!addr) {<br />    return;<br />  }<br /><br />  //the game uses only lower 4 bits as entity population type <br />  BYTE origValue = *(BYTE *)(addr + 0xDA);<br />  *(BYTE *)(addr + 0xDA) = ((origValue &amp; 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB736A491E64A32CF<br />
/// </para>
/// </remarks>
public static void SetEntityAsNoLongerNeeded(ref int /* Entity* */ entity)
{
var nativeAssistPointerVar0 = entity;
unsafe {
Function.Call((Hash)0xB736A491E64A32CF, &nativeAssistPointerVar0);
}
entity = nativeAssistPointerVar0;
}

/// <summary>
/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2595DD4236549CE3<br />
/// </para>
/// </remarks>
public static void SetPedAsNoLongerNeeded(ref int /* Ped* */ ped)
{
var nativeAssistPointerVar0 = ped;
unsafe {
Function.Call((Hash)0x2595DD4236549CE3, &nativeAssistPointerVar0);
}
ped = nativeAssistPointerVar0;
}

/// <summary>
/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x629BFA74418D6239<br />
/// </para>
/// </remarks>
public static void SetVehicleAsNoLongerNeeded(ref int /* Vehicle* */ vehicle)
{
var nativeAssistPointerVar0 = vehicle;
unsafe {
Function.Call((Hash)0x629BFA74418D6239, &nativeAssistPointerVar0);
}
vehicle = nativeAssistPointerVar0;
}

/// <summary>
/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3AE22DEB5BA5A3E6<br />
/// </para>
/// </remarks>
public static void SetObjectAsNoLongerNeeded(ref int /* Object* */ @object)
{
var nativeAssistPointerVar0 = @object;
unsafe {
Function.Call((Hash)0x3AE22DEB5BA5A3E6, &nativeAssistPointerVar0);
}
@object = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1760FFA8AB074D66<br />
/// </para>
/// </remarks>
public static void SetEntityCanBeDamaged(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x1760FFA8AB074D66, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xD95CC5D2AB15A09F<br />
/// </para>
/// </remarks>
public static bool GetEntityCanBeDamaged(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xD95CC5D2AB15A09F, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE22D8FDE858B8119<br />
/// </para>
/// </remarks>
public static void SetEntityCanBeDamagedByRelationshipGroup(int /* Entity */ entity, bool bCanBeDamaged, int relGroup)
{
Function.Call((Hash)0xE22D8FDE858B8119, entity, bCanBeDamaged, relGroup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x352E2B5CF420BF3B<br />
/// </para>
/// </remarks>
public static void SetEntityCanOnlyBeDamagedByScriptParticipants(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x352E2B5CF420BF3B, entity, toggle);
}

/// <summary>
/// Sets whether the entity can be targeted without being in line-of-sight.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3997889736FD899<br />
/// </para>
/// </remarks>
public static void SetEntityCanBeTargetedWithoutLos(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xD3997889736FD899, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A9205C1B9EE827F<br />
/// </para>
/// </remarks>
public static void SetEntityCollision(int /* Entity */ entity, bool toggle, bool keepPhysics)
{
Function.Call((Hash)0x1A9205C1B9EE827F, entity, toggle, keepPhysics);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCF1E97BEFDAE480<br />
/// </para>
/// </remarks>
public static bool GetEntityCollisionDisabled(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xCCF1E97BEFDAE480, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9EBC85ED0FFFE51C<br />
/// </para>
/// </remarks>
public static void SetEntityCompletelyDisableCollision(int /* Entity */ entity, bool toggle, bool keepPhysics)
{
Function.Call((Hash)0x9EBC85ED0FFFE51C, entity, toggle, keepPhysics);
}

/// <summary>
/// p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities. <br /> <br />Often ends with 1, 0, 0, 1); in the scripts. It works. <br /><br />Axis - Invert Axis Flags
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06843DA7060A026B<br />
/// </para>
/// </remarks>
public static void SetEntityCoords(int /* Entity */ entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea)
{
Function.Call((Hash)0x06843DA7060A026B, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x621873ECE1178967<br />
/// </para>
/// </remarks>
public static void SetEntityCoordsWithoutPlantsReset(int /* Entity */ entity, float xPos, float yPos, float zPos, bool alive, bool deadFlag, bool ragdollFlag, bool clearArea)
{
Function.Call((Hash)0x621873ECE1178967, entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
}

/// <summary>
/// Axis - Invert Axis Flags
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x239A3351AC1DA385<br />
/// </para>
/// </remarks>
public static void SetEntityCoordsNoOffset(int /* Entity */ entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis)
{
Function.Call((Hash)0x239A3351AC1DA385, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1718DE8E3F2823CA<br />
/// </para>
/// </remarks>
public static void SetEntityDynamic(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x1718DE8E3F2823CA, entity, toggle);
}

/// <summary>
/// Set the heading of an entity in degrees also known as &quot;Yaw&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E2530AA8ADA980E<br />
/// </para>
/// </remarks>
public static void SetEntityHeading(int /* Entity */ entity, float heading)
{
Function.Call((Hash)0x8E2530AA8ADA980E, entity, heading);
}

/// <summary>
/// health &gt;= 0<br />male ped ~= 100 - 200<br />female ped ~= 0 - 100
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B76DC1F3AE6E6A3<br />
/// </para>
/// </remarks>
public static void SetEntityHealth(int /* Entity */ entity, int health, int p2)
{
Function.Call((Hash)0x6B76DC1F3AE6E6A3, entity, health, p2);
}

/// <summary>
/// Sets a ped or an object totally invincible. It doesn&apos;t take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won&apos;t apply either.<br /><br />If you use this for a ped and you want Ragdoll to stay enabled, then do:<br />*(DWORD *)(pedAddress + 0x188) |= (1 &lt;&lt; 9);<br /><br />Use this if you want to get the invincibility status:<br />  bool IsPedInvincible(Ped ped)<br /> {<br />     auto addr = getScriptHandleBaseAddress(ped);    <br /><br />        if (addr)<br />     {<br />         DWORD flag = *(DWORD *)(addr + 0x188);<br />            return ((flag &amp; (1 &lt;&lt; 8)) != 0) || ((flag &amp; (1 &lt;&lt; 9)) != 0);<br />      }<br /><br />       return false;<br /> }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3882114BDE571AD4<br />
/// </para>
/// </remarks>
public static void SetEntityInvincible(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x3882114BDE571AD4, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA02E132F5C68722<br />
/// </para>
/// </remarks>
public static void SetEntityIsTargetPriority(int /* Entity */ entity, bool p1, float p2)
{
Function.Call((Hash)0xEA02E132F5C68722, entity, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CFBA6A80BDF3874<br />
/// </para>
/// </remarks>
public static void SetEntityLights(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x7CFBA6A80BDF3874, entity, toggle);
}

/// <summary>
/// Loads collision grid for an entity spawned outside of a player&apos;s loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.<br />Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0DC7CABAB1E9B67E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetEntityLoadCollisionFlag(int /* Entity */ entity, bool toggle, int /* bug: Any */ p2)
{
Function.Call((Hash)0x0DC7CABAB1E9B67E, entity, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE9676F61BC0B3321<br />
/// </para>
/// </remarks>
public static bool HasCollisionLoadedAroundEntity(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xE9676F61BC0B3321, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E46A3FCBDE2A1B1<br />
/// </para>
/// </remarks>
public static void SetEntityMaxSpeed(int /* Entity */ entity, float speed)
{
Function.Call((Hash)0x0E46A3FCBDE2A1B1, entity, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79F020FF9EDC0748<br />
/// </para>
/// </remarks>
public static void SetEntityOnlyDamagedByPlayer(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x79F020FF9EDC0748, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7022BD828FA0B082<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetEntityOnlyDamagedByRelationshipGroup(int /* Entity */ entity, bool p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x7022BD828FA0B082, entity, p1, p2);
}

/// <summary>
/// Enable / disable each type of damage.<br /><br />waterProof is damage related to water not drowning<br />--------------<br />p7 is to to &apos;1&apos; in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0-&gt;f_19, true, true, true, true, true, true, 1, true);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAEE099C6F890BB8<br />
/// </para>
/// </remarks>
public static void SetEntityProofs(int /* Entity */ entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool steamProof, bool p7, bool waterProof)
{
Function.Call((Hash)0xFAEE099C6F890BB8, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xBE8CD9BE829BBEBF<br />
/// </para>
/// </remarks>
public static bool GetEntityProofs(int /* Entity */ entity, ref bool bulletProof, ref bool fireProof, ref bool explosionProof, ref bool collisionProof, ref bool meleeProof, ref bool steamProof, ref bool p7, ref bool drownProof)
{
var nativeAssistPointerVar0 = bulletProof;
var nativeAssistPointerVar1 = fireProof;
var nativeAssistPointerVar2 = explosionProof;
var nativeAssistPointerVar3 = collisionProof;
var nativeAssistPointerVar4 = meleeProof;
var nativeAssistPointerVar5 = steamProof;
var nativeAssistPointerVar6 = p7;
var nativeAssistPointerVar7 = drownProof;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xBE8CD9BE829BBEBF, entity, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3, &nativeAssistPointerVar4, &nativeAssistPointerVar5, &nativeAssistPointerVar6, &nativeAssistPointerVar7);
}
bulletProof = nativeAssistPointerVar0;
fireProof = nativeAssistPointerVar1;
explosionProof = nativeAssistPointerVar2;
collisionProof = nativeAssistPointerVar3;
meleeProof = nativeAssistPointerVar4;
steamProof = nativeAssistPointerVar5;
p7 = nativeAssistPointerVar6;
drownProof = nativeAssistPointerVar7;
return retVal;
}

/// <summary>
/// w is the correct parameter name!
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77B21BE7AC540F07<br />
/// </para>
/// </remarks>
public static void SetEntityQuaternion(int /* Entity */ entity, float x, float y, float z, float w)
{
Function.Call((Hash)0x77B21BE7AC540F07, entity, x, y, z, w);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A50A1EEDAD01E65<br />
/// </para>
/// </remarks>
public static void SetEntityRecordsCollisions(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x0A50A1EEDAD01E65, entity, toggle);
}

/// <summary>
/// rotationOrder refers to the order yaw pitch roll is applied<br />value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation. <br />Unsure what value corresponds to what rotation order, more testing will be needed for that.<br />For the most part R* uses 1 or 2 as the order.<br />p5 is usually set as true<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8524A8B0171D5E07<br />
/// </para>
/// </remarks>
public static void SetEntityRotation(int /* Entity */ entity, float pitch, float roll, float yaw, int rotationOrder, bool p5)
{
Function.Call((Hash)0x8524A8B0171D5E07, entity, pitch, roll, yaw, rotationOrder, p5);
}

/// <summary>
/// unk was always 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA1C610A04DB6BBB<br />
/// </para>
/// </remarks>
public static void SetEntityVisible(int /* Entity */ entity, bool toggle, bool unk)
{
Function.Call((Hash)0xEA1C610A04DB6BBB, entity, toggle, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xC34BC448DA29F5E9<br />
/// </para>
/// </remarks>
public static void SetEntityWaterReflectionFlag(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xC34BC448DA29F5E9, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xE66377CDDADA4810<br />
/// </para>
/// </remarks>
public static void SetEntityMirrorReflectionFlag(int /* Entity */ entity, bool p1)
{
Function.Call((Hash)0xE66377CDDADA4810, entity, p1);
}

/// <summary>
/// Note that the third parameter(denoted as z) is &quot;up and down&quot; with positive numbers encouraging upwards movement.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C99BB7B6E96D16F<br />
/// </para>
/// </remarks>
public static void SetEntityVelocity(int /* Entity */ entity, float x, float y, float z)
{
Function.Call((Hash)0x1C99BB7B6E96D16F, entity, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x8339643499D1222E<br />
/// </para>
/// </remarks>
public static void SetEntityAngularVelocity(int /* Entity */ entity, float x, float y, float z)
{
Function.Call((Hash)0x8339643499D1222E, entity, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A4722448F18EEF5<br />
/// </para>
/// </remarks>
public static void SetEntityHasGravity(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x4A4722448F18EEF5, entity, toggle);
}

/// <summary>
/// LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5927F96A78577363<br />
/// </para>
/// </remarks>
public static void SetEntityLodDist(int /* Entity */ entity, int value)
{
Function.Call((Hash)0x5927F96A78577363, entity, value);
}

/// <summary>
/// Returns the LOD distance of an entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4159C2762B5791D6<br />
/// </para>
/// </remarks>
public static int GetEntityLodDist(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x4159C2762B5791D6, entity);
}

/// <summary>
/// skin - everything alpha except skin<br />Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44A0870B7E92D7C0<br />
/// </para>
/// </remarks>
public static void SetEntityAlpha(int /* Entity */ entity, int alphaLevel, bool skin)
{
Function.Call((Hash)0x44A0870B7E92D7C0, entity, alphaLevel, skin);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A47B3B5E63E94C6<br />
/// </para>
/// </remarks>
public static int GetEntityAlpha(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x5A47B3B5E63E94C6, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B1E824FFBB7027A<br />
/// </para>
/// </remarks>
public static void ResetEntityAlpha(int /* Entity */ entity)
{
Function.Call((Hash)0x9B1E824FFBB7027A, entity);
}

/// <summary>
/// Similar to RESET_ENTITY_ALPHA
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x490861B88F4FD846<br />
/// </para>
/// </remarks>
public static void ResetPickupEntityGlow(int /* Entity */ entity)
{
Function.Call((Hash)0x490861B88F4FD846, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xCEA7C8E1B48FF68C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPickupCollidesWithProjectiles(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xCEA7C8E1B48FF68C, p0, p1);
}

/// <summary>
/// Only called once in the scripts.<br /><br />Related to weapon objects.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C3B791D580E0BC2<br />
/// </para>
/// </remarks>
public static void SetEntitySortBias(int /* Entity */ entity, float p1)
{
Function.Call((Hash)0x5C3B791D580E0BC2, entity, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACAD101E1FB66689<br />
/// </para>
/// </remarks>
public static void SetEntityAlwaysPrerender(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xACAD101E1FB66689, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x730F5F8D3F0F2050<br />
/// </para>
/// </remarks>
public static void SetEntityRenderScorched(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x730F5F8D3F0F2050, entity, toggle);
}

/// <summary>
/// Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340<br /><br />0 = green<br />1 = red<br />2 = yellow<br />3 = reset changes<br />changing lights may not change the behavior of vehicles
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57C5DB656185EAC4<br />
/// </para>
/// </remarks>
public static void SetEntityTrafficlightOverride(int /* Entity */ entity, int state)
{
Function.Call((Hash)0x57C5DB656185EAC4, entity, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78E8E3A640178255<br />
/// </para>
/// </remarks>
public static void SetEntityIsInVehicle(int /* Entity */ entity)
{
Function.Call((Hash)0x78E8E3A640178255, entity);
}

/// <summary>
/// Only works with objects!
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92C47782FDA8B2A3<br />
/// </para>
/// </remarks>
public static void CreateModelSwap(float x, float y, float z, float radius, uint originalModel, uint newModel, bool p6)
{
Function.Call((Hash)0x92C47782FDA8B2A3, x, y, z, radius, originalModel, newModel, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x033C0F9A64E229AE<br />
/// </para>
/// </remarks>
public static void RemoveModelSwap(float x, float y, float z, float radius, uint originalModel, uint newModel, bool p6)
{
Function.Call((Hash)0x033C0F9A64E229AE, x, y, z, radius, originalModel, newModel, p6);
}

/// <summary>
/// p5 = sets as true in scripts<br />Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.<br /><br />Network players do not see changes done with this.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A97BCA30A0CE478<br />
/// </para>
/// </remarks>
public static void CreateModelHide(float x, float y, float z, float radius, uint modelHash, bool p5)
{
Function.Call((Hash)0x8A97BCA30A0CE478, x, y, z, radius, modelHash, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A52AE588830BF7F<br />
/// </para>
/// </remarks>
public static void CreateModelHideExcludingScriptObjects(float x, float y, float z, float radius, uint modelHash, bool p5)
{
Function.Call((Hash)0x3A52AE588830BF7F, x, y, z, radius, modelHash, p5);
}

/// <summary>
/// This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.<br />p5 should be false, true does nothing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9E3006FB3CBD765<br />
/// </para>
/// </remarks>
public static void RemoveModelHide(float x, float y, float z, float radius, uint modelHash, bool p5)
{
Function.Call((Hash)0xD9E3006FB3CBD765, x, y, z, radius, modelHash, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x150E808B375A385A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void CreateForcedObject(float x, float y, float z, int /* bug: Any */ p3, uint modelHash, bool p5)
{
Function.Call((Hash)0x150E808B375A385A, x, y, z, p3, modelHash, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61B6775E83C0DB6F<br />
/// </para>
/// </remarks>
public static void RemoveForcedObject(float x, float y, float z, float p3, uint modelHash)
{
Function.Call((Hash)0x61B6775E83C0DB6F, x, y, z, p3, modelHash);
}

/// <summary>
/// Calling this function disables collision between two entities.<br />The importance of the order for entity1 and entity2 is unclear.<br />The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it&apos;s just this frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA53ED5520C07654A<br />
/// </para>
/// </remarks>
public static void SetEntityNoCollisionEntity(int /* Entity */ entity1, int /* Entity */ entity2, bool thisFrameOnly)
{
Function.Call((Hash)0xA53ED5520C07654A, entity1, entity2, thisFrameOnly);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x295D82A8559F9150<br />
/// </para>
/// </remarks>
public static void SetEntityMotionBlur(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x295D82A8559F9150, entity, toggle);
}

/// <summary>
/// p1 always false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE12ABE5E3A389A6C<br />
/// </para>
/// </remarks>
public static void SetCanAutoVaultOnEntity(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xE12ABE5E3A389A6C, entity, toggle);
}

/// <summary>
/// p1 always false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA80AE305E0A3044F<br />
/// </para>
/// </remarks>
public static void SetCanClimbOnEntity(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xA80AE305E0A3044F, entity, toggle);
}

/// <summary>
/// Only called within 1 script for x360. &apos;fm_mission_controller&apos; and it used on an object. <br /><br />Ran after these 2 natives,<br />set_object_targettable(uParam0, 0);<br />set_entity_invincible(uParam0, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC6F8601FAF2E893<br />
/// </para>
/// </remarks>
public static void SetWaitForCollisionsBeforeProbe(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xDC6F8601FAF2E893, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C2E3DC128F44309<br />
/// </para>
/// </remarks>
public static void SetEntityNoweapondecals(int /* Entity */ entity, bool p1)
{
Function.Call((Hash)0x2C2E3DC128F44309, entity, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A092BB0C3808B96<br />
/// </para>
/// </remarks>
public static void SetEntityUseMaxDistanceForWaterReflection(int /* Entity */ entity, bool p1)
{
Function.Call((Hash)0x1A092BB0C3808B96, entity, p1);
}

/// <summary>
/// Gets the world rotation of the specified bone of the specified entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xCE6294A232D03786<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityBoneRotation(int /* Entity */ entity, int boneIndex)
{
return Function.Call<Vector3>((Hash)0xCE6294A232D03786, entity, boneIndex);
}

/// <summary>
/// Gets the world position of the specified bone of the specified entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x46F8696933A63C9B<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityBonePostion(int /* Entity */ entity, int boneIndex)
{
return Function.Call<Vector3>((Hash)0x46F8696933A63C9B, entity, boneIndex);
}

/// <summary>
/// Gets the local rotation of the specified bone of the specified entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xBD8D32550E5CEBFE<br />
/// </para>
/// </remarks>
public static Vector3 GetEntityBoneObjectRotation(int /* Entity */ entity, int boneIndex)
{
return Function.Call<Vector3>((Hash)0xBD8D32550E5CEBFE, entity, boneIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xB328DCC3A3AA401B<br />
/// </para>
/// </remarks>
public static int GetEntityBoneCount(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xB328DCC3A3AA401B, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x6CE177D014502E8A<br />
/// </para>
/// </remarks>
public static void EnableEntityBulletCollision(int /* Entity */ entity)
{
Function.Call((Hash)0x6CE177D014502E8A, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xB17BC6453F6CF5AC<br />
/// </para>
/// </remarks>
public static void SetEntityCanOnlyBeDamagedByEntity(int /* Entity */ entity1, int /* Entity */ entity2)
{
Function.Call((Hash)0xB17BC6453F6CF5AC, entity1, entity2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x68B562E124CC0AEF<br />
/// </para>
/// </remarks>
public static void SetEntityCantCauseCollisionDamagedEntity(int /* Entity */ entity1, int /* Entity */ entity2)
{
Function.Call((Hash)0x68B562E124CC0AEF, entity1, entity2);
}

/// <summary>
/// p1 is always set to 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x36F32DE87082343E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAllowMigrateToSpectator(int /* Entity */ entity, int /* bug: Any */ p1)
{
Function.Call((Hash)0x36F32DE87082343E, entity, p1);
}

/// <summary>
/// Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.<br /> This native does not appear to have anything to do with pickups as in scripts it is used with objects.<br /><br />Example from fm_mission_controller_2020.c:<br /><br />iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0-&gt;f_9, joaat(&quot;p_cs_clipboard&quot;));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x1F922734E259BD26<br />
/// </para>
/// </remarks>
public static int GetEntityOfTypeAttachedToEntity(int /* Entity */ entity, uint modelHash)
{
return Function.Call<int>((Hash)0x1F922734E259BD26, entity, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xD7B80E7C3BEFC396<br />
/// </para>
/// </remarks>
public static void SetPickUpByCargobobDisabled(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xD7B80E7C3BEFC396, entity, toggle);
}

#endregion
#region EVENT
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB604A2942ADED0EE<br />
/// </para>
/// </remarks>
public static void SetDecisionMaker(int /* Ped */ ped, uint name)
{
Function.Call((Hash)0xB604A2942ADED0EE, ped, name);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4FC9381A7AEE8968<br />
/// </para>
/// </remarks>
public static void ClearDecisionMakerEventResponse(uint name, int eventType)
{
Function.Call((Hash)0x4FC9381A7AEE8968, name, eventType);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt<br /><br />This is limited to 4 blocked events at a time.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE42FCDFD0E4196F7<br />
/// </para>
/// </remarks>
public static void BlockDecisionMakerEvent(uint name, int eventType)
{
Function.Call((Hash)0xE42FCDFD0E4196F7, name, eventType);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7CD9CF34F2C99E8<br />
/// </para>
/// </remarks>
public static void UnblockDecisionMakerEvent(uint name, int eventType)
{
Function.Call((Hash)0xD7CD9CF34F2C99E8, name, eventType);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9F8455409B525E9<br />
/// </para>
/// </remarks>
public static int AddShockingEventAtPosition(int eventType, float x, float y, float z, float duration)
{
return Function.Call<int>((Hash)0xD9F8455409B525E9, eventType, x, y, z, duration);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FD8F3BE76F89422<br />
/// </para>
/// </remarks>
public static int AddShockingEventForEntity(int eventType, int /* Entity */ entity, float duration)
{
return Function.Call<int>((Hash)0x7FD8F3BE76F89422, eventType, entity, duration);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1374ABB7C15BAB92<br />
/// </para>
/// </remarks>
public static bool IsShockingEventInSphere(int eventType, float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0x1374ABB7C15BAB92, eventType, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CDA538C44C6CCE5<br />
/// </para>
/// </remarks>
public static bool RemoveShockingEvent(int /* ScrHandle */ @event)
{
return Function.Call<bool>((Hash)0x2CDA538C44C6CCE5, @event);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAABE8FDFA21274C<br />
/// </para>
/// </remarks>
public static void RemoveAllShockingEvents(bool p0)
{
Function.Call((Hash)0xEAABE8FDFA21274C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x340F1415B68AEADE<br />
/// </para>
/// </remarks>
public static void RemoveShockingEventSpawnBlockingAreas()
{
Function.Call((Hash)0x340F1415B68AEADE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F9A292AD0A3BD89<br />
/// </para>
/// </remarks>
public static void SuppressShockingEventsNextFrame()
{
Function.Call((Hash)0x2F9A292AD0A3BD89);
}

/// <summary>
/// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FD2EC8BF1F1CF30<br />
/// </para>
/// </remarks>
public static void SuppressShockingEventTypeNextFrame(int eventType)
{
Function.Call((Hash)0x3FD2EC8BF1F1CF30, eventType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F3B7749C112D552<br />
/// </para>
/// </remarks>
public static void SuppressAgitationEventsNextFrame()
{
Function.Call((Hash)0x5F3B7749C112D552);
}

#endregion
#region FILES
/// <summary>
/// Character types:<br />0 = Michael, <br />1 = Franklin, <br />2 = Trevor, <br />3 = MPMale, <br />4 = MPFemale
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x278F76C3B0A8F109<br />
/// </para>
/// </remarks>
public static int GetNumTattooShopDlcItems(int character)
{
return Function.Call<int>((Hash)0x278F76C3B0A8F109, character);
}

/// <summary>
/// Character types:<br />0 = Michael, <br />1 = Franklin, <br />2 = Trevor, <br />3 = MPMale, <br />4 = MPFemale<br /><br /><br />enum TattooZoneData<br />{  <br />    ZONE_TORSO = 0,  <br />    ZONE_HEAD = 1,  <br />    ZONE_LEFT_ARM = 2,  <br />    ZONE_RIGHT_ARM = 3,  <br />    ZONE_LEFT_LEG = 4,  <br />    ZONE_RIGHT_LEG = 5,  <br />    ZONE_UNKNOWN = 6,<br />    ZONE_NONE = 7,  <br />};<br />struct outComponent<br />{<br />    // these vars are suffixed with 4 bytes of padding each.<br />    uint unk;<br />    int unk2;<br />    uint tattooCollectionHash;<br />    uint tattooNameHash;<br />    int unk3;<br />    TattooZoneData zoneId;<br />    uint unk4;<br />    uint unk5;<br />    // maybe more, not sure exactly, decompiled scripts are very vague around this part.<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF56381874F82086<br />
/// </para>
/// </remarks>
public static bool GetTattooShopDlcItemData(int characterType, int decorationIndex, int /* bug: structure */ outComponent)
{
return Function.Call<bool>((Hash)0xFF56381874F82086, characterType, decorationIndex, outComponent);
}

/// <summary>
/// Returns some sort of index/offset for overlays/decorations.<br /><br />Character types:<br />0 = Michael, <br />1 = Franklin, <br />2 = Trevor, <br />3 = MPMale, <br />4 = MPFemale
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x10144267DD22866C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetTattooShopDlcItemIndex(uint overlayHash, int /* bug: Any */ p1, int character)
{
return Function.Call<int>((Hash)0x10144267DD22866C, overlayHash, p1, character);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E8C308FD312C036<br />
/// </para>
/// </remarks>
public static void InitShopPedComponent(int /* bug: structure */ outComponent)
{
Function.Call((Hash)0x1E8C308FD312C036, outComponent);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB0A2B758F7B850F<br />
/// </para>
/// </remarks>
public static void InitShopPedProp(int /* bug: structure */ outProp)
{
Function.Call((Hash)0xEB0A2B758F7B850F, outProp);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50F457823CE6EB5F<br />
/// </para>
/// </remarks>
public static int SetupShopPedApparelQuery(int p0, int p1, int p2, int p3)
{
return Function.Call<int>((Hash)0x50F457823CE6EB5F, p0, p1, p2, p3);
}

/// <summary>
/// character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.<br /><br />componentId is between 0 and 11 and corresponds to the usual component slots.<br /><br />p1 could be the outfit number; unsure.<br /><br />p2 is usually -1; unknown function.<br /><br />p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.<br /><br />p4 is usually -1; unknown function.<br /><br />componentId is -1 when p3 is true in decompiled scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BDF59818B1E38C1<br />
/// </para>
/// </remarks>
public static int SetupShopPedApparelQueryTu(int character, int p1, int p2, bool p3, int p4, int componentId)
{
return Function.Call<int>((Hash)0x9BDF59818B1E38C1, character, p1, p2, p3, p4, componentId);
}

/// <summary>
/// See https://git.io/JtcRf for example and structs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x249E310B2D920699<br />
/// </para>
/// </remarks>
public static void GetShopPedQueryComponent(int componentId, int /* bug: structure */ outComponent)
{
Function.Call((Hash)0x249E310B2D920699, componentId, outComponent);
}

/// <summary>
/// Returns some sort of index/offset for components.<br />Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable&apos;s component slot first, returns -1 otherwise.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x96E2929292A4DB77<br />
/// </para>
/// </remarks>
public static int GetShopPedQueryComponentIndex(uint componentHash)
{
return Function.Call<int>((Hash)0x96E2929292A4DB77, componentHash);
}

/// <summary>
/// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74C0E2A57EC66760<br />
/// </para>
/// </remarks>
public static void GetShopPedComponent(uint componentHash, int /* bug: structure */ outComponent)
{
Function.Call((Hash)0x74C0E2A57EC66760, componentHash, outComponent);
}

/// <summary>
/// See https://git.io/JtcRf for example and structs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE44A00999B2837D<br />
/// </para>
/// </remarks>
public static void GetShopPedQueryProp(int componentId, int /* bug: structure */ outProp)
{
Function.Call((Hash)0xDE44A00999B2837D, componentId, outProp);
}

/// <summary>
/// Returns some sort of index/offset for props.<br />Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x6CEBE002E58DEE97<br />
/// </para>
/// </remarks>
public static int GetShopPedQueryPropIndex(uint componentHash)
{
return Function.Call<int>((Hash)0x6CEBE002E58DEE97, componentHash);
}

/// <summary>
/// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D5CAFF661DDF6FC<br />
/// </para>
/// </remarks>
public static void GetShopPedProp(uint componentHash, int /* bug: structure */ outProp)
{
Function.Call((Hash)0x5D5CAFF661DDF6FC, componentHash, outProp);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0368B3A838070348<br />
/// </para>
/// </remarks>
public static uint GetHashNameForComponent(int /* Entity */ entity, int componentId, int drawableVariant, int textureVariant)
{
return Function.Call<uint>((Hash)0x0368B3A838070348, entity, componentId, drawableVariant, textureVariant);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D6160275CAEC8DD<br />
/// </para>
/// </remarks>
public static uint GetHashNameForProp(int /* Entity */ entity, int componentId, int propIndex, int propTextureIndex)
{
return Function.Call<uint>((Hash)0x5D6160275CAEC8DD, entity, componentId, propIndex, propTextureIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC17AD0E5752BECDA<br />
/// </para>
/// </remarks>
public static int GetShopPedApparelVariantComponentCount(uint componentHash)
{
return Function.Call<int>((Hash)0xC17AD0E5752BECDA, componentHash);
}

/// <summary>
/// `propHash`: Ped helmet prop hash?<br />This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there&apos;s no alternative version with a visor for this helmet prop.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xD40AAC51E8E4C663<br />
/// </para>
/// </remarks>
public static int GetShopPedApparelVariantPropCount(uint propHash)
{
return Function.Call<int>((Hash)0xD40AAC51E8E4C663, propHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E11F282F11863B6<br />
/// </para>
/// </remarks>
public static void GetVariantComponent(uint componentHash, int variantComponentIndex, ref uint nameHash, ref int enumValue, ref int componentType)
{
var nativeAssistPointerVar0 = nameHash;
var nativeAssistPointerVar1 = enumValue;
var nativeAssistPointerVar2 = componentType;
unsafe {
Function.Call((Hash)0x6E11F282F11863B6, componentHash, variantComponentIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
nameHash = nativeAssistPointerVar0;
enumValue = nativeAssistPointerVar1;
componentType = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xD81B7F27BC773E66<br />
/// </para>
/// </remarks>
public static void GetVariantProp(uint componentHash, int variantPropIndex, ref uint nameHash, ref int enumValue, ref int anchorPoint)
{
var nativeAssistPointerVar0 = nameHash;
var nativeAssistPointerVar1 = enumValue;
var nativeAssistPointerVar2 = anchorPoint;
unsafe {
Function.Call((Hash)0xD81B7F27BC773E66, componentHash, variantPropIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
nameHash = nativeAssistPointerVar0;
enumValue = nativeAssistPointerVar1;
anchorPoint = nativeAssistPointerVar2;
}

/// <summary>
/// Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6B9DB42C04DD8C3<br />
/// </para>
/// </remarks>
public static int GetShopPedApparelForcedComponentCount(uint componentHash)
{
return Function.Call<int>((Hash)0xC6B9DB42C04DD8C3, componentHash);
}

/// <summary>
/// Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x017568A8182D98A6<br />
/// </para>
/// </remarks>
public static int GetShopPedApparelForcedPropCount(uint componentHash)
{
return Function.Call<int>((Hash)0x017568A8182D98A6, componentHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C93ED8C2F74859B<br />
/// </para>
/// </remarks>
public static void GetForcedComponent(uint componentHash, int forcedComponentIndex, ref uint nameHash, ref int enumValue, ref int componentType)
{
var nativeAssistPointerVar0 = nameHash;
var nativeAssistPointerVar1 = enumValue;
var nativeAssistPointerVar2 = componentType;
unsafe {
Function.Call((Hash)0x6C93ED8C2F74859B, componentHash, forcedComponentIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
nameHash = nativeAssistPointerVar0;
enumValue = nativeAssistPointerVar1;
componentType = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1CA84EBF72E691D<br />
/// </para>
/// </remarks>
public static void GetForcedProp(uint componentHash, int forcedPropIndex, ref uint nameHash, ref int enumValue, ref int anchorPoint)
{
var nativeAssistPointerVar0 = nameHash;
var nativeAssistPointerVar1 = enumValue;
var nativeAssistPointerVar2 = anchorPoint;
unsafe {
Function.Call((Hash)0xE1CA84EBF72E691D, componentHash, forcedPropIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
nameHash = nativeAssistPointerVar0;
enumValue = nativeAssistPointerVar1;
anchorPoint = nativeAssistPointerVar2;
}

/// <summary>
/// Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json<br /><br />componentId/last parameter seems to be unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x341DE7ED1D2A1BFD<br />
/// </para>
/// </remarks>
public static bool DoesShopPedApparelHaveRestrictionTag(uint componentHash, uint restrictionTagHash, int componentId)
{
return Function.Call<bool>((Hash)0x341DE7ED1D2A1BFD, componentHash, restrictionTagHash, componentId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x7796B21B76221BC5<br />
/// </para>
/// </remarks>
public static bool DoesCurrentPedComponentHaveRestrictionTag(int /* Ped */ ped, int componentId, uint restrictionTagHash)
{
return Function.Call<bool>((Hash)0x7796B21B76221BC5, ped, componentId, restrictionTagHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xD726BAB4554DA580<br />
/// </para>
/// </remarks>
public static bool DoesCurrentPedPropHaveRestrictionTag(int /* Ped */ ped, int componentId, uint restrictionTagHash)
{
return Function.Call<bool>((Hash)0xD726BAB4554DA580, ped, componentId, restrictionTagHash);
}

/// <summary>
/// characters<br /><br />0: Michael<br />1: Franklin<br />2: Trevor<br />3: MPMale<br />4: MPFemale
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3FBE2D50A6A8C28<br />
/// </para>
/// </remarks>
public static int SetupShopPedOutfitQuery(int character, bool p1)
{
return Function.Call<int>((Hash)0xF3FBE2D50A6A8C28, character, p1);
}

/// <summary>
/// outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.<br />See https://git.io/JtcB8 for example and outfit struct.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D793F03A631FE56<br />
/// </para>
/// </remarks>
public static void GetShopPedQueryOutfit(int outfitIndex, int /* bug: structure */ outfit)
{
Function.Call((Hash)0x6D793F03A631FE56, outfitIndex, outfit);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB7952076E444979D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void GetShopPedOutfit(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
Function.Call((Hash)0xB7952076E444979D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x073CA26B079F956E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetShopPedOutfitLocate(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x073CA26B079F956E, p0);
}

/// <summary>
/// See https://git.io/JtcBH for example and structs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9F9C2E0FDE11CBB<br />
/// </para>
/// </remarks>
public static bool GetShopPedOutfitPropVariant(uint outfitHash, int variantIndex, int /* bug: structure */ outPropVariant)
{
return Function.Call<bool>((Hash)0xA9F9C2E0FDE11CBB, outfitHash, variantIndex, outPropVariant);
}

/// <summary>
/// See https://git.io/JtcBH for example and structs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19F2A026EDF0013F<br />
/// </para>
/// </remarks>
public static bool GetShopPedOutfitComponentVariant(uint outfitHash, int variantIndex, int /* bug: structure */ outComponentVariant)
{
return Function.Call<bool>((Hash)0x19F2A026EDF0013F, outfitHash, variantIndex, outComponentVariant);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7A866D21CD2329B<br />
/// </para>
/// </remarks>
public static int GetNumDlcVehicles()
{
return Function.Call<int>((Hash)0xA7A866D21CD2329B);
}

/// <summary>
/// dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xECC01B7C5763333C<br />
/// </para>
/// </remarks>
public static uint GetDlcVehicleModel(int dlcVehicleIndex)
{
return Function.Call<uint>((Hash)0xECC01B7C5763333C, dlcVehicleIndex);
}

/// <summary>
/// dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.<br />outData is a struct of 3 8-byte items.<br />The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33468EDC08E371F6<br />
/// </para>
/// </remarks>
public static bool GetDlcVehicleData(int dlcVehicleIndex, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0x33468EDC08E371F6, dlcVehicleIndex, outData);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5549EE11FA22FCF2<br />
/// </para>
/// </remarks>
public static int GetDlcVehicleFlags(int dlcVehicleIndex)
{
return Function.Call<int>((Hash)0x5549EE11FA22FCF2, dlcVehicleIndex);
}

/// <summary>
/// Returns the total number of DLC weapons.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE47635F352DA367<br />
/// </para>
/// </remarks>
public static int GetNumDlcWeapons()
{
return Function.Call<int>((Hash)0xEE47635F352DA367);
}

/// <summary>
/// Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x4160B65AE085B5A9<br />
/// </para>
/// </remarks>
public static int GetNumDlcWeaponsSp()
{
return Function.Call<int>((Hash)0x4160B65AE085B5A9);
}

/// <summary>
/// <br />dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.<br />struct DlcWeaponData<br />{<br />int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this<br />int padding1;<br />int weaponHash;<br />int padding2;<br />int unk;<br />int padding3;<br />int weaponCost;<br />int padding4;<br />int ammoCost;<br />int padding5;<br />int ammoType;<br />int padding6;<br />int defaultClipSize;<br />int padding7;<br />char nameLabel[64];<br />char descLabel[64];<br />char desc2Label[64]; // usually &quot;the&quot; + name<br />char upperCaseNameLabel[64];<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79923CD21BECE14E<br />
/// </para>
/// </remarks>
public static bool GetDlcWeaponData(int dlcWeaponIndex, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0x79923CD21BECE14E, dlcWeaponIndex, outData);
}

/// <summary>
/// Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x310836EE7129BA33<br />
/// </para>
/// </remarks>
public static bool GetDlcWeaponDataSp(int dlcWeaponIndex, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0x310836EE7129BA33, dlcWeaponIndex, outData);
}

/// <summary>
/// Returns the total number of DLC weapon components.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x405425358A7D61FE<br />
/// </para>
/// </remarks>
public static int GetNumDlcWeaponComponents(int dlcWeaponIndex)
{
return Function.Call<int>((Hash)0x405425358A7D61FE, dlcWeaponIndex);
}

/// <summary>
/// Returns the total number of DLC weapon components that are available in SP.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xAD2A7A6DFF55841B<br />
/// </para>
/// </remarks>
public static int GetNumDlcWeaponComponentsSp(int dlcWeaponIndex)
{
return Function.Call<int>((Hash)0xAD2A7A6DFF55841B, dlcWeaponIndex);
}

/// <summary>
/// p0 seems to be the weapon index<br />p1 seems to be the weapon component index<br />struct DlcComponentData{<br />int attachBone;<br />int padding1;<br />int bActiveByDefault;<br />int padding2;<br />int unk;<br />int padding3;<br />int componentHash;<br />int padding4;<br />int unk2;<br />int padding5;<br />int componentCost;<br />int padding6;<br />char nameLabel[64];<br />char descLabel[64];<br />};<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CF598A2957C2BF8<br />
/// </para>
/// </remarks>
public static bool GetDlcWeaponComponentData(int dlcWeaponIndex, int dlcWeapCompIndex, int /* bug: structure */ ComponentDataPtr)
{
return Function.Call<bool>((Hash)0x6CF598A2957C2BF8, dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr);
}

/// <summary>
/// Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x31D5E073B6F93CDC<br />
/// </para>
/// </remarks>
public static bool GetDlcWeaponComponentDataSp(int dlcWeaponIndex, int dlcWeapCompIndex, int /* bug: structure */ ComponentDataPtr)
{
return Function.Call<bool>((Hash)0x31D5E073B6F93CDC, dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4D7B033C3AA243C<br />
/// </para>
/// </remarks>
public static bool IsContentItemLocked(uint itemHash)
{
return Function.Call<bool>((Hash)0xD4D7B033C3AA243C, itemHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0564B9FF9631B82C<br />
/// </para>
/// </remarks>
public static bool IsDlcVehicleMod(uint hash)
{
return Function.Call<bool>((Hash)0x0564B9FF9631B82C, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC098810437312FFF<br />
/// </para>
/// </remarks>
public static uint GetDlcVehicleModLockHash(uint hash)
{
return Function.Call<uint>((Hash)0xC098810437312FFF, hash);
}

/// <summary>
/// From fm_deathmatch_creator and fm_race_creator:<br /><br />FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat(&quot;GROUP_MAP_SP&quot;));<br />FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat(&quot;GROUP_MAP&quot;));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x6BEDF5769AC2DC07<br />
/// </para>
/// </remarks>
public static void ExecuteContentChangesetGroupForAll(uint hash)
{
Function.Call((Hash)0x6BEDF5769AC2DC07, hash);
}

/// <summary>
/// From fm_deathmatch_creator and fm_race_creator:<br /><br />FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat(&quot;GROUP_MAP_SP&quot;));<br />FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat(&quot;GROUP_MAP&quot;));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x3C1978285B036B25<br />
/// </para>
/// </remarks>
public static void RevertContentChangesetGroupForAll(uint hash)
{
Function.Call((Hash)0x3C1978285B036B25, hash);
}

#endregion
#region FIRE
/// <summary>
/// Starts a fire:<br /><br />xyz: Location of fire<br />maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.<br />isGasFire: Whether or not the fire is powered by gasoline.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B83617E04503888<br />
/// </para>
/// </remarks>
public static int StartScriptFire(float X, float Y, float Z, int maxChildren, bool isGasFire)
{
return Function.Call<int>((Hash)0x6B83617E04503888, X, Y, Z, maxChildren, isGasFire);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FF548385680673F<br />
/// </para>
/// </remarks>
public static void RemoveScriptFire(int /* FireId */ fireHandle)
{
Function.Call((Hash)0x7FF548385680673F, fireHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6A9D9708F6F23DF<br />
/// </para>
/// </remarks>
public static int StartEntityFire(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xF6A9D9708F6F23DF, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F0DD2EBBB651AFF<br />
/// </para>
/// </remarks>
public static void StopEntityFire(int /* Entity */ entity)
{
Function.Call((Hash)0x7F0DD2EBBB651AFF, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28D3FED7190D3A0B<br />
/// </para>
/// </remarks>
public static bool IsEntityOnFire(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x28D3FED7190D3A0B, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50CAD495A460B305<br />
/// </para>
/// </remarks>
public static int GetNumberOfFiresInRange(float x, float y, float z, float radius)
{
return Function.Call<int>((Hash)0x50CAD495A460B305, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x8F390AC4155099BA<br />
/// </para>
/// </remarks>
public static void SetFlammabilityMultiplier(float p0)
{
Function.Call((Hash)0x8F390AC4155099BA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x056A8A219B8E829F<br />
/// </para>
/// </remarks>
public static void StopFireInRange(float x, float y, float z, float radius)
{
Function.Call((Hash)0x056A8A219B8E829F, x, y, z, radius);
}

/// <summary>
/// Returns TRUE if it found something. FALSE if not.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x352A9F6BCF90081F<br />
/// </para>
/// </remarks>
public static bool GetClosestFirePos(ref Vector3 outPosition, float x, float y, float z)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x352A9F6BCF90081F, &nativeAssistPointerVar0, x, y, z);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// BOOL isAudible = If explosion makes a sound.<br />BOOL isInvisible = If the explosion is invisible or not.<br /><br />explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3AD2BDBAEE269AC<br />
/// </para>
/// </remarks>
public static void AddExplosion(float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake, bool noDamage)
{
Function.Call((Hash)0xE3AD2BDBAEE269AC, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
}

/// <summary>
/// isAudible: If explosion makes a sound.<br />isInvisible: If the explosion is invisible or not.<br />explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x172AA1B624FA1013<br />
/// </para>
/// </remarks>
public static void AddOwnedExplosion(int /* Ped */ ped, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake)
{
Function.Call((Hash)0x172AA1B624FA1013, ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
}

/// <summary>
/// isAudible: If explosion makes a sound.<br />isInvisible: If the explosion is invisible or not.<br />explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36DD3FE58B5E5212<br />
/// </para>
/// </remarks>
public static void AddExplosionWithUserVfx(float x, float y, float z, int explosionType, uint explosionFx, float damageScale, bool isAudible, bool isInvisible, float cameraShake)
{
Function.Call((Hash)0x36DD3FE58B5E5212, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
}

/// <summary>
/// explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E2EBA0EE7CED0E0<br />
/// </para>
/// </remarks>
public static bool IsExplosionInArea(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0x2E2EBA0EE7CED0E0, explosionType, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6070104B699B2EF4<br />
/// </para>
/// </remarks>
public static bool IsExplosionActiveInArea(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0x6070104B699B2EF4, explosionType, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB0F816885B0E483<br />
/// </para>
/// </remarks>
public static bool IsExplosionInSphere(int explosionType, float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0xAB0F816885B0E483, explosionType, x, y, z, radius);
}

/// <summary>
/// explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xB3CD51E3DB86F176<br />
/// </para>
/// </remarks>
public static int GetOwnerOfExplosionInSphere(int explosionType, float x, float y, float z, float radius)
{
return Function.Call<int>((Hash)0xB3CD51E3DB86F176, explosionType, x, y, z, radius);
}

/// <summary>
/// explosionType: See ADD_EXPLOSION, -1 for any explosion type<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA079A6C51525DC4B<br />
/// </para>
/// </remarks>
public static bool IsExplosionInAngledArea(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float width)
{
return Function.Call<bool>((Hash)0xA079A6C51525DC4B, explosionType, x1, y1, z1, x2, y2, z2, width);
}

/// <summary>
/// Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.<br /><br />explosionType: See ADD_EXPLOSION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14BA4BA137AF6CEC<br />
/// </para>
/// </remarks>
public static int GetOwnerOfExplosionInAngledArea(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius)
{
return Function.Call<int>((Hash)0x14BA4BA137AF6CEC, explosionType, x1, y1, z1, x2, y2, z2, radius);
}

#endregion
#region GRAPHICS
/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x175B6BFC15CDD0C5<br />
/// </para>
/// </remarks>
public static void SetDebugLinesAndSpheresDrawingActive(bool enabled)
{
Function.Call((Hash)0x175B6BFC15CDD0C5, enabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FDFADE676AA3CB0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawDebugLine(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0x7FDFADE676AA3CB0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8B9A8AC5608FF94<br />
/// </para>
/// </remarks>
public static void DrawDebugLineWithTwoColours(float x1, float y1, float z1, float x2, float y2, float z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2)
{
Function.Call((Hash)0xD8B9A8AC5608FF94, x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAD68E1AB39DA632<br />
/// </para>
/// </remarks>
public static void DrawDebugSphere(float x, float y, float z, float radius, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xAAD68E1AB39DA632, x, y, z, radius, red, green, blue, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x083A2CA4F2E573BD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawDebugBox(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0x083A2CA4F2E573BD, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73B1189623049839<br />
/// </para>
/// </remarks>
public static void DrawDebugCross(float x, float y, float z, float size, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x73B1189623049839, x, y, z, size, red, green, blue, alpha);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3903E216620488E8<br />
/// </para>
/// </remarks>
public static void DrawDebugText(string text, float x, float y, float z, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x3903E216620488E8, text, x, y, z, red, green, blue, alpha);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3BB2E9555C05A8F<br />
/// </para>
/// </remarks>
public static void DrawDebugText2d(string text, float x, float y, float z, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xA3BB2E9555C05A8F, text, x, y, z, red, green, blue, alpha);
}

/// <summary>
/// Draws a depth-tested line from one point to another.<br />----------------<br />x1, y1, z1 : Coordinates for the first point<br />x2, y2, z2 : Coordinates for the second point<br />r, g, b, alpha : Color with RGBA-Values<br />I recommend using a predefined function to call this.<br />[VB.NET]<br />Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)<br />    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)<br />End Sub<br /><br />[C#]<br />public void DrawLine(Vector3 from, Vector3 to, Color col)<br />{<br />    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B7256074AE34680<br />
/// </para>
/// </remarks>
public static void DrawLine(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x6B7256074AE34680, x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
}

/// <summary>
/// x/y/z - Location of a vertex (in world coords), presumably.<br />----------------<br />x1, y1, z1     : Coordinates for the first point<br />x2, y2, z2     : Coordinates for the second point<br />x3, y3, z3     : Coordinates for the third point<br />r, g, b, alpha : Color with RGBA-Values<br /><br />Keep in mind that only one side of the drawn triangle is visible: It&apos;s the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).<br />But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.<br />I recommend using a predefined function to call this.<br />[VB.NET]<br />Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)<br />    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)<br />End Sub<br /><br />[C#]<br />public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)<br />{<br />    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);<br />}<br />BTW: Intersecting triangles are not supported: They overlap in the order they were called.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC26716048436851<br />
/// </para>
/// </remarks>
public static void DrawPoly(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xAC26716048436851, x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
}

/// <summary>
/// Used for drawling Deadline trailing lights, see deadline.ytd<br /><br />p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.<br />For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x29280002282F1928<br />
/// </para>
/// </remarks>
public static void DrawTexturedPoly(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha, string textureDict, string textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3)
{
Function.Call((Hash)0x29280002282F1928, x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
}

/// <summary>
/// Used for drawling Deadline trailing lights, see deadline.ytd<br /><br />Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.<br />For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x736D7AA1B750856B<br />
/// </para>
/// </remarks>
public static void DrawTexturedPolyWithThreeColours(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float red1, float green1, float blue1, int alpha1, float red2, float green2, float blue2, int alpha2, float red3, float green3, float blue3, int alpha3, string textureDict, string textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3)
{
Function.Call((Hash)0x736D7AA1B750856B, x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
}

/// <summary>
/// x,y,z = start pos<br />x2,y2,z2 = end pos<br /><br />Draw&apos;s a 3D Box between the two x,y,z coords.<br />--------------<br />Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.<br />I recommend using a predefined function to call this.<br />[VB.NET]<br />Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)<br />    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)<br />End Sub<br /><br />[C#]<br />public void DrawBox(Vector3 a, Vector3 b, Color col)<br />{<br />    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3A9971CADAC7252<br />
/// </para>
/// </remarks>
public static void DrawBox(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xD3A9971CADAC7252, x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23BA6B0C2AD7B0D3<br />
/// </para>
/// </remarks>
public static void SetBackfaceculling(bool toggle)
{
Function.Call((Hash)0x23BA6B0C2AD7B0D3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xC5C8F970D4EDFF71<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDepthwriting(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC5C8F970D4EDFF71, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DD2139A9A20DCE8<br />
/// </para>
/// </remarks>
public static bool BeginTakeMissionCreatorPhoto()
{
return Function.Call<bool>((Hash)0x1DD2139A9A20DCE8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90A78ECAA4E78453<br />
/// </para>
/// </remarks>
public static int GetStatusOfTakeMissionCreatorPhoto()
{
return Function.Call<int>((Hash)0x90A78ECAA4E78453);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A46AF8A78DC5E0A<br />
/// </para>
/// </remarks>
public static void FreeMemoryForMissionCreatorPhoto()
{
Function.Call((Hash)0x0A46AF8A78DC5E0A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4862437A486F91B0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LoadMissionCreatorPhoto(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x4862437A486F91B0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1670F8D05056F257<br />
/// </para>
/// </remarks>
public static int GetStatusOfLoadMissionCreatorPhoto(int /* bug: structure */ p0)
{
return Function.Call<int>((Hash)0x1670F8D05056F257, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FA5D82B8F58EC06<br />
/// </para>
/// </remarks>
public static bool BeginCreateMissionCreatorPhotoPreview()
{
return Function.Call<bool>((Hash)0x7FA5D82B8F58EC06);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B0316762AFD4A64<br />
/// </para>
/// </remarks>
public static int GetStatusOfCreateMissionCreatorPhotoPreview()
{
return Function.Call<int>((Hash)0x5B0316762AFD4A64);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x346EF3ECAAAB149E<br />
/// </para>
/// </remarks>
public static void FreeMemoryForMissionCreatorPhotoPreview()
{
Function.Call((Hash)0x346EF3ECAAAB149E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA67C35C56EB1BD9D<br />
/// </para>
/// </remarks>
public static bool BeginTakeHighQualityPhoto()
{
return Function.Call<bool>((Hash)0xA67C35C56EB1BD9D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D6CA79EEEBD8CA3<br />
/// </para>
/// </remarks>
public static int GetStatusOfTakeHighQualityPhoto()
{
return Function.Call<int>((Hash)0x0D6CA79EEEBD8CA3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD801CC02177FA3F1<br />
/// </para>
/// </remarks>
public static void FreeMemoryForHighQualityPhoto()
{
Function.Call((Hash)0xD801CC02177FA3F1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1BBC135A4D25EDDE<br />
/// </para>
/// </remarks>
public static void SetTakenPhotoIsMugshot(bool p0)
{
Function.Call((Hash)0x1BBC135A4D25EDDE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xF3F776ADA161E47D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetArenaThemeAndVariationForTakenPhoto(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xF3F776ADA161E47D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xADD6627C4D325458<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetOnIslandXForTakenPhoto(int /* bug: Any */ p0)
{
Function.Call((Hash)0xADD6627C4D325458, p0);
}

/// <summary>
/// 1 match in 1 script. cellphone_controller.<br />p0 is -1 in scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DEC726C25A11BAC<br />
/// </para>
/// </remarks>
public static bool SaveHighQualityPhoto(int unused)
{
return Function.Call<bool>((Hash)0x3DEC726C25A11BAC, unused);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C0C4E81E1AC60A0<br />
/// </para>
/// </remarks>
public static int GetStatusOfSaveHighQualityPhoto()
{
return Function.Call<int>((Hash)0x0C0C4E81E1AC60A0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x759650634F07B6B4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool BeginCreateLowQualityCopyOfPhoto(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x759650634F07B6B4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB82A0BF0E3E3265<br />
/// </para>
/// </remarks>
public static int GetStatusOfCreateLowQualityCopyOfPhoto(int p0)
{
return Function.Call<int>((Hash)0xCB82A0BF0E3E3265, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A12D88881435DCA<br />
/// </para>
/// </remarks>
public static void FreeMemoryForLowQualityPhoto()
{
Function.Call((Hash)0x6A12D88881435DCA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1072F115DAB0717E<br />
/// </para>
/// </remarks>
public static void DrawLowQualityPhotoToPhone(bool p0, bool p1)
{
Function.Call((Hash)0x1072F115DAB0717E, p0, p1);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34D23450F028B0BF<br />
/// </para>
/// </remarks>
public static int GetMaximumNumberOfPhotos()
{
return Function.Call<int>((Hash)0x34D23450F028B0BF);
}

/// <summary>
/// This function is hard-coded to always return 96.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC54A7AF8B3A14EF<br />
/// </para>
/// </remarks>
public static int GetMaximumNumberOfCloudPhotos()
{
return Function.Call<int>((Hash)0xDC54A7AF8B3A14EF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x473151EBC762C6DA<br />
/// </para>
/// </remarks>
public static int GetCurrentNumberOfCloudPhotos()
{
return Function.Call<int>((Hash)0x473151EBC762C6DA);
}

/// <summary>
/// 2 matches across 2 scripts. Only showed in appcamera &amp; appmedia. Both were 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A893980E96B659A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool QueueOperationToCreateSortedListOfPhotos(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x2A893980E96B659A, p0);
}

/// <summary>
/// 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.<br />appcamera, appmedia, and cellphone_controller.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5BED327CEA362B1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetStatusOfSortedListOperation(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0xF5BED327CEA362B1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4AF92ACD3141D96C<br />
/// </para>
/// </remarks>
public static void ClearStatusOfSortedListOperation()
{
Function.Call((Hash)0x4AF92ACD3141D96C);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE791DF1F73ED2C8B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DoesThisPhotoSlotContainAValidPhoto(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xE791DF1F73ED2C8B, p0);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC72C258667BE5EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LoadHighQualityPhoto(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xEC72C258667BE5EA, p0);
}

/// <summary>
/// Hardcoded to always return 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40AFB081F8ADD4EE<br />
/// </para>
/// </remarks>
public static int GetLoadHighQualityPhotoStatus(int p0)
{
return Function.Call<int>((Hash)0x40AFB081F8ADD4EE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF49E9A9716A04595<br />
/// </para>
/// </remarks>
public static void DrawLightWithRangeex(float x, float y, float z, int r, int g, int b, float range, float intensity, float shadow)
{
Function.Call((Hash)0xF49E9A9716A04595, x, y, z, r, g, b, range, intensity, shadow);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2A1B2771A01DBD4<br />
/// </para>
/// </remarks>
public static void DrawLightWithRange(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity)
{
Function.Call((Hash)0xF2A1B2771A01DBD4, posX, posY, posZ, colorR, colorG, colorB, range, intensity);
}

/// <summary>
/// Parameters:<br />* pos - coordinate where the spotlight is located<br />* dir - the direction vector the spotlight should aim at from its current position<br />* r,g,b - color of the spotlight<br />* distance - the maximum distance the light can reach<br />* brightness - the brightness of the light<br />* roundness - &quot;smoothness&quot; of the circle edge<br />* radius - the radius size of the spotlight<br />* falloff - the falloff size of the light&apos;s edge (example: www.i.imgur.com/DemAWeO.jpg)<br /><br />Example in C# (spotlight aims at the closest vehicle):<br />Vector3 myPos = Game.Player.Character.Position;<br />Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);<br />Vector3 destinationCoords = nearest.Position;<br />Vector3 dirVector = destinationCoords - myPos;<br />dirVector.Normalize();<br />Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0F64B265C8C8B33<br />
/// </para>
/// </remarks>
public static void DrawSpotLight(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float hardness, float radius, float falloff)
{
Function.Call((Hash)0xD0F64B265C8C8B33, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BCA583A583194DB<br />
/// </para>
/// </remarks>
public static void DrawShadowedSpotLight(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float roundness, float radius, float falloff, int shadowId)
{
Function.Call((Hash)0x5BCA583A583194DB, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9B18B4619F48F7B<br />
/// </para>
/// </remarks>
public static void FadeUpPedLight(float p0)
{
Function.Call((Hash)0xC9B18B4619F48F7B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEADC0DEDEADC0DE<br />
/// </para>
/// </remarks>
public static void UpdateLightsOnEntity(int /* Entity */ entity)
{
Function.Call((Hash)0xDEADC0DEDEADC0DE, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x9641588DAB93B4B5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetLightOverrideMaxIntensityScale(int /* bug: Any */ p0)
{
Function.Call((Hash)0x9641588DAB93B4B5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x393BD2275CEB7793<br />
/// </para>
/// </remarks>
public static float GetLightOverrideMaxIntensityScale()
{
return Function.Call<float>((Hash)0x393BD2275CEB7793);
}

/// <summary>
/// enum MarkerTypes<br />{<br />    MarkerTypeUpsideDownCone = 0,<br /> MarkerTypeVerticalCylinder = 1,<br />   MarkerTypeThickChevronUp = 2,<br /> MarkerTypeThinChevronUp = 3,<br />  MarkerTypeCheckeredFlagRect = 4,<br />  MarkerTypeCheckeredFlagCircle = 5,<br />    MarkerTypeVerticleCircle = 6,<br /> MarkerTypePlaneModel = 7,<br /> MarkerTypeLostMCDark = 8,<br /> MarkerTypeLostMCLight = 9,<br />    MarkerTypeNumber0 = 10,<br />   MarkerTypeNumber1 = 11,<br />   MarkerTypeNumber2 = 12,<br />   MarkerTypeNumber3 = 13,<br />   MarkerTypeNumber4 = 14,<br />   MarkerTypeNumber5 = 15,<br />   MarkerTypeNumber6 = 16,<br />   MarkerTypeNumber7 = 17,<br />   MarkerTypeNumber8 = 18,<br />   MarkerTypeNumber9 = 19,<br />   MarkerTypeChevronUpx1 = 20,<br />   MarkerTypeChevronUpx2 = 21,<br />   MarkerTypeChevronUpx3 = 22,<br />   MarkerTypeHorizontalCircleFat = 23,<br />   MarkerTypeReplayIcon = 24,<br />    MarkerTypeHorizontalCircleSkinny = 25,<br />    MarkerTypeHorizontalCircleSkinny_Arrow = 26,<br />  MarkerTypeHorizontalSplitArrowCircle = 27,<br />    MarkerTypeDebugSphere = 28,<br />   MarkerTypeDallorSign = 29,<br />    MarkerTypeHorizontalBars = 30,<br />    MarkerTypeWolfHead = 31<br />};<br /><br />dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).<br /><br />faceCamera - Rotates only the y-axis (the heading) towards the camera<br /><br />p19 - no effect, default value in script is 2<br /><br />rotate - Rotates only on the y-axis (the heading)<br /><br />textureDict - Name of texture dictionary to load texture from (e.g. &quot;GolfPutting&quot;)<br /><br />textureName - Name of texture inside dictionary to load (e.g. &quot;PuttingMarker&quot;)<br /><br />drawOnEnts - Draws the marker onto any entities that intersect it<br /><br />basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:<br /><br />bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);<br /><br />his is what I used to draw an amber downward pointing chevron &quot;V&quot;, has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.<br /><br />GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28477EC23D892089<br />
/// </para>
/// </remarks>
public static void DrawMarker(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts)
{
Function.Call((Hash)0x28477EC23D892089, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xE82728F0DE75D13A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawMarkerEx(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int /* bug: Any */ p19, bool rotate, string textureDict, string textureName, bool drawOnEnts, bool p24, bool p25)
{
Function.Call((Hash)0xE82728F0DE75D13A, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25);
}

/// <summary>
/// Draws a 3D sphere, typically seen in the GTA:O freemode event &quot;Penned In&quot;.<br />Example https://imgur.com/nCbtS4H
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x799017F9E3B10112<br />
/// </para>
/// </remarks>
public static void DrawMarkerSphere(float x, float y, float z, float radius, int red, int green, int blue, float alpha)
{
Function.Call((Hash)0x799017F9E3B10112, x, y, z, radius, red, green, blue, alpha);
}

/// <summary>
/// Creates a checkpoint. Returns the handle of the checkpoint.<br /><br />20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.<br /><br />Parameters:<br />* type - The type of checkpoint to create. See below for a list of checkpoint types.<br />* pos1 - The position of the checkpoint.<br />* pos2 - The position of the next checkpoint to point to.<br />* radius - The radius of the checkpoint.<br />* color - The color of the checkpoint.<br />* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.<br /><br />Checkpoint types:<br />0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker<br />5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker<br />10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker<br />15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      <br />20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker <br />25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker    <br />30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker <br />35-38-------Ring: Airplane Up, Left, Right, UpsideDown<br />39----------?<br />40----------Ring: just a ring<br />41----------?<br />42-44-------Cylinder w/ number (uses &apos;reserved&apos; parameter)<br />45-47-------Cylinder no arrow or number<br /><br />If using type 42-44, reserved sets number / number and shape to display<br /><br />0-99------------Just numbers (0-99)<br />100-109-----------------Arrow (0-9)<br />110-119------------Two arrows (0-9)<br />120-129----------Three arrows (0-9)<br />130-139----------------Circle (0-9)<br />140-149------------CycleArrow (0-9)<br />150-159----------------Circle (0-9)<br />160-169----Circle  w/ pointer (0-9)<br />170-179-------Perforated ring (0-9)<br />180-189----------------Sphere (0-9)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0134F0835AB6BFCB<br />
/// </para>
/// </remarks>
public static int CreateCheckpoint(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float diameter, int red, int green, int blue, int alpha, int reserved)
{
return Function.Call<int>((Hash)0x0134F0835AB6BFCB, type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B5B4DA5D79F1943<br />
/// </para>
/// </remarks>
public static void SetCheckpointInsideCylinderHeightScale(int checkpoint, float scale)
{
Function.Call((Hash)0x4B5B4DA5D79F1943, checkpoint, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x44621483FF966526<br />
/// </para>
/// </remarks>
public static void SetCheckpointInsideCylinderScale(int checkpoint, float scale)
{
Function.Call((Hash)0x44621483FF966526, checkpoint, scale);
}

/// <summary>
/// Sets the cylinder height of the checkpoint.<br /><br />Parameters:<br />* nearHeight - The height of the checkpoint when inside of the radius.<br />* farHeight - The height of the checkpoint when outside of the radius.<br />* radius - The radius of the checkpoint.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2707AAE9D9297D89<br />
/// </para>
/// </remarks>
public static void SetCheckpointCylinderHeight(int checkpoint, float nearHeight, float farHeight, float radius)
{
Function.Call((Hash)0x2707AAE9D9297D89, checkpoint, nearHeight, farHeight, radius);
}

/// <summary>
/// Sets the checkpoint color.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7167371E8AD747F7<br />
/// </para>
/// </remarks>
public static void SetCheckpointRgba(int checkpoint, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x7167371E8AD747F7, checkpoint, red, green, blue, alpha);
}

/// <summary>
/// Sets the checkpoint icon color.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9EA40907C680580<br />
/// </para>
/// </remarks>
public static void SetCheckpointRgba2(int checkpoint, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xB9EA40907C680580, checkpoint, red, green, blue, alpha);
}

/// <summary>
/// This does not move an existing checkpoint... so wtf.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF51D36185993515D<br />
/// </para>
/// </remarks>
public static void SetCheckpointClipplaneWithPosNorm(int checkpoint, float posX, float posY, float posZ, float unkX, float unkY, float unkZ)
{
Function.Call((Hash)0xF51D36185993515D, checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xFCF6788FC4860CD4<br />
/// </para>
/// </remarks>
public static void SetCheckpointForceOldArrowPointing(int checkpoint)
{
Function.Call((Hash)0xFCF6788FC4860CD4, checkpoint);
}

/// <summary>
/// Unknown. Called after creating a checkpoint (type: 51) in the creators.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x615D3925E87A3B26<br />
/// </para>
/// </remarks>
public static void SetCheckpointDecalRotAlignedToCameraRot(int checkpoint)
{
Function.Call((Hash)0x615D3925E87A3B26, checkpoint);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xDB1EA9411C8911EC<br />
/// </para>
/// </remarks>
public static void SetCheckpointForceDirection(int checkpoint)
{
Function.Call((Hash)0xDB1EA9411C8911EC, checkpoint);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x3C788E7F6438754D<br />
/// </para>
/// </remarks>
public static void SetCheckpointDirection(int checkpoint, float posX, float posY, float posZ)
{
Function.Call((Hash)0x3C788E7F6438754D, checkpoint, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5ED37F54CD4D52E<br />
/// </para>
/// </remarks>
public static void DeleteCheckpoint(int checkpoint)
{
Function.Call((Hash)0xF5ED37F54CD4D52E, checkpoint);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22A249A53034450A<br />
/// </para>
/// </remarks>
public static void DontRenderInGameUi(bool p0)
{
Function.Call((Hash)0x22A249A53034450A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC459CFA0CCE245B<br />
/// </para>
/// </remarks>
public static void ForceRenderInGameUi(bool toggle)
{
Function.Call((Hash)0xDC459CFA0CCE245B, toggle);
}

/// <summary>
/// This function can requests texture dictonaries from following RPFs:<br />scaleform_generic.rpf<br />scaleform_minigames.rpf<br />scaleform_minimap.rpf<br />scaleform_web.rpf<br /><br />last param isnt a toggle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFA2EF8E04127DD5<br />
/// </para>
/// </remarks>
public static void RequestStreamedTextureDict(string textureDict, bool p1)
{
Function.Call((Hash)0xDFA2EF8E04127DD5, textureDict, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0145F696AAAAD2E4<br />
/// </para>
/// </remarks>
public static bool HasStreamedTextureDictLoaded(string textureDict)
{
return Function.Call<bool>((Hash)0x0145F696AAAAD2E4, textureDict);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE2CACCF5A8AA805<br />
/// </para>
/// </remarks>
public static void SetStreamedTextureDictAsNoLongerNeeded(string textureDict)
{
Function.Call((Hash)0xBE2CACCF5A8AA805, textureDict);
}

/// <summary>
/// Draws a rectangle on the screen.<br /><br />-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)<br /><br />-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)<br /><br />-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)<br /><br />-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)<br /><br />-R: Red part of the color. (0-255)<br /><br />-G: Green part of the color. (0-255)<br /><br />-B: Blue part of the color. (0-255)<br /><br />-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)<br /><br />The total number of rectangles to be drawn in one frame is apparently limited to 399.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A618A217E5154F0<br />
/// </para>
/// </remarks>
public static void DrawRect(float x, float y, float width, float height, int r, int g, int b, int a, bool p8)
{
Function.Call((Hash)0x3A618A217E5154F0, x, y, width, height, r, g, b, a, p8);
}

/// <summary>
/// Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6372ECD45D73BCD<br />
/// </para>
/// </remarks>
public static void SetScriptGfxDrawBehindPausemenu(bool toggle)
{
Function.Call((Hash)0xC6372ECD45D73BCD, toggle);
}

/// <summary>
/// Sets the draw order for script draw commands.<br /><br />Examples from decompiled scripts:<br />GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);<br />GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);<br /><br />GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);<br />GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61BB1D9B3A95D802<br />
/// </para>
/// </remarks>
public static void SetScriptGfxDrawOrder(int drawOrder)
{
Function.Call((Hash)0x61BB1D9B3A95D802, drawOrder);
}

/// <summary>
/// horizontalAlign: The horizontal alignment. This can be 67 (&apos;C&apos;), 76 (&apos;L&apos;), or 82 (&apos;R&apos;).<br />verticalAlign: The vertical alignment. This can be 67 (&apos;C&apos;), 66 (&apos;B&apos;), or 84 (&apos;T&apos;).<br /><br />This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player&apos;s safe zone configuration.<br /><br />These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.<br /><br />Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is &apos;I&apos; (73).<br /><br />For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.<br /><br />To reset the value, use RESET_SCRIPT_GFX_ALIGN.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8A850F20A067EB6<br />
/// </para>
/// </remarks>
public static void SetScriptGfxAlign(int horizontalAlign, int verticalAlign)
{
Function.Call((Hash)0xB8A850F20A067EB6, horizontalAlign, verticalAlign);
}

/// <summary>
/// This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values (&apos;I&apos;, &apos;I&apos;; 0, 0, 0, 0).<br />This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3A3DB414A373DAB<br />
/// </para>
/// </remarks>
public static void ResetScriptGfxAlign()
{
Function.Call((Hash)0xE3A3DB414A373DAB);
}

/// <summary>
/// Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5A2C681787E579D<br />
/// </para>
/// </remarks>
public static void SetScriptGfxAlignParams(float x, float y, float w, float h)
{
Function.Call((Hash)0xF5A2C681787E579D, x, y, w, h);
}

/// <summary>
/// Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DD8F5AA635EB4B2<br />
/// </para>
/// </remarks>
public static void GetScriptGfxAlignPosition(float x, float y, ref float calculatedX, ref float calculatedY)
{
var nativeAssistPointerVar0 = calculatedX;
var nativeAssistPointerVar1 = calculatedY;
unsafe {
Function.Call((Hash)0x6DD8F5AA635EB4B2, x, y, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
calculatedX = nativeAssistPointerVar0;
calculatedY = nativeAssistPointerVar1;
}

/// <summary>
/// Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAF107B6BB2C97F0<br />
/// </para>
/// </remarks>
public static float GetSafeZoneSize()
{
return Function.Call<float>((Hash)0xBAF107B6BB2C97F0);
}

/// <summary>
/// Draws a 2D sprite on the screen.<br /><br />Parameters:<br />textureDict - Name of texture dictionary to load texture from (e.g. &quot;CommonMenu&quot;, &quot;MPWeaponsCommon&quot;, etc.)<br /><br />textureName - Name of texture to load from texture dictionary (e.g. &quot;last_team_standing_icon&quot;, &quot;tennis_icon&quot;, etc.)<br /><br />screenX/Y - Screen offset (0.5 = center)<br />scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)<br /><br />heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees<br /><br />red,green,blue - Sprite color (default = 255/255/255)<br /><br />alpha - opacity level
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7FFAE5EBF23D890<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawSprite(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, bool p11, int /* bug: Any */ p12)
{
Function.Call((Hash)0xE7FFAE5EBF23D890, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12);
}

/// <summary>
/// Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.<br />x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)<br />y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)<br />width 0.0 - 1.0 is the reasonable amount generally<br />height 0.0 - 1.0 is the reasonable amount generally<br />p6 almost always 0.0<br />p11 seems to be unknown but almost always 0 int
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2D3B147AFAD49DE0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawSpriteArx(string textureDict, string textureName, float x, float y, float width, float height, float p6, int red, int green, int blue, int alpha, int /* bug: Any */ p11, int /* bug: Any */ p12)
{
Function.Call((Hash)0x2D3B147AFAD49DE0, textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12);
}

/// <summary>
/// Similar to _DRAW_SPRITE, but seems to be some kind of &quot;interactive&quot; sprite, at least used by render targets.<br />These seem to be the only dicts ever requested by this native:<br /><br />prop_screen_biker_laptop<br />Prop_Screen_GR_Disruption<br />Prop_Screen_TaleOfUs<br />prop_screen_nightclub<br />Prop_Screen_IE_Adhawk<br />prop_screen_sm_free_trade_shipping<br />prop_screen_hacker_truck<br />MPDesktop<br />Prop_Screen_Nightclub<br />And a few others<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x2BC54A8188768488<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawSpriteNamedRendertarget(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, int /* bug: Any */ p11)
{
Function.Call((Hash)0x2BC54A8188768488, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
}

/// <summary>
/// Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.<br /><br />u1, v1 - texture coordinates for the top-left corner<br />u2, v2 - texture coordinates for the bottom-right corner
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x95812F9B26074726<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DrawSpriteArxWithUv(string textureDict, string textureName, float x, float y, float width, float height, float u1, float v1, float u2, float v2, float heading, int red, int green, int blue, int alpha, int /* bug: Any */ p15)
{
Function.Call((Hash)0x95812F9B26074726, textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15);
}

/// <summary>
/// Example:<br />GRAPHICS::ADD_ENTITY_ICON(a_0, &quot;MP_Arrow&quot;);<br /><br />I tried this and nothing happened...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CD43EEE12BF4DD0<br />
/// </para>
/// </remarks>
public static int AddEntityIcon(int /* Entity */ entity, string icon)
{
return Function.Call<int>((Hash)0x9CD43EEE12BF4DD0, entity, icon);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0E8BEECCA96BA31<br />
/// </para>
/// </remarks>
public static void SetEntityIconVisibility(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xE0E8BEECCA96BA31, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D5F595CCAE2E238<br />
/// </para>
/// </remarks>
public static void SetEntityIconColor(int /* Entity */ entity, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x1D5F595CCAE2E238, entity, red, green, blue, alpha);
}

/// <summary>
/// Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.<br />From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.<br /><br />Example in C#:<br />Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);<br />Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);<br />Function.Call(Hash.DRAW_SPRITE, &quot;helicopterhud&quot;, &quot;hud_corner&quot;, -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);<br />Function.Call(Hash.DRAW_SPRITE, &quot;helicopterhud&quot;, &quot;hud_corner&quot;, 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);<br />Function.Call(Hash.DRAW_SPRITE, &quot;helicopterhud&quot;, &quot;hud_corner&quot;, -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);<br />Function.Call(Hash.DRAW_SPRITE, &quot;helicopterhud&quot;, &quot;hud_corner&quot;, 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);<br />Function.Call(Hash.CLEAR_DRAW_ORIGIN);<br /><br />Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg<br />If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.<br /><br />This function also effects the drawing of texts and other UI-elements.<br />The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA0008F3BBB8F416<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDrawOrigin(float x, float y, float z, int /* bug: Any */ p3)
{
Function.Call((Hash)0xAA0008F3BBB8F416, x, y, z, p3);
}

/// <summary>
/// Resets the screen&apos;s draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.<br /><br />See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF0B610F6BE0D7AF<br />
/// </para>
/// </remarks>
public static void ClearDrawOrigin()
{
Function.Call((Hash)0xFF0B610F6BE0D7AF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x338D9F609FD632DB<br />
/// </para>
/// </remarks>
public static int SetBinkMovie(string name)
{
return Function.Call<int>((Hash)0x338D9F609FD632DB, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x70D2CC8A542A973C<br />
/// </para>
/// </remarks>
public static void PlayBinkMovie(int binkMovie)
{
Function.Call((Hash)0x70D2CC8A542A973C, binkMovie);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x63606A61DE68898A<br />
/// </para>
/// </remarks>
public static void StopBinkMovie(int binkMovie)
{
Function.Call((Hash)0x63606A61DE68898A, binkMovie);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x04D950EEFA4EED8C<br />
/// </para>
/// </remarks>
public static void ReleaseBinkMovie(int binkMovie)
{
Function.Call((Hash)0x04D950EEFA4EED8C, binkMovie);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x7118E83EEB9F7238<br />
/// </para>
/// </remarks>
public static void DrawBinkMovie(int binkMovie, float p1, float p2, float p3, float p4, float p5, int r, int g, int b, int a)
{
Function.Call((Hash)0x7118E83EEB9F7238, binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
}

/// <summary>
/// In percentage: 0.0 - 100.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0CB6B3446855B57A<br />
/// </para>
/// </remarks>
public static void SetBinkMovieTime(int binkMovie, float progress)
{
Function.Call((Hash)0x0CB6B3446855B57A, binkMovie, progress);
}

/// <summary>
/// In percentage: 0.0 - 100.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x8E17DDD6B9D5BF29<br />
/// </para>
/// </remarks>
public static float GetBinkMovieTime(int binkMovie)
{
return Function.Call<float>((Hash)0x8E17DDD6B9D5BF29, binkMovie);
}

/// <summary>
/// binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xAFF33B1178172223<br />
/// </para>
/// </remarks>
public static void SetBinkMovieVolume(int binkMovie, float value)
{
Function.Call((Hash)0xAFF33B1178172223, binkMovie, value);
}

/// <summary>
/// Might be more appropriate in AUDIO?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x845BAD77CC770633<br />
/// </para>
/// </remarks>
public static void AttachTvAudioToEntity(int /* Entity */ entity)
{
Function.Call((Hash)0x845BAD77CC770633, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xF816F2933752322D<br />
/// </para>
/// </remarks>
public static void SetBinkMovieAudioFrontend(int binkMovie, bool p1)
{
Function.Call((Hash)0xF816F2933752322D, binkMovie, p1);
}

/// <summary>
/// Probably changes tvs from being a 3d audio to being &quot;global&quot; audio
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x113D2C5DC57E1774<br />
/// </para>
/// </remarks>
public static void SetTvAudioFrontend(bool toggle)
{
Function.Call((Hash)0x113D2C5DC57E1774, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x6805D58CAA427B72<br />
/// </para>
/// </remarks>
public static void SetBinkShouldSkip(int binkMovie, bool bShouldSkip)
{
Function.Call((Hash)0x6805D58CAA427B72, binkMovie, bShouldSkip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB66064452270E8F1<br />
/// </para>
/// </remarks>
public static int LoadMovieMeshSet(string movieMeshSetName)
{
return Function.Call<int>((Hash)0xB66064452270E8F1, movieMeshSetName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB119AA014E89183<br />
/// </para>
/// </remarks>
public static void ReleaseMovieMeshSet(int movieMeshSet)
{
Function.Call((Hash)0xEB119AA014E89183, movieMeshSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B6E70C5CEEF4EEB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int QueryMovieMeshSetState(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x9B6E70C5CEEF4EEB, p0);
}

/// <summary>
/// int screenresx,screenresy;<br />GET_SCREEN_RESOLUTION(&amp;screenresx,&amp;screenresy);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x888D57E407E63624<br />
/// </para>
/// </remarks>
public static void GetScreenResolution(ref int x, ref int y)
{
var nativeAssistPointerVar0 = x;
var nativeAssistPointerVar1 = y;
unsafe {
Function.Call((Hash)0x888D57E407E63624, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
x = nativeAssistPointerVar0;
y = nativeAssistPointerVar1;
}

/// <summary>
/// Returns current screen resolution.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x873C9F3104101DD3<br />
/// </para>
/// </remarks>
public static void GetActualScreenResolution(ref int x, ref int y)
{
var nativeAssistPointerVar0 = x;
var nativeAssistPointerVar1 = y;
unsafe {
Function.Call((Hash)0x873C9F3104101DD3, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
x = nativeAssistPointerVar0;
y = nativeAssistPointerVar1;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1307EF624A80D87<br />
/// </para>
/// </remarks>
public static float GetAspectRatio(bool b)
{
return Function.Call<float>((Hash)0xF1307EF624A80D87, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2EBE8CBC58B90E9<br />
/// </para>
/// </remarks>
public static float GetScreenAspectRatio()
{
return Function.Call<float>((Hash)0xB2EBE8CBC58B90E9);
}

/// <summary>
/// Setting Aspect Ratio Manually in game will return:<br /><br />false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )<br />true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )<br /><br />Setting Aspect Ratio to &quot;Auto&quot; in game will return &quot;false&quot; or &quot;true&quot; based on the actual set Resolution Ratio.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30CF4BDA4FCB1905<br />
/// </para>
/// </remarks>
public static bool GetIsWidescreen()
{
return Function.Call<bool>((Hash)0x30CF4BDA4FCB1905);
}

/// <summary>
/// false = Any resolution &lt; 1280x720<br />true = Any resolution &gt;= 1280x720
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84ED31191CC5D2C9<br />
/// </para>
/// </remarks>
public static bool GetIsHidef()
{
return Function.Call<bool>((Hash)0x84ED31191CC5D2C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFABC7722293DA7C<br />
/// </para>
/// </remarks>
public static void AdjustNextPosSizeAsNormalized169()
{
Function.Call((Hash)0xEFABC7722293DA7C);
}

/// <summary>
/// Enables Night Vision.<br /><br />Example:<br />C#: Function.Call(Hash.SET_NIGHTVISION, true);<br />C++: GRAPHICS::SET_NIGHTVISION(true);<br /><br />BOOL toggle:<br />true = turns night vision on for your player.<br />false = turns night vision off for your player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18F621F7A5B1F85D<br />
/// </para>
/// </remarks>
public static void SetNightvision(bool toggle)
{
Function.Call((Hash)0x18F621F7A5B1F85D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35FB78DC42B7BD21<br />
/// </para>
/// </remarks>
public static bool GetRequestingnightvision()
{
return Function.Call<bool>((Hash)0x35FB78DC42B7BD21);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2202A3F42C8E5F79<br />
/// </para>
/// </remarks>
public static bool GetUsingnightvision()
{
return Function.Call<bool>((Hash)0x2202A3F42C8E5F79);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF398BEEE4EF45F9<br />
/// </para>
/// </remarks>
public static void SetExposuretweak(bool p0)
{
Function.Call((Hash)0xEF398BEEE4EF45F9, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x814AF7DCAACC597B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForceExposureReadback(int /* bug: Any */ p0)
{
Function.Call((Hash)0x814AF7DCAACC597B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x43FA7CBE20DAB219<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void OverrideNightvisionLightRange(int /* bug: Any */ p0)
{
Function.Call((Hash)0x43FA7CBE20DAB219, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE787BF1C5CF823C9<br />
/// </para>
/// </remarks>
public static void SetNoiseoveride(bool toggle)
{
Function.Call((Hash)0xE787BF1C5CF823C9, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB6A7C3BB17A0C67<br />
/// </para>
/// </remarks>
public static void SetNoisinessoveride(float value)
{
Function.Call((Hash)0xCB6A7C3BB17A0C67, value);
}

/// <summary>
/// Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)<br /><br />Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.<br /><br /><br />For .NET users...<br /><br />VB:<br />Public Shared Function World3DToScreen2d(pos as vector3) As Vector2<br /><br />        Dim x2dp, y2dp As New Native.OutputArgument<br /><br />        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)<br />        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))<br />      <br />    End Function<br /><br />C#:<br />Vector2 World3DToScreen2d(Vector3 pos)<br />    {<br />        var x2dp = new OutputArgument();<br />        var y2dp = new OutputArgument();<br /><br />        Function.Call&lt;bool&gt;(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);<br />        return new Vector2(x2dp.GetResult&lt;float&gt;(), y2dp.GetResult&lt;float&gt;());<br />    }<br />//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g &apos;0.05&apos; small.<br /><br />Used to be called _WORLD3D_TO_SCREEN2D<br /><br />I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34E82F05DF2974F5<br />
/// </para>
/// </remarks>
public static bool GetScreenCoordFromWorldCoord(float worldX, float worldY, float worldZ, ref float screenX, ref float screenY)
{
var nativeAssistPointerVar0 = screenX;
var nativeAssistPointerVar1 = screenY;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x34E82F05DF2974F5, worldX, worldY, worldZ, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
screenX = nativeAssistPointerVar0;
screenY = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Returns the texture resolution of the passed texture dict+name.<br /><br />Note: Most texture resolutions are doubled compared to the console version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35736EE65BD00C11<br />
/// </para>
/// </remarks>
public static Vector3 GetTextureResolution(string textureDict, string textureName)
{
return Function.Call<Vector3>((Hash)0x35736EE65BD00C11, textureDict, textureName);
}

/// <summary>
/// Overriding ped badge texture to a passed texture. It&apos;s synced between players (even custom textures!), don&apos;t forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x95EB5E34F821BABE<br />
/// </para>
/// </remarks>
public static bool OverridePedCrewLogoTexture(int /* Ped */ ped, string txd, string txn)
{
return Function.Call<bool>((Hash)0x95EB5E34F821BABE, ped, txd, txn);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2892E7E55D7073A<br />
/// </para>
/// </remarks>
public static void SetDistanceBlurStrengthOverride(float p0)
{
Function.Call((Hash)0xE2892E7E55D7073A, p0);
}

/// <summary>
/// Purpose of p0 and p1 unknown.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AB84296FED9CFC6<br />
/// </para>
/// </remarks>
public static void SetFlash(float p0, float p1, float fadeIn, float duration, float fadeOut)
{
Function.Call((Hash)0x0AB84296FED9CFC6, p0, p1, fadeIn, duration, fadeOut);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3669F1B198DCAA4F<br />
/// </para>
/// </remarks>
public static void DisableOcclusionThisFrame()
{
Function.Call((Hash)0x3669F1B198DCAA4F);
}

/// <summary>
/// Does not affect weapons, particles, fire/explosions, flashlights or the sun.<br />When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.<br /><br />Used in Humane Labs Heist for EMP.<br /><br />state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1268615ACE24D504<br />
/// </para>
/// </remarks>
public static void SetArtificialLightsState(bool state)
{
Function.Call((Hash)0x1268615ACE24D504, state);
}

/// <summary>
/// If &quot;blackout&quot; is enabled, this native allows you to ignore &quot;blackout&quot; for vehicles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xE2B187C0939B3D32<br />
/// </para>
/// </remarks>
public static void SetArtificialVehicleLightsState(bool toggle)
{
Function.Call((Hash)0xE2B187C0939B3D32, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC35A6D07C93802B2<br />
/// </para>
/// </remarks>
public static void DisableHdtexThisFrame()
{
Function.Call((Hash)0xC35A6D07C93802B2);
}

/// <summary>
/// Creates a tracked point, useful for checking the visibility of a 3D point on screen.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2C9439ED45DEA60<br />
/// </para>
/// </remarks>
public static int CreateTrackedPoint()
{
return Function.Call<int>((Hash)0xE2C9439ED45DEA60);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x164ECBB3CF750CB0<br />
/// </para>
/// </remarks>
public static void SetTrackedPointInfo(int point, float x, float y, float z, float radius)
{
Function.Call((Hash)0x164ECBB3CF750CB0, point, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC45CCDAAC9221CA8<br />
/// </para>
/// </remarks>
public static bool IsTrackedPointVisible(int point)
{
return Function.Call<bool>((Hash)0xC45CCDAAC9221CA8, point);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB25DC90BAD56CA42<br />
/// </para>
/// </remarks>
public static void DestroyTrackedPoint(int point)
{
Function.Call((Hash)0xB25DC90BAD56CA42, point);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE197EAA669238F4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int SetGrassCullSphere(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<int>((Hash)0xBE197EAA669238F4, p0, p1, p2, p3);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61F95E5BB3E0A8C6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RemoveGrassCullSphere(int /* bug: Any */ p0)
{
Function.Call((Hash)0x61F95E5BB3E0A8C6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE51BC858F32BA66<br />
/// </para>
/// </remarks>
public static void ProcgrassEnableCullsphere(int p0, float p1, float p2, float p3, float p4)
{
Function.Call((Hash)0xAE51BC858F32BA66, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x649C97D52332341A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ProcgrassDisableCullsphere(int /* bug: Any */ p0)
{
Function.Call((Hash)0x649C97D52332341A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C42340F916C5930<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ProcgrassIsCullsphereEnabled(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x2C42340F916C5930, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14FC5833464340A8<br />
/// </para>
/// </remarks>
public static void ProcgrassEnableAmbscalescan()
{
Function.Call((Hash)0x14FC5833464340A8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0218BA067D249DEA<br />
/// </para>
/// </remarks>
public static void ProcgrassDisableAmbscalescan()
{
Function.Call((Hash)0x0218BA067D249DEA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1612C45F9E3E0D44<br />
/// </para>
/// </remarks>
public static void DisableProcobjCreation()
{
Function.Call((Hash)0x1612C45F9E3E0D44);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DEBD9C4DC995692<br />
/// </para>
/// </remarks>
public static void EnableProcobjCreation()
{
Function.Call((Hash)0x5DEBD9C4DC995692);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xAAE9BE70EC7C69AB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void GrassbatchEnableFlatteningExtInSphere(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7)
{
Function.Call((Hash)0xAAE9BE70EC7C69AB, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D955F6A9E0295B1<br />
/// </para>
/// </remarks>
public static void GrassbatchEnableFlatteningInSphere(float x, float y, float z, float radius, float p4, float p5, float p6)
{
Function.Call((Hash)0x6D955F6A9E0295B1, x, y, z, radius, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x302C91AB2D477F7E<br />
/// </para>
/// </remarks>
public static void GrassbatchDisableFlattening()
{
Function.Call((Hash)0x302C91AB2D477F7E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03FC694AE06C5A20<br />
/// </para>
/// </remarks>
public static void CascadeShadowsInitSession()
{
Function.Call((Hash)0x03FC694AE06C5A20);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2936CAB8B58FCBD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void CascadeShadowsSetCascadeBounds(int /* bug: Any */ p0, bool p1, float p2, float p3, float p4, float p5, bool p6, float p7)
{
Function.Call((Hash)0xD2936CAB8B58FCBD, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F0F3F56635809EF<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetCascadeBoundsScale(float p0)
{
Function.Call((Hash)0x5F0F3F56635809EF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E9DAF5A20F15908<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetEntityTrackerScale(float p0)
{
Function.Call((Hash)0x5E9DAF5A20F15908, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36F6626459D91457<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetSplitZExpWeight(float p0)
{
Function.Call((Hash)0x36F6626459D91457, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x259BA6D4E6F808F1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void CascadeShadowsSetBoundPosition(int /* bug: Any */ p0)
{
Function.Call((Hash)0x259BA6D4E6F808F1, p0);
}

/// <summary>
/// When this is set to ON, shadows only draw as you get nearer.<br /><br />When OFF, they draw from a further distance.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80ECBC0C856D3B0B<br />
/// </para>
/// </remarks>
public static void CascadeShadowsEnableEntityTracker(bool toggle)
{
Function.Call((Hash)0x80ECBC0C856D3B0B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25FC3E33A31AD0C9<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetScreenSizeCheckEnabled(bool p0)
{
Function.Call((Hash)0x25FC3E33A31AD0C9, p0);
}

/// <summary>
/// Possible values:<br />&quot;CSM_ST_POINT&quot;<br />&quot;CSM_ST_LINEAR&quot;<br />&quot;CSM_ST_TWOTAP&quot;<br />&quot;CSM_ST_BOX3x3&quot;<br />&quot;CSM_ST_BOX4x4&quot;<br />&quot;CSM_ST_DITHER2_LINEAR&quot;<br />&quot;CSM_ST_CUBIC&quot;<br />&quot;CSM_ST_DITHER4&quot;<br />&quot;CSM_ST_DITHER16&quot;<br />&quot;CSM_ST_SOFT16&quot;<br />&quot;CSM_ST_DITHER16_RPDB&quot;<br />&quot;CSM_ST_POISSON16_RPDB_GNORM&quot;<br />&quot;CSM_ST_HIGHRES_BOX4x4&quot;<br />&quot;CSM_ST_CLOUDS_SIMPLE&quot;<br />&quot;CSM_ST_CLOUDS_LINEAR&quot;<br />&quot;CSM_ST_CLOUDS_TWOTAP&quot;<br />&quot;CSM_ST_CLOUDS_BOX3x3&quot;<br />&quot;CSM_ST_CLOUDS_BOX4x4&quot;<br />&quot;CSM_ST_CLOUDS_DITHER2_LINEAR&quot;<br />&quot;CSM_ST_CLOUDS_SOFT16&quot;<br />&quot;CSM_ST_CLOUDS_DITHER16_RPDB&quot;<br />&quot;CSM_ST_CLOUDS_POISSON16_RPDB_GNORM&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB11D94BC55F41932<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetShadowSampleType(string type)
{
Function.Call((Hash)0xB11D94BC55F41932, type);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27CB772218215325<br />
/// </para>
/// </remarks>
public static void CascadeShadowsClearShadowSampleType()
{
Function.Call((Hash)0x27CB772218215325);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DDBF9DFFC4AC080<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetAircraftMode(bool p0)
{
Function.Call((Hash)0x6DDBF9DFFC4AC080, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD39D13C9FEBF0511<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetDynamicDepthMode(bool p0)
{
Function.Call((Hash)0xD39D13C9FEBF0511, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02AC28F3A01FA04A<br />
/// </para>
/// </remarks>
public static void CascadeShadowsSetDynamicDepthValue(float p0)
{
Function.Call((Hash)0x02AC28F3A01FA04A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AE73D8DF3A762B2<br />
/// </para>
/// </remarks>
public static void CascadeShadowsEnableFreezer(bool p0)
{
Function.Call((Hash)0x0AE73D8DF3A762B2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0xCA465D9CC0D231BA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaterReflectionSetScriptObjectVisibility(int /* bug: Any */ p0)
{
Function.Call((Hash)0xCA465D9CC0D231BA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA51C4B86B71652AE<br />
/// </para>
/// </remarks>
public static void GolfTrailSetEnabled(bool toggle)
{
Function.Call((Hash)0xA51C4B86B71652AE, toggle);
}

/// <summary>
/// p8 seems to always be false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x312342E1A4874F3F<br />
/// </para>
/// </remarks>
public static void GolfTrailSetPath(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8)
{
Function.Call((Hash)0x312342E1A4874F3F, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2485D34E50A22E84<br />
/// </para>
/// </remarks>
public static void GolfTrailSetRadius(float p0, float p1, float p2)
{
Function.Call((Hash)0x2485D34E50A22E84, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12995F2E53FFA601<br />
/// </para>
/// </remarks>
public static void GolfTrailSetColour(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11)
{
Function.Call((Hash)0x12995F2E53FFA601, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBAA5EC848BA2D46<br />
/// </para>
/// </remarks>
public static void GolfTrailSetTessellation(int p0, int p1)
{
Function.Call((Hash)0xDBAA5EC848BA2D46, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0416B061F2B7E5E<br />
/// </para>
/// </remarks>
public static void GolfTrailSetFixedControlPointEnable(bool p0)
{
Function.Call((Hash)0xC0416B061F2B7E5E, p0);
}

/// <summary>
/// 12 matches across 4 scripts. All 4 scripts were job creators.<br /><br />type ranged from 0 - 2.<br />p4 was always 0.2f. Likely scale.<br />assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).<br /><br />Tested but noticed nothing.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1BB03742917A5D6<br />
/// </para>
/// </remarks>
public static void GolfTrailSetFixedControlPoint(int type, float xPos, float yPos, float zPos, float p4, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xB1BB03742917A5D6, type, xPos, yPos, zPos, p4, red, green, blue, alpha);
}

/// <summary>
/// Only appeared in Golf &amp; Golf_mp. Parameters were all ptrs
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CFDD90B2B844BF7<br />
/// </para>
/// </remarks>
public static void GolfTrailSetShaderParams(float p0, float p1, float p2, float p3, float p4)
{
Function.Call((Hash)0x9CFDD90B2B844BF7, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06F761EA47C1D3ED<br />
/// </para>
/// </remarks>
public static void GolfTrailSetFacing(bool p0)
{
Function.Call((Hash)0x06F761EA47C1D3ED, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4819F5E23E2FFAD<br />
/// </para>
/// </remarks>
public static float GolfTrailGetMaxHeight()
{
return Function.Call<float>((Hash)0xA4819F5E23E2FFAD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4664972A9B8F8BA<br />
/// </para>
/// </remarks>
public static Vector3 GolfTrailGetVisualControlPoint(int p0)
{
return Function.Call<Vector3>((Hash)0xA4664972A9B8F8BA, p0);
}

/// <summary>
/// Toggles Heatvision on/off.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E08924259E08CE0<br />
/// </para>
/// </remarks>
public static void SetSeethrough(bool toggle)
{
Function.Call((Hash)0x7E08924259E08CE0, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44B80ABAB9D80BD3<br />
/// </para>
/// </remarks>
public static bool GetUsingseethrough()
{
return Function.Call<bool>((Hash)0x44B80ABAB9D80BD3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70A64C0234EF522C<br />
/// </para>
/// </remarks>
public static void SeethroughReset()
{
Function.Call((Hash)0x70A64C0234EF522C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xA78DE25577300BA1<br />
/// </para>
/// </remarks>
public static void SeethroughSetFadeStartdistance(float distance)
{
Function.Call((Hash)0xA78DE25577300BA1, distance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x9D75795B9DC6EBBF<br />
/// </para>
/// </remarks>
public static void SeethroughSetFadeEnddistance(float distance)
{
Function.Call((Hash)0x9D75795B9DC6EBBF, distance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x43DBAE39626CE83F<br />
/// </para>
/// </remarks>
public static float SeethroughGetMaxThickness()
{
return Function.Call<float>((Hash)0x43DBAE39626CE83F);
}

/// <summary>
/// 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is &quot;better&quot; view. See https://gfycat.com/FirmFlippantGourami<br />min: 1.0<br />max: 10000.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x0C8FAC83902A62DF<br />
/// </para>
/// </remarks>
public static void SeethroughSetMaxThickness(float thickness)
{
Function.Call((Hash)0x0C8FAC83902A62DF, thickness);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xFF5992E1C9E65D05<br />
/// </para>
/// </remarks>
public static void SeethroughSetNoiseMin(float amount)
{
Function.Call((Hash)0xFF5992E1C9E65D05, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xFEBFBFDFB66039DE<br />
/// </para>
/// </remarks>
public static void SeethroughSetNoiseMax(float amount)
{
Function.Call((Hash)0xFEBFBFDFB66039DE, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x19E50EB6E33E1D28<br />
/// </para>
/// </remarks>
public static void SeethroughSetHilightIntensity(float intensity)
{
Function.Call((Hash)0x19E50EB6E33E1D28, intensity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x1636D7FC127B10D2<br />
/// </para>
/// </remarks>
public static void SeethroughSetHighlightNoise(float noise)
{
Function.Call((Hash)0x1636D7FC127B10D2, noise);
}

/// <summary>
/// min: 0.0<br />max: 0.75
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7D0B00177485411<br />
/// </para>
/// </remarks>
public static void SeethroughSetHeatscale(int index, float heatScale)
{
Function.Call((Hash)0xD7D0B00177485411, index, heatScale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x1086127B3A63505E<br />
/// </para>
/// </remarks>
public static void SeethroughSetColorNear(int red, int green, int blue)
{
Function.Call((Hash)0x1086127B3A63505E, red, green, blue);
}

/// <summary>
/// Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3C641F3630BF6DA<br />
/// </para>
/// </remarks>
public static void SetMotionblurMaxVelScaler(float p0)
{
Function.Call((Hash)0xB3C641F3630BF6DA, p0);
}

/// <summary>
/// Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE59343E9E96529E7<br />
/// </para>
/// </remarks>
public static float GetMotionblurMaxVelScaler()
{
return Function.Call<float>((Hash)0xE59343E9E96529E7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x6A51F78772175A51<br />
/// </para>
/// </remarks>
public static void SetForceMotionblur(bool toggle)
{
Function.Call((Hash)0x6A51F78772175A51, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE63D7C6EECECB66B<br />
/// </para>
/// </remarks>
public static void TogglePlayerDamageOverlay(bool toggle)
{
Function.Call((Hash)0xE63D7C6EECECB66B, toggle);
}

/// <summary>
/// Sets an unknown value related to timecycles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3E2C1B4C59DBC77<br />
/// </para>
/// </remarks>
public static void ResetAdaptation(int unk)
{
Function.Call((Hash)0xE3E2C1B4C59DBC77, unk);
}

/// <summary>
/// time in ms to transition to fully blurred screen
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA328A24AAA6B7FDC<br />
/// </para>
/// </remarks>
public static bool TriggerScreenblurFadeIn(float transitionTime)
{
return Function.Call<bool>((Hash)0xA328A24AAA6B7FDC, transitionTime);
}

/// <summary>
/// time in ms to transition from fully blurred to normal
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFACC8AEF94430D5<br />
/// </para>
/// </remarks>
public static bool TriggerScreenblurFadeOut(float transitionTime)
{
return Function.Call<bool>((Hash)0xEFACC8AEF94430D5, transitionTime);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE81239437E8C5A8<br />
/// </para>
/// </remarks>
public static void DisableScreenblurFade()
{
Function.Call((Hash)0xDE81239437E8C5A8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CCABFFCA31DDE33<br />
/// </para>
/// </remarks>
public static float GetScreenblurFadeCurrentTime()
{
return Function.Call<float>((Hash)0x5CCABFFCA31DDE33);
}

/// <summary>
/// Returns whether screen transition to blur/from blur is running.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B226C785A52A0A9<br />
/// </para>
/// </remarks>
public static bool IsScreenblurFadeRunning()
{
return Function.Call<bool>((Hash)0x7B226C785A52A0A9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFC252D8A3E15AB7<br />
/// </para>
/// </remarks>
public static void TogglePausedRenderphases(bool toggle)
{
Function.Call((Hash)0xDFC252D8A3E15AB7, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB3DAC2C86001E5E<br />
/// </para>
/// </remarks>
public static bool GetTogglePausedRenderphasesStatus()
{
return Function.Call<bool>((Hash)0xEB3DAC2C86001E5E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1C8709406F2C41C<br />
/// </para>
/// </remarks>
public static void ResetPausedRenderphases()
{
Function.Call((Hash)0xE1C8709406F2C41C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x851CD923176EBA7C<br />
/// </para>
/// </remarks>
public static void GrabPausemenuOwnership()
{
Function.Call((Hash)0x851CD923176EBA7C);
}

/// <summary>
/// Every p2 - p5 occurrence was 0f.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA3D65906822BED5<br />
/// </para>
/// </remarks>
public static void SetHidofOverride(bool p0, bool p1, float nearplaneOut, float nearplaneIn, float farplaneOut, float farplaneIn)
{
Function.Call((Hash)0xBA3D65906822BED5, p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xB569F41F3E7E83A4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetLockAdaptiveDofDistance(int /* bug: Any */ p0)
{
Function.Call((Hash)0xB569F41F3E7E83A4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AC24EAB6D74118D<br />
/// </para>
/// </remarks>
public static bool PhonephotoeditorToggle(bool p0)
{
return Function.Call<bool>((Hash)0x7AC24EAB6D74118D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCEDB009461DA156<br />
/// </para>
/// </remarks>
public static bool PhonephotoeditorIsActive()
{
return Function.Call<bool>((Hash)0xBCEDB009461DA156);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27FEB5254759CDE3<br />
/// </para>
/// </remarks>
public static bool PhonephotoeditorSetFrameTxd(string textureDict, bool p1)
{
return Function.Call<bool>((Hash)0x27FEB5254759CDE3, textureDict, p1);
}

/// <summary>
/// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(&quot;scr_paleto_roof_impact&quot;, -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);<br /><br />Axis - Invert Axis Flags<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json<br /><br /><br />-------------------------------------------------------------------<br />C#<br /><br />Function.Call&lt;int&gt;(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.<br /><br />char *effectname = This is an in-game effect name, for e.g. &quot;scr_fbi4_trucks_crash&quot; is used to give the effects when truck crashes etc<br /><br />float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates<br /><br />float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.<br /><br />float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f<br /><br />bool xaxis, yaxis, zaxis = To bool the axis values.<br /><br />example:<br />Function.Call&lt;int&gt;(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, &quot;scr_fbi4_trucks_crash&quot;, GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25129531F77B9ED3<br />
/// </para>
/// </remarks>
public static bool StartParticleFxNonLoopedAtCoord(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis)
{
return Function.Call<bool>((Hash)0x25129531F77B9ED3, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF56B8137DF10135D<br />
/// </para>
/// </remarks>
public static bool StartNetworkedParticleFxNonLoopedAtCoord(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
{
return Function.Call<bool>((Hash)0xF56B8137DF10135D, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
}

/// <summary>
/// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(&quot;scr_sh_bong_smoke&quot;, PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);<br /><br />Axis - Invert Axis Flags<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E7E72961BA18619<br />
/// </para>
/// </remarks>
public static bool StartParticleFxNonLoopedOnPedBone(string effectName, int /* Ped */ ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ)
{
return Function.Call<bool>((Hash)0x0E7E72961BA18619, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA41B6A43642AC2CF<br />
/// </para>
/// </remarks>
public static bool StartNetworkedParticleFxNonLoopedOnPedBone(string effectName, int /* Ped */ ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ)
{
return Function.Call<bool>((Hash)0xA41B6A43642AC2CF, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}

/// <summary>
/// Starts a particle effect on an entity for example your player.<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json<br /><br />Example:<br />C#:<br />Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, &quot;scr_rcbarry2&quot;);                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, &quot;scr_rcbarry2&quot;);                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, &quot;scr_clown_appears&quot;, Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);<br /><br />Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE<br />however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native<br /><br />-can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D53A3B8DA0809D2<br />
/// </para>
/// </remarks>
public static bool StartParticleFxNonLoopedOnEntity(string effectName, int /* Entity */ entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ)
{
return Function.Call<bool>((Hash)0x0D53A3B8DA0809D2, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC95EB1DB6E92113D<br />
/// </para>
/// </remarks>
public static bool StartNetworkedParticleFxNonLoopedOnEntity(string effectName, int /* Entity */ entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ)
{
return Function.Call<bool>((Hash)0xC95EB1DB6E92113D, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x02B1F2A72E0F5325<br />
/// </para>
/// </remarks>
public static bool StartParticleFxNonLoopedOnEntityBone(string effectName, int /* Entity */ entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ)
{
return Function.Call<bool>((Hash)0x02B1F2A72E0F5325, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}

/// <summary>
/// only works on some fx&apos;s, not networked
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26143A59EF48B262<br />
/// </para>
/// </remarks>
public static void SetParticleFxNonLoopedColour(float r, float g, float b)
{
Function.Call((Hash)0x26143A59EF48B262, r, g, b);
}

/// <summary>
/// Usage example for C#:<br /><br />Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });<br /><br />Note: the argument alpha ranges from 0.0f-1.0f !
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77168D722C58B2FC<br />
/// </para>
/// </remarks>
public static void SetParticleFxNonLoopedAlpha(float alpha)
{
Function.Call((Hash)0x77168D722C58B2FC, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x1E2E01C00837D26E<br />
/// </para>
/// </remarks>
public static void SetParticleFxNonLoopedEmitterSize(float p0, float p1, float scale)
{
Function.Call((Hash)0x1E2E01C00837D26E, p0, p1, scale);
}

/// <summary>
/// Used only once in the scripts (taxi_clowncar)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8CDE909A0370BB3A<br />
/// </para>
/// </remarks>
public static void SetParticleFxForceVehicleInterior(bool toggle)
{
Function.Call((Hash)0x8CDE909A0370BB3A, toggle);
}

/// <summary>
/// GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(&quot;scr_fbi_falling_debris&quot;, 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)<br /><br /><br />p11 seems to be always 0<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE184F4F0DC5910E7<br />
/// </para>
/// </remarks>
public static int StartParticleFxLoopedAtCoord(string effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
{
return Function.Call<int>((Hash)0xE184F4F0DC5910E7, effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF28DA9F38CD1787C<br />
/// </para>
/// </remarks>
public static int StartParticleFxLoopedOnPedBone(string effectName, int /* Ped */ ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis)
{
return Function.Call<int>((Hash)0xF28DA9F38CD1787C, effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1AE42C1660FD6517<br />
/// </para>
/// </remarks>
public static int StartParticleFxLoopedOnEntity(string effectName, int /* Entity */ entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis)
{
return Function.Call<int>((Hash)0x1AE42C1660FD6517, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6EB449E33977F0B<br />
/// </para>
/// </remarks>
public static int StartParticleFxLoopedOnEntityBone(string effectName, int /* Entity */ entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis)
{
return Function.Call<int>((Hash)0xC6EB449E33977F0B, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F60E89A7B64EE1D<br />
/// </para>
/// </remarks>
public static int StartNetworkedParticleFxLoopedOnEntity(string effectName, int /* Entity */ entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a)
{
return Function.Call<int>((Hash)0x6F60E89A7B64EE1D, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, r, g, b, a);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDE23F30CC5A0F03<br />
/// </para>
/// </remarks>
public static int StartNetworkedParticleFxLoopedOnEntityBone(string effectName, int /* Entity */ entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a)
{
return Function.Call<int>((Hash)0xDDE23F30CC5A0F03, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a);
}

/// <summary>
/// p1 is always 0 in the native scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F75998877616996<br />
/// </para>
/// </remarks>
public static void StopParticleFxLooped(int ptfxHandle, bool p1)
{
Function.Call((Hash)0x8F75998877616996, ptfxHandle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC401503DFE8D53CF<br />
/// </para>
/// </remarks>
public static void RemoveParticleFx(int ptfxHandle, bool p1)
{
Function.Call((Hash)0xC401503DFE8D53CF, ptfxHandle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8FEAEEBCC127425<br />
/// </para>
/// </remarks>
public static void RemoveParticleFxFromEntity(int /* Entity */ entity)
{
Function.Call((Hash)0xB8FEAEEBCC127425, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD19FA1C6D657305<br />
/// </para>
/// </remarks>
public static void RemoveParticleFxInRange(float X, float Y, float Z, float radius)
{
Function.Call((Hash)0xDD19FA1C6D657305, X, Y, Z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xBA0127DA25FD54C9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForceParticleFxInVehicleInterior(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xBA0127DA25FD54C9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74AFEF0D2E1E409B<br />
/// </para>
/// </remarks>
public static bool DoesParticleFxLoopedExist(int ptfxHandle)
{
return Function.Call<bool>((Hash)0x74AFEF0D2E1E409B, ptfxHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7DDEBEC43483C43<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedOffsets(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ)
{
Function.Call((Hash)0xF7DDEBEC43483C43, ptfxHandle, x, y, z, rotX, rotY, rotZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F0C4B5B1C393BE2<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedEvolution(int ptfxHandle, string propertyName, float amount, bool noNetwork)
{
Function.Call((Hash)0x5F0C4B5B1C393BE2, ptfxHandle, propertyName, amount, noNetwork);
}

/// <summary>
/// only works on some fx&apos;s<br /><br />p4 = 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F8F65877F88783B<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedColour(int ptfxHandle, float r, float g, float b, bool p4)
{
Function.Call((Hash)0x7F8F65877F88783B, ptfxHandle, r, g, b, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x726845132380142E<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedAlpha(int ptfxHandle, float alpha)
{
Function.Call((Hash)0x726845132380142E, ptfxHandle, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB44250AAA456492D<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedScale(int ptfxHandle, float scale)
{
Function.Call((Hash)0xB44250AAA456492D, ptfxHandle, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCB194B85EF7B541<br />
/// </para>
/// </remarks>
public static void SetParticleFxLoopedFarClipDist(int ptfxHandle, float range)
{
Function.Call((Hash)0xDCB194B85EF7B541, ptfxHandle, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEC4047028426510<br />
/// </para>
/// </remarks>
public static void SetParticleFxCamInsideVehicle(bool p0)
{
Function.Call((Hash)0xEEC4047028426510, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACEE6F360FC1F6B6<br />
/// </para>
/// </remarks>
public static void SetParticleFxCamInsideNonplayerVehicle(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xACEE6F360FC1F6B6, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x96EF97DAEB89BEF5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetParticleFxShootoutBoat(int /* bug: Any */ p0)
{
Function.Call((Hash)0x96EF97DAEB89BEF5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A251AA48B2B46DB<br />
/// </para>
/// </remarks>
public static void ClearParticleFxShootoutBoat()
{
Function.Call((Hash)0x2A251AA48B2B46DB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x908311265D42A820<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetParticleFxBloodScale(int /* bug: Any */ p0)
{
Function.Call((Hash)0x908311265D42A820, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xCFD16F0DB5A3535C<br />
/// </para>
/// </remarks>
public static void DisableInWaterPtfx(bool toggle)
{
Function.Call((Hash)0xCFD16F0DB5A3535C, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F6DF3D92271E8A1<br />
/// </para>
/// </remarks>
public static void DisableDownwashPtfx(bool toggle)
{
Function.Call((Hash)0x5F6DF3D92271E8A1, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x2B40A97646381508<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetParticleFxSlipstreamLodrangeScale(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2B40A97646381508, p0);
}

/// <summary>
/// Creates cartoon effect when Michel smokes the weed
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD821490579791273<br />
/// </para>
/// </remarks>
public static void EnableClownBloodVfx(bool toggle)
{
Function.Call((Hash)0xD821490579791273, toggle);
}

/// <summary>
/// Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DCE1F0F78260875<br />
/// </para>
/// </remarks>
public static void EnableAlienBloodVfx(bool toggle)
{
Function.Call((Hash)0x9DCE1F0F78260875, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27E32866E9A5C416<br />
/// </para>
/// </remarks>
public static void SetParticleFxBulletImpactScale(float scale)
{
Function.Call((Hash)0x27E32866E9A5C416, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB90E12CAC1DAB25<br />
/// </para>
/// </remarks>
public static void SetParticleFxBulletImpactLodrangeScale(float p0)
{
Function.Call((Hash)0xBB90E12CAC1DAB25, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA4AE345A153D573<br />
/// </para>
/// </remarks>
public static void SetParticleFxBulletTraceNoAngleReject(bool p0)
{
Function.Call((Hash)0xCA4AE345A153D573, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54E22EA2C1956A8D<br />
/// </para>
/// </remarks>
public static void SetParticleFxBangScrapeLodrangeScale(float p0)
{
Function.Call((Hash)0x54E22EA2C1956A8D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x949F397A288B28B3<br />
/// </para>
/// </remarks>
public static void SetParticleFxFootLodrangeScale(float p0)
{
Function.Call((Hash)0x949F397A288B28B3, p0);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xBA3D194057C79A7B<br />
/// </para>
/// </remarks>
public static void SetParticleFxFootOverrideName(string p0)
{
Function.Call((Hash)0xBA3D194057C79A7B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x5DBF05DB5926D089<br />
/// </para>
/// </remarks>
public static void SetSkidmarkRangeScale(float scale)
{
Function.Call((Hash)0x5DBF05DB5926D089, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xC6730E0D14E50703<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPtfxForceVehicleInteriorFlag(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC6730E0D14E50703, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B079E5221D984D3<br />
/// </para>
/// </remarks>
public static void ForcePostfxBulletImpactsAfterHud(bool p0)
{
Function.Call((Hash)0x9B079E5221D984D3, p0);
}

/// <summary>
/// From the b678d decompiled scripts:<br /><br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;FM_Mission_Controler&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_apartment_mp&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_indep_fireworks&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_mp_cig_plane&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_mp_creator&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_ornate_heist&quot;);<br /> GRAPHICS::USE_PARTICLE_FX_ASSET(&quot;scr_prison_break_heist_station&quot;);<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C38AF3693A69A91<br />
/// </para>
/// </remarks>
public static void UseParticleFxAsset(string name)
{
Function.Call((Hash)0x6C38AF3693A69A91, name);
}

/// <summary>
/// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA1E2D93F6F75ED9<br />
/// </para>
/// </remarks>
public static void SetParticleFxOverride(string oldAsset, string newAsset)
{
Function.Call((Hash)0xEA1E2D93F6F75ED9, oldAsset, newAsset);
}

/// <summary>
/// Resets the effect of SET_PARTICLE_FX_OVERRIDE<br /><br />Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89C8553DD3274AAE<br />
/// </para>
/// </remarks>
public static void ResetParticleFxOverride(string name)
{
Function.Call((Hash)0x89C8553DD3274AAE, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA46B73FAA3460AE1<br />
/// </para>
/// </remarks>
public static void SetWeatherPtfxUseOverrideSettings(bool p0)
{
Function.Call((Hash)0xA46B73FAA3460AE1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF78B803082D4386F<br />
/// </para>
/// </remarks>
public static void SetWeatherPtfxOverrideCurrLevel(float p0)
{
Function.Call((Hash)0xF78B803082D4386F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C30613D50A6ADEF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WashDecalsInRange(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x9C30613D50A6ADEF, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B712761429DBC14<br />
/// </para>
/// </remarks>
public static void WashDecalsFromVehicle(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0x5B712761429DBC14, vehicle, p1);
}

/// <summary>
/// Fades nearby decals within the range specified
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD77EDADB0420E6E0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void FadeDecalsInRange(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xD77EDADB0420E6E0, p0, p1, p2, p3, p4);
}

/// <summary>
/// Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D6B2D4830A67C62<br />
/// </para>
/// </remarks>
public static void RemoveDecalsInRange(float x, float y, float z, float range)
{
Function.Call((Hash)0x5D6B2D4830A67C62, x, y, z, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCF71CBDDF5B6CB9<br />
/// </para>
/// </remarks>
public static void RemoveDecalsFromObject(int /* Object */ obj)
{
Function.Call((Hash)0xCCF71CBDDF5B6CB9, obj);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6F6F70FDC6D144C<br />
/// </para>
/// </remarks>
public static void RemoveDecalsFromObjectFacing(int /* Object */ obj, float x, float y, float z)
{
Function.Call((Hash)0xA6F6F70FDC6D144C, obj, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE91F1B65F2B48D57<br />
/// </para>
/// </remarks>
public static void RemoveDecalsFromVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xE91F1B65F2B48D57, vehicle);
}

/// <summary>
/// decal types:<br /><br />public enum DecalTypes<br />{<br />    splatters_blood = 1010,<br />    splatters_blood_dir = 1015,<br />    splatters_blood_mist = 1017,<br />    splatters_mud = 1020,<br />    splatters_paint = 1030,<br />    splatters_water = 1040,<br />    splatters_water_hydrant = 1050,<br />    splatters_blood2 = 1110,<br />    weapImpact_metal = 4010,<br />    weapImpact_concrete = 4020,<br />    weapImpact_mattress = 4030,<br />    weapImpact_mud = 4032,<br />    weapImpact_wood = 4050,<br />    weapImpact_sand = 4053,<br />    weapImpact_cardboard = 4040,<br />    weapImpact_melee_glass = 4100,<br />    weapImpact_glass_blood = 4102,<br />    weapImpact_glass_blood2 = 4104,<br />    weapImpact_shotgun_paper = 4200,<br />    weapImpact_shotgun_mattress,<br />    weapImpact_shotgun_metal,<br />    weapImpact_shotgun_wood,<br />    weapImpact_shotgun_dirt,<br />    weapImpact_shotgun_tvscreen,<br />    weapImpact_shotgun_tvscreen2,<br />    weapImpact_shotgun_tvscreen3,<br />    weapImpact_melee_concrete = 4310,<br />    weapImpact_melee_wood = 4312,<br />    weapImpact_melee_metal = 4314,<br />    burn1 = 4421,<br />    burn2,<br />    burn3,<br />    burn4,<br />    burn5,<br />    bang_concrete_bang = 5000,<br />    bang_concrete_bang2,<br />    bang_bullet_bang,<br />    bang_bullet_bang2 = 5004,<br />    bang_glass = 5031,<br />    bang_glass2,<br />    solidPool_water = 9000,<br />    solidPool_blood,<br />    solidPool_oil,<br />    solidPool_petrol,<br />    solidPool_mud,<br />    porousPool_water,<br />    porousPool_blood,<br />    porousPool_oil,<br />    porousPool_petrol,<br />    porousPool_mud,<br />    porousPool_water_ped_drip,<br />    liquidTrail_water = 9050<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB302244A1839BDAD<br />
/// </para>
/// </remarks>
public static int AddDecal(int decalType, float posX, float posY, float posZ, float p4, float p5, float p6, float p7, float p8, float p9, float width, float height, float rCoef, float gCoef, float bCoef, float opacity, float timeout, bool p17, bool p18, bool p19)
{
return Function.Call<int>((Hash)0xB302244A1839BDAD, decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F5212C7AD880DF8<br />
/// </para>
/// </remarks>
public static int AddPetrolDecal(float x, float y, float z, float groundLvl, float width, float transparency)
{
return Function.Call<int>((Hash)0x4F5212C7AD880DF8, x, y, z, groundLvl, width, transparency);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x126D7F89FE859A5E<br />
/// </para>
/// </remarks>
public static int AddOilDecal(float x, float y, float z, float groundLvl, float width, float transparency)
{
return Function.Call<int>((Hash)0x126D7F89FE859A5E, x, y, z, groundLvl, width, transparency);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99AC7F0D8B9C893D<br />
/// </para>
/// </remarks>
public static void StartPetrolTrailDecals(float p0)
{
Function.Call((Hash)0x99AC7F0D8B9C893D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x967278682CB6967A<br />
/// </para>
/// </remarks>
public static void AddPetrolTrailDecalInfo(float x, float y, float z, float p3)
{
Function.Call((Hash)0x967278682CB6967A, x, y, z, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A123435A26C36CD<br />
/// </para>
/// </remarks>
public static void EndPetrolTrailDecals()
{
Function.Call((Hash)0x0A123435A26C36CD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED3F346429CCD659<br />
/// </para>
/// </remarks>
public static void RemoveDecal(int decal)
{
Function.Call((Hash)0xED3F346429CCD659, decal);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC694D74949CAFD0C<br />
/// </para>
/// </remarks>
public static bool IsDecalAlive(int decal)
{
return Function.Call<bool>((Hash)0xC694D74949CAFD0C, decal);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x323F647679A09103<br />
/// </para>
/// </remarks>
public static float GetDecalWashLevel(int decal)
{
return Function.Call<float>((Hash)0x323F647679A09103, decal);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9454B5752C857DC<br />
/// </para>
/// </remarks>
public static void SetDisablePetrolDecalsIgnitingThisFrame()
{
Function.Call((Hash)0xD9454B5752C857DC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27CFB1B1E078CB2D<br />
/// </para>
/// </remarks>
public static void SetDisablePetrolDecalsRecyclingThisFrame()
{
Function.Call((Hash)0x27CFB1B1E078CB2D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B5CFC83122DF602<br />
/// </para>
/// </remarks>
public static void SetDisableDecalRenderingThisFrame()
{
Function.Call((Hash)0x4B5CFC83122DF602);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F09F7976C512404<br />
/// </para>
/// </remarks>
public static bool GetIsPetrolDecalInRange(float xCoord, float yCoord, float zCoord, float radius)
{
return Function.Call<bool>((Hash)0x2F09F7976C512404, xCoord, yCoord, zCoord, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A35C742130C6080<br />
/// </para>
/// </remarks>
public static void PatchDecalDiffuseMap(int decalType, string textureDict, string textureName)
{
Function.Call((Hash)0x8A35C742130C6080, decalType, textureDict, textureName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB7ED70C49521A61D<br />
/// </para>
/// </remarks>
public static void UnpatchDecalDiffuseMap(int decalType)
{
Function.Call((Hash)0xB7ED70C49521A61D, decalType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84C8D7C2D30D3280<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void MoveVehicleDecals(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x84C8D7C2D30D3280, p0, p1);
}

/// <summary>
/// boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x428BDCB9DA58DA53<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool AddVehicleCrewEmblem(int /* Vehicle */ vehicle, int /* Ped */ ped, int boneIndex, float x1, float x2, float x3, float y1, float y2, float y3, float z1, float z2, float z3, float scale, int /* bug: Any */ p13, int alpha)
{
return Function.Call<bool>((Hash)0x428BDCB9DA58DA53, vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x82ACC484FFA3B05F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool AbortVehicleCrewEmblemRequest(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x82ACC484FFA3B05F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2300034310557E4<br />
/// </para>
/// </remarks>
public static void RemoveVehicleCrewEmblem(int /* Vehicle */ vehicle, int p1)
{
Function.Call((Hash)0xD2300034310557E4, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE26117A5841B2FF<br />
/// </para>
/// </remarks>
public static int GetVehicleCrewEmblemRequestState(int /* Vehicle */ vehicle, int p1)
{
return Function.Call<int>((Hash)0xFE26117A5841B2FF, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x060D935D3981A275<br />
/// </para>
/// </remarks>
public static bool DoesVehicleHaveCrewEmblem(int /* Vehicle */ vehicle, int p1)
{
return Function.Call<bool>((Hash)0x060D935D3981A275, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E4299C549F0D1F1<br />
/// </para>
/// </remarks>
public static void DisableCompositeShotgunDecals(bool toggle)
{
Function.Call((Hash)0x0E4299C549F0D1F1, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02369D5C8A51FDCF<br />
/// </para>
/// </remarks>
public static void DisableScuffDecals(bool toggle)
{
Function.Call((Hash)0x02369D5C8A51FDCF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46D1A61A21F566FC<br />
/// </para>
/// </remarks>
public static void SetDecalBulletImpactRangeScale(float p0)
{
Function.Call((Hash)0x46D1A61A21F566FC, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A2A52824DB96700<br />
/// </para>
/// </remarks>
public static void OverrideInteriorSmokeName(string name)
{
Function.Call((Hash)0x2A2A52824DB96700, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1600FD8CF72EBC12<br />
/// </para>
/// </remarks>
public static void OverrideInteriorSmokeLevel(float level)
{
Function.Call((Hash)0x1600FD8CF72EBC12, level);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFB55E7C25D3B3BE<br />
/// </para>
/// </remarks>
public static void OverrideInteriorSmokeEnd()
{
Function.Call((Hash)0xEFB55E7C25D3B3BE);
}

/// <summary>
/// Used with &apos;NG_filmnoir_BW{01,02}&apos; timecycles and the &quot;NOIR_FILTER_SOUNDS&quot; audioref.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA44FF770DFBC5DAE<br />
/// </para>
/// </remarks>
public static void RegisterNoirLensEffect()
{
Function.Call((Hash)0xA44FF770DFBC5DAE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9F98AC1884E73A2<br />
/// </para>
/// </remarks>
public static void DisableVehicleDistantlights(bool toggle)
{
Function.Call((Hash)0xC9F98AC1884E73A2, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03300B57FCAC6DDB<br />
/// </para>
/// </remarks>
public static void RenderShadowedLightsWithNoShadows(bool p0)
{
Function.Call((Hash)0x03300B57FCAC6DDB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98EDF76A7271E4F2<br />
/// </para>
/// </remarks>
public static void RequestEarlyLightCheck()
{
Function.Call((Hash)0x98EDF76A7271E4F2);
}

/// <summary>
/// Forces footstep tracks on all surfaces.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEEDAD1420C65CC0<br />
/// </para>
/// </remarks>
public static void UseSnowFootVfxWhenUnsheltered(bool toggle)
{
Function.Call((Hash)0xAEEDAD1420C65CC0, toggle);
}

/// <summary>
/// Forces vehicle trails on all surfaces.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CC7F0FEA5283FE0<br />
/// </para>
/// </remarks>
public static void UseSnowWheelVfxWhenUnsheltered(bool toggle)
{
Function.Call((Hash)0x4CC7F0FEA5283FE0, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xEFD97FF47B745B8D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DisableRegionVfx(int /* bug: Any */ p0)
{
Function.Call((Hash)0xEFD97FF47B745B8D, p0);
}

/// <summary>
/// Only one match in the scripts:<br /><br />GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE(&quot;int_carrier_hanger&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7021272EB0A451E<br />
/// </para>
/// </remarks>
public static void PresetInteriorAmbientCache(string timecycleModifierName)
{
Function.Call((Hash)0xD7021272EB0A451E, timecycleModifierName);
}

/// <summary>
/// Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. &quot;timecycle_mods_1.xml&quot;)<br /><br />Parameters:<br />modifierName - The modifier to load (e.g. &quot;V_FIB_IT3&quot;, &quot;scanline_cam&quot;, etc.)<br /><br />Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C933ABF17A1DF41<br />
/// </para>
/// </remarks>
public static void SetTimecycleModifier(string modifierName)
{
Function.Call((Hash)0x2C933ABF17A1DF41, modifierName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82E7FFCD5B2326B3<br />
/// </para>
/// </remarks>
public static void SetTimecycleModifierStrength(float strength)
{
Function.Call((Hash)0x82E7FFCD5B2326B3, strength);
}

/// <summary>
/// Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BCF567485E1971C<br />
/// </para>
/// </remarks>
public static void SetTransitionTimecycleModifier(string modifierName, float transition)
{
Function.Call((Hash)0x3BCF567485E1971C, modifierName, transition);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CBA05AE7BD7EE05<br />
/// </para>
/// </remarks>
public static void SetTransitionOutOfTimecycleModifier(float strength)
{
Function.Call((Hash)0x1CBA05AE7BD7EE05, strength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F07E7745A236711<br />
/// </para>
/// </remarks>
public static void ClearTimecycleModifier()
{
Function.Call((Hash)0x0F07E7745A236711);
}

/// <summary>
/// Only use for this in the PC scripts is:<br /><br />if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDF3D97C674AFB66<br />
/// </para>
/// </remarks>
public static int GetTimecycleModifierIndex()
{
return Function.Call<int>((Hash)0xFDF3D97C674AFB66);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x459FD2C8D0AB78BC<br />
/// </para>
/// </remarks>
public static int GetTimecycleTransitionModifierIndex()
{
return Function.Call<int>((Hash)0x459FD2C8D0AB78BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x98D18905BF723B99<br />
/// </para>
/// </remarks>
public static bool GetIsTimecycleTransitioningOut()
{
return Function.Call<bool>((Hash)0x98D18905BF723B99);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58F735290861E6B4<br />
/// </para>
/// </remarks>
public static void PushTimecycleModifier()
{
Function.Call((Hash)0x58F735290861E6B4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C8938D7D872211E<br />
/// </para>
/// </remarks>
public static void PopTimecycleModifier()
{
Function.Call((Hash)0x3C8938D7D872211E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBF327DED94E4DEB<br />
/// </para>
/// </remarks>
public static void SetCurrentPlayerTcmodifier(string modifierName)
{
Function.Call((Hash)0xBBF327DED94E4DEB, modifierName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDEB86F4D5809204<br />
/// </para>
/// </remarks>
public static void SetPlayerTcmodifierTransition(float value)
{
Function.Call((Hash)0xBDEB86F4D5809204, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF59707B3E5ED531<br />
/// </para>
/// </remarks>
public static void SetNextPlayerTcmodifier(string modifierName)
{
Function.Call((Hash)0xBF59707B3E5ED531, modifierName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A8E2C8B9CF4549C<br />
/// </para>
/// </remarks>
public static void AddTcmodifierOverride(string modifierName1, string modifierName2)
{
Function.Call((Hash)0x1A8E2C8B9CF4549C, modifierName1, modifierName2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15E33297C3E8DC60<br />
/// </para>
/// </remarks>
public static void ClearAllTcmodifierOverrides(string p0)
{
Function.Call((Hash)0x15E33297C3E8DC60, p0);
}

/// <summary>
/// Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5096FD9CCB49056D<br />
/// </para>
/// </remarks>
public static void SetExtraTcmodifier(string modifierName)
{
Function.Call((Hash)0x5096FD9CCB49056D, modifierName);
}

/// <summary>
/// Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92CCC17A7A2285DA<br />
/// </para>
/// </remarks>
public static void ClearExtraTcmodifier()
{
Function.Call((Hash)0x92CCC17A7A2285DA);
}

/// <summary>
/// See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.<br />Returns an integer representing the Timecycle modifier
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB0527EC6341496D<br />
/// </para>
/// </remarks>
public static int GetExtraTcmodifier()
{
return Function.Call<int>((Hash)0xBB0527EC6341496D);
}

/// <summary>
/// The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C328AF17210F009<br />
/// </para>
/// </remarks>
public static void EnableMoonCycleOverride(float strength)
{
Function.Call((Hash)0x2C328AF17210F009, strength);
}

/// <summary>
/// Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BF72AD5B41AA739<br />
/// </para>
/// </remarks>
public static void DisableMoonCycleOverride()
{
Function.Call((Hash)0x2BF72AD5B41AA739);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11FE353CF9733E6F<br />
/// </para>
/// </remarks>
public static int RequestScaleformMovie(string scaleformName)
{
return Function.Call<int>((Hash)0x11FE353CF9733E6F, scaleformName);
}

/// <summary>
/// Another REQUEST_SCALEFORM_MOVIE equivalent.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x65E7E78842E74CDB<br />
/// </para>
/// </remarks>
public static int RequestScaleformMovieWithIgnoreSuperWidescreen(string scaleformName)
{
return Function.Call<int>((Hash)0x65E7E78842E74CDB, scaleformName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC514489CFB8AF806<br />
/// </para>
/// </remarks>
public static int RequestScaleformMovieInstance(string scaleformName)
{
return Function.Call<int>((Hash)0xC514489CFB8AF806, scaleformName);
}

/// <summary>
/// Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of &quot;interactive&quot; scaleform movie?<br /><br />These seem to be the only scaleforms ever requested by this native:<br />&quot;breaking_news&quot;<br />&quot;desktop_pc&quot;<br />&quot;ECG_MONITOR&quot;<br />&quot;Hacking_PC&quot;<br />&quot;TEETH_PULLING&quot;<br /><br />Note: Unless this hash is out-of-order, this native is next-gen only.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD06C611BB9048C2<br />
/// </para>
/// </remarks>
public static int RequestScaleformMovieSkipRenderWhilePaused(string scaleformName)
{
return Function.Call<int>((Hash)0xBD06C611BB9048C2, scaleformName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85F01B8D5B90570E<br />
/// </para>
/// </remarks>
public static bool HasScaleformMovieLoaded(int scaleformHandle)
{
return Function.Call<bool>((Hash)0x85F01B8D5B90570E, scaleformHandle);
}

/// <summary>
/// val is 1-20 (0 will return false)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2FCB133CA50A49EB<br />
/// </para>
/// </remarks>
public static bool IsActiveScaleformMovieDeleting(int val)
{
return Function.Call<bool>((Hash)0x2FCB133CA50A49EB, val);
}

/// <summary>
/// val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x86255B1FC929E33E<br />
/// </para>
/// </remarks>
public static bool IsScaleformMovieDeleting(int val)
{
return Function.Call<bool>((Hash)0x86255B1FC929E33E, val);
}

/// <summary>
/// Only values used in the scripts are:<br /><br />&quot;heist_mp&quot;<br />&quot;heistmap_mp&quot;<br />&quot;instructional_buttons&quot;<br />&quot;heist_pre&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C1C5D756FB5F337<br />
/// </para>
/// </remarks>
public static bool HasScaleformMovieFilenameLoaded(string scaleformName)
{
return Function.Call<bool>((Hash)0x0C1C5D756FB5F337, scaleformName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8217150E1217EBFD<br />
/// </para>
/// </remarks>
public static bool HasScaleformContainerMovieLoadedIntoParent(int scaleformHandle)
{
return Function.Call<bool>((Hash)0x8217150E1217EBFD, scaleformHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D132D614DD86811<br />
/// </para>
/// </remarks>
public static void SetScaleformMovieAsNoLongerNeeded(ref int scaleformHandle)
{
var nativeAssistPointerVar0 = scaleformHandle;
unsafe {
Function.Call((Hash)0x1D132D614DD86811, &nativeAssistPointerVar0);
}
scaleformHandle = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D8EB211944DCE08<br />
/// </para>
/// </remarks>
public static void SetScaleformMovieToUseSystemTime(int scaleform, bool toggle)
{
Function.Call((Hash)0x6D8EB211944DCE08, scaleform, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x32F34FF7F617643B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetScaleformMovieToUseLargeRt(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x32F34FF7F617643B, p0, p1);
}

/// <summary>
/// This native is used in some casino scripts to fit the scaleform in the rendertarget.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xE6A9F00D4240B519<br />
/// </para>
/// </remarks>
public static void SetScaleformMovieToUseSuperLargeRt(int scaleformHandle, bool toggle)
{
Function.Call((Hash)0xE6A9F00D4240B519, scaleformHandle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54972ADAF0294A93<br />
/// </para>
/// </remarks>
public static void DrawScaleformMovie(int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int unk)
{
Function.Call((Hash)0x54972ADAF0294A93, scaleformHandle, x, y, width, height, red, green, blue, alpha, unk);
}

/// <summary>
/// unk is not used so no need
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0DF606929C105BE1<br />
/// </para>
/// </remarks>
public static void DrawScaleformMovieFullscreen(int scaleform, int red, int green, int blue, int alpha, int unk)
{
Function.Call((Hash)0x0DF606929C105BE1, scaleform, red, green, blue, alpha, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF537FDE4FBD4CE5<br />
/// </para>
/// </remarks>
public static void DrawScaleformMovieFullscreenMasked(int scaleform1, int scaleform2, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xCF537FDE4FBD4CE5, scaleform1, scaleform2, red, green, blue, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87D51D72255D4E78<br />
/// </para>
/// </remarks>
public static void DrawScaleformMovie3d(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder)
{
Function.Call((Hash)0x87D51D72255D4E78, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CE592FDC749D6F5<br />
/// </para>
/// </remarks>
public static void DrawScaleformMovie3dSolid(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder)
{
Function.Call((Hash)0x1CE592FDC749D6F5, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
}

/// <summary>
/// Calls the Scaleform function.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBD96D87AC96D533<br />
/// </para>
/// </remarks>
public static void CallScaleformMovieMethod(int scaleform, string method)
{
Function.Call((Hash)0xFBD96D87AC96D533, scaleform, method);
}

/// <summary>
/// Calls the Scaleform function and passes the parameters as floats.<br /><br />The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0837058AE2E4BEE<br />
/// </para>
/// </remarks>
public static void CallScaleformMovieMethodWithNumber(int scaleform, string methodName, float param1, float param2, float param3, float param4, float param5)
{
Function.Call((Hash)0xD0837058AE2E4BEE, scaleform, methodName, param1, param2, param3, param4, param5);
}

/// <summary>
/// Calls the Scaleform function and passes the parameters as strings.<br /><br />The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51BC1ED3CC44E8F7<br />
/// </para>
/// </remarks>
public static void CallScaleformMovieMethodWithString(int scaleform, string methodName, string param1, string param2, string param3, string param4, string param5)
{
Function.Call((Hash)0x51BC1ED3CC44E8F7, scaleform, methodName, param1, param2, param3, param4, param5);
}

/// <summary>
/// Calls the Scaleform function and passes both float and string parameters (in their respective order).<br /><br />The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).<br /><br />NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.<br /><br />Examples:<br />// function MY_FUNCTION(floatParam1, floatParam2, stringParam)<br />GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, &quot;MY_FUNCTION&quot;, 10.0, 20.0, -1.0, -1.0, -1.0, &quot;String param&quot;, 0, 0, 0, 0);<br /><br />// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)<br />GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, &quot;MY_FUNCTION_2&quot;, 10.0, -1.0, -1.0, -1.0, -1.0, &quot;String param #1&quot;, &quot;String param #2&quot;, 0, 0, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF662D8D57E290B1<br />
/// </para>
/// </remarks>
public static void CallScaleformMovieMethodWithNumberAndString(int scaleform, string methodName, float floatParam1, float floatParam2, float floatParam3, float floatParam4, float floatParam5, string stringParam1, string stringParam2, string stringParam3, string stringParam4, string stringParam5)
{
Function.Call((Hash)0xEF662D8D57E290B1, scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
}

/// <summary>
/// Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.<br /><br />Known components:<br />19 - MP_RANK_BAR<br />20 - HUD_DIRECTOR_MODE<br /><br />This native requires more research - all information can be found inside of &apos;hud.gfx&apos;. Using a decompiler, the different components are located under &quot;scripts\__Packages\com\rockstargames\gtav\hud\hudComponents&quot; and &quot;scripts\__Packages\com\rockstargames\gtav\Multiplayer&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98C494FD5BDFBFD5<br />
/// </para>
/// </remarks>
public static bool BeginScaleformScriptHudMovieMethod(int hudComponent, string methodName)
{
return Function.Call<bool>((Hash)0x98C494FD5BDFBFD5, hudComponent, methodName);
}

/// <summary>
/// Push a function from the Scaleform onto the stack<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6E48914C7A8694E<br />
/// </para>
/// </remarks>
public static bool BeginScaleformMovieMethod(int scaleform, string methodName)
{
return Function.Call<bool>((Hash)0xF6E48914C7A8694E, scaleform, methodName);
}

/// <summary>
/// Starts frontend (pause menu) scaleform movie methods.<br />This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.<br />Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB58C27C2E6123C6<br />
/// </para>
/// </remarks>
public static bool BeginScaleformMovieMethodOnFrontend(string methodName)
{
return Function.Call<bool>((Hash)0xAB58C27C2E6123C6, methodName);
}

/// <summary>
/// Starts frontend (pause menu) scaleform movie methods for header options.<br />Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9449845F73F5E9C<br />
/// </para>
/// </remarks>
public static bool BeginScaleformMovieMethodOnFrontendHeader(string methodName)
{
return Function.Call<bool>((Hash)0xB9449845F73F5E9C, methodName);
}

/// <summary>
/// Pops and calls the Scaleform function on the stack
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6796A8FFA375E53<br />
/// </para>
/// </remarks>
public static void EndScaleformMovieMethod()
{
Function.Call((Hash)0xC6796A8FFA375E53);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC50AA39A577AF886<br />
/// </para>
/// </remarks>
public static int EndScaleformMovieMethodReturnValue()
{
return Function.Call<int>((Hash)0xC50AA39A577AF886);
}

/// <summary>
/// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE<br />Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x768FF8961BA904D6<br />
/// </para>
/// </remarks>
public static bool IsScaleformMovieMethodReturnValueReady(int methodReturn)
{
return Function.Call<bool>((Hash)0x768FF8961BA904D6, methodReturn);
}

/// <summary>
/// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE<br />Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DE7EFA66B906036<br />
/// </para>
/// </remarks>
public static int GetScaleformMovieMethodReturnValueInt(int methodReturn)
{
return Function.Call<int>((Hash)0x2DE7EFA66B906036, methodReturn);
}

/// <summary>
/// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xD80A80346A45D761<br />
/// </para>
/// </remarks>
public static bool GetScaleformMovieMethodReturnValueBool(int methodReturn)
{
return Function.Call<bool>((Hash)0xD80A80346A45D761, methodReturn);
}

/// <summary>
/// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE<br />Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1E258829A885245<br />
/// </para>
/// </remarks>
public static string GetScaleformMovieMethodReturnValueString(int methodReturn)
{
return Function.Call<string>((Hash)0xE1E258829A885245, methodReturn);
}

/// <summary>
/// Pushes an integer for the Scaleform function onto the stack.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3D0841A0CC546A6<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamInt(int value)
{
Function.Call((Hash)0xC3D0841A0CC546A6, value);
}

/// <summary>
/// Pushes a float for the Scaleform function onto the stack.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD69736AAE04DB51A<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamFloat(float value)
{
Function.Call((Hash)0xD69736AAE04DB51A, value);
}

/// <summary>
/// Pushes a boolean for the Scaleform function onto the stack.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC58424BA936EB458<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamBool(bool value)
{
Function.Call((Hash)0xC58424BA936EB458, value);
}

/// <summary>
/// Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.<br /><br />Examples:<br />GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(&quot;NUMBER&quot;);<br />HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));<br />GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();<br /><br />GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(&quot;STRING&quot;);<br />HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);<br />GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();<br /><br />GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(&quot;STRTNM2&quot;);<br />HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);<br />HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);<br />GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();<br /><br />GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(&quot;STRTNM1&quot;);<br />HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);<br />GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80338406F3475E55<br />
/// </para>
/// </remarks>
public static void BeginTextCommandScaleformString(string componentType)
{
Function.Call((Hash)0x80338406F3475E55, componentType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x362E2D3FE93A9959<br />
/// </para>
/// </remarks>
public static void EndTextCommandScaleformString()
{
Function.Call((Hash)0x362E2D3FE93A9959);
}

/// <summary>
/// Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.<br /><br />END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE4E8157D9ECF087<br />
/// </para>
/// </remarks>
public static void EndTextCommandUnparsedScaleformString()
{
Function.Call((Hash)0xAE4E8157D9ECF087);
}

/// <summary>
/// Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING<br />Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for &quot;name&quot; (organisation, players..).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x77FE3402004CD1B0<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamLiteralString(string @string)
{
Function.Call((Hash)0x77FE3402004CD1B0, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA7148484BD90365<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamTextureNameString(string @string)
{
Function.Call((Hash)0xBA7148484BD90365, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE83A3E3557A56640<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamPlayerNameString(string @string)
{
Function.Call((Hash)0xE83A3E3557A56640, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E657EF1099EDD65<br />
/// </para>
/// </remarks>
public static bool DoesLatestBriefStringExist(int p0)
{
return Function.Call<bool>((Hash)0x5E657EF1099EDD65, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC52C631A1831C03<br />
/// </para>
/// </remarks>
public static void ScaleformMovieMethodAddParamLatestBriefString(int value)
{
Function.Call((Hash)0xEC52C631A1831C03, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9304881D6F6537EA<br />
/// </para>
/// </remarks>
public static void RequestScaleformScriptHudMovie(int hudComponent)
{
Function.Call((Hash)0x9304881D6F6537EA, hudComponent);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF6E5987D2B4D140<br />
/// </para>
/// </remarks>
public static bool HasScaleformScriptHudMovieLoaded(int hudComponent)
{
return Function.Call<bool>((Hash)0xDF6E5987D2B4D140, hudComponent);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF44A5456AC3F4F97<br />
/// </para>
/// </remarks>
public static void RemoveScaleformScriptHudMovie(int hudComponent)
{
Function.Call((Hash)0xF44A5456AC3F4F97, hudComponent);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1C7CB175E012964<br />
/// </para>
/// </remarks>
public static bool PassKeyboardInputToScaleform(int scaleformHandle)
{
return Function.Call<bool>((Hash)0xD1C7CB175E012964, scaleformHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAABBB23EB6E484E<br />
/// </para>
/// </remarks>
public static void SetTvChannel(int channel)
{
Function.Call((Hash)0xBAABBB23EB6E484E, channel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC1E275A90D39995<br />
/// </para>
/// </remarks>
public static int GetTvChannel()
{
return Function.Call<int>((Hash)0xFC1E275A90D39995);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2982BF73F66E9DDC<br />
/// </para>
/// </remarks>
public static void SetTvVolume(float volume)
{
Function.Call((Hash)0x2982BF73F66E9DDC, volume);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2170813D3DD8661B<br />
/// </para>
/// </remarks>
public static float GetTvVolume()
{
return Function.Call<float>((Hash)0x2170813D3DD8661B);
}

/// <summary>
/// All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.<br /><br />&quot;act_cinema.ysc&quot;, line 1483:<br />HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);<br />HUD::SET_TEXT_RENDER_ID(l_AE);<br />GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);<br />GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);<br />if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {<br />    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);<br />} else { <br />    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);<br />}<br /><br />&quot;am_mp_property_int.ysc&quot;, line 102545:<br />if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {<br />    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {<br />        HUD::SET_TEXT_RENDER_ID(a_2._f1);<br />        GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);<br />        GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);<br />        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);<br />        if (GRAPHICS::GET_TV_CHANNEL() == -1) {<br />            sub_a8fa5(a_2, 1);<br />        } else { <br />            sub_a8fa5(a_2, 1);<br />            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);<br />        }<br />        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());<br />    }<br />}<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDDC2B4ED3C69DF0<br />
/// </para>
/// </remarks>
public static void DrawTvChannel(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xFDDC2B4ED3C69DF0, xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
}

/// <summary>
/// Loads specified video sequence into the TV Channel<br />TV_Channel ranges from 0-2<br />VideoSequence can be any of the following:<br />&quot;PL_STD_CNT&quot; CNT Standard Channel<br />&quot;PL_STD_WZL&quot; Weazel Standard Channel<br />&quot;PL_LO_CNT&quot;<br />&quot;PL_LO_WZL&quot;<br />&quot;PL_SP_WORKOUT&quot;<br />&quot;PL_SP_INV&quot; - Jay Norris Assassination Mission Fail<br />&quot;PL_SP_INV_EXP&quot; - Jay Norris Assassination Mission Success<br />&quot;PL_LO_RS&quot; - Righteous Slaughter Ad<br />&quot;PL_LO_RS_CUTSCENE&quot; - Righteous Slaughter Cut-scene<br />&quot;PL_SP_PLSH1_INTRO&quot;<br />&quot;PL_LES1_FAME_OR_SHAME&quot;<br />&quot;PL_STD_WZL_FOS_EP2&quot;<br />&quot;PL_MP_WEAZEL&quot; - Weazel Logo on loop<br />&quot;PL_MP_CCTV&quot; - Generic CCTV loop<br /><br />Restart:<br />0=video sequence continues as normal<br />1=sequence restarts from beginning every time that channel is selected<br /><br /><br />The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (&lt;Name&gt;PL_STD_CNT&lt;/Name&gt; = PL_STD_CNT).<br />https://pastebin.com/zUzGB6h7
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7B38B8305F1FE8B<br />
/// </para>
/// </remarks>
public static void SetTvChannelPlaylist(int tvChannel, string playlistName, bool restart)
{
Function.Call((Hash)0xF7B38B8305F1FE8B, tvChannel, playlistName, restart);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2201C576FACAEBE8<br />
/// </para>
/// </remarks>
public static void SetTvChannelPlaylistAtHour(int tvChannel, string playlistName, int hour)
{
Function.Call((Hash)0x2201C576FACAEBE8, tvChannel, playlistName, hour);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBEB3D46BB7F043C0<br />
/// </para>
/// </remarks>
public static void ClearTvChannelPlaylist(int tvChannel)
{
Function.Call((Hash)0xBEB3D46BB7F043C0, tvChannel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x1F710BFF7DAE6261<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPlaylistOnChannel(int tvChannel, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x1F710BFF7DAE6261, tvChannel, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AD973CA1E077B60<br />
/// </para>
/// </remarks>
public static bool IsTvshowCurrentlyPlaying(uint videoCliphash)
{
return Function.Call<bool>((Hash)0x0AD973CA1E077B60, videoCliphash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74C180030FDE4B69<br />
/// </para>
/// </remarks>
public static void EnableMovieKeyframeWait(bool toggle)
{
Function.Call((Hash)0x74C180030FDE4B69, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1C55B110E4DF534<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetTvPlayerWatchingThisFrame(int /* bug: Any */ p0)
{
Function.Call((Hash)0xD1C55B110E4DF534, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x30432A0118736E00<br />
/// </para>
/// </remarks>
public static uint GetCurrentTvClipNamehash()
{
return Function.Call<uint>((Hash)0x30432A0118736E00);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x873FA65C778AD970<br />
/// </para>
/// </remarks>
public static void EnableMovieSubtitles(bool toggle)
{
Function.Call((Hash)0x873FA65C778AD970, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3A10FC7FD8D98CD<br />
/// </para>
/// </remarks>
public static bool Ui3dsceneIsAvailable()
{
return Function.Call<bool>((Hash)0xD3A10FC7FD8D98CD);
}

/// <summary>
/// All presets can be found in common\data\ui\uiscenes.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1CEA8A4198D8E9A<br />
/// </para>
/// </remarks>
public static bool Ui3dscenePushPreset(string presetName)
{
return Function.Call<bool>((Hash)0xF1CEA8A4198D8E9A, presetName);
}

/// <summary>
/// It&apos;s called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET<br /><br />presetName was always &quot;CELEBRATION_WINNER&quot;<br />All presets can be found in common\data\ui\uiscenes.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98C4FE6EC34154CA<br />
/// </para>
/// </remarks>
public static bool Ui3dsceneAssignPedToSlot(string presetName, int /* Ped */ ped, int p2, float posX, float posY, float posZ)
{
return Function.Call<bool>((Hash)0x98C4FE6EC34154CA, presetName, ped, p2, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A42B2E236E71415<br />
/// </para>
/// </remarks>
public static void Ui3dsceneClearPatchedData()
{
Function.Call((Hash)0x7A42B2E236E71415);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x108BE26959A9D9BB<br />
/// </para>
/// </remarks>
public static void Ui3dsceneMakePushedPresetPersistent(bool toggle)
{
Function.Call((Hash)0x108BE26959A9D9BB, toggle);
}

/// <summary>
/// This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).<br />This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA356990E161C9E65<br />
/// </para>
/// </remarks>
public static void TerraingridActivate(bool toggle)
{
Function.Call((Hash)0xA356990E161C9E65, toggle);
}

/// <summary>
/// This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.<br />This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.<br /><br />All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png<br /><br />This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.<br />The forward args here are a direction vector, something similar to what&apos;s returned by GET_ENTITY_FORWARD_VECTOR.<br />normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.<br /><br />Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C4FC5752BCD8E48<br />
/// </para>
/// </remarks>
public static void TerraingridSetParams(float x, float y, float z, float forwardX, float forwardY, float forwardZ, float sizeX, float sizeY, float sizeZ, float gridScale, float glowIntensity, float normalHeight, float heightDiff)
{
Function.Call((Hash)0x1C4FC5752BCD8E48, x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
}

/// <summary>
/// This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.<br />This native sets the colors for the golf putting grid. the &apos;min...&apos; values are for the lower areas that the grid covers, the &apos;max...&apos; values are for the higher areas that the grid covers, all remaining values are for the &apos;normal&apos; ground height.<br />All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CE62918F8D703C7<br />
/// </para>
/// </remarks>
public static void TerraingridSetColours(int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha)
{
Function.Call((Hash)0x5CE62918F8D703C7, lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
}

/// <summary>
/// duration - is how long to play the effect for in milliseconds. If 0, it plays the default length<br />if loop is true, the effect won&apos;t stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)<br /><br />Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2206BF9A37B7F724<br />
/// </para>
/// </remarks>
public static void AnimpostfxPlay(string effectName, int duration, bool looped)
{
Function.Call((Hash)0x2206BF9A37B7F724, effectName, duration, looped);
}

/// <summary>
/// See ANIMPOSTFX_PLAY<br /><br />Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x068E835A1D0DC0E3<br />
/// </para>
/// </remarks>
public static void AnimpostfxStop(string effectName)
{
Function.Call((Hash)0x068E835A1D0DC0E3, effectName);
}

/// <summary>
/// See ANIMPOSTFX_PLAY<br /><br />Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xE35B38A27E8E7179<br />
/// </para>
/// </remarks>
public static float AnimpostfxGetCurrentTime(string effectName)
{
return Function.Call<float>((Hash)0xE35B38A27E8E7179, effectName);
}

/// <summary>
/// Returns whether the specified effect is active.<br />See ANIMPOSTFX_PLAY<br /><br />Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36AD3E690DA5ACEB<br />
/// </para>
/// </remarks>
public static bool AnimpostfxIsRunning(string effectName)
{
return Function.Call<bool>((Hash)0x36AD3E690DA5ACEB, effectName);
}

/// <summary>
/// Stops ALL currently playing effects.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4EDDC19532BFB85<br />
/// </para>
/// </remarks>
public static void AnimpostfxStopAll()
{
Function.Call((Hash)0xB4EDDC19532BFB85);
}

/// <summary>
/// Stops the effect and sets a value (bool) in its data (+0x199) to false.<br />See ANIMPOSTFX_PLAY<br /><br />Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2209BE128B5418C<br />
/// </para>
/// </remarks>
public static void AnimpostfxStopAndFlushRequests(string effectName)
{
Function.Call((Hash)0xD2209BE128B5418C, effectName);
}

#endregion
#region HUD
/// <summary>
/// Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here<br /><br /><br />e.g<br />void StartLoadingMessage(char *text, int spinnerType = 3)<br />  {<br />     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(&quot;STRING&quot;);<br />       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);<br />    }<br />/*OR*/<br /> void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)<br />  {<br />     BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(&quot;STRING&quot;);<br />       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />       END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);<br />        WAIT(timeMs);<br />     BUSYSPINNER_OFF();<br /> }<br /><br /><br />These are some localized strings used in the loading spinner.<br />&quot;PM_WAIT&quot;                   = Please Wait<br />&quot;CELEB_WPLYRS&quot;              = Waiting For Players.<br />&quot;CELL_SPINNER2&quot;             = Scanning storage.<br />&quot;ERROR_CHECKYACHTNAME&quot; = Registering your yacht&apos;s name. Please wait.<br />&quot;ERROR_CHECKPROFANITY&quot;   = Checking your text for profanity. Please wait.<br />&quot;FM_COR_AUTOD&quot;                        = Just spinner no text<br />&quot;FM_IHELP_WAT2&quot;                        = Waiting for other players<br />&quot;FM_JIP_WAITO&quot;                            = Game options are being set<br />&quot;FMMC_DOWNLOAD&quot;                    = Downloading<br />&quot;FMMC_PLYLOAD&quot;                         = Loading<br />&quot;FMMC_STARTTRAN&quot;                    = Launching session<br />&quot;HUD_QUITTING&quot;                           =  Quiting session<br />&quot;KILL_STRIP_IDM&quot;                         = Waiting for to accept<br />&quot;MP_SPINLOADING&quot;                      = Loading
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xABA17D7CE615ADBF<br />
/// </para>
/// </remarks>
public static void BeginTextCommandBusyspinnerOn(string @string)
{
Function.Call((Hash)0xABA17D7CE615ADBF, @string);
}

/// <summary>
/// enum eBusySpinnerType<br />{<br />	BUSY_SPINNER_LEFT,<br />	BUSY_SPINNER_LEFT_2,<br />	BUSY_SPINNER_LEFT_3,<br />	BUSY_SPINNER_SAVE,<br />	BUSY_SPINNER_RIGHT,<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD12F8228410D9B4<br />
/// </para>
/// </remarks>
public static void EndTextCommandBusyspinnerOn(int busySpinnerType)
{
Function.Call((Hash)0xBD12F8228410D9B4, busySpinnerType);
}

/// <summary>
/// Removes the loading prompt at the bottom right of the screen.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10D373323E5B9C0D<br />
/// </para>
/// </remarks>
public static void BusyspinnerOff()
{
Function.Call((Hash)0x10D373323E5B9C0D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC65AB383CD91DF98<br />
/// </para>
/// </remarks>
public static void PreloadBusyspinner()
{
Function.Call((Hash)0xC65AB383CD91DF98);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD422FCC5F239A915<br />
/// </para>
/// </remarks>
public static bool BusyspinnerIsOn()
{
return Function.Call<bool>((Hash)0xD422FCC5F239A915);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2A592B04648A9CB<br />
/// </para>
/// </remarks>
public static bool BusyspinnerIsDisplaying()
{
return Function.Call<bool>((Hash)0xB2A592B04648A9CB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9245E81072704B8A<br />
/// </para>
/// </remarks>
public static void DisablePausemenuSpinner(bool p0)
{
Function.Call((Hash)0x9245E81072704B8A, p0);
}

/// <summary>
/// Shows the cursor on screen for one frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAE7CE1D63167423<br />
/// </para>
/// </remarks>
public static void SetMouseCursorThisFrame()
{
Function.Call((Hash)0xAAE7CE1D63167423);
}

/// <summary>
/// Changes the mouse cursor&apos;s sprite. <br />1 = Normal<br />6 = Left Arrow<br />7 = Right Arrow
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DB8CFFD58B62552<br />
/// </para>
/// </remarks>
public static void SetMouseCursorStyle(int spriteId)
{
Function.Call((Hash)0x8DB8CFFD58B62552, spriteId);
}

/// <summary>
/// Shows/hides the frontend cursor on the pause menu or similar menus.<br />Clicking off and then on the game window will show it again.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98215325A695E78A<br />
/// </para>
/// </remarks>
public static void SetMouseCursorVisible(bool toggle)
{
Function.Call((Hash)0x98215325A695E78A, toggle);
}

/// <summary>
/// Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D9ACB1EB139E702<br />
/// </para>
/// </remarks>
public static bool IsMouseRolledOverInstructionalButtons()
{
return Function.Call<bool>((Hash)0x3D9ACB1EB139E702);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x632B2940C67F4EA9<br />
/// </para>
/// </remarks>
public static bool GetMouseEvent(int scaleformHandle, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0x632B2940C67F4EA9, scaleformHandle, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F1554B0CC2089FA<br />
/// </para>
/// </remarks>
public static void ThefeedOnlyShowTooltips(bool toggle)
{
Function.Call((Hash)0x6F1554B0CC2089FA, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55598D21339CB998<br />
/// </para>
/// </remarks>
public static void ThefeedSetScriptedMenuHeight(float pos)
{
Function.Call((Hash)0x55598D21339CB998, pos);
}

/// <summary>
/// Stops loading screen tips shown by invoking `THEFEED_SHOW`
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x32888337579A5970<br />
/// </para>
/// </remarks>
public static void ThefeedHide()
{
Function.Call((Hash)0x32888337579A5970);
}

/// <summary>
/// Once called each frame hides all above radar notifications.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25F87B30C382FCA7<br />
/// </para>
/// </remarks>
public static void ThefeedHideThisFrame()
{
Function.Call((Hash)0x25F87B30C382FCA7);
}

/// <summary>
/// Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x15CFA549788D35EF<br />
/// </para>
/// </remarks>
public static void ThefeedShow()
{
Function.Call((Hash)0x15CFA549788D35EF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8FDB297A8D25FBA<br />
/// </para>
/// </remarks>
public static void ThefeedFlushQueue()
{
Function.Call((Hash)0xA8FDB297A8D25FBA);
}

/// <summary>
/// Removes a notification instantly instead of waiting for it to disappear
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE4390CB40B3E627<br />
/// </para>
/// </remarks>
public static void ThefeedRemoveItem(int notificationId)
{
Function.Call((Hash)0xBE4390CB40B3E627, notificationId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA13C11E1B5C06BFC<br />
/// </para>
/// </remarks>
public static void ThefeedForceRenderOn()
{
Function.Call((Hash)0xA13C11E1B5C06BFC);
}

/// <summary>
/// Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x583049884A2EEE3C<br />
/// </para>
/// </remarks>
public static void ThefeedForceRenderOff()
{
Function.Call((Hash)0x583049884A2EEE3C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDB423997FA30340<br />
/// </para>
/// </remarks>
public static void ThefeedPause()
{
Function.Call((Hash)0xFDB423997FA30340);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1CD1E48E025E661<br />
/// </para>
/// </remarks>
public static void ThefeedResume()
{
Function.Call((Hash)0xE1CD1E48E025E661);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9CBFD40B3FA3010<br />
/// </para>
/// </remarks>
public static bool ThefeedIsPaused()
{
return Function.Call<bool>((Hash)0xA9CBFD40B3FA3010);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4438C0564490E63<br />
/// </para>
/// </remarks>
public static void ThefeedReportLogoOn()
{
Function.Call((Hash)0xD4438C0564490E63);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB695E2CD0A2DA9EE<br />
/// </para>
/// </remarks>
public static void ThefeedReportLogoOff()
{
Function.Call((Hash)0xB695E2CD0A2DA9EE);
}

/// <summary>
/// Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82352748437638CA<br />
/// </para>
/// </remarks>
public static int ThefeedGetLastShownPhoneActivatableFeedId()
{
return Function.Call<int>((Hash)0x82352748437638CA);
}

/// <summary>
/// Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56C8B608CFD49854<br />
/// </para>
/// </remarks>
public static void ThefeedAutoPostGametipsOn()
{
Function.Call((Hash)0x56C8B608CFD49854);
}

/// <summary>
/// Displays &quot;normal&quot; notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADED7F5748ACAFE6<br />
/// </para>
/// </remarks>
public static void ThefeedAutoPostGametipsOff()
{
Function.Call((Hash)0xADED7F5748ACAFE6);
}

/// <summary>
/// From the decompiled scripts:<br />HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);<br />HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);<br />HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);<br /><br />sets background color for the next notification<br />6 = red<br />184 = green<br />190 = yellow<br /><br />Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92F0DA1E27DB96DC<br />
/// </para>
/// </remarks>
public static void ThefeedSetBackgroundColorForNextPost(int hudColorIndex)
{
Function.Call((Hash)0x92F0DA1E27DB96DC, hudColorIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17430B918701C342<br />
/// </para>
/// </remarks>
public static void ThefeedSetRgbaParameterForNextMessage(int red, int green, int blue, int alpha)
{
Function.Call((Hash)0x17430B918701C342, red, green, blue, alpha);
}

/// <summary>
/// Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17AD8C9706BDD88A<br />
/// </para>
/// </remarks>
public static void ThefeedSetFlashDurationParameterForNextMessage(int count)
{
Function.Call((Hash)0x17AD8C9706BDD88A, count);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A0C7C9BB10ABB36<br />
/// </para>
/// </remarks>
public static void ThefeedSetVibrateParameterForNextMessage(bool toggle)
{
Function.Call((Hash)0x4A0C7C9BB10ABB36, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDD85225B2DEA55E<br />
/// </para>
/// </remarks>
public static void ThefeedResetAllParameters()
{
Function.Call((Hash)0xFDD85225B2DEA55E);
}

/// <summary>
/// Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDEC055AB549E328<br />
/// </para>
/// </remarks>
public static void ThefeedFreezeNextPost()
{
Function.Call((Hash)0xFDEC055AB549E328);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80FE4F3AB4E1B62A<br />
/// </para>
/// </remarks>
public static void ThefeedClearFrozenPost()
{
Function.Call((Hash)0x80FE4F3AB4E1B62A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAE4F9B97CD43B30<br />
/// </para>
/// </remarks>
public static void ThefeedSetSnapFeedItemPositions(bool p0)
{
Function.Call((Hash)0xBAE4F9B97CD43B30, p0);
}

/// <summary>
/// Used in the native scripts to reference &quot;GET_PEDHEADSHOT_TXD_STRING&quot; and &quot;CHAR_DEFAULT&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x317EBA71D7543F52<br />
/// </para>
/// </remarks>
public static void ThefeedUpdateItemTexture(string txdString1, string txnString1, string txdString2, string txnString2)
{
Function.Call((Hash)0x317EBA71D7543F52, txdString1, txnString1, txdString2, txnString2);
}

/// <summary>
/// Declares the entry type of a notification, for example &quot;STRING&quot;.<br /><br />int ShowNotification(char *text)<br />{<br />	BEGIN_TEXT_COMMAND_THEFEED_POST(&quot;STRING&quot;);<br />	ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />	return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x202709F4C58A0424<br />
/// </para>
/// </remarks>
public static void BeginTextCommandThefeedPost(string text)
{
Function.Call((Hash)0x202709F4C58A0424, text);
}

/// <summary>
/// List of picture names: https://pastebin.com/XdpJVbHz<br />Example result: https://i.imgur.com/SdEZ22m.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B7E9A4EAAA93C89<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostStats(string statTitle, int iconEnum, bool stepVal, int barValue, bool isImportant, string pictureTextureDict, string pictureTextureName)
{
return Function.Call<int>((Hash)0x2B7E9A4EAAA93C89, statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />List of picNames: https://pastebin.com/XdpJVbHz<br /><br /><br />flash is a bool for fading in.<br />iconTypes:<br />1 : Chat Box<br />2 : Email<br />3 : Add Friend Request<br />4 : Nothing<br />5 : Nothing<br />6 : Nothing<br />7 : Right Jumping Arrow<br />8 : RP Icon<br />9 : $ Icon<br /><br />&quot;sender&quot; is the very top header. This can be any old string.<br />&quot;subject&quot; is the header under the sender.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CCD9A37359072CF<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMessagetext(string txdName, string textureName, bool flash, int iconType, string sender, string subject)
{
return Function.Call<int>((Hash)0x1CCD9A37359072CF, txdName, textureName, flash, iconType, sender, subject);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />Needs more research.<br /><br />Only one type of usage in the scripts:<br /><br />HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(&quot;CHAR_ACTING_UP&quot;, &quot;CHAR_ACTING_UP&quot;, 0, 0, &quot;DI_FEED_CHAR&quot;, a_0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6F580E4C94926AC<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMessagetextSubtitleLabel(string txdName, string textureName, bool flash, int iconType, string sender, string subject)
{
return Function.Call<int>((Hash)0xC6F580E4C94926AC, txdName, textureName, flash, iconType, sender, subject);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />NOTE: &apos;duration&apos; is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.<br /><br />Example, only occurrence in the scripts:<br />v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(&quot;CHAR_SOCIAL_CLUB&quot;, &quot;CHAR_SOCIAL_CLUB&quot;, 0, 0, &amp;v_9, &quot;&quot;, a_5);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E6611149DB3DB6B<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMessagetextTu(string txdName, string textureName, bool flash, int iconType, string sender, string subject, float duration)
{
return Function.Call<int>((Hash)0x1E6611149DB3DB6B, txdName, textureName, flash, iconType, sender, subject, duration);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />List of picNames https://pastebin.com/XdpJVbHz<br /><br />flash is a bool for fading in.<br />iconTypes:<br />1 : Chat Box<br />2 : Email<br />3 : Add Friend Request<br />4 : Nothing<br />5 : Nothing<br />6 : Nothing<br />7 : Right Jumping Arrow<br />8 : RP Icon<br />9 : $ Icon<br /><br />&quot;sender&quot; is the very top header. This can be any old string.<br />&quot;subject&quot; is the header under the sender.<br />&quot;duration&quot; is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.<br />&quot;clanTag&quot; shows a crew tag in the &quot;sender&quot; header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. &quot;MK&quot; becomes &quot;___MK&quot;, &quot;ACE&quot; becomes &quot;___ACE&quot;, etc.)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CBF7BADE20DB93E<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMessagetextWithCrewTag(string txdName, string textureName, bool flash, int iconType, string sender, string subject, float duration, string clanTag)
{
return Function.Call<int>((Hash)0x5CBF7BADE20DB93E, txdName, textureName, flash, iconType, sender, subject, duration, clanTag);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />List of picNames:  https://pastebin.com/XdpJVbHz<br /><br />flash is a bool for fading in.<br />iconTypes:<br />1 : Chat Box<br />2 : Email<br />3 : Add Friend Request<br />4 : Nothing<br />5 : Nothing<br />6 : Nothing<br />7 : Right Jumping Arrow<br />8 : RP Icon<br />9 : $ Icon<br /><br />&quot;sender&quot; is the very top header. This can be any old string.<br />&quot;subject&quot; is the header under the sender.<br />&quot;duration&quot; is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.<br />&quot;clanTag&quot; shows a crew tag in the &quot;sender&quot; header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. &quot;MK&quot; becomes &quot;___MK&quot;, &quot;ACE&quot; becomes &quot;___ACE&quot;, etc.)<br />iconType2 is a mirror of iconType. It shows in the &quot;subject&quot; line, right under the original iconType.<br /><br /><br />int IconNotification(char *text, char *text2, char *Subject)<br />{<br />    BEGIN_TEXT_COMMAND_THEFEED_POST(&quot;STRING&quot;);<br /> ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />   _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(&quot;CHAR_SOCIAL_CLUB&quot;, &quot;CHAR_SOCIAL_CLUB&quot;, 1, 7, text2, Subject, 1.0f, &quot;__EXAMPLE&quot;, 7);<br />   return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x531B84E7DA981FB6<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(string txdName, string textureName, bool flash, int iconType1, string sender, string subject, float duration, string clanTag, int iconType2, int p9)
{
return Function.Call<int>((Hash)0x531B84E7DA981FB6, txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2ED7843F8F801023<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostTicker(bool blink, bool p1)
{
return Function.Call<int>((Hash)0x2ED7843F8F801023, blink, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44FA03975424A0EE<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostTickerForced(bool blink, bool p1)
{
return Function.Call<int>((Hash)0x44FA03975424A0EE, blink, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x378E809BF61EC840<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostTickerWithTokens(bool blink, bool p1)
{
return Function.Call<int>((Hash)0x378E809BF61EC840, blink, p1);
}

/// <summary>
/// Shows an &quot;award&quot; notification above the minimap, example: https://i.imgur.com/e2DNaKX.png<br />Example:<br /><br />HUD::BEGIN_TEXT_COMMAND_THEFEED_POST(&quot;HUNT&quot;);<br />HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD(&quot;Hunting&quot;, &quot;Hunting_Gold_128&quot;, 0, 109, &quot;HUD_MED_UNLKED&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA295B6F28BD587D<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostAward(string textureDict, string textureName, int rpBonus, int colorOverlay, string titleLabel)
{
return Function.Call<int>((Hash)0xAA295B6F28BD587D, textureDict, textureName, rpBonus, colorOverlay, titleLabel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97C9E4E7024A8F2C<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostCrewtag(bool p0, bool p1, ref int p2, int p3, bool isLeader, bool unk0, int clanDesc, int R, int G, int B)
{
var nativeAssistPointerVar0 = p2;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x97C9E4E7024A8F2C, p0, p1, &nativeAssistPointerVar0, p3, isLeader, unk0, clanDesc, R, G, B);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x137BC35589E34E1E<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostCrewtagWithGameName(bool p0, bool p1, ref int p2, int p3, bool isLeader, bool unk0, int clanDesc, string playerName, int R, int G, int B)
{
var nativeAssistPointerVar0 = p2;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x137BC35589E34E1E, p0, p1, &nativeAssistPointerVar0, p3, isLeader, unk0, clanDesc, playerName, R, G, B);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33EE12743CCD6343<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostUnlock(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0x33EE12743CCD6343, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8F3AAF93D0600BF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostUnlockTu(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<int>((Hash)0xC8F3AAF93D0600BF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AE0589093A2E088<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostUnlockTuWithColor(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<int>((Hash)0x7AE0589093A2E088, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF020C96915705B3A<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostMpticker(bool blink, bool p1)
{
return Function.Call<int>((Hash)0xF020C96915705B3A, blink, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EFCCF6EC66D85E4<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostCrewRankupWithLiteralFlag(string p0, string p1, string p2, bool p3, bool p4)
{
return Function.Call<int>((Hash)0x8EFCCF6EC66D85E4, p0, p1, p2, p3, p4);
}

/// <summary>
/// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.<br /><br />List of picNames: https://pastebin.com/XdpJVbHz<br />HUD colors and their values: https://pastebin.com/d9aHPbXN<br /><br />Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6871B0555B02996<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostVersusTu(string txdName1, string textureName1, int count1, string txdName2, string textureName2, int count2, int hudColor1, int hudColor2)
{
return Function.Call<int>((Hash)0xB6871B0555B02996, txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);
}

/// <summary>
/// returns a notification handle, prints out a notification like below:<br />type range: 0 - 2<br />if you set type to 1, image goes from 0 - 39 - Xbox you can add text to<br /><br />example: <br />HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, &quot;Who you trynna get crazy with, ese? Don&apos;t you know I&apos;m LOCO?!&quot;);<br />- https://imgur.com/lGBPCz3
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD202B92CBF1D816F<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostReplay(int type, int image, string text)
{
return Function.Call<int>((Hash)0xD202B92CBF1D816F, type, image, text);
}

/// <summary>
/// returns a notification handle, prints out a notification like below:<br />type range: 0 - 2<br />if you set type to 1, button accepts &quot;~INPUT_SOMETHING~&quot;<br /><br />example:<br />HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, &quot;~INPUT_TALK~&quot;, &quot;Who you trynna get crazy with, ese? Don&apos;t you know I&apos;m LOCO?!&quot;);<br />- https://imgur.com/UPy0Ial<br /><br /><br />Examples from the scripts:<br />l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,&quot;~INPUT_REPLAY_START_STOP_RECORDING~&quot;,&quot;&quot;);<br />l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,&quot;~INPUT_SAVE_REPLAY_CLIP~&quot;,&quot;&quot;);<br />l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,&quot;~INPUT_REPLAY_START_STOP_RECORDING~&quot;,&quot;&quot;);<br />l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,&quot;~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~&quot;,&quot;&quot;);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD6CB2CCE7C2735C<br />
/// </para>
/// </remarks>
public static int EndTextCommandThefeedPostReplayInput(int type, string button, string text)
{
return Function.Call<int>((Hash)0xDD6CB2CCE7C2735C, type, button, text);
}

/// <summary>
/// void ShowSubtitle(const char *text)<br />{<br />  BEGIN_TEXT_COMMAND_PRINT(&quot;STRING&quot;);<br /> ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />   END_TEXT_COMMAND_PRINT(2000, true);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB87A37EEB7FAA67D<br />
/// </para>
/// </remarks>
public static void BeginTextCommandPrint(string GxtEntry)
{
Function.Call((Hash)0xB87A37EEB7FAA67D, GxtEntry);
}

/// <summary>
/// Draws the subtitle at middle center of the screen.<br /><br />int duration = time in milliseconds to show text on screen before disappearing<br /><br />drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished<br /><br />Used to be known as _DRAW_SUBTITLE_TIMED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D77056A530643F6<br />
/// </para>
/// </remarks>
public static void EndTextCommandPrint(int duration, bool drawImmediately)
{
Function.Call((Hash)0x9D77056A530643F6, duration, drawImmediately);
}

/// <summary>
/// nothin doin. <br /><br />BOOL Message(const char* text)<br />   {<br />     BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(&quot;STRING&quot;);<br />      ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />       return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();<br />   }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x853648FD1063A213<br />
/// </para>
/// </remarks>
public static void BeginTextCommandIsMessageDisplayed(string text)
{
Function.Call((Hash)0x853648FD1063A213, text);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A9BA1AB3E237613<br />
/// </para>
/// </remarks>
public static bool EndTextCommandIsMessageDisplayed()
{
return Function.Call<bool>((Hash)0x8A9BA1AB3E237613);
}

/// <summary>
/// The following were found in the decompiled script files:<br />STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3<br /><br />ESDOLLA - cash<br />ESMINDOLLA - cash (negative)<br /><br />Used to be known as _SET_TEXT_ENTRY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25FBB336DF1804CB<br />
/// </para>
/// </remarks>
public static void BeginTextCommandDisplayText(string text)
{
Function.Call((Hash)0x25FBB336DF1804CB, text);
}

/// <summary>
/// After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f &lt; x, y &lt; 1.0f, percentage of the axis.<br /><br />Used to be known as _DRAW_TEXT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD015E5BB0D96A57<br />
/// </para>
/// </remarks>
public static void EndTextCommandDisplayText(float x, float y, int p2)
{
Function.Call((Hash)0xCD015E5BB0D96A57, x, y, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54CE8AC98E120CAB<br />
/// </para>
/// </remarks>
public static void BeginTextCommandGetScreenWidthOfDisplayText(string text)
{
Function.Call((Hash)0x54CE8AC98E120CAB, text);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85F061DA64ED2F67<br />
/// </para>
/// </remarks>
public static float EndTextCommandGetScreenWidthOfDisplayText(bool p0)
{
return Function.Call<float>((Hash)0x85F061DA64ED2F67, p0);
}

/// <summary>
/// int GetLineCount(char *text, float x, float y)<br />    {<br />     BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(&quot;STRING&quot;);<br />                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />      return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);<br />    }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x521FB041D93DD0E4<br />
/// </para>
/// </remarks>
public static void BeginTextCommandGetNumberOfLinesForString(string entry)
{
Function.Call((Hash)0x521FB041D93DD0E4, entry);
}

/// <summary>
/// Determines how many lines the text string will use when drawn on screen. <br />Must use 0x521FB041D93DD0E4 for setting up
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9040DFB09BE75706<br />
/// </para>
/// </remarks>
public static int EndTextCommandGetNumberOfLinesForString(float x, float y)
{
return Function.Call<int>((Hash)0x9040DFB09BE75706, x, y);
}

/// <summary>
/// Used to be known as _SET_TEXT_COMPONENT_FORMAT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8509B634FBE7DA11<br />
/// </para>
/// </remarks>
public static void BeginTextCommandDisplayHelp(string inputType)
{
Function.Call((Hash)0x8509B634FBE7DA11, inputType);
}

/// <summary>
/// shape goes from -1 to 50 (may be more).<br />p0 is always 0.<br /><br />Example:<br />void FloatingHelpText(const char* text)<br />{<br />    BEGIN_TEXT_COMMAND_DISPLAY_HELP(&quot;STRING&quot;);<br />  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);<br />   END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);<br />}<br /><br />Image:<br />- imgbin.org/images/26209.jpg<br /><br />more inputs/icons:<br />- https://pastebin.com/nqNYWMSB<br /><br />Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x238FFE5C7B0498A6<br />
/// </para>
/// </remarks>
public static void EndTextCommandDisplayHelp(int p0, bool loop, bool beep, int shape)
{
Function.Call((Hash)0x238FFE5C7B0498A6, p0, loop, beep, shape);
}

/// <summary>
/// BOOL IsContextActive(char *ctx)<br />    {<br />     BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);<br />     return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);<br />  }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A24DA3A41B718F5<br />
/// </para>
/// </remarks>
public static void BeginTextCommandIsThisHelpMessageBeingDisplayed(string labelName)
{
Function.Call((Hash)0x0A24DA3A41B718F5, labelName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10BDDBFC529428DD<br />
/// </para>
/// </remarks>
public static bool EndTextCommandIsThisHelpMessageBeingDisplayed(int p0)
{
return Function.Call<bool>((Hash)0x10BDDBFC529428DD, p0);
}

/// <summary>
/// Starts a text command to change the name of a blip displayed in the pause menu.<br />This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.<br />Example:<br /><br />HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME(&quot;STRING&quot;);<br />HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(&quot;Name&quot;);<br />HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9113A30DE5C6670<br />
/// </para>
/// </remarks>
public static void BeginTextCommandSetBlipName(string textLabel)
{
Function.Call((Hash)0xF9113A30DE5C6670, textLabel);
}

/// <summary>
/// Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC38B49BCB83BC9B<br />
/// </para>
/// </remarks>
public static void EndTextCommandSetBlipName(int /* Blip */ blip)
{
Function.Call((Hash)0xBC38B49BCB83BC9B, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23D69E0465570028<br />
/// </para>
/// </remarks>
public static void BeginTextCommandAddDirectlyToPreviousBriefs(string p0)
{
Function.Call((Hash)0x23D69E0465570028, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFDBDF5AE59BA0F4<br />
/// </para>
/// </remarks>
public static void EndTextCommandAddDirectlyToPreviousBriefs(bool p0)
{
Function.Call((Hash)0xCFDBDF5AE59BA0F4, p0);
}

/// <summary>
/// clears a print text command with this text
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE124FA80A759019C<br />
/// </para>
/// </remarks>
public static void BeginTextCommandClearPrint(string text)
{
Function.Call((Hash)0xE124FA80A759019C, text);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCC75460ABA29378<br />
/// </para>
/// </remarks>
public static void EndTextCommandClearPrint()
{
Function.Call((Hash)0xFCC75460ABA29378);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F9EE5687F8EECCD<br />
/// </para>
/// </remarks>
public static void BeginTextCommandOverrideButtonText(string gxtEntry)
{
Function.Call((Hash)0x8F9EE5687F8EECCD, gxtEntry);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA86911979638106F<br />
/// </para>
/// </remarks>
public static void EndTextCommandOverrideButtonText(int p0)
{
Function.Call((Hash)0xA86911979638106F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03B504CF259931BC<br />
/// </para>
/// </remarks>
public static void AddTextComponentInteger(int value)
{
Function.Call((Hash)0x03B504CF259931BC, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7DCB5B874BCD96E<br />
/// </para>
/// </remarks>
public static void AddTextComponentFloat(float value, int decimalPlaces)
{
Function.Call((Hash)0xE7DCB5B874BCD96E, value, decimalPlaces);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC63CD5D2920ACBE7<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringTextLabel(string labelName)
{
Function.Call((Hash)0xC63CD5D2920ACBE7, labelName);
}

/// <summary>
/// It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY(&quot;ES_HELP&quot;), adds &quot;Continue&quot;. Just uses a text labels hash key
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17299B63C7683A2B<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringTextLabelHashKey(uint gxtEntryHash)
{
Function.Call((Hash)0x17299B63C7683A2B, gxtEntryHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80EAD8E2E1D5D52E<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringBlipName(int /* Blip */ blip)
{
Function.Call((Hash)0x80EAD8E2E1D5D52E, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C188BE134E074AA<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringPlayerName(string text)
{
Function.Call((Hash)0x6C188BE134E074AA, text);
}

/// <summary>
/// Adds a timer (e.g. &quot;00:00:00:000&quot;). The appearance of the timer depends on the flags, which needs more research.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1115F16B8AB9E8BF<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringTime(int timestamp, int flags)
{
Function.Call((Hash)0x1115F16B8AB9E8BF, timestamp, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E4C749FF9DE9CC4<br />
/// </para>
/// </remarks>
public static void AddTextComponentFormattedInteger(int value, bool commaSeparated)
{
Function.Call((Hash)0x0E4C749FF9DE9CC4, value, commaSeparated);
}

/// <summary>
/// p1 was always -1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x761B77454205A61D<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringPhoneNumber(string p0, int p1)
{
Function.Call((Hash)0x761B77454205A61D, p0, p1);
}

/// <summary>
/// This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94CF4AC034C9C986<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringWebsite(string website)
{
Function.Call((Hash)0x94CF4AC034C9C986, website);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F68520888E69014<br />
/// </para>
/// </remarks>
public static void AddTextComponentSubstringKeyboardDisplay(string @string)
{
Function.Call((Hash)0x5F68520888E69014, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39BBF623FC803EAC<br />
/// </para>
/// </remarks>
public static void SetColourOfNextTextComponent(int hudColor)
{
Function.Call((Hash)0x39BBF623FC803EAC, hudColor);
}

/// <summary>
/// Returns a substring of a specified length starting at a specified position.<br /><br />Example:<br />// Get &quot;STRING&quot; text from &quot;MY_STRING&quot;<br />subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(&quot;MY_STRING&quot;, 3, 6);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x169BD9382084C8C0<br />
/// </para>
/// </remarks>
public static string GetCharacterFromAudioConversationFilename(string text, int position, int length)
{
return Function.Call<string>((Hash)0x169BD9382084C8C0, text, position, length);
}

/// <summary>
/// Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.<br /><br />NOTE: The &apos;maxLength&apos; parameter might actually be the size of the buffer that is returned. More research is needed. -CL69<br /><br />Example:<br />// Condensed example of how Rockstar uses this function<br />strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());<br />subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);<br /><br />--<br /><br />&quot;fm_race_creator.ysc&quot;, line 85115:<br />// parameters modified for clarity<br />BOOL sub_8e5aa(char *text, int length) {<br />    for (i = 0; i &lt;= (length - 2); i += 1) {<br />        if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), &quot; &quot;)) {<br />            return FALSE;<br />        }<br />    }<br />    return TRUE;<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2798643312205C5<br />
/// </para>
/// </remarks>
public static string GetCharacterFromAudioConversationFilenameWithByteLimit(string text, int position, int length, int maxLength)
{
return Function.Call<string>((Hash)0xB2798643312205C5, text, position, length, maxLength);
}

/// <summary>
/// Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).<br /><br />Example:<br />// Get &quot;STRING&quot; text from &quot;MY_STRING&quot;<br />subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(&quot;MY_STRING&quot;, 3, 9);<br />// Overflows are possibly replaced with underscores (needs verification)<br />subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(&quot;MY_STRING&quot;, 3, 10); // &quot;STRING_&quot;?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE94AEBA5D82908A<br />
/// </para>
/// </remarks>
public static string GetCharacterFromAudioConversationFilenameBytes(string text, int startPosition, int endPosition)
{
return Function.Call<string>((Hash)0xCE94AEBA5D82908A, text, startPosition, endPosition);
}

/// <summary>
/// Gets a string literal from a label name.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B5280EBA9840C72<br />
/// </para>
/// </remarks>
public static string GetFilenameForAudioConversation(string labelName)
{
return Function.Call<string>((Hash)0x7B5280EBA9840C72, labelName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC33FA791322B9D9<br />
/// </para>
/// </remarks>
public static void ClearPrints()
{
Function.Call((Hash)0xCC33FA791322B9D9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D292F73ADBD9313<br />
/// </para>
/// </remarks>
public static void ClearBrief()
{
Function.Call((Hash)0x9D292F73ADBD9313);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6178F68A87A4D3A0<br />
/// </para>
/// </remarks>
public static void ClearAllHelpMessages()
{
Function.Call((Hash)0x6178F68A87A4D3A0);
}

/// <summary>
/// p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF708001E1E536DD<br />
/// </para>
/// </remarks>
public static void ClearThisPrint(string p0)
{
Function.Call((Hash)0xCF708001E1E536DD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CEA2839313C09AC<br />
/// </para>
/// </remarks>
public static void ClearSmallPrints()
{
Function.Call((Hash)0x2CEA2839313C09AC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C7302E725259789<br />
/// </para>
/// </remarks>
public static bool DoesTextBlockExist(string gxt)
{
return Function.Call<bool>((Hash)0x1C7302E725259789, gxt);
}

/// <summary>
/// Request a gxt into the passed slot.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71A78003C8E71424<br />
/// </para>
/// </remarks>
public static void RequestAdditionalText(string gxt, int slot)
{
Function.Call((Hash)0x71A78003C8E71424, gxt, slot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6009F9F1AE90D8A6<br />
/// </para>
/// </remarks>
public static void RequestAdditionalTextForDlc(string gxt, int slot)
{
Function.Call((Hash)0x6009F9F1AE90D8A6, gxt, slot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02245FE4BED318B8<br />
/// </para>
/// </remarks>
public static bool HasAdditionalTextLoaded(int slot)
{
return Function.Call<bool>((Hash)0x02245FE4BED318B8, slot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A179DF17CCF04CD<br />
/// </para>
/// </remarks>
public static void ClearAdditionalText(int p0, bool p1)
{
Function.Call((Hash)0x2A179DF17CCF04CD, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B6817B71B85EBF0<br />
/// </para>
/// </remarks>
public static bool IsStreamingAdditionalText(int p0)
{
return Function.Call<bool>((Hash)0x8B6817B71B85EBF0, p0);
}

/// <summary>
/// Checks if the specified gxt has loaded into the passed slot.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADBF060E2B30C5BC<br />
/// </para>
/// </remarks>
public static bool HasThisAdditionalTextLoaded(string gxt, int slot)
{
return Function.Call<bool>((Hash)0xADBF060E2B30C5BC, gxt, slot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7984C03AA5CC2F41<br />
/// </para>
/// </remarks>
public static bool IsMessageBeingDisplayed()
{
return Function.Call<bool>((Hash)0x7984C03AA5CC2F41);
}

/// <summary>
/// Checks if the passed gxt name exists in the game files.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC09CA973C564252<br />
/// </para>
/// </remarks>
public static bool DoesTextLabelExist(string gxt)
{
return Function.Call<bool>((Hash)0xAC09CA973C564252, gxt);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x98C3CF913D895111<br />
/// </para>
/// </remarks>
public static string GetFirstNCharactersOfLiteralString(string @string, int length)
{
return Function.Call<string>((Hash)0x98C3CF913D895111, @string, length);
}

/// <summary>
/// Returns the string length of the string from the gxt string .
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x801BD273D3A23F74<br />
/// </para>
/// </remarks>
public static int GetLengthOfStringWithThisTextLabel(string gxt)
{
return Function.Call<int>((Hash)0x801BD273D3A23F74, gxt);
}

/// <summary>
/// Returns the length of the string passed (much like strlen).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF030907CCBB8A9FD<br />
/// </para>
/// </remarks>
public static int GetLengthOfLiteralString(string @string)
{
return Function.Call<int>((Hash)0xF030907CCBB8A9FD, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43E4111189E54F0E<br />
/// </para>
/// </remarks>
public static int GetLengthOfLiteralStringInBytes(string @string)
{
return Function.Call<int>((Hash)0x43E4111189E54F0E, @string);
}

/// <summary>
/// This functions converts the hash of a street name into a readable string.<br /><br />For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0EF8A959B8A4CB9<br />
/// </para>
/// </remarks>
public static string GetStreetNameFromHashKey(uint hash)
{
return Function.Call<string>((Hash)0xD0EF8A959B8A4CB9, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1930DFA731813EC4<br />
/// </para>
/// </remarks>
public static bool IsHudPreferenceSwitchedOn()
{
return Function.Call<bool>((Hash)0x1930DFA731813EC4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9EB6522EA68F22FE<br />
/// </para>
/// </remarks>
public static bool IsRadarPreferenceSwitchedOn()
{
return Function.Call<bool>((Hash)0x9EB6522EA68F22FE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD6DACA4BA53E0A4<br />
/// </para>
/// </remarks>
public static bool IsSubtitlePreferenceSwitchedOn()
{
return Function.Call<bool>((Hash)0xAD6DACA4BA53E0A4);
}

/// <summary>
/// If Hud should be displayed
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6294919E56FF02A<br />
/// </para>
/// </remarks>
public static void DisplayHud(bool toggle)
{
Function.Call((Hash)0xA6294919E56FF02A, toggle);
}

/// <summary>
/// Enables drawing some hud components, such as help labels, this frame, when the player is dead.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7669F9E39DC17063<br />
/// </para>
/// </remarks>
public static void DisplayHudWhenNotInStateOfPlayThisFrame()
{
Function.Call((Hash)0x7669F9E39DC17063);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x402F9ED62087E898<br />
/// </para>
/// </remarks>
public static void DisplayHudWhenPausedThisFrame()
{
Function.Call((Hash)0x402F9ED62087E898);
}

/// <summary>
/// If Minimap / Radar should be displayed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0EBB943C300E693<br />
/// </para>
/// </remarks>
public static void DisplayRadar(bool toggle)
{
Function.Call((Hash)0xA0EBB943C300E693, toggle);
}

/// <summary>
/// Setter for GET_FAKE_SPECTATOR_MODE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xCD74233600C4EA6B<br />
/// </para>
/// </remarks>
public static void SetFakeSpectatorMode(bool toggle)
{
Function.Call((Hash)0xCD74233600C4EA6B, toggle);
}

/// <summary>
/// Getter for SET_FAKE_SPECTATOR_MODE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xC2D2AD9EAAE265B8<br />
/// </para>
/// </remarks>
public static bool GetFakeSpectatorMode()
{
return Function.Call<bool>((Hash)0xC2D2AD9EAAE265B8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA86478C6958735C5<br />
/// </para>
/// </remarks>
public static bool IsHudHidden()
{
return Function.Call<bool>((Hash)0xA86478C6958735C5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x157F93B036700462<br />
/// </para>
/// </remarks>
public static bool IsRadarHidden()
{
return Function.Call<bool>((Hash)0x157F93B036700462);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF754F20EB5CD51A<br />
/// </para>
/// </remarks>
public static bool IsMinimapRendering()
{
return Function.Call<bool>((Hash)0xAF754F20EB5CD51A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x0C698D8F099174C7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UseVehicleTargetingReticule(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0C698D8F099174C7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xE4C3B169876D33D7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AddValidVehicleHitHash(int /* bug: Any */ p0)
{
Function.Call((Hash)0xE4C3B169876D33D7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xEB81A3DADD503187<br />
/// </para>
/// </remarks>
public static void ClearValidVehicleHitHashes()
{
Function.Call((Hash)0xEB81A3DADD503187);
}

/// <summary>
/// Enable / disable showing route for the Blip-object.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F7D8A9BFB0B43E9<br />
/// </para>
/// </remarks>
public static void SetBlipRoute(int /* Blip */ blip, bool enabled)
{
Function.Call((Hash)0x4F7D8A9BFB0B43E9, blip, enabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xD12882D3FF82BF11<br />
/// </para>
/// </remarks>
public static void ClearAllBlipRoutes()
{
Function.Call((Hash)0xD12882D3FF82BF11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x837155CD2F63DA09<br />
/// </para>
/// </remarks>
public static void SetBlipRouteColour(int /* Blip */ blip, int colour)
{
Function.Call((Hash)0x837155CD2F63DA09, blip, colour);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x2790F4B17D098E26<br />
/// </para>
/// </remarks>
public static void SetForceShowGps(bool toggle)
{
Function.Call((Hash)0x2790F4B17D098E26, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x6CDD58146A436083<br />
/// </para>
/// </remarks>
public static void SetUseSetDestinationInPauseMap(bool toggle)
{
Function.Call((Hash)0x6CDD58146A436083, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xD1942374085C8469<br />
/// </para>
/// </remarks>
public static void SetBlockWantedFlash(bool disabled)
{
Function.Call((Hash)0xD1942374085C8469, disabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60296AF4BA14ABC5<br />
/// </para>
/// </remarks>
public static void AddNextMessageToPreviousBriefs(bool p0)
{
Function.Call((Hash)0x60296AF4BA14ABC5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57D760D55F54E071<br />
/// </para>
/// </remarks>
public static void ForceNextMessageToPreviousBriefsList(int p0)
{
Function.Call((Hash)0x57D760D55F54E071, p0);
}

/// <summary>
/// zoom ranges from 0 to 90f in R* Scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD12C5EEE184C337<br />
/// </para>
/// </remarks>
public static void SetRadarZoomPrecise(float zoom)
{
Function.Call((Hash)0xBD12C5EEE184C337, zoom);
}

/// <summary>
/// zoomLevel ranges from 0 to 1400 in R* Scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x096EF57A0C999BBA<br />
/// </para>
/// </remarks>
public static void SetRadarZoom(int zoomLevel)
{
Function.Call((Hash)0x096EF57A0C999BBA, zoomLevel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF98E4B3E56AFC7B1<br />
/// </para>
/// </remarks>
public static void SetRadarZoomToBlip(int /* Blip */ blip, float zoom)
{
Function.Call((Hash)0xF98E4B3E56AFC7B1, blip, zoom);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB7CC0D58405AD41<br />
/// </para>
/// </remarks>
public static void SetRadarZoomToDistance(float zoom)
{
Function.Call((Hash)0xCB7CC0D58405AD41, zoom);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2049635DEB9C375<br />
/// </para>
/// </remarks>
public static void UpdateRadarZoomToBlip()
{
Function.Call((Hash)0xD2049635DEB9C375);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C9C91AB74A0360F<br />
/// </para>
/// </remarks>
public static void GetHudColour(int hudColorIndex, ref int r, ref int g, ref int b, ref int a)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
var nativeAssistPointerVar3 = a;
unsafe {
Function.Call((Hash)0x7C9C91AB74A0360F, hudColorIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
a = nativeAssistPointerVar3;
}

/// <summary>
/// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD68A5FF8A3A89874<br />
/// </para>
/// </remarks>
public static void SetScriptVariableHudColour(int r, int g, int b, int a)
{
Function.Call((Hash)0xD68A5FF8A3A89874, r, g, b, a);
}

/// <summary>
/// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16A304E6CB2BFAB9<br />
/// </para>
/// </remarks>
public static void SetSecondScriptVariableHudColour(int r, int g, int b, int a)
{
Function.Call((Hash)0x16A304E6CB2BFAB9, r, g, b, a);
}

/// <summary>
/// makes hudColorIndex2 color into hudColorIndex color
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CCC708F0F850613<br />
/// </para>
/// </remarks>
public static void ReplaceHudColour(int hudColorIndex, int hudColorIndex2)
{
Function.Call((Hash)0x1CCC708F0F850613, hudColorIndex, hudColorIndex2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF314CF4F0211894E<br />
/// </para>
/// </remarks>
public static void ReplaceHudColourWithRgba(int hudColorIndex, int r, int g, int b, int a)
{
Function.Call((Hash)0xF314CF4F0211894E, hudColorIndex, r, g, b, a);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x1DFEDD15019315A9<br />
/// </para>
/// </remarks>
public static void SetAbilityBarVisibility(bool visible)
{
Function.Call((Hash)0x1DFEDD15019315A9, visible);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x889329C80FE5963C<br />
/// </para>
/// </remarks>
public static void SetAllowAbilityBar(bool toggle)
{
Function.Call((Hash)0x889329C80FE5963C, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02CFBA0C9E9275CE<br />
/// </para>
/// </remarks>
public static void FlashAbilityBar(int millisecondsToFlash)
{
Function.Call((Hash)0x02CFBA0C9E9275CE, millisecondsToFlash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9969599CCFF5D85E<br />
/// </para>
/// </remarks>
public static void SetAbilityBarValue(float p0, float p1)
{
Function.Call((Hash)0x9969599CCFF5D85E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA18AFB39081B6A1F<br />
/// </para>
/// </remarks>
public static void FlashWantedDisplay(bool p0)
{
Function.Call((Hash)0xA18AFB39081B6A1F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA8D65C1C65702E5<br />
/// </para>
/// </remarks>
public static void ForceOffWantedStarFlash(bool toggle)
{
Function.Call((Hash)0xBA8D65C1C65702E5, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x2ACCB195F3CCD9DE<br />
/// </para>
/// </remarks>
public static void SetCustomMpHudColor(int hudColorId)
{
Function.Call((Hash)0x2ACCB195F3CCD9DE, hudColorId);
}

/// <summary>
/// This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I&apos;m using a smaller value) to get the total text height.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB88A37483346780<br />
/// </para>
/// </remarks>
public static float GetRenderedCharacterHeight(float size, int font)
{
return Function.Call<float>((Hash)0xDB88A37483346780, size, font);
}

/// <summary>
/// Size range : 0F to 1.0F<br />p0 is unknown and doesn&apos;t seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07C837F9A01C34C9<br />
/// </para>
/// </remarks>
public static void SetTextScale(float scale, float size)
{
Function.Call((Hash)0x07C837F9A01C34C9, scale, size);
}

/// <summary>
/// colors you input not same as you think?<br />A: for some reason its R B G A
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE6B23FFA53FB442<br />
/// </para>
/// </remarks>
public static void SetTextColour(int red, int green, int blue, int alpha)
{
Function.Call((Hash)0xBE6B23FFA53FB442, red, green, blue, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC02F4DBFB51D988B<br />
/// </para>
/// </remarks>
public static void SetTextCentre(bool align)
{
Function.Call((Hash)0xC02F4DBFB51D988B, align);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B3C4650BC8BEE47<br />
/// </para>
/// </remarks>
public static void SetTextRightJustify(bool toggle)
{
Function.Call((Hash)0x6B3C4650BC8BEE47, toggle);
}

/// <summary>
/// Types -<br />0: Center-Justify<br />1: Left-Justify<br />2: Right-Justify<br /><br />Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E096588B13FFECA<br />
/// </para>
/// </remarks>
public static void SetTextJustification(int justifyType)
{
Function.Call((Hash)0x4E096588B13FFECA, justifyType);
}

/// <summary>
/// It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.<br /><br />start - left boundry on screen position (0.0 - 1.0)<br />end - right boundry on screen position (0.0 - 1.0)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63145D9C883A1A70<br />
/// </para>
/// </remarks>
public static void SetTextWrap(float start, float end)
{
Function.Call((Hash)0x63145D9C883A1A70, start, end);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA50ABC31E3CDFAFF<br />
/// </para>
/// </remarks>
public static void SetTextLeading(int p0)
{
Function.Call((Hash)0xA50ABC31E3CDFAFF, p0);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x038C1F517D7FDCF8<br />
/// </para>
/// </remarks>
public static void SetTextProportional(bool p0)
{
Function.Call((Hash)0x038C1F517D7FDCF8, p0);
}

/// <summary>
/// fonts that mess up your text where made for number values/misc stuff
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66E0276CC5F6B9DA<br />
/// </para>
/// </remarks>
public static void SetTextFont(int fontType)
{
Function.Call((Hash)0x66E0276CC5F6B9DA, fontType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CA3E9EAC9D93E5E<br />
/// </para>
/// </remarks>
public static void SetTextDropShadow()
{
Function.Call((Hash)0x1CA3E9EAC9D93E5E);
}

/// <summary>
/// distance - shadow distance in pixels, both horizontal and vertical<br />r, g, b, a - color
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x465C84BC39F1C351<br />
/// </para>
/// </remarks>
public static void SetTextDropshadow(int distance, int r, int g, int b, int a)
{
Function.Call((Hash)0x465C84BC39F1C351, distance, r, g, b, a);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2513DFB0FB8400FE<br />
/// </para>
/// </remarks>
public static void SetTextOutline()
{
Function.Call((Hash)0x2513DFB0FB8400FE);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x441603240D202FA6<br />
/// </para>
/// </remarks>
public static void SetTextEdge(int p0, int r, int g, int b, int a)
{
Function.Call((Hash)0x441603240D202FA6, p0, r, g, b, a);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F15302936E07111<br />
/// </para>
/// </remarks>
public static void SetTextRenderId(int renderId)
{
Function.Call((Hash)0x5F15302936E07111, renderId);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52F0982D7FD156B6<br />
/// </para>
/// </remarks>
public static int GetDefaultScriptRendertargetRenderId()
{
return Function.Call<int>((Hash)0x52F0982D7FD156B6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57D9C12635E25CE3<br />
/// </para>
/// </remarks>
public static bool RegisterNamedRendertarget(string name, bool p1)
{
return Function.Call<bool>((Hash)0x57D9C12635E25CE3, name, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78DCDC15C9F116B4<br />
/// </para>
/// </remarks>
public static bool IsNamedRendertargetRegistered(string name)
{
return Function.Call<bool>((Hash)0x78DCDC15C9F116B4, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE9F6FFE837354DD4<br />
/// </para>
/// </remarks>
public static bool ReleaseNamedRendertarget(string name)
{
return Function.Call<bool>((Hash)0xE9F6FFE837354DD4, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6C09E276AEB3F2D<br />
/// </para>
/// </remarks>
public static void LinkNamedRendertarget(uint modelHash)
{
Function.Call((Hash)0xF6C09E276AEB3F2D, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A6478B61C6BDC3B<br />
/// </para>
/// </remarks>
public static int GetNamedRendertargetRenderId(string name)
{
return Function.Call<int>((Hash)0x1A6478B61C6BDC3B, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x113750538FA31298<br />
/// </para>
/// </remarks>
public static bool IsNamedRendertargetLinked(uint modelHash)
{
return Function.Call<bool>((Hash)0x113750538FA31298, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DFCED7A656F8802<br />
/// </para>
/// </remarks>
public static void ClearHelp(bool toggle)
{
Function.Call((Hash)0x8DFCED7A656F8802, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDAD37F45428801AE<br />
/// </para>
/// </remarks>
public static bool IsHelpMessageOnScreen()
{
return Function.Call<bool>((Hash)0xDAD37F45428801AE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x214CD562A939246A<br />
/// </para>
/// </remarks>
public static bool HasScriptHiddenHelpThisFrame()
{
return Function.Call<bool>((Hash)0x214CD562A939246A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D79439A6B55AC67<br />
/// </para>
/// </remarks>
public static bool IsHelpMessageBeingDisplayed()
{
return Function.Call<bool>((Hash)0x4D79439A6B55AC67);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x327EDEEEAC55C369<br />
/// </para>
/// </remarks>
public static bool IsHelpMessageFadingOut()
{
return Function.Call<bool>((Hash)0x327EDEEEAC55C369);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xB9C362BABECDDC7A<br />
/// </para>
/// </remarks>
public static void SetHelpMessageStyle(int style, int hudColor, int alpha, int p3, int p4)
{
Function.Call((Hash)0xB9C362BABECDDC7A, style, hudColor, alpha, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A9923385BDB9DAD<br />
/// </para>
/// </remarks>
public static int GetStandardBlipEnumId()
{
return Function.Call<int>((Hash)0x4A9923385BDB9DAD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x186E5D252FA50E7D<br />
/// </para>
/// </remarks>
public static int GetWaypointBlipEnumId()
{
return Function.Call<int>((Hash)0x186E5D252FA50E7D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A3FF3DE163034E8<br />
/// </para>
/// </remarks>
public static int GetNumberOfActiveBlips()
{
return Function.Call<int>((Hash)0x9A3FF3DE163034E8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14F96AA50D6FBEA7<br />
/// </para>
/// </remarks>
public static int GetNextBlipInfoId(int blipSprite)
{
return Function.Call<int>((Hash)0x14F96AA50D6FBEA7, blipSprite);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1BEDE233E6CD2A1F<br />
/// </para>
/// </remarks>
public static int GetFirstBlipInfoId(int blipSprite)
{
return Function.Call<int>((Hash)0x1BEDE233E6CD2A1F, blipSprite);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xD484BF71050CA1EE<br />
/// </para>
/// </remarks>
public static int GetClosestBlipInfoId(int blipSprite)
{
return Function.Call<int>((Hash)0xD484BF71050CA1EE, blipSprite);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA7C7F0AADF25D09<br />
/// </para>
/// </remarks>
public static Vector3 GetBlipInfoIdCoord(int /* Blip */ blip)
{
return Function.Call<Vector3>((Hash)0xFA7C7F0AADF25D09, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E314167F701DC3B<br />
/// </para>
/// </remarks>
public static int GetBlipInfoIdDisplay(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x1E314167F701DC3B, blip);
}

/// <summary>
/// Returns a value based on what the blip is attached to<br />1 - Vehicle<br />2 - Ped<br />3 - Object<br />4 - Coord<br />5 - unk<br />6 - Pickup<br />7 - Radius
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE9B0959FFD0779B<br />
/// </para>
/// </remarks>
public static int GetBlipInfoIdType(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0xBE9B0959FFD0779B, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4BA4E2553AFEDC2C<br />
/// </para>
/// </remarks>
public static int GetBlipInfoIdEntityIndex(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x4BA4E2553AFEDC2C, blip);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B6786E4C03DD382<br />
/// </para>
/// </remarks>
public static Pickup GetBlipInfoIdPickupIndex(int /* Blip */ blip)
{
return Function.Call<Pickup>((Hash)0x9B6786E4C03DD382, blip);
}

/// <summary>
/// Returns the Blip handle of given Entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC8DBDCA2436F7E8<br />
/// </para>
/// </remarks>
public static int GetBlipFromEntity(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xBC8DBDCA2436F7E8, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46818D79B1F7499A<br />
/// </para>
/// </remarks>
public static int AddBlipForRadius(float posX, float posY, float posZ, float radius)
{
return Function.Call<int>((Hash)0x46818D79B1F7499A, posX, posY, posZ, radius);
}

/// <summary>
/// Adds a rectangular blip for the specified coordinates/area.<br /><br />It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.<br /><br />By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.<br /><br />Example image:<br />minimap https://w.wew.wtf/pdcjig.png<br />big map https://w.wew.wtf/zgcjcm.png<br /><br />(Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can&apos;t be confirmed)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xCE5D0E5E315DB238<br />
/// </para>
/// </remarks>
public static int AddBlipForArea(float x, float y, float z, float width, float height)
{
return Function.Call<int>((Hash)0xCE5D0E5E315DB238, x, y, z, width, height);
}

/// <summary>
/// Returns red ( default ) blip attached to entity.<br /><br />Example:<br />Blip blip; //Put this outside your case or option<br />blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);<br />HUD::SET_BLIP_AS_FRIENDLY(blip, true);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CDE92C702A8FCE7<br />
/// </para>
/// </remarks>
public static int AddBlipForEntity(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x5CDE92C702A8FCE7, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE339365C863BD36<br />
/// </para>
/// </remarks>
public static int AddBlipForPickup(Pickup pickup)
{
return Function.Call<int>((Hash)0xBE339365C863BD36, pickup);
}

/// <summary>
/// Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A039BB0BCA604B6<br />
/// </para>
/// </remarks>
public static int AddBlipForCoord(float x, float y, float z)
{
return Function.Call<int>((Hash)0x5A039BB0BCA604B6, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72DD432F3CDFC0EE<br />
/// </para>
/// </remarks>
public static void TriggerSonarBlip(float posX, float posY, float posZ, float radius, int p4)
{
Function.Call((Hash)0x72DD432F3CDFC0EE, posX, posY, posZ, radius, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60734CC207C9833C<br />
/// </para>
/// </remarks>
public static void AllowSonarBlips(bool toggle)
{
Function.Call((Hash)0x60734CC207C9833C, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE2AF67E9D9AF65D<br />
/// </para>
/// </remarks>
public static void SetBlipCoords(int /* Blip */ blip, float posX, float posY, float posZ)
{
Function.Call((Hash)0xAE2AF67E9D9AF65D, blip, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x586AFE3FF72D996E<br />
/// </para>
/// </remarks>
public static Vector3 GetBlipCoords(int /* Blip */ blip)
{
return Function.Call<Vector3>((Hash)0x586AFE3FF72D996E, blip);
}

/// <summary>
/// Sets the displayed sprite for a specific blip..<br /><br />You may have your own list, but since dev-c didn&apos;t show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs<br />https://pastebin.com/Bpj9Sfft<br /><br />Blips Images + IDs:<br />https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF735600A4696DAF<br />
/// </para>
/// </remarks>
public static void SetBlipSprite(int /* Blip */ blip, int spriteId)
{
Function.Call((Hash)0xDF735600A4696DAF, blip, spriteId);
}

/// <summary>
/// Blips Images + IDs:<br />gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1FC877464A04FC4F<br />
/// </para>
/// </remarks>
public static int GetBlipSprite(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x1FC877464A04FC4F, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x9FCB3CBFB3EAD69A<br />
/// </para>
/// </remarks>
public static void SetCopBlipSprite(int p0, float p1)
{
Function.Call((Hash)0x9FCB3CBFB3EAD69A, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xB7B873520C84C118<br />
/// </para>
/// </remarks>
public static void SetCopBlipSpriteAsStandard()
{
Function.Call((Hash)0xB7B873520C84C118);
}

/// <summary>
/// Doesn&apos;t work if the label text of gxtEntry is &gt;= 80.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAA0FFE120D92784<br />
/// </para>
/// </remarks>
public static void SetBlipNameFromTextFile(int /* Blip */ blip, string gxtEntry)
{
Function.Call((Hash)0xEAA0FFE120D92784, blip, gxtEntry);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x127DE7B20C60A6A3<br />
/// </para>
/// </remarks>
public static void SetBlipNameToPlayerName(int /* Blip */ blip, int /* Player */ player)
{
Function.Call((Hash)0x127DE7B20C60A6A3, blip, player);
}

/// <summary>
/// Sets alpha-channel for blip color.<br /><br />Example:<br /><br />Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);<br />HUD::SET_BLIP_COLOUR(blip , 3);<br />HUD::SET_BLIP_ALPHA(blip , 64);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45FF974EEE1C8734<br />
/// </para>
/// </remarks>
public static void SetBlipAlpha(int /* Blip */ blip, int alpha)
{
Function.Call((Hash)0x45FF974EEE1C8734, blip, alpha);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x970F608F0EE6C885<br />
/// </para>
/// </remarks>
public static int GetBlipAlpha(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x970F608F0EE6C885, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AEE8F8390D2298C<br />
/// </para>
/// </remarks>
public static void SetBlipFade(int /* Blip */ blip, int opacity, int duration)
{
Function.Call((Hash)0x2AEE8F8390D2298C, blip, opacity, duration);
}

/// <summary>
/// Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x2C173AE2BDB9385E<br />
/// </para>
/// </remarks>
public static int GetBlipFadeDirection(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x2C173AE2BDB9385E, blip);
}

/// <summary>
/// After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF87683CDF73C3F6E<br />
/// </para>
/// </remarks>
public static void SetBlipRotation(int /* Blip */ blip, int rotation)
{
Function.Call((Hash)0xF87683CDF73C3F6E, blip, rotation);
}

/// <summary>
/// Does not require whole number/integer rotations.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xA8B6AFDAC320AC87<br />
/// </para>
/// </remarks>
public static void SetBlipRotationWithFloat(int /* Blip */ blip, float heading)
{
Function.Call((Hash)0xA8B6AFDAC320AC87, blip, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x003E92BA477F9D7F<br />
/// </para>
/// </remarks>
public static int GetBlipRotation(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x003E92BA477F9D7F, blip);
}

/// <summary>
/// Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3CD6FD297AE87CC<br />
/// </para>
/// </remarks>
public static void SetBlipFlashTimer(int /* Blip */ blip, int duration)
{
Function.Call((Hash)0xD3CD6FD297AE87CC, blip, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA51DB313C010A7E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetBlipFlashInterval(int /* Blip */ blip, int /* bug: Any */ p1)
{
Function.Call((Hash)0xAA51DB313C010A7E, blip, p1);
}

/// <summary>
/// https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03D7FB09E75D6B7E<br />
/// </para>
/// </remarks>
public static void SetBlipColour(int /* Blip */ blip, int color)
{
Function.Call((Hash)0x03D7FB09E75D6B7E, blip, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14892474891E09EB<br />
/// </para>
/// </remarks>
public static void SetBlipSecondaryColour(int /* Blip */ blip, int r, int g, int b)
{
Function.Call((Hash)0x14892474891E09EB, blip, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF729E8D20CF7327<br />
/// </para>
/// </remarks>
public static int GetBlipColour(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0xDF729E8D20CF7327, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x729B5F1EFBC0AAEE<br />
/// </para>
/// </remarks>
public static int GetBlipHudColour(int /* Blip */ blip)
{
return Function.Call<int>((Hash)0x729B5F1EFBC0AAEE, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA5F8727EB75B926<br />
/// </para>
/// </remarks>
public static bool IsBlipShortRange(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0xDA5F8727EB75B926, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE41CA53051197A27<br />
/// </para>
/// </remarks>
public static bool IsBlipOnMinimap(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0xE41CA53051197A27, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD2238F57B977751<br />
/// </para>
/// </remarks>
public static bool DoesBlipHaveGpsRoute(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0xDD2238F57B977751, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54318C915D27E4CE<br />
/// </para>
/// </remarks>
public static void SetBlipHiddenOnLegend(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x54318C915D27E4CE, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2590BC29220CEBB<br />
/// </para>
/// </remarks>
public static void SetBlipHighDetail(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xE2590BC29220CEBB, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24AC0137444F9FD5<br />
/// </para>
/// </remarks>
public static void SetBlipAsMissionCreatorBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x24AC0137444F9FD5, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26F49BF3381D933D<br />
/// </para>
/// </remarks>
public static bool IsMissionCreatorBlip(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0x26F49BF3381D933D, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C90988E7C8E1AF4<br />
/// </para>
/// </remarks>
public static int GetNewSelectedMissionCreatorBlip()
{
return Function.Call<int>((Hash)0x5C90988E7C8E1AF4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4167EFE0527D706E<br />
/// </para>
/// </remarks>
public static bool IsHoveringOverMissionCreatorBlip()
{
return Function.Call<bool>((Hash)0x4167EFE0527D706E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1A6C18B35BCADE6<br />
/// </para>
/// </remarks>
public static void ShowStartMissionInstructionalButton(bool toggle)
{
Function.Call((Hash)0xF1A6C18B35BCADE6, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xC772A904CDE1186F<br />
/// </para>
/// </remarks>
public static void ShowContactInstructionalButton(bool toggle)
{
Function.Call((Hash)0xC772A904CDE1186F, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x2916A928514C9827<br />
/// </para>
/// </remarks>
public static void ReloadMapMenu()
{
Function.Call((Hash)0x2916A928514C9827);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xB552929B85FC27EC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetBlipMarkerLongDistance(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xB552929B85FC27EC, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB14552383D39CE3E<br />
/// </para>
/// </remarks>
public static void SetBlipFlashes(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xB14552383D39CE3E, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E8D9498C56DD0D1<br />
/// </para>
/// </remarks>
public static void SetBlipFlashesAlternate(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x2E8D9498C56DD0D1, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5E41FD83AD6CEF0<br />
/// </para>
/// </remarks>
public static bool IsBlipFlashing(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0xA5E41FD83AD6CEF0, blip);
}

/// <summary>
/// Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE8BE4FE60E27B72<br />
/// </para>
/// </remarks>
public static void SetBlipAsShortRange(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xBE8BE4FE60E27B72, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD38744167B2FA257<br />
/// </para>
/// </remarks>
public static void SetBlipScale(int /* Blip */ blip, float scale)
{
Function.Call((Hash)0xD38744167B2FA257, blip, scale);
}

/// <summary>
/// See https://imgur.com/a/lLkEsMN
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xCD6524439909C979<br />
/// </para>
/// </remarks>
public static void SetBlipScale2d(int /* Blip */ blip, float xScale, float yScale)
{
Function.Call((Hash)0xCD6524439909C979, blip, xScale, yScale);
}

/// <summary>
/// See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE9FC9EF6A9FAC79<br />
/// </para>
/// </remarks>
public static void SetBlipPriority(int /* Blip */ blip, int priority)
{
Function.Call((Hash)0xAE9FC9EF6A9FAC79, blip, priority);
}

/// <summary>
/// Display Id behaviours:<br />0 = Doesn&apos;t show up, ever, anywhere.<br />1 = Doesn&apos;t show up, ever, anywhere.<br />2 = Shows on both main map and minimap. (Selectable on map)<br />3 = Shows on main map only. (Selectable on map)<br />4 = Shows on main map only. (Selectable on map)<br />5 = Shows on minimap only.<br />6 = Shows on both main map and minimap. (Selectable on map)<br />7 = Doesn&apos;t show up, ever, anywhere.<br />8 = Shows on both main map and minimap. (Not selectable on map)<br />9 = Shows on minimap only.<br />10 = Shows on both main map and minimap. (Not selectable on map)<br /><br />Anything higher than 10 seems to be exactly the same as 10.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9029B2F3DA924928<br />
/// </para>
/// </remarks>
public static void SetBlipDisplay(int /* Blip */ blip, int displayId)
{
Function.Call((Hash)0x9029B2F3DA924928, blip, displayId);
}

/// <summary>
/// Example: https://i.imgur.com/skY6vAJ.png<br /><br />Index:<br />1 = No distance shown in legend<br />2 = Distance shown in legend<br />7 = &quot;Other Players&quot; category, also shows distance in legend<br />10 = &quot;Property&quot; category<br />11 = &quot;Owned Property&quot; category<br /><br />Any other value behaves like index = 1, index wraps around after 255<br />Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.<br />Legend entries:<br />7 = Other Players (BLIP_OTHPLYR)<br />10 = Property (BLIP_PROPCAT)<br />11 = Owned Property (BLIP_APARTCAT)<br /><br />Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x234CDD44D996FD9A<br />
/// </para>
/// </remarks>
public static void SetBlipCategory(int /* Blip */ blip, int index)
{
Function.Call((Hash)0x234CDD44D996FD9A, blip, index);
}

/// <summary>
/// In the C++ SDK, this seems not to work-- the blip isn&apos;t removed immediately. I use it for saving cars.<br /><br />E.g.:<br /><br />Ped pped = PLAYER::PLAYER_PED_ID();<br />Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);<br />Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);<br /><br />works fine.<br />But later attempting to delete it with:<br /><br />Blip b = HUD::GET_BLIP_FROM_ENTITY(v);<br />if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&amp;b);<br /><br />doesn&apos;t work. And yes, doesn&apos;t work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).<br /><br />Thus for me, HUD::REMOVE_BLIP(&amp;b) only works if there&apos;s one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn&apos;t. Then they can immediately save it again, causing another blip to re-appear.<br />-------------<br /><br />Passing the address of the variable instead of the value works for me.<br />e.g.<br />int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);<br />HUD::REMOVE_BLIP(&amp;blip);<br /><br /><br />Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is &apos;invisible&apos;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x86A652570E5F25DD<br />
/// </para>
/// </remarks>
public static void RemoveBlip(ref int /* Blip* */ blip)
{
var nativeAssistPointerVar0 = blip;
unsafe {
Function.Call((Hash)0x86A652570E5F25DD, &nativeAssistPointerVar0);
}
blip = nativeAssistPointerVar0;
}

/// <summary>
/// false for enemy<br />true for friendly
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F6F290102C02AB4<br />
/// </para>
/// </remarks>
public static void SetBlipAsFriendly(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x6F6F290102C02AB4, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x742D6FD43115AF73<br />
/// </para>
/// </remarks>
public static void PulseBlip(int /* Blip */ blip)
{
Function.Call((Hash)0x742D6FD43115AF73, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3C0B359DCB848B6<br />
/// </para>
/// </remarks>
public static void ShowNumberOnBlip(int /* Blip */ blip, int number)
{
Function.Call((Hash)0xA3C0B359DCB848B6, blip, number);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x532CFF637EF80148<br />
/// </para>
/// </remarks>
public static void HideNumberOnBlip(int /* Blip */ blip)
{
Function.Call((Hash)0x532CFF637EF80148, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75A16C3DA34F1245<br />
/// </para>
/// </remarks>
public static void ShowHeightOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x75A16C3DA34F1245, blip, toggle);
}

/// <summary>
/// Adds a green checkmark on top of a blip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74513EA3E505181E<br />
/// </para>
/// </remarks>
public static void ShowTickOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x74513EA3E505181E, blip, toggle);
}

/// <summary>
/// Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF<br />_SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0xCAC2031EBF79B1A8<br />
/// </para>
/// </remarks>
public static void ShowGoldTickOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xCAC2031EBF79B1A8, blip, toggle);
}

/// <summary>
/// Adds the GTA: Online player heading indicator to a blip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FBCA48327B914DF<br />
/// </para>
/// </remarks>
public static void ShowHeadingIndicatorOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x5FBCA48327B914DF, blip, toggle);
}

/// <summary>
/// Highlights a blip by a cyan color circle.<br /><br />Color can be changed with SET_BLIP_SECONDARY_COLOUR
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB81656BC81FE24D1<br />
/// </para>
/// </remarks>
public static void ShowOutlineIndicatorOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xB81656BC81FE24D1, blip, toggle);
}

/// <summary>
/// Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png<br />.Indicating that that player is a friend (in GTA:O). This color can not be changed.<br />To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23C3EB807312F01A<br />
/// </para>
/// </remarks>
public static void ShowFriendIndicatorOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x23C3EB807312F01A, blip, toggle);
}

/// <summary>
/// Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCFB5D4DB8BF367E<br />
/// </para>
/// </remarks>
public static void ShowCrewIndicatorOnBlip(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xDCFB5D4DB8BF367E, blip, toggle);
}

/// <summary>
/// Must be toggled before being queued for animation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4278F70131BAA6D<br />
/// </para>
/// </remarks>
public static void SetBlipExtendedHeightThreshold(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xC4278F70131BAA6D, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x4B5B620C9B59ED34<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetBlipShortHeightThreshold(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x4B5B620C9B59ED34, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x2C9F302398E13141<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetBlipUseHeightIndicatorOnEdge(int /* Blip */ blip, int /* bug: Any */ p1)
{
Function.Call((Hash)0x2C9F302398E13141, blip, p1);
}

/// <summary>
/// Makes a blip go small when off the minimap.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B6D467DAB714E8D<br />
/// </para>
/// </remarks>
public static void SetBlipAsMinimalOnEdge(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x2B6D467DAB714E8D, blip, toggle);
}

/// <summary>
/// Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25615540D894B814<br />
/// </para>
/// </remarks>
public static void SetRadiusBlipEdge(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0x25615540D894B814, blip, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6DB27D19ECBB7DA<br />
/// </para>
/// </remarks>
public static bool DoesBlipExist(int /* Blip */ blip)
{
return Function.Call<bool>((Hash)0xA6DB27D19ECBB7DA, blip);
}

/// <summary>
/// This native removes the current waypoint from the map.<br /><br />Example:<br />C#:<br />Function.Call(Hash.SET_WAYPOINT_OFF);<br /><br />C++:<br />HUD::SET_WAYPOINT_OFF();
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7E4E2D361C2627F<br />
/// </para>
/// </remarks>
public static void SetWaypointOff()
{
Function.Call((Hash)0xA7E4E2D361C2627F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8E694757BCEA8E9<br />
/// </para>
/// </remarks>
public static void DeleteWaypointsFromThisPlayer()
{
Function.Call((Hash)0xD8E694757BCEA8E9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81FA173F170560D1<br />
/// </para>
/// </remarks>
public static void RefreshWaypoint()
{
Function.Call((Hash)0x81FA173F170560D1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DD1F58F493F1DA5<br />
/// </para>
/// </remarks>
public static bool IsWaypointActive()
{
return Function.Call<bool>((Hash)0x1DD1F58F493F1DA5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE43368D2AA4F2FC<br />
/// </para>
/// </remarks>
public static void SetNewWaypoint(float x, float y)
{
Function.Call((Hash)0xFE43368D2AA4F2FC, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB203913733F27884<br />
/// </para>
/// </remarks>
public static void SetBlipBright(int /* Blip */ blip, bool toggle)
{
Function.Call((Hash)0xB203913733F27884, blip, toggle);
}

/// <summary>
/// As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13127EC3665E8EE1<br />
/// </para>
/// </remarks>
public static void SetBlipShowCone(int /* Blip */ blip, bool toggle, int hudColorIndex)
{
Function.Call((Hash)0x13127EC3665E8EE1, blip, toggle, hudColorIndex);
}

/// <summary>
/// Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC594B315EDF2D4AF<br />
/// </para>
/// </remarks>
public static void RemoveCopBlipFromPed(int /* Ped */ ped)
{
Function.Call((Hash)0xC594B315EDF2D4AF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xF83D0FEBE75E62C9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetupFakeConeData(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
Function.Call((Hash)0xF83D0FEBE75E62C9, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x35A3CD97B2C0A6D2<br />
/// </para>
/// </remarks>
public static void RemoveFakeConeData(int /* Blip */ blip)
{
Function.Call((Hash)0x35A3CD97B2C0A6D2, blip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x8410C5E0CD847B9D<br />
/// </para>
/// </remarks>
public static void ClearFakeConeArray()
{
Function.Call((Hash)0x8410C5E0CD847B9D);
}

/// <summary>
/// This native is used to colorize certain map components like the army base at the top of the map.<br />p2 appears to be always -1. If p2 is -1 then native wouldn&apos;t change the color. See https://gfycat.com/SkinnyPinkChupacabra
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75A9A10948D1DEA6<br />
/// </para>
/// </remarks>
public static bool SetMinimapComponent(int componentId, bool toggle, int overrideColor)
{
return Function.Call<bool>((Hash)0x75A9A10948D1DEA6, componentId, toggle, overrideColor);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x6B50FC8749632EC1<br />
/// </para>
/// </remarks>
public static void SetMinimapSonarSweep(bool toggle)
{
Function.Call((Hash)0x6B50FC8749632EC1, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60E892BA4F5BDCA4<br />
/// </para>
/// </remarks>
public static void ShowAccountPicker()
{
Function.Call((Hash)0x60E892BA4F5BDCA4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCD4EC3F419D02FA<br />
/// </para>
/// </remarks>
public static int GetMainPlayerBlipId()
{
return Function.Call<int>((Hash)0xDCD4EC3F419D02FA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41350B4FC28E3941<br />
/// </para>
/// </remarks>
public static void SetPmWarningscreenActive(bool p0)
{
Function.Call((Hash)0x41350B4FC28E3941, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B0311D3CDC4648F<br />
/// </para>
/// </remarks>
public static void HideLoadingOnFadeThisFrame()
{
Function.Call((Hash)0x4B0311D3CDC4648F);
}

/// <summary>
/// List of interior hashes: https://pastebin.com/1FUyXNqY<br />Not for every interior zoom &gt; 0 available.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59E727A1C9D3E31A<br />
/// </para>
/// </remarks>
public static void SetRadarAsInteriorThisFrame(uint interior, float x, float y, int z, int zoom)
{
Function.Call((Hash)0x59E727A1C9D3E31A, interior, x, y, z, zoom);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x504DFE62A1692296<br />
/// </para>
/// </remarks>
public static void SetInsideVerySmallInterior(bool toggle)
{
Function.Call((Hash)0x504DFE62A1692296, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x7EC8ABA5E74B3D7A<br />
/// </para>
/// </remarks>
public static void SetInsideVeryLargeInterior(bool toggle)
{
Function.Call((Hash)0x7EC8ABA5E74B3D7A, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE81B7D2A3DAB2D81<br />
/// </para>
/// </remarks>
public static void SetRadarAsExteriorThisFrame()
{
Function.Call((Hash)0xE81B7D2A3DAB2D81);
}

/// <summary>
/// Sets the position of the arrow icon representing the player on both the minimap and world map.<br /><br />Too bad this wouldn&apos;t work over the network (obviously not). Could spoof where we would be.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77E2DD177910E1CF<br />
/// </para>
/// </remarks>
public static void SetFakePausemapPlayerPositionThisFrame(float x, float y)
{
Function.Call((Hash)0x77E2DD177910E1CF, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xA17784FCA9548D15<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetFakeGpsPlayerPositionThisFrame(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xA17784FCA9548D15, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9049FE339D5F6F6F<br />
/// </para>
/// </remarks>
public static bool IsPausemapInInteriorMode()
{
return Function.Call<bool>((Hash)0x9049FE339D5F6F6F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FBAE526203990C9<br />
/// </para>
/// </remarks>
public static void HideMinimapExteriorMapThisFrame()
{
Function.Call((Hash)0x5FBAE526203990C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20FE7FDFEEAD38C0<br />
/// </para>
/// </remarks>
public static void HideMinimapInteriorMapThisFrame()
{
Function.Call((Hash)0x20FE7FDFEEAD38C0);
}

/// <summary>
/// Toggles the Cayo Perico map.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x5E1460624D194A38<br />
/// </para>
/// </remarks>
public static void SetUseIslandMap(bool toggle)
{
Function.Call((Hash)0x5E1460624D194A38, toggle);
}

/// <summary>
/// When calling this, the current frame will have the players &quot;arrow icon&quot; be focused on the dead center of the radar.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D14BFDC33B34F55<br />
/// </para>
/// </remarks>
public static void DontTiltMinimapThisFrame()
{
Function.Call((Hash)0x6D14BFDC33B34F55);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x55F5A5F07134DE60<br />
/// </para>
/// </remarks>
public static void DontZoomMinimapWhenSnipingThisFrame()
{
Function.Call((Hash)0x55F5A5F07134DE60);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3B07BA00A83B0F1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetWidescreenFormat(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC3B07BA00A83B0F1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x276B6CE369C33678<br />
/// </para>
/// </remarks>
public static void DisplayAreaName(bool toggle)
{
Function.Call((Hash)0x276B6CE369C33678, toggle);
}

/// <summary>
/// &quot;DISPLAY_CASH(false);&quot; makes the cash amount render on the screen when appropriate<br />&quot;DISPLAY_CASH(true);&quot; disables cash amount rendering
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x96DEC8D5430208B7<br />
/// </para>
/// </remarks>
public static void DisplayCash(bool toggle)
{
Function.Call((Hash)0x96DEC8D5430208B7, toggle);
}

/// <summary>
/// Related to displaying cash on the HUD<br />Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x170F541E1CADD1DE<br />
/// </para>
/// </remarks>
public static void UseFakeMpCash(bool toggle)
{
Function.Call((Hash)0x170F541E1CADD1DE, toggle);
}

/// <summary>
/// Displays cash change notifications on HUD.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0772DF77852C2E30<br />
/// </para>
/// </remarks>
public static void ChangeFakeMpCash(int cash, int bank)
{
Function.Call((Hash)0x0772DF77852C2E30, cash, bank);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5E78BA2B1331C55<br />
/// </para>
/// </remarks>
public static void DisplayAmmoThisFrame(bool display)
{
Function.Call((Hash)0xA5E78BA2B1331C55, display);
}

/// <summary>
/// Displays the crosshair for this frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73115226F4814E62<br />
/// </para>
/// </remarks>
public static void DisplaySniperScopeThisFrame()
{
Function.Call((Hash)0x73115226F4814E62);
}

/// <summary>
/// Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x719FF505F097FD20<br />
/// </para>
/// </remarks>
public static void HideHudAndRadarThisFrame()
{
Function.Call((Hash)0x719FF505F097FD20);
}

/// <summary>
/// Controls whether to display &apos;Cash&apos;/&apos;Bank&apos; next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE67C6DFD386EA5E7<br />
/// </para>
/// </remarks>
public static void AllowDisplayOfMultiplayerCashText(bool allow)
{
Function.Call((Hash)0xE67C6DFD386EA5E7, allow);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2D15BEF167E27BC<br />
/// </para>
/// </remarks>
public static void SetMultiplayerWalletCash()
{
Function.Call((Hash)0xC2D15BEF167E27BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95CF81BD06EE1887<br />
/// </para>
/// </remarks>
public static void RemoveMultiplayerWalletCash()
{
Function.Call((Hash)0x95CF81BD06EE1887);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD21B55DF695CD0A<br />
/// </para>
/// </remarks>
public static void SetMultiplayerBankCash()
{
Function.Call((Hash)0xDD21B55DF695CD0A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7C6789AA1CFEDD0<br />
/// </para>
/// </remarks>
public static void RemoveMultiplayerBankCash()
{
Function.Call((Hash)0xC7C6789AA1CFEDD0);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD1D220394BCB824<br />
/// </para>
/// </remarks>
public static void SetMultiplayerHudCash(int p0, int p1)
{
Function.Call((Hash)0xFD1D220394BCB824, p0, p1);
}

/// <summary>
/// Removes multiplayer cash hud each frame
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x968F270E39141ECA<br />
/// </para>
/// </remarks>
public static void RemoveMultiplayerHudCash()
{
Function.Call((Hash)0x968F270E39141ECA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD46923FC481CA285<br />
/// </para>
/// </remarks>
public static void HideHelpTextThisFrame()
{
Function.Call((Hash)0xD46923FC481CA285);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x801879A9B4F4B2FB<br />
/// </para>
/// </remarks>
public static bool IsImeInProgress()
{
return Function.Call<bool>((Hash)0x801879A9B4F4B2FB);
}

/// <summary>
/// The messages are localized strings.<br />Examples:<br />&quot;No_bus_money&quot;<br />&quot;Enter_bus&quot;<br />&quot;Tour_help&quot;<br />&quot;LETTERS_HELP2&quot;<br />&quot;Dummy&quot;<br /><br />**The bool appears to always be false (if it even is a bool, as it&apos;s represented by a zero)**<br />--------<br />p1 doesn&apos;t seem to make a difference, regardless of the state it&apos;s in. <br /><br /><br />picture of where on the screen this is displayed? 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x960C9FF8F616E41C<br />
/// </para>
/// </remarks>
public static void DisplayHelpTextThisFrame(string message, bool p1)
{
Function.Call((Hash)0x960C9FF8F616E41C, message, p1);
}

/// <summary>
/// Forces the weapon wheel to show/hide.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB354E5376BC81A7<br />
/// </para>
/// </remarks>
public static void HudForceWeaponWheel(bool show)
{
Function.Call((Hash)0xEB354E5376BC81A7, show);
}

/// <summary>
/// Displays &quot;blazer_wheels_up&quot; and &quot;blazer_wheels_down&quot; &quot;weapon&quot; icons when switching between jetski and quadbike modes. Works only on vehicles using &quot;VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE&quot; vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x488043841BBE156F<br />
/// </para>
/// </remarks>
public static void HudForceSpecialVehicleWeaponWheel()
{
Function.Call((Hash)0x488043841BBE156F);
}

/// <summary>
/// Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AFC4AF510774B47<br />
/// </para>
/// </remarks>
public static void HudSuppressWeaponWheelResultsThisFrame()
{
Function.Call((Hash)0x0AFC4AF510774B47);
}

/// <summary>
/// Returns the weapon hash to the selected/highlighted weapon in the wheel
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA48931185F0536FE<br />
/// </para>
/// </remarks>
public static uint HudGetWeaponWheelCurrentlyHighlighted()
{
return Function.Call<uint>((Hash)0xA48931185F0536FE);
}

/// <summary>
/// Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72C1056D678BB7D8<br />
/// </para>
/// </remarks>
public static void HudSetWeaponWheelTopSlot(uint weaponHash)
{
Function.Call((Hash)0x72C1056D678BB7D8, weaponHash);
}

/// <summary>
/// Returns the weapon hash active in a specific weapon wheel slotList
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA13E93403F26C812<br />
/// </para>
/// </remarks>
public static uint HudGetWeaponWheelTopSlot(int weaponTypeIndex)
{
return Function.Call<uint>((Hash)0xA13E93403F26C812, weaponTypeIndex);
}

/// <summary>
/// Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14C9FDCC41F81F63<br />
/// </para>
/// </remarks>
public static void HudShowingCharacterSwitchSelection(bool toggle)
{
Function.Call((Hash)0x14C9FDCC41F81F63, toggle);
}

/// <summary>
/// Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.<br /><br />Doesn&apos;t seem like the flags are actually read by the game at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B440763A4C8D15B<br />
/// </para>
/// </remarks>
public static void SetGpsFlags(int p0, float p1)
{
Function.Call((Hash)0x5B440763A4C8D15B, p0, p1);
}

/// <summary>
/// Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.<br /><br />Doesn&apos;t seem like the flags are actually read by the game at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21986729D6A3A830<br />
/// </para>
/// </remarks>
public static void ClearGpsFlags()
{
Function.Call((Hash)0x21986729D6A3A830);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EAC5F91BCBC5073<br />
/// </para>
/// </remarks>
public static void SetRaceTrackRender(bool toggle)
{
Function.Call((Hash)0x1EAC5F91BCBC5073, toggle);
}

/// <summary>
/// Does the same as SET_RACE_TRACK_RENDER(false);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AA5B4CE533C858B<br />
/// </para>
/// </remarks>
public static void ClearGpsRaceTrack()
{
Function.Call((Hash)0x7AA5B4CE533C858B);
}

/// <summary>
/// Starts a new GPS custom-route, allowing you to plot lines on the map.<br />Lines are drawn directly between points.<br />The GPS custom route works like the GPS multi route, except it does not follow roads.<br />Example result: https://i.imgur.com/BDm5pzt.png<br />hudColor: The HUD color of the GPS path.<br />displayOnFoot: Draws the path regardless if the player is in a vehicle or not.<br />followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB34E8D56FC13B08<br />
/// </para>
/// </remarks>
public static void StartGpsCustomRoute(int hudColor, bool displayOnFoot, bool followPlayer)
{
Function.Call((Hash)0xDB34E8D56FC13B08, hudColor, displayOnFoot, followPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x311438A071DD9B1A<br />
/// </para>
/// </remarks>
public static void AddPointToGpsCustomRoute(float x, float y, float z)
{
Function.Call((Hash)0x311438A071DD9B1A, x, y, z);
}

/// <summary>
/// radarThickness: The width of the GPS route on the radar<br />mapThickness: The width of the GPS route on the map
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x900086F371220B6F<br />
/// </para>
/// </remarks>
public static void SetGpsCustomRouteRender(bool toggle, int radarThickness, int mapThickness)
{
Function.Call((Hash)0x900086F371220B6F, toggle, radarThickness, mapThickness);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6DE0561D9232A64<br />
/// </para>
/// </remarks>
public static void ClearGpsCustomRoute()
{
Function.Call((Hash)0xE6DE0561D9232A64);
}

/// <summary>
/// Starts a new GPS multi-route, allowing you to create custom GPS paths.<br />GPS functions like the waypoint, except it can contain multiple points it&apos;s forced to go through.<br />Once the player has passed a point, the GPS will no longer force its path through it.<br /><br />Works independently from the player-placed waypoint and blip routes.<br />Example result: https://i.imgur.com/ZZHQatX.png<br />hudColor: The HUD color of the GPS path.<br />routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.<br />displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D3D15AF7BCAAF83<br />
/// </para>
/// </remarks>
public static void StartGpsMultiRoute(int hudColor, bool routeFromPlayer, bool displayOnFoot)
{
Function.Call((Hash)0x3D3D15AF7BCAAF83, hudColor, routeFromPlayer, displayOnFoot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA905192A6781C41B<br />
/// </para>
/// </remarks>
public static void AddPointToGpsMultiRoute(float x, float y, float z)
{
Function.Call((Hash)0xA905192A6781C41B, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DDA37128DD1ACA8<br />
/// </para>
/// </remarks>
public static void SetGpsMultiRouteRender(bool toggle)
{
Function.Call((Hash)0x3DDA37128DD1ACA8, toggle);
}

/// <summary>
/// Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67EEDEA1B9BAFD94<br />
/// </para>
/// </remarks>
public static void ClearGpsMultiRoute()
{
Function.Call((Hash)0x67EEDEA1B9BAFD94);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF4FB7C8CDFA3DA7<br />
/// </para>
/// </remarks>
public static void ClearGpsPlayerWaypoint()
{
Function.Call((Hash)0xFF4FB7C8CDFA3DA7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x320D0E0D936A0E9B<br />
/// </para>
/// </remarks>
public static void SetGpsFlashes(bool toggle)
{
Function.Call((Hash)0x320D0E0D936A0E9B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B21E0BB01E8224A<br />
/// </para>
/// </remarks>
public static void SetPlayerIconColour(int color)
{
Function.Call((Hash)0x7B21E0BB01E8224A, color);
}

/// <summary>
/// adds a short flash to the Radar/Minimap<br />Usage: UI.FLASH_MINIMAP_DISPLAY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2DD778C22B15BDA<br />
/// </para>
/// </remarks>
public static void FlashMinimapDisplay()
{
Function.Call((Hash)0xF2DD778C22B15BDA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B1DE27EE78E6A19<br />
/// </para>
/// </remarks>
public static void FlashMinimapDisplayWithColor(int hudColorIndex)
{
Function.Call((Hash)0x6B1DE27EE78E6A19, hudColorIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6AFDFB93754950C7<br />
/// </para>
/// </remarks>
public static void ToggleStealthRadar(bool toggle)
{
Function.Call((Hash)0x6AFDFB93754950C7, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A5CD7752DD28CD3<br />
/// </para>
/// </remarks>
public static void SetMinimapInSpectatorMode(bool toggle, int /* Ped */ ped)
{
Function.Call((Hash)0x1A5CD7752DD28CD3, toggle, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F28ECF5FC84772F<br />
/// </para>
/// </remarks>
public static void SetMissionName(bool p0, string name)
{
Function.Call((Hash)0x5F28ECF5FC84772F, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE45087D85F468BC2<br />
/// </para>
/// </remarks>
public static void SetMissionNameForUgcMission(bool p0, string name)
{
Function.Call((Hash)0xE45087D85F468BC2, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x817B86108EB94E51<br />
/// </para>
/// </remarks>
public static void SetDescriptionForUgcMissionEightStrings(bool p0, string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8)
{
Function.Call((Hash)0x817B86108EB94E51, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58FADDED207897DC<br />
/// </para>
/// </remarks>
public static void SetMinimapBlockWaypoint(bool toggle)
{
Function.Call((Hash)0x58FADDED207897DC, toggle);
}

/// <summary>
/// Toggles the North Yankton map
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9133955F1A2DA957<br />
/// </para>
/// </remarks>
public static void SetMinimapInPrologue(bool toggle)
{
Function.Call((Hash)0x9133955F1A2DA957, toggle);
}

/// <summary>
/// If true, the entire map will be revealed.<br /><br />FOW = Fog of War
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8DEE0A5600CBB93<br />
/// </para>
/// </remarks>
public static void SetMinimapHideFow(bool toggle)
{
Function.Call((Hash)0xF8DEE0A5600CBB93, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0130B41D3CF4574<br />
/// </para>
/// </remarks>
public static float GetMinimapFowDiscoveryRatio()
{
return Function.Call<float>((Hash)0xE0130B41D3CF4574);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E31B91145873922<br />
/// </para>
/// </remarks>
public static bool GetMinimapFowCoordinateIsRevealed(float x, float y, float z)
{
return Function.Call<bool>((Hash)0x6E31B91145873922, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62E849B7EB28E770<br />
/// </para>
/// </remarks>
public static void SetMinimapFowDoNotUpdate(bool p0)
{
Function.Call((Hash)0x62E849B7EB28E770, p0);
}

/// <summary>
/// Up to eight coordinates may be revealed per frame
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0923DBF87DFF735E<br />
/// </para>
/// </remarks>
public static void SetMinimapFowRevealCoordinate(float x, float y, float z)
{
Function.Call((Hash)0x0923DBF87DFF735E, x, y, z);
}

/// <summary>
/// Not much is known so far on what it does _exactly_.<br />All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map&apos;s behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a &apos;zoomed in&apos; state. This native does not need to be executed every tick.<br />You need to center the minimap manually as well as change/lock it&apos;s zoom and angle in order for it to appear correctly on the minimap.<br />You&apos;ll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.<br />Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71BDB63DBAF8DA59<br />
/// </para>
/// </remarks>
public static void SetMinimapGolfCourse(int hole)
{
Function.Call((Hash)0x71BDB63DBAF8DA59, hole);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35EDD5B2E3FF01C0<br />
/// </para>
/// </remarks>
public static void SetMinimapGolfCourseOff()
{
Function.Call((Hash)0x35EDD5B2E3FF01C0);
}

/// <summary>
/// Locks the minimap to the specified angle in integer degrees.<br /><br />angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x299FAEBB108AE05B<br />
/// </para>
/// </remarks>
public static void LockMinimapAngle(int angle)
{
Function.Call((Hash)0x299FAEBB108AE05B, angle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8183455E16C42E3A<br />
/// </para>
/// </remarks>
public static void UnlockMinimapAngle()
{
Function.Call((Hash)0x8183455E16C42E3A);
}

/// <summary>
/// Locks the minimap to the specified world position.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1279E861A329E73F<br />
/// </para>
/// </remarks>
public static void LockMinimapPosition(float x, float y)
{
Function.Call((Hash)0x1279E861A329E73F, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E93E06DB8EF1F30<br />
/// </para>
/// </remarks>
public static void UnlockMinimapPosition()
{
Function.Call((Hash)0x3E93E06DB8EF1F30);
}

/// <summary>
/// Argument must be 0.0f or above 38.0f, or it will be ignored.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD201F3FF917A506D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetFakeMinimapMaxAltimeterHeight(float altitude, bool p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xD201F3FF917A506D, altitude, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F5CC444DCAAA8F2<br />
/// </para>
/// </remarks>
public static void SetHealthHudDisplayValues(int health, int capacity, bool wasAdded)
{
Function.Call((Hash)0x3F5CC444DCAAA8F2, health, capacity, wasAdded);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x975D66A0BC17064C<br />
/// </para>
/// </remarks>
public static void SetMaxHealthHudDisplay(int maximumValue)
{
Function.Call((Hash)0x975D66A0BC17064C, maximumValue);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06A320535F5F0248<br />
/// </para>
/// </remarks>
public static void SetMaxArmourHudDisplay(int maximumValue)
{
Function.Call((Hash)0x06A320535F5F0248, maximumValue);
}

/// <summary>
/// Toggles the big minimap state like in GTA:Online.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x231C8F89D0539D8F<br />
/// </para>
/// </remarks>
public static void SetBigmapActive(bool toggleBigMap, bool showFullMap)
{
Function.Call((Hash)0x231C8F89D0539D8F, toggleBigMap, showFullMap);
}

/// <summary>
/// Full list of components below<br /><br />HUD = 0;<br />HUD_WANTED_STARS = 1;<br />HUD_WEAPON_ICON = 2;<br />HUD_CASH = 3;<br />HUD_MP_CASH = 4;<br />HUD_MP_MESSAGE = 5;<br />HUD_VEHICLE_NAME = 6;<br />HUD_AREA_NAME = 7;<br />HUD_VEHICLE_CLASS = 8;<br />HUD_STREET_NAME = 9;<br />HUD_HELP_TEXT = 10;<br />HUD_FLOATING_HELP_TEXT_1 = 11;<br />HUD_FLOATING_HELP_TEXT_2 = 12;<br />HUD_CASH_CHANGE = 13;<br />HUD_RETICLE = 14;<br />HUD_SUBTITLE_TEXT = 15;<br />HUD_RADIO_STATIONS = 16;<br />HUD_SAVING_GAME = 17;<br />HUD_GAME_STREAM = 18;<br />HUD_WEAPON_WHEEL = 19;<br />HUD_WEAPON_WHEEL_STATS = 20;<br />MAX_HUD_COMPONENTS = 21;<br />MAX_HUD_WEAPONS = 22;<br />MAX_SCRIPTED_HUD_COMPONENTS = 141;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC4C9EA5391ECC0D<br />
/// </para>
/// </remarks>
public static bool IsHudComponentActive(int id)
{
return Function.Call<bool>((Hash)0xBC4C9EA5391ECC0D, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD100EB17A94FF65<br />
/// </para>
/// </remarks>
public static bool IsScriptedHudComponentActive(int id)
{
return Function.Call<bool>((Hash)0xDD100EB17A94FF65, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE374C498D8BADC14<br />
/// </para>
/// </remarks>
public static void HideScriptedHudComponentThisFrame(int id)
{
Function.Call((Hash)0xE374C498D8BADC14, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x4F38DCA127DAAEA2<br />
/// </para>
/// </remarks>
public static void ShowScriptedHudComponentThisFrame(int id)
{
Function.Call((Hash)0x4F38DCA127DAAEA2, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x09C0403ED9A751C2<br />
/// </para>
/// </remarks>
public static bool IsScriptedHudComponentHiddenThisFrame(int id)
{
return Function.Call<bool>((Hash)0x09C0403ED9A751C2, id);
}

/// <summary>
/// This function hides various HUD (Heads-up Display) components.<br />Listed below are the integers and the corresponding HUD component.<br />- 1 : WANTED_STARS<br />- 2 : WEAPON_ICON<br />- 3 : CASH<br />- 4 : MP_CASH<br />- 5 : MP_MESSAGE<br />- 6 : VEHICLE_NAME<br />- 7 : AREA_NAME<br />- 8 : VEHICLE_CLASS<br />- 9 : STREET_NAME<br />- 10 : HELP_TEXT<br />- 11 : FLOATING_HELP_TEXT_1<br />- 12 : FLOATING_HELP_TEXT_2<br />- 13 : CASH_CHANGE<br />- 14 : RETICLE<br />- 15 : SUBTITLE_TEXT<br />- 16 : RADIO_STATIONS<br />- 17 : SAVING_GAME<br />- 18 : GAME_STREAM<br />- 19 : WEAPON_WHEEL<br />- 20 : WEAPON_WHEEL_STATS<br />- 21 : HUD_COMPONENTS<br />- 22 : HUD_WEAPONS<br /><br />These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6806C51AD12B83B8<br />
/// </para>
/// </remarks>
public static void HideHudComponentThisFrame(int id)
{
Function.Call((Hash)0x6806C51AD12B83B8, id);
}

/// <summary>
/// This function hides various HUD (Heads-up Display) components.<br />Listed below are the integers and the corresponding HUD component.<br />- 1 : WANTED_STARS<br />- 2 : WEAPON_ICON<br />- 3 : CASH<br />- 4 : MP_CASH<br />- 5 : MP_MESSAGE<br />- 6 : VEHICLE_NAME<br />- 7 : AREA_NAME<br />- 8 : VEHICLE_CLASS<br />- 9 : STREET_NAME<br />- 10 : HELP_TEXT<br />- 11 : FLOATING_HELP_TEXT_1<br />- 12 : FLOATING_HELP_TEXT_2<br />- 13 : CASH_CHANGE<br />- 14 : RETICLE<br />- 15 : SUBTITLE_TEXT<br />- 16 : RADIO_STATIONS<br />- 17 : SAVING_GAME<br />- 18 : GAME_STREAM<br />- 19 : WEAPON_WHEEL<br />- 20 : WEAPON_WHEEL_STATS<br />- 21 : HUD_COMPONENTS<br />- 22 : HUD_WEAPONS<br /><br />These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B4DF1FA60C0E664<br />
/// </para>
/// </remarks>
public static void ShowHudComponentThisFrame(int id)
{
Function.Call((Hash)0x0B4DF1FA60C0E664, id);
}

/// <summary>
/// Hides area and vehicle name HUD components for one frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4DEDE28B1814289<br />
/// </para>
/// </remarks>
public static void HideStreetAndCarNamesThisFrame()
{
Function.Call((Hash)0xA4DEDE28B1814289);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12782CE0A636E9F0<br />
/// </para>
/// </remarks>
public static void ResetReticuleValues()
{
Function.Call((Hash)0x12782CE0A636E9F0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x450930E616475D0D<br />
/// </para>
/// </remarks>
public static void ResetHudComponentValues(int id)
{
Function.Call((Hash)0x450930E616475D0D, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAABB1F56E2A17CED<br />
/// </para>
/// </remarks>
public static void SetHudComponentPosition(int id, float x, float y)
{
Function.Call((Hash)0xAABB1F56E2A17CED, id, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x223CA69A8C4417FD<br />
/// </para>
/// </remarks>
public static Vector3 GetHudComponentPosition(int id)
{
return Function.Call<Vector3>((Hash)0x223CA69A8C4417FD, id);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB57D8DD645CFA2CF<br />
/// </para>
/// </remarks>
public static void ClearReminderMessage()
{
Function.Call((Hash)0xB57D8DD645CFA2CF);
}

/// <summary>
/// World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9904D11F1ACBEC3<br />
/// </para>
/// </remarks>
public static int GetHudScreenPositionFromWorldPosition(float worldX, float worldY, float worldZ, ref float screenX, ref float screenY)
{
var nativeAssistPointerVar0 = screenX;
var nativeAssistPointerVar1 = screenY;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xF9904D11F1ACBEC3, worldX, worldY, worldZ, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
screenX = nativeAssistPointerVar0;
screenY = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Shows a menu for reporting UGC content.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x523A590C1A3CC0D3<br />
/// </para>
/// </remarks>
public static void OpenReportugcMenu()
{
Function.Call((Hash)0x523A590C1A3CC0D3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE4C0E6DBC6F2C6F<br />
/// </para>
/// </remarks>
public static void ForceCloseReportugcMenu()
{
Function.Call((Hash)0xEE4C0E6DBC6F2C6F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9135584D09A3437E<br />
/// </para>
/// </remarks>
public static bool IsReportugcMenuOpen()
{
return Function.Call<bool>((Hash)0x9135584D09A3437E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2432784ACA090DA4<br />
/// </para>
/// </remarks>
public static bool IsFloatingHelpTextOnScreen(int hudIndex)
{
return Function.Call<bool>((Hash)0x2432784ACA090DA4, hudIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7679CC1BCEBE3D4C<br />
/// </para>
/// </remarks>
public static void SetFloatingHelpTextScreenPosition(int hudIndex, float x, float y)
{
Function.Call((Hash)0x7679CC1BCEBE3D4C, hudIndex, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x784BA7E0ECEB4178<br />
/// </para>
/// </remarks>
public static void SetFloatingHelpTextWorldPosition(int hudIndex, float x, float y, float z)
{
Function.Call((Hash)0x784BA7E0ECEB4178, hudIndex, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB094BC1DB4018240<br />
/// </para>
/// </remarks>
public static void SetFloatingHelpTextToEntity(int hudIndex, int /* Entity */ entity, float offsetX, float offsetY)
{
Function.Call((Hash)0xB094BC1DB4018240, hudIndex, entity, offsetX, offsetY);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x788E7FD431BD67F1<br />
/// </para>
/// </remarks>
public static void SetFloatingHelpTextStyle(int hudIndex, int p1, int p2, int p3, int p4, int p5)
{
Function.Call((Hash)0x788E7FD431BD67F1, hudIndex, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50085246ABD3FEFA<br />
/// </para>
/// </remarks>
public static void ClearFloatingHelp(int hudIndex, bool p1)
{
Function.Call((Hash)0x50085246ABD3FEFA, hudIndex, p1);
}

/// <summary>
/// clanFlag: takes a number 0-5
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DD05E9D83EFA4C9<br />
/// </para>
/// </remarks>
public static void CreateMpGamerTagWithCrewColor(int /* Player */ player, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag, int r, int g, int b)
{
Function.Call((Hash)0x6DD05E9D83EFA4C9, player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E0EB3EB47C8D7AA<br />
/// </para>
/// </remarks>
public static bool IsMpGamerTagMovieActive()
{
return Function.Call<bool>((Hash)0x6E0EB3EB47C8D7AA);
}

/// <summary>
/// clanFlag: takes a number 0-5
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFEFE3321A3F5015<br />
/// </para>
/// </remarks>
public static int CreateFakeMpGamerTag(int /* Ped */ ped, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag)
{
return Function.Call<int>((Hash)0xBFEFE3321A3F5015, ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31698AA80E0223F8<br />
/// </para>
/// </remarks>
public static void RemoveMpGamerTag(int gamerTagId)
{
Function.Call((Hash)0x31698AA80E0223F8, gamerTagId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E929E7A5796FD26<br />
/// </para>
/// </remarks>
public static bool IsMpGamerTagActive(int gamerTagId)
{
return Function.Call<bool>((Hash)0x4E929E7A5796FD26, gamerTagId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x595B5178E412E199<br />
/// </para>
/// </remarks>
public static bool IsMpGamerTagFree(int gamerTagId)
{
return Function.Call<bool>((Hash)0x595B5178E412E199, gamerTagId);
}

/// <summary>
/// enum eMpGamerTagComponent<br />{<br />	MP_TAG_GAMER_NAME,<br />	MP_TAG_CREW_TAG,<br />	MP_TAG_HEALTH_ARMOUR,<br />	MP_TAG_BIG_TEXT,<br />	MP_TAG_AUDIO_ICON,<br />	MP_TAG_USING_MENU,<br />	MP_TAG_PASSIVE_MODE,<br />	MP_TAG_WANTED_STARS,<br />	MP_TAG_DRIVER,<br />	MP_TAG_CO_DRIVER,<br />	MP_TAG_TAGGED,<br />	MP_TAG_GAMER_NAME_NEARBY,<br />	MP_TAG_ARROW,<br />	MP_TAG_PACKAGES,<br />	MP_TAG_INV_IF_PED_FOLLOWING,<br />	MP_TAG_RANK_TEXT,<br />	MP_TAG_TYPING,<br />	MP_TAG_BAG_LARGE,<br />	MP_TAG_ARROW,<br />	MP_TAG_GANG_CEO,<br />	MP_TAG_GANG_BIKER,<br />	MP_TAG_BIKER_ARROW,<br />	MP_TAG_MC_ROLE_PRESIDENT,<br />	MP_TAG_MC_ROLE_VICE_PRESIDENT,<br />	MP_TAG_MC_ROLE_ROAD_CAPTAIN,<br />	MP_TAG_MC_ROLE_SARGEANT,<br />	MP_TAG_MC_ROLE_ENFORCER,<br />	MP_TAG_MC_ROLE_PROSPECT,<br />	MP_TAG_TRANSMITTER,<br />	MP_TAG_BOMB<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63BB75ABEDC1F6A0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetMpGamerTagVisibility(int gamerTagId, int component, bool toggle, int /* bug: Any */ p3)
{
Function.Call((Hash)0x63BB75ABEDC1F6A0, gamerTagId, component, toggle, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE76FF7E6A0166B0<br />
/// </para>
/// </remarks>
public static void SetAllMpGamerTagsVisibility(int gamerTagId, bool toggle)
{
Function.Call((Hash)0xEE76FF7E6A0166B0, gamerTagId, toggle);
}

/// <summary>
/// Displays a bunch of icons above the players name, and level, and their name twice
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA67F9C46D612B6F1<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagsShouldUseVehicleHealth(int gamerTagId, bool toggle)
{
Function.Call((Hash)0xA67F9C46D612B6F1, gamerTagId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xD29EC58C2F6B5014<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagsShouldUsePointsHealth(int gamerTagId, bool toggle)
{
Function.Call((Hash)0xD29EC58C2F6B5014, gamerTagId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x1563FE35E9928E67<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagsPointHealth(int gamerTagId, int value, int maximumValue)
{
Function.Call((Hash)0x1563FE35E9928E67, gamerTagId, value, maximumValue);
}

/// <summary>
/// Sets a gamer tag&apos;s component colour<br /><br />gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG<br />Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x613ED644950626AE<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagColour(int gamerTagId, int component, int hudColorIndex)
{
Function.Call((Hash)0x613ED644950626AE, gamerTagId, component, hudColorIndex);
}

/// <summary>
/// Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.<br />Should be enabled as flag (2). Has 0 opacity by default.<br /><br />- This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,<br />-&gt; Rockstar use the EU spelling of &apos;color&apos; so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3158C77A7E888AB4<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagHealthBarColour(int gamerTagId, int hudColorIndex)
{
Function.Call((Hash)0x3158C77A7E888AB4, gamerTagId, hudColorIndex);
}

/// <summary>
/// Sets flag&apos;s sprite transparency. 0-255.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD48FE545CD46F857<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagAlpha(int gamerTagId, int component, int alpha)
{
Function.Call((Hash)0xD48FE545CD46F857, gamerTagId, component, alpha);
}

/// <summary>
/// displays wanted star above head
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF228E2AA03099C3<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagWantedLevel(int gamerTagId, int wantedlvl)
{
Function.Call((Hash)0xCF228E2AA03099C3, gamerTagId, wantedlvl);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x9C16459B2324B2CF<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagNumPackages(int gamerTagId, int p1)
{
Function.Call((Hash)0x9C16459B2324B2CF, gamerTagId, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEA2B8283BAA3944<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagName(int gamerTagId, string @string)
{
Function.Call((Hash)0xDEA2B8283BAA3944, gamerTagId, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB709A36958ABE0D<br />
/// </para>
/// </remarks>
public static bool IsUpdatingMpGamerTagNameAndCrewDetails(int gamerTagId)
{
return Function.Call<bool>((Hash)0xEB709A36958ABE0D, gamerTagId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B7723747CCB55B6<br />
/// </para>
/// </remarks>
public static void SetMpGamerTagBigText(int gamerTagId, string @string)
{
Function.Call((Hash)0x7B7723747CCB55B6, gamerTagId, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01A358D9128B7A86<br />
/// </para>
/// </remarks>
public static int GetCurrentWebpageId()
{
return Function.Call<int>((Hash)0x01A358D9128B7A86);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97D47996FC48CBAD<br />
/// </para>
/// </remarks>
public static int GetCurrentWebsiteId()
{
return Function.Call<int>((Hash)0x97D47996FC48CBAD);
}

/// <summary>
/// Returns the ActionScript flagValue.<br />ActionScript flags are global flags that scaleforms use<br />Flags found during testing<br />0: Returns 1 if the web_browser keyboard is open, otherwise 0<br />1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)<br />2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed<br />9: Returns the current selection on the mobile phone scaleform<br /><br />There are 20 flags in total.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3B05614DCE1D014<br />
/// </para>
/// </remarks>
public static int GetGlobalActionscriptFlag(int flagIndex)
{
return Function.Call<int>((Hash)0xE3B05614DCE1D014, flagIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB99C4E4D9499DF29<br />
/// </para>
/// </remarks>
public static void ResetGlobalActionscriptFlag(int flagIndex)
{
Function.Call((Hash)0xB99C4E4D9499DF29, flagIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF42195A42C63BBA<br />
/// </para>
/// </remarks>
public static bool IsWarningMessageReadyForControl()
{
return Function.Call<bool>((Hash)0xAF42195A42C63BBA);
}

/// <summary>
/// You can only use text entries. No custom text.<br /><br />Example: SET_WARNING_MESSAGE(&quot;t20&quot;, 3, &quot;adder&quot;, false, -1, 0, 0, true);<br />errorCode: shows an error code at the bottom left if nonzero
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B1776B3B53F8D74<br />
/// </para>
/// </remarks>
public static void SetWarningMessage(string titleMsg, int flags, string promptMsg, bool p3, int p4, string p5, string p6, bool showBackground, int errorCode)
{
Function.Call((Hash)0x7B1776B3B53F8D74, titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode);
}

/// <summary>
/// Shows a warning message on screen with a header.<br />Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.<br />Example: https://i.imgur.com/ITJt8bJ.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC38CC1E35B6A5D7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetWarningMessageWithHeader(string entryHeader, string entryLine1, int instructionalKey, string entryLine2, bool p4, int /* bug: Any */ p5, int /* bug: structure */ showBackground, int /* bug: structure */ p7, bool p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0xDC38CC1E35B6A5D7, entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, showBackground, p7, p8, p9);
}

/// <summary>
/// You can use this native for custom input, without having to use any scaleform-related natives.<br />The native must be called on tick.<br />The entryHeader must be a valid label.<br />For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.<br />Notes:<br />- additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer<br />- additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text<br />- additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text<br />- showBackground: shows black background of the warning screen<br />- errorCode: shows an error code at the bottom left if nonzero<br />Example of usage:<br />SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(&quot;ALERT&quot;, &quot;JL_INVITE_ND&quot;, 66, &quot;&quot;, true, -1, -1, &quot;Testing line 1&quot;, &quot;Testing line 2&quot;, true, 0);<br />Screenshot:<br />https://imgur.com/a/IYA7vJ8
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x701919482C74B5AB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetWarningMessageWithHeaderAndSubstringFlags(string entryHeader, string entryLine1, int instructionalKey, string entryLine2, bool p4, int /* bug: Any */ p5, int /* bug: Any */ additionalIntInfo, string additionalTextInfoLine1, string additionalTextInfoLine2, bool showBackground, int errorCode)
{
Function.Call((Hash)0x701919482C74B5AB, entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x38B55259C2E078ED<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetWarningMessageWithHeaderExtended(string entryHeader, string entryLine1, int flags, string entryLine2, bool p4, int /* bug: Any */ p5, int /* bug: structure */ p6, int /* bug: structure */ p7, bool showBg, int /* bug: Any */ p9, int /* bug: Any */ p10)
{
Function.Call((Hash)0x38B55259C2E078ED, entryHeader, entryLine1, flags, entryLine2, p4, p5, p6, p7, showBg, p9, p10);
}

/// <summary>
/// labelTitle: Label of the alert&apos;s title.<br />labelMsg: Label of the alert&apos;s message.<br />p2: This is an enum, check the description for a list.<br />p3: This is an enum, check the description for a list.<br />labelMsg2: Label of another message line<br />p5: usually 0<br />p6: usually -1<br />p7: usually 0<br />p8: unknown label<br />p9: unknown label<br />background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.<br />errorCode: Error code, shown at the bottom left if set to value other than 0.<br /><br />instructionalKey enum list:<br />Buttons = {<br />      Empty = 0,<br />      Select = 1, -- (RETURN)<br />      Ok = 2, -- (RETURN)<br />      Yes = 4, -- (RETURN)<br />      Back = 8, -- (ESC)<br />      Cancel = 16, -- (ESC)<br />      No = 32, -- (ESC)<br />      RetrySpace = 64, -- (SPACE)<br />      Restart = 128, -- (SPACE)<br />      Skip = 256, -- (SPACE)<br />      Quit = 512, -- (ESC)<br />      Adjust = 1024, -- (ARROWS)<br />      SpaceKey = 2048, -- (SPACE)<br />      Share = 4096, -- (SPACE)<br />      SignIn = 8192, -- (SPACE)<br />      Continue = 16384, -- (RETURN)<br />      AdjustLeftRight = 32768, -- (SCROLL L/R)<br />      AdjustUpDown = 65536, -- (SCROLL U/D)<br />      Overwrite = 131072, -- (SPACE)<br />      SocialClubSignup = 262144, -- (RETURN)<br />      Confirm = 524288, -- (RETURN)<br />      Queue = 1048576, -- (RETURN)<br />      RetryReturn = 2097152, -- (RETURN)<br />      BackEsc = 4194304, -- (ESC)<br />      SocialClub = 8388608, -- (RETURN)<br />      Spectate = 16777216, -- (SPACE)<br />      OkEsc = 33554432, -- (ESC)<br />      CancelTransfer = 67108864, -- (ESC)<br />      LoadingSpinner = 134217728,<br />      NoReturnToGTA = 268435456, -- (ESC)<br />      CancelEsc = 536870912, -- (ESC)<br />}<br /><br />Alt = {<br />      Empty = 0,<br />      No = 1, -- (SPACE)<br />      Host = 2, -- (ESC)<br />      SearchForJob = 4, -- (RETURN)<br />      ReturnKey = 8, -- (TURN)<br />      Freemode = 16, -- (ESC)<br />}<br /><br />Example: https://i.imgur.com/TvmNF4k.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x15803FEC3B9A872B<br />
/// </para>
/// </remarks>
public static void SetWarningMessageWithHeaderAndSubstringFlagsExtended(string labelTitle, string labelMessage, int p2, int p3, string labelMessage2, bool p5, int p6, int p7, string p8, string p9, bool background, int errorCode)
{
Function.Call((Hash)0x15803FEC3B9A872B, labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode);
}

/// <summary>
/// Has to do with the confirmation overlay (E.g. confirm exit)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x81DF9ABA6C83DFF9<br />
/// </para>
/// </remarks>
public static uint GetWarningScreenMessageHash()
{
return Function.Call<uint>((Hash)0x81DF9ABA6C83DFF9);
}

/// <summary>
/// Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.<br />Param names copied from the corresponding scaleform function &quot;SET_LIST_ROW&quot;.<br />Example: https://i.imgur.com/arKvOYx.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C5A80A9E096D529<br />
/// </para>
/// </remarks>
public static bool SetWarningMessageOptionItems(int index, string name, int cash, int rp, int lvl, int colour)
{
return Function.Call<bool>((Hash)0x0C5A80A9E096D529, index, name, cash, rp, lvl, colour);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDAF87174BE7454FF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetWarningMessageOptionHighlight(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xDAF87174BE7454FF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EF54AB721DC6242<br />
/// </para>
/// </remarks>
public static void RemoveWarningMessageOptionItems()
{
Function.Call((Hash)0x6EF54AB721DC6242);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE18B138FABC53103<br />
/// </para>
/// </remarks>
public static bool IsWarningMessageActive()
{
return Function.Call<bool>((Hash)0xE18B138FABC53103);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7792424AA0EAC32E<br />
/// </para>
/// </remarks>
public static void ClearDynamicPauseMenuErrorMessage()
{
Function.Call((Hash)0x7792424AA0EAC32E);
}

/// <summary>
/// If toggle is true, the map is shown in full screen<br />If toggle is false, the map is shown in normal mode
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5354C5BA2EA868A4<br />
/// </para>
/// </remarks>
public static void CustomMinimapSetActive(bool toggle)
{
Function.Call((Hash)0x5354C5BA2EA868A4, toggle);
}

/// <summary>
/// Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EAE6DD17B7A5EFA<br />
/// </para>
/// </remarks>
public static void CustomMinimapSetBlipObject(int spriteId)
{
Function.Call((Hash)0x1EAE6DD17B7A5EFA, spriteId);
}

/// <summary>
/// Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x551DF99658DB6EE8<br />
/// </para>
/// </remarks>
public static int CustomMinimapCreateBlip(float x, float y, float z)
{
return Function.Call<int>((Hash)0x551DF99658DB6EE8, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2708FC083123F9FF<br />
/// </para>
/// </remarks>
public static void CustomMinimapClearBlips()
{
Function.Call((Hash)0x2708FC083123F9FF);
}

/// <summary>
/// Doesn&apos;t actually return anything.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1121BFA1A1A522A8<br />
/// </para>
/// </remarks>
public static bool ForceSonarBlipsThisFrame()
{
return Function.Call<bool>((Hash)0x1121BFA1A1A522A8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x3F0CF9CB7E589B88<br />
/// </para>
/// </remarks>
public static int GetNorthBlidIndex()
{
return Function.Call<int>((Hash)0x3F0CF9CB7E589B88);
}

/// <summary>
/// Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.<br />Doesn&apos;t need to be called every frame.<br />Preview: https://i.imgur.com/DfqKWfJ.png<br /><br />Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82CEDC33687E1F50<br />
/// </para>
/// </remarks>
public static void DisplayPlayerNameTagsOnBlips(bool toggle)
{
Function.Call((Hash)0x82CEDC33687E1F50, toggle);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x211C4EF450086857<br />
/// </para>
/// </remarks>
public static void DrawFrontendBackgroundThisFrame()
{
Function.Call((Hash)0x211C4EF450086857);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF4F34A85CA2970C<br />
/// </para>
/// </remarks>
public static void DrawHudOverFadeThisFrame()
{
Function.Call((Hash)0xBF4F34A85CA2970C);
}

/// <summary>
/// Does stuff like this:<br />gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617<br /><br />Example:<br />int GetHash = GET_HASH_KEY(&quot;fe_menu_version_corona_lobby&quot;);<br />ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);<br /><br />BOOL p1 is a toggle to define the game in pause.<br />int p2 is unknown but -1 always works, not sure why though.<br /><br />[30/03/2017] ins1de :<br /><br />the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.<br /><br />Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);<br />Result : Opens the &quot;Online&quot; tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.<br />- FE_MENU_VERSION_SP_PAUSE<br />- FE_MENU_VERSION_MP_PAUSE<br />- FE_MENU_VERSION_CREATOR_PAUSE<br />- FE_MENU_VERSION_CUTSCENE_PAUSE<br />- FE_MENU_VERSION_SAVEGAME<br />- FE_MENU_VERSION_PRE_LOBBY<br />- FE_MENU_VERSION_LOBBY<br />- FE_MENU_VERSION_MP_CHARACTER_SELECT<br />- FE_MENU_VERSION_MP_CHARACTER_CREATION<br />- FE_MENU_VERSION_EMPTY<br />- FE_MENU_VERSION_EMPTY_NO_BACKGROUND<br />- FE_MENU_VERSION_TEXT_SELECTION<br />- FE_MENU_VERSION_CORONA<br />- FE_MENU_VERSION_CORONA_LOBBY<br />- FE_MENU_VERSION_CORONA_JOINED_PLAYERS<br />- FE_MENU_VERSION_CORONA_INVITE_PLAYERS<br />- FE_MENU_VERSION_CORONA_INVITE_FRIENDS<br />- FE_MENU_VERSION_CORONA_INVITE_CREWS<br />- FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS<br />- FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS<br />- FE_MENU_VERSION_CORONA_RACE<br />- FE_MENU_VERSION_CORONA_BETTING<br />- FE_MENU_VERSION_JOINING_SCREEN<br />- FE_MENU_VERSION_LANDING_MENU<br />- FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF01D36B9C9D0C7B<br />
/// </para>
/// </remarks>
public static void ActivateFrontendMenu(uint menuhash, bool togglePause, int component)
{
Function.Call((Hash)0xEF01D36B9C9D0C7B, menuhash, togglePause, component);
}

/// <summary>
/// Before using this native click the native above and look at the decription.<br /><br />Example:<br />int GetHash = Function.Call&lt;int&gt;(Hash.GET_HASH_KEY, &quot;fe_menu_version_corona_lobby&quot;);<br />Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);<br />Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);<br /><br />This native refreshes the frontend menu.<br /><br />p1 = Hash of Menu<br />p2 = Unknown but always works with -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10706DC6AD2D49C0<br />
/// </para>
/// </remarks>
public static void RestartFrontendMenu(uint menuHash, int p1)
{
Function.Call((Hash)0x10706DC6AD2D49C0, menuHash, p1);
}

/// <summary>
/// if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat(&quot;fe_menu_version_empty_no_background&quot;))
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2309595AD6145265<br />
/// </para>
/// </remarks>
public static uint GetCurrentFrontendMenuVersion()
{
return Function.Call<uint>((Hash)0x2309595AD6145265);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF47FC56C71569CF<br />
/// </para>
/// </remarks>
public static void SetPauseMenuActive(bool toggle)
{
Function.Call((Hash)0xDF47FC56C71569CF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D3465A73092F0E6<br />
/// </para>
/// </remarks>
public static void DisableFrontendThisFrame()
{
Function.Call((Hash)0x6D3465A73092F0E6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA751764F0821256<br />
/// </para>
/// </remarks>
public static void SuppressFrontendRenderingThisFrame()
{
Function.Call((Hash)0xBA751764F0821256);
}

/// <summary>
/// Allows opening the pause menu this frame, when the player is dead.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC3FDDED67BCFC63<br />
/// </para>
/// </remarks>
public static void AllowPauseWhenNotInStateOfPlayThisFrame()
{
Function.Call((Hash)0xCC3FDDED67BCFC63);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x745711A75AB09277<br />
/// </para>
/// </remarks>
public static void SetFrontendActive(bool active)
{
Function.Call((Hash)0x745711A75AB09277, active);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB0034A223497FFCB<br />
/// </para>
/// </remarks>
public static bool IsPauseMenuActive()
{
return Function.Call<bool>((Hash)0xB0034A223497FFCB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F057596F2BD0061<br />
/// </para>
/// </remarks>
public static bool IsStorePendingNetworkShutdownToOpen()
{
return Function.Call<bool>((Hash)0x2F057596F2BD0061);
}

/// <summary>
/// Returns:<br /><br />0<br />5<br />10<br />15<br />20<br />25<br />30<br />35<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x272ACD84970869C5<br />
/// </para>
/// </remarks>
public static int GetPauseMenuState()
{
return Function.Call<int>((Hash)0x272ACD84970869C5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BFF36D6ED83E0AE<br />
/// </para>
/// </remarks>
public static Vector3 GetPauseMenuPosition()
{
return Function.Call<Vector3>((Hash)0x5BFF36D6ED83E0AE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C491717107431C7<br />
/// </para>
/// </remarks>
public static bool IsPauseMenuRestarting()
{
return Function.Call<bool>((Hash)0x1C491717107431C7);
}

/// <summary>
/// Not present in retail version of the game, actual definiton seems to be<br />_LOG_DEBUG_INFO(const char* category, const char* debugText);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2162C446DFDF38FD<br />
/// </para>
/// </remarks>
public static void ForceScriptedGfxWhenFrontendActive(string p0)
{
Function.Call((Hash)0x2162C446DFDF38FD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77F16B447824DA6C<br />
/// </para>
/// </remarks>
public static void PauseMenuceptionGoDeeper(int page)
{
Function.Call((Hash)0x77F16B447824DA6C, page);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCDCA26E80FAECB8F<br />
/// </para>
/// </remarks>
public static void PauseMenuceptionTheKick()
{
Function.Call((Hash)0xCDCA26E80FAECB8F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x2DE6C5E2E996F178<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PauseToggleFullscreenMap(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2DE6C5E2E996F178, p0);
}

/// <summary>
/// Activates the specified frontend menu context.<br />pausemenu.xml defines some specific menu options using &apos;context&apos;. Context is basically a &apos;condition&apos;. <br />The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.<br />The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.<br />This basically allows you to hide certain menu sections, or things like instructional buttons.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD564BDD0472C936<br />
/// </para>
/// </remarks>
public static void PauseMenuActivateContext(uint contextHash)
{
Function.Call((Hash)0xDD564BDD0472C936, contextHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x444D8CF241EC25C5<br />
/// </para>
/// </remarks>
public static void PauseMenuDeactivateContext(uint contextHash)
{
Function.Call((Hash)0x444D8CF241EC25C5, contextHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84698AB38D0C6636<br />
/// </para>
/// </remarks>
public static bool PauseMenuIsContextActive(uint contextHash)
{
return Function.Call<bool>((Hash)0x84698AB38D0C6636, contextHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A25ADC48F87841F<br />
/// </para>
/// </remarks>
public static bool PauseMenuIsContextMenuActive()
{
return Function.Call<bool>((Hash)0x2A25ADC48F87841F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE03620F8703A9DF<br />
/// </para>
/// </remarks>
public static int PauseMenuGetHairColourIndex()
{
return Function.Call<int>((Hash)0xDE03620F8703A9DF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x359AF31A4B52F5ED<br />
/// </para>
/// </remarks>
public static int PauseMenuGetMouseHoverIndex()
{
return Function.Call<int>((Hash)0x359AF31A4B52F5ED);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13C4B962653A5280<br />
/// </para>
/// </remarks>
public static int PauseMenuGetMouseHoverUniqueId()
{
return Function.Call<int>((Hash)0x13C4B962653A5280);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8E1071177A23BE5<br />
/// </para>
/// </remarks>
public static bool PauseMenuGetMouseClickEvent(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2)
{
return Function.Call<bool>((Hash)0xC8E1071177A23BE5, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4895BDEA16E7C080<br />
/// </para>
/// </remarks>
public static void PauseMenuRedrawInstructionalButtons(int p0)
{
Function.Call((Hash)0x4895BDEA16E7C080, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC78E239AC5B2DDB9<br />
/// </para>
/// </remarks>
public static void PauseMenuSetBusySpinner(bool p0, int position, int spinnerIndex)
{
Function.Call((Hash)0xC78E239AC5B2DDB9, p0, position, spinnerIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF06EBB91A81E09E3<br />
/// </para>
/// </remarks>
public static void PauseMenuSetWarnOnTabChange(bool p0)
{
Function.Call((Hash)0xF06EBB91A81E09E3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BAB9A4E4F2FF5C7<br />
/// </para>
/// </remarks>
public static bool IsFrontendReadyForControl()
{
return Function.Call<bool>((Hash)0x3BAB9A4E4F2FF5C7);
}

/// <summary>
/// Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.<br /><br />To enable the keys again, use `0x14621BB1DF14E2B2`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC9264727EEC0F28<br />
/// </para>
/// </remarks>
public static void TakeControlOfFrontend()
{
Function.Call((Hash)0xEC9264727EEC0F28);
}

/// <summary>
/// Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.<br />To disable the keys, use `0xEC9264727EEC0F28`
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14621BB1DF14E2B2<br />
/// </para>
/// </remarks>
public static void ReleaseControlOfFrontend()
{
Function.Call((Hash)0x14621BB1DF14E2B2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66E7CB63C97B7D20<br />
/// </para>
/// </remarks>
public static bool CodeWantsScriptToTakeControl()
{
return Function.Call<bool>((Hash)0x66E7CB63C97B7D20);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x593FEAE1F73392D4<br />
/// </para>
/// </remarks>
public static int GetScreenCodeWantsScriptToControl()
{
return Function.Call<int>((Hash)0x593FEAE1F73392D4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E3CD0EF8A489541<br />
/// </para>
/// </remarks>
public static bool IsNavigatingMenuContent()
{
return Function.Call<bool>((Hash)0x4E3CD0EF8A489541);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF284AC67940C6812<br />
/// </para>
/// </remarks>
public static bool HasMenuTriggerEventOccurred()
{
return Function.Call<bool>((Hash)0xF284AC67940C6812);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E22FEFA0100275E<br />
/// </para>
/// </remarks>
public static bool HasMenuLayoutChangedEventOccurred()
{
return Function.Call<bool>((Hash)0x2E22FEFA0100275E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0CF54F20DE43879C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSavegameListUniqueId(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0CF54F20DE43879C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36C1451A88A09630<br />
/// </para>
/// </remarks>
public static void GetMenuTriggerEventDetails(ref int lastItemMenuId, ref int selectedItemUniqueId)
{
var nativeAssistPointerVar0 = lastItemMenuId;
var nativeAssistPointerVar1 = selectedItemUniqueId;
unsafe {
Function.Call((Hash)0x36C1451A88A09630, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
lastItemMenuId = nativeAssistPointerVar0;
selectedItemUniqueId = nativeAssistPointerVar1;
}

/// <summary>
/// lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)<br />selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item<br />selectedItemUniqueId: this is uniqueID of the currently selected menu item<br /><br />when the pausemenu is closed:<br />lastItemMenuId = -1<br />selectedItemMenuId = -1<br />selectedItemUniqueId = 0<br /><br />when the header gains focus:<br />lastItemMenuId updates as normal or 0 if the pausemenu was just opened<br />selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened<br />selectedItemUniqueId = -1<br /><br />when focus is moved from the header to a pausemenu page:<br />lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)<br />selectedItemMenuId = -1<br />selectedItemUniqueId updates as normal
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E17BE53E1AAABAF<br />
/// </para>
/// </remarks>
public static void GetMenuLayoutChangedEventDetails(ref int lastItemMenuId, ref int selectedItemMenuId, ref int selectedItemUniqueId)
{
var nativeAssistPointerVar0 = lastItemMenuId;
var nativeAssistPointerVar1 = selectedItemMenuId;
var nativeAssistPointerVar2 = selectedItemUniqueId;
unsafe {
Function.Call((Hash)0x7E17BE53E1AAABAF, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
lastItemMenuId = nativeAssistPointerVar0;
selectedItemMenuId = nativeAssistPointerVar1;
selectedItemUniqueId = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA238192F33110615<br />
/// </para>
/// </remarks>
public static bool GetPmPlayerCrewColor(ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA238192F33110615, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF4CED81CEBEDC6D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetMenuPedIntStat(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xEF4CED81CEBEDC6D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA6B2F7CE32AB653<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetCharacterMenuPedIntStat(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xCA6B2F7CE32AB653, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90A6526CF0381030<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetMenuPedMaskedIntStat(uint p0, int /* bug: structure */ p1, int /* bug: Any */ p2, int p3)
{
return Function.Call<bool>((Hash)0x90A6526CF0381030, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24A49BEAF468DC90<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetCharacterMenuPedMaskedIntStat(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0x24A49BEAF468DC90, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FBD7095FE7AE57F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetMenuPedFloatStat(int /* bug: Any */ p0, ref float p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x5FBD7095FE7AE57F, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F08017F9D7C47BD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetCharacterMenuPedFloatStat(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x8F08017F9D7C47BD, p0, p1, p2);
}

/// <summary>
/// p0 was always 0xAE2602A3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x052991E59076E4E4<br />
/// </para>
/// </remarks>
public static bool GetMenuPedBoolStat(uint p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x052991E59076E4E4, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E62BE5DC58E9E06<br />
/// </para>
/// </remarks>
public static void ClearPedInPauseMenu()
{
Function.Call((Hash)0x5E62BE5DC58E9E06);
}

/// <summary>
/// p1 is either 1 or 2 in the PC scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC0BFBDC3BE00E14<br />
/// </para>
/// </remarks>
public static void GivePedToPauseMenu(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0xAC0BFBDC3BE00E14, ped, p1);
}

/// <summary>
/// Toggles the light state for the pause menu ped in frontend menus.<br /><br />This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the &quot;offline&quot; or &quot;online&quot; state in the &quot;friends&quot; tab of the pause menu in GTA Online.<br /><br /><br />Example:<br />Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png<br />Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3CA6050692BC61B0<br />
/// </para>
/// </remarks>
public static void SetPauseMenuPedLighting(bool state)
{
Function.Call((Hash)0x3CA6050692BC61B0, state);
}

/// <summary>
/// Toggles the pause menu ped sleep state for frontend menus.<br /><br />Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif<br /><br />`state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xECF128344E9FF9F1<br />
/// </para>
/// </remarks>
public static void SetPauseMenuPedSleepState(bool state)
{
Function.Call((Hash)0xECF128344E9FF9F1, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x805D7CBB36FD6C4C<br />
/// </para>
/// </remarks>
public static void OpenOnlinePoliciesMenu()
{
Function.Call((Hash)0x805D7CBB36FD6C4C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF13FE2A80C05C561<br />
/// </para>
/// </remarks>
public static bool AreOnlinePoliciesUpToDate()
{
return Function.Call<bool>((Hash)0xF13FE2A80C05C561);
}

/// <summary>
/// Returns the same as IS_SOCIAL_CLUB_ACTIVE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F72CD94F7B5B68C<br />
/// </para>
/// </remarks>
public static bool IsOnlinePoliciesMenuActive()
{
return Function.Call<bool>((Hash)0x6F72CD94F7B5B68C);
}

/// <summary>
/// Uses the `SOCIAL_CLUB2` scaleform.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75D3691713C3B05A<br />
/// </para>
/// </remarks>
public static void OpenSocialClubMenu()
{
Function.Call((Hash)0x75D3691713C3B05A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2B32BE3FC1626C6<br />
/// </para>
/// </remarks>
public static void CloseSocialClubMenu()
{
Function.Call((Hash)0xD2B32BE3FC1626C6);
}

/// <summary>
/// HUD::SET_SOCIAL_CLUB_TOUR(&quot;Gallery&quot;);<br />HUD::SET_SOCIAL_CLUB_TOUR(&quot;Missions&quot;);<br />HUD::SET_SOCIAL_CLUB_TOUR(&quot;General&quot;);<br />HUD::SET_SOCIAL_CLUB_TOUR(&quot;Playlists&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E778248D6685FE0<br />
/// </para>
/// </remarks>
public static void SetSocialClubTour(string name)
{
Function.Call((Hash)0x9E778248D6685FE0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC406BE343FC4B9AF<br />
/// </para>
/// </remarks>
public static bool IsSocialClubActive()
{
return Function.Call<bool>((Hash)0xC406BE343FC4B9AF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1185A8087587322C<br />
/// </para>
/// </remarks>
public static void SetTextInputBoxEnabled(bool p0)
{
Function.Call((Hash)0x1185A8087587322C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8817605C2BA76200<br />
/// </para>
/// </remarks>
public static void ForceCloseTextInputBox()
{
Function.Call((Hash)0x8817605C2BA76200);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x577599CCED639CA2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAllowCommaOnTextInput(int /* bug: Any */ p0)
{
Function.Call((Hash)0x577599CCED639CA2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x6A1738B4323FE2D9<br />
/// </para>
/// </remarks>
public static void OverrideMpTextChatTeamString(uint gxtEntryHash)
{
Function.Call((Hash)0x6A1738B4323FE2D9, gxtEntryHash);
}

/// <summary>
/// Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB118AF58B5F332A1<br />
/// </para>
/// </remarks>
public static bool IsMpTextChatTyping()
{
return Function.Call<bool>((Hash)0xB118AF58B5F332A1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1AC8F4AD40E22127<br />
/// </para>
/// </remarks>
public static void CloseMpTextChat()
{
Function.Call((Hash)0x1AC8F4AD40E22127);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x7C226D5346D4D10A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void MpTextChatIsTeamJob(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7C226D5346D4D10A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xF47E567B3630DD12<br />
/// </para>
/// </remarks>
public static void OverrideMpTextChatColor(int p0, int hudColor)
{
Function.Call((Hash)0xF47E567B3630DD12, p0, hudColor);
}

/// <summary>
/// Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DB21A44B09E8BA3<br />
/// </para>
/// </remarks>
public static void MpTextChatDisable(bool toggle)
{
Function.Call((Hash)0x1DB21A44B09E8BA3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEF214315D276FD1<br />
/// </para>
/// </remarks>
public static void FlagPlayerContextInTournament(bool toggle)
{
Function.Call((Hash)0xCEF214315D276FD1, toggle);
}

/// <summary>
/// This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don&apos;t need to control it with other natives.<br /><br />See gtaforums.com/topic/884370-native-research-ai-blips for further information.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD30C50DF888D58B5<br />
/// </para>
/// </remarks>
public static void SetPedHasAiBlip(int /* Ped */ ped, bool hasCone)
{
Function.Call((Hash)0xD30C50DF888D58B5, ped, hasCone);
}

/// <summary>
/// color: see SET_BLIP_COLOUR
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xB13DCB4C6FAAD238<br />
/// </para>
/// </remarks>
public static void SetPedHasAiBlipWithColour(int /* Ped */ ped, bool hasCone, int color)
{
Function.Call((Hash)0xB13DCB4C6FAAD238, ped, hasCone, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15B8ECF844EE67ED<br />
/// </para>
/// </remarks>
public static bool DoesPedHaveAiBlip(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x15B8ECF844EE67ED, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE52B8E7F85D39A08<br />
/// </para>
/// </remarks>
public static void SetPedAiBlipGangId(int /* Ped */ ped, int gangId)
{
Function.Call((Hash)0xE52B8E7F85D39A08, ped, gangId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3EED80DFF7325CAA<br />
/// </para>
/// </remarks>
public static void SetPedAiBlipHasCone(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x3EED80DFF7325CAA, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C4BBF625CA98C4E<br />
/// </para>
/// </remarks>
public static void SetPedAiBlipForcedOn(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x0C4BBF625CA98C4E, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97C65887D4B37FA9<br />
/// </para>
/// </remarks>
public static void SetPedAiBlipNoticeRange(int /* Ped */ ped, float range)
{
Function.Call((Hash)0x97C65887D4B37FA9, ped, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xFCFACD0DB9D7A57D<br />
/// </para>
/// </remarks>
public static void SetPedAiBlipSprite(int /* Ped */ ped, int spriteId)
{
Function.Call((Hash)0xFCFACD0DB9D7A57D, ped, spriteId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CD934010E115C2C<br />
/// </para>
/// </remarks>
public static int GetAiPedPedBlipIndex(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x7CD934010E115C2C, ped);
}

/// <summary>
/// Returns the current AI BLIP for the specified ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56176892826A4FE8<br />
/// </para>
/// </remarks>
public static int GetAiPedVehicleBlipIndex(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x56176892826A4FE8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA277800A9EAE340E<br />
/// </para>
/// </remarks>
public static bool HasDirectorModeBeenLaunchedByCode()
{
return Function.Call<bool>((Hash)0xA277800A9EAE340E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2632482FD6B9AB87<br />
/// </para>
/// </remarks>
public static void SetDirectorModeLaunchedByScript()
{
Function.Call((Hash)0x2632482FD6B9AB87);
}

/// <summary>
/// If toggle is true, hides special ability bar / character name in the pause menu<br />If toggle is false, shows special ability bar / character name in the pause menu
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x808519373FD336A3<br />
/// </para>
/// </remarks>
public static void SetPlayerIsInDirectorMode(bool toggle)
{
Function.Call((Hash)0x808519373FD336A3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04655F9D075D0AE5<br />
/// </para>
/// </remarks>
public static void SetDirectorModeAvailable(bool toggle)
{
Function.Call((Hash)0x04655F9D075D0AE5, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x243296A510B562B6<br />
/// </para>
/// </remarks>
public static void HideHudmarkersThisFrame()
{
Function.Call((Hash)0x243296A510B562B6);
}

#endregion
#region INTERIOR
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xF49B58631D9E22D9<br />
/// </para>
/// </remarks>
public static float GetInteriorHeading(int /* Interior */ interior)
{
return Function.Call<float>((Hash)0xF49B58631D9E22D9, interior);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x252BDC06B73FA6EA<br />
/// </para>
/// </remarks>
public static void GetInteriorLocationAndNamehash(int /* Interior */ interior, ref Vector3 position, ref uint nameHash)
{
var nativeAssistPointerVar0 = position;
var nativeAssistPointerVar1 = nameHash;
unsafe {
Function.Call((Hash)0x252BDC06B73FA6EA, interior, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
position = nativeAssistPointerVar0;
nameHash = nativeAssistPointerVar1;
}

/// <summary>
/// Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4A84ABF135EF91A<br />
/// </para>
/// </remarks>
public static int GetInteriorGroupId(int /* Interior */ interior)
{
return Function.Call<int>((Hash)0xE4A84ABF135EF91A, interior);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E3B3E6D66F6E22F<br />
/// </para>
/// </remarks>
public static Vector3 GetOffsetFromInteriorInWorldCoords(int /* Interior */ interior, float x, float y, float z)
{
return Function.Call<Vector3>((Hash)0x9E3B3E6D66F6E22F, interior, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC72B5D7A1CBD54D<br />
/// </para>
/// </remarks>
public static bool IsInteriorScene()
{
return Function.Call<bool>((Hash)0xBC72B5D7A1CBD54D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26B0E73D7EAAF4D3<br />
/// </para>
/// </remarks>
public static bool IsValidInterior(int /* Interior */ interior)
{
return Function.Call<bool>((Hash)0x26B0E73D7EAAF4D3, interior);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB365FC0C4E27FFA7<br />
/// </para>
/// </remarks>
public static void ClearRoomForEntity(int /* Entity */ entity)
{
Function.Call((Hash)0xB365FC0C4E27FFA7, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52923C4710DD9907<br />
/// </para>
/// </remarks>
public static void ForceRoomForEntity(int /* Entity */ entity, int /* Interior */ interior, uint roomHashKey)
{
Function.Call((Hash)0x52923C4710DD9907, entity, interior, roomHashKey);
}

/// <summary>
/// Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47C2A06D4F5F424B<br />
/// </para>
/// </remarks>
public static uint GetRoomKeyFromEntity(int /* Entity */ entity)
{
return Function.Call<uint>((Hash)0x47C2A06D4F5F424B, entity);
}

/// <summary>
/// Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x399685DB942336BC<br />
/// </para>
/// </remarks>
public static uint GetKeyForEntityInRoom(int /* Entity */ entity)
{
return Function.Call<uint>((Hash)0x399685DB942336BC, entity);
}

/// <summary>
/// Returns the handle of the interior that the entity is in. Returns 0 if outside.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2107BA504071A6BB<br />
/// </para>
/// </remarks>
public static int GetInteriorFromEntity(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x2107BA504071A6BB, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82EBB79E258FA2B7<br />
/// </para>
/// </remarks>
public static void RetainEntityInInterior(int /* Entity */ entity, int /* Interior */ interior)
{
Function.Call((Hash)0x82EBB79E258FA2B7, entity, interior);
}

/// <summary>
/// Immediately removes entity from an interior. Like sets entity to `limbo` room.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x85D5422B2039A70D<br />
/// </para>
/// </remarks>
public static void ClearInteriorStateOfEntity(int /* Entity */ entity)
{
Function.Call((Hash)0x85D5422B2039A70D, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x38C1CB1CB119A016<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForceActivatingTrackingOnEntity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x38C1CB1CB119A016, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x920D853F3E17F1DA<br />
/// </para>
/// </remarks>
public static void ForceRoomForGameViewport(int interiorID, uint roomHashKey)
{
Function.Call((Hash)0x920D853F3E17F1DA, interiorID, roomHashKey);
}

/// <summary>
/// Example of use (carmod_shop)<br />INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(&quot;V_CarModRoom&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF348AFCB575A441<br />
/// </para>
/// </remarks>
public static void SetRoomForGameViewportByName(string roomName)
{
Function.Call((Hash)0xAF348AFCB575A441, roomName);
}

/// <summary>
/// Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x405DC2AEF6AF95B9<br />
/// </para>
/// </remarks>
public static void SetRoomForGameViewportByKey(uint roomHashKey)
{
Function.Call((Hash)0x405DC2AEF6AF95B9, roomHashKey);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6575914D2A0B450<br />
/// </para>
/// </remarks>
public static uint GetRoomKeyForGameViewport()
{
return Function.Call<uint>((Hash)0xA6575914D2A0B450);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23B59D8912F94246<br />
/// </para>
/// </remarks>
public static void ClearRoomForGameViewport()
{
Function.Call((Hash)0x23B59D8912F94246);
}

/// <summary>
/// Returns the current interior id from gameplay camera
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xE7D267EC6CA966C3<br />
/// </para>
/// </remarks>
public static int GetInteriorFromPrimaryView()
{
return Function.Call<int>((Hash)0xE7D267EC6CA966C3);
}

/// <summary>
/// Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.<br /><br />Example for VB.NET<br />Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB0F7F8663821D9C3<br />
/// </para>
/// </remarks>
public static int GetInteriorAtCoords(float x, float y, float z)
{
return Function.Call<int>((Hash)0xB0F7F8663821D9C3, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F6167F351168730<br />
/// </para>
/// </remarks>
public static void AddPickupToInteriorRoomByName(Pickup pickup, string roomName)
{
Function.Call((Hash)0x3F6167F351168730, pickup, roomName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CA429C029CCF247<br />
/// </para>
/// </remarks>
public static void PinInteriorInMemory(int /* Interior */ interior)
{
Function.Call((Hash)0x2CA429C029CCF247, interior);
}

/// <summary>
/// Does something similar to INTERIOR::DISABLE_INTERIOR.<br /><br />You don&apos;t fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x261CCE7EED010641<br />
/// </para>
/// </remarks>
public static void UnpinInterior(int /* Interior */ interior)
{
Function.Call((Hash)0x261CCE7EED010641, interior);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6726BDCCC1932F0E<br />
/// </para>
/// </remarks>
public static bool IsInteriorReady(int /* Interior */ interior)
{
return Function.Call<bool>((Hash)0x6726BDCCC1932F0E, interior);
}

/// <summary>
/// Only used once in the entire game scripts.<br />Does not actually return anything.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C2330E61D3DEB56<br />
/// </para>
/// </remarks>
public static bool SetInteriorInUse(int /* Interior */ interior)
{
return Function.Call<bool>((Hash)0x4C2330E61D3DEB56, interior);
}

/// <summary>
/// Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.<br /><br />Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))<br /><br />Interior types include: &quot;V_Michael&quot;, &quot;V_Franklins&quot;, &quot;V_Franklinshouse&quot;, etc.. you can find them in the scripts.<br /><br />Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05B7A89BD78797FC<br />
/// </para>
/// </remarks>
public static int GetInteriorAtCoordsWithType(float x, float y, float z, string interiorType)
{
return Function.Call<int>((Hash)0x05B7A89BD78797FC, x, y, z, interiorType);
}

/// <summary>
/// Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0F77ADB9F67E79D<br />
/// </para>
/// </remarks>
public static int GetInteriorAtCoordsWithTypehash(float x, float y, float z, uint typeHash)
{
return Function.Call<int>((Hash)0xF0F77ADB9F67E79D, x, y, z, typeHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x483ACA1176CA93F1<br />
/// </para>
/// </remarks>
public static void ActivateInteriorGroupsUsingCamera()
{
Function.Call((Hash)0x483ACA1176CA93F1);
}

/// <summary>
/// Returns true if the collision at the specified coords is marked as being outside (false if there&apos;s an interior)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEA5AC2EDA7C33E8<br />
/// </para>
/// </remarks>
public static bool IsCollisionMarkedOutside(float x, float y, float z)
{
return Function.Call<bool>((Hash)0xEEA5AC2EDA7C33E8, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC4CF9FCB29A4424<br />
/// </para>
/// </remarks>
public static int GetInteriorFromCollision(float x, float y, float z)
{
return Function.Call<int>((Hash)0xEC4CF9FCB29A4424, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x7ECDF98587E92DEC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void EnableStadiumProbesThisFrame(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7ECDF98587E92DEC, p0);
}

/// <summary>
/// More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/<br /><br />Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55E86AF2712B36A1<br />
/// </para>
/// </remarks>
public static void ActivateInteriorEntitySet(int /* Interior */ interior, string entitySetName)
{
Function.Call((Hash)0x55E86AF2712B36A1, interior, entitySetName);
}

/// <summary>
/// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x420BD37289EEE162<br />
/// </para>
/// </remarks>
public static void DeactivateInteriorEntitySet(int /* Interior */ interior, string entitySetName)
{
Function.Call((Hash)0x420BD37289EEE162, interior, entitySetName);
}

/// <summary>
/// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35F7DD45E8C0A16D<br />
/// </para>
/// </remarks>
public static bool IsInteriorEntitySetActive(int /* Interior */ interior, string entitySetName)
{
return Function.Call<bool>((Hash)0x35F7DD45E8C0A16D, interior, entitySetName);
}

/// <summary>
/// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xC1F1920BAF281317<br />
/// </para>
/// </remarks>
public static void SetInteriorEntitySetTintIndex(int /* Interior */ interior, string entitySetName, int color)
{
Function.Call((Hash)0xC1F1920BAF281317, interior, entitySetName, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41F37C3427C75AE0<br />
/// </para>
/// </remarks>
public static void RefreshInterior(int /* Interior */ interior)
{
Function.Call((Hash)0x41F37C3427C75AE0, interior);
}

/// <summary>
/// This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.<br /><br />More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA97F257D0151A6AB<br />
/// </para>
/// </remarks>
public static void EnableExteriorCullModelThisFrame(uint mapObjectHash)
{
Function.Call((Hash)0xA97F257D0151A6AB, mapObjectHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x50C375537449F369<br />
/// </para>
/// </remarks>
public static void EnableShadowCullModelThisFrame(uint mapObjectHash)
{
Function.Call((Hash)0x50C375537449F369, mapObjectHash);
}

/// <summary>
/// Example: <br />This removes the interior from the strip club and when trying to walk inside the player just falls:<br /><br />INTERIOR::DISABLE_INTERIOR(118018, true);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6170941419D7D8EC<br />
/// </para>
/// </remarks>
public static void DisableInterior(int /* Interior */ interior, bool toggle)
{
Function.Call((Hash)0x6170941419D7D8EC, interior, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC5115A5A939DD15<br />
/// </para>
/// </remarks>
public static bool IsInteriorDisabled(int /* Interior */ interior)
{
return Function.Call<bool>((Hash)0xBC5115A5A939DD15, interior);
}

/// <summary>
/// Does something similar to INTERIOR::DISABLE_INTERIOR
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9175F941610DB54<br />
/// </para>
/// </remarks>
public static void CapInterior(int /* Interior */ interior, bool toggle)
{
Function.Call((Hash)0xD9175F941610DB54, interior, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92BAC8ACF88CEC26<br />
/// </para>
/// </remarks>
public static bool IsInteriorCapped(int /* Interior */ interior)
{
return Function.Call<bool>((Hash)0x92BAC8ACF88CEC26, interior);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E6542F0CE8E70A3<br />
/// </para>
/// </remarks>
public static void DisableMetroSystem(bool toggle)
{
Function.Call((Hash)0x9E6542F0CE8E70A3, toggle);
}

/// <summary>
/// Jenkins hash _might_ be 0xFC227584.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x7241CCB7D020DB69<br />
/// </para>
/// </remarks>
public static void SetIsExteriorOnly(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x7241CCB7D020DB69, entity, toggle);
}

#endregion
#region ITEMSET
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35AD299F50D91B24<br />
/// </para>
/// </remarks>
public static int CreateItemset(bool p0)
{
return Function.Call<int>((Hash)0x35AD299F50D91B24, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE18220B1C183EDA<br />
/// </para>
/// </remarks>
public static void DestroyItemset(int /* ScrHandle */ itemset)
{
Function.Call((Hash)0xDE18220B1C183EDA, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1B1EA596344DFAB<br />
/// </para>
/// </remarks>
public static bool IsItemsetValid(int /* ScrHandle */ itemset)
{
return Function.Call<bool>((Hash)0xB1B1EA596344DFAB, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3945201F14637DD<br />
/// </para>
/// </remarks>
public static bool AddToItemset(int /* ScrHandle */ item, int /* ScrHandle */ itemset)
{
return Function.Call<bool>((Hash)0xE3945201F14637DD, item, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25E68244B0177686<br />
/// </para>
/// </remarks>
public static void RemoveFromItemset(int /* ScrHandle */ item, int /* ScrHandle */ itemset)
{
Function.Call((Hash)0x25E68244B0177686, item, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9127E83ABF7C631<br />
/// </para>
/// </remarks>
public static int GetItemsetSize(int /* ScrHandle */ itemset)
{
return Function.Call<int>((Hash)0xD9127E83ABF7C631, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A197E2521EE2BAB<br />
/// </para>
/// </remarks>
public static int GetIndexedItemInItemset(int index, int /* ScrHandle */ itemset)
{
return Function.Call<int>((Hash)0x7A197E2521EE2BAB, index, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D0FC594D1E9C107<br />
/// </para>
/// </remarks>
public static bool IsInItemset(int /* ScrHandle */ item, int /* ScrHandle */ itemset)
{
return Function.Call<bool>((Hash)0x2D0FC594D1E9C107, item, itemset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41BC0D722FC04221<br />
/// </para>
/// </remarks>
public static void CleanItemset(int /* ScrHandle */ itemset)
{
Function.Call((Hash)0x41BC0D722FC04221, itemset);
}

#endregion
#region LOADINGSCREEN
/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2CA003F167E21D2<br />
/// </para>
/// </remarks>
public static bool LobbyAutoMultiplayerMenu()
{
return Function.Call<bool>((Hash)0xF2CA003F167E21D2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF7D17BC6C85264C<br />
/// </para>
/// </remarks>
public static bool LobbyAutoMultiplayerFreemode()
{
return Function.Call<bool>((Hash)0xEF7D17BC6C85264C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB0C56BD3D808D863<br />
/// </para>
/// </remarks>
public static void LobbySetAutoMultiplayer(bool toggle)
{
Function.Call((Hash)0xB0C56BD3D808D863, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8AA464D4E0F6ACCD<br />
/// </para>
/// </remarks>
public static bool LobbyAutoMultiplayerEvent()
{
return Function.Call<bool>((Hash)0x8AA464D4E0F6ACCD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC309E94546FCDB5<br />
/// </para>
/// </remarks>
public static void LobbySetAutoMultiplayerEvent(bool toggle)
{
Function.Call((Hash)0xFC309E94546FCDB5, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6DC823253FBB366<br />
/// </para>
/// </remarks>
public static bool LobbyAutoMultiplayerRandomJob()
{
return Function.Call<bool>((Hash)0xC6DC823253FBB366);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7E7181C09F33B69<br />
/// </para>
/// </remarks>
public static void LobbySetAutoMpRandomJob(bool toggle)
{
Function.Call((Hash)0xC7E7181C09F33B69, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA1E0E893D915215<br />
/// </para>
/// </remarks>
public static void ShutdownSessionClearsAutoMultiplayer(bool toggle)
{
Function.Call((Hash)0xFA1E0E893D915215, toggle);
}

#endregion
#region LOCALIZATION
/// <summary>
/// Same return values as GET_CURRENT_LANGUAGE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x497420E022796B3F<br />
/// </para>
/// </remarks>
public static int LocalizationGetSystemLanguage()
{
return Function.Call<int>((Hash)0x497420E022796B3F);
}

/// <summary>
/// 0 = american (en-US)<br />1 = french (fr-FR)<br />2 = german (de-DE)<br />3 = italian (it-IT)<br />4 = spanish (es-ES)<br />5 = brazilian (pt-BR)<br />6 = polish (pl-PL)<br />7 = russian (ru-RU)<br />8 = korean (ko-KR)<br />9 = chinesetrad (zh-TW)<br />10 = japanese (ja-JP)<br />11 = mexican (es-MX)<br />12 = chinesesimp (zh-CN)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BDD44CC428A7EAE<br />
/// </para>
/// </remarks>
public static int GetCurrentLanguage()
{
return Function.Call<int>((Hash)0x2BDD44CC428A7EAE);
}

/// <summary>
/// Possible return values: 0, 1, 2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8AE43AEC1A61314<br />
/// </para>
/// </remarks>
public static int LocalizationGetSystemDateType()
{
return Function.Call<int>((Hash)0xA8AE43AEC1A61314);
}

#endregion
#region MISC
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B3CA62B1EF19B62<br />
/// </para>
/// </remarks>
public static int GetAllocatedStackSize()
{
return Function.Call<int>((Hash)0x8B3CA62B1EF19B62);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEAD16FC8F9DFC0F<br />
/// </para>
/// </remarks>
public static int GetNumberOfFreeStacksOfThisSize(int stackSize)
{
return Function.Call<int>((Hash)0xFEAD16FC8F9DFC0F, stackSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x444D98F98C11F3EC<br />
/// </para>
/// </remarks>
public static void SetRandomSeed(int seed)
{
Function.Call((Hash)0x444D98F98C11F3EC, seed);
}

/// <summary>
/// Maximum value is 1.<br />At a value of 0 the game will still run at a minimum time scale.<br /><br />Slow Motion 1: 0.6<br />Slow Motion 2: 0.4<br />Slow Motion 3: 0.2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D408577D440E81E<br />
/// </para>
/// </remarks>
public static void SetTimeScale(float timeScale)
{
Function.Call((Hash)0x1D408577D440E81E, timeScale);
}

/// <summary>
/// If true, the player can&apos;t save the game. <br /><br /><br />If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.<br /><br />^ also, if the mission flag is already set, the function does nothing at all
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4301E5121A0ED73<br />
/// </para>
/// </remarks>
public static void SetMissionFlag(bool toggle)
{
Function.Call((Hash)0xC4301E5121A0ED73, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA33CDCCDA663159E<br />
/// </para>
/// </remarks>
public static bool GetMissionFlag()
{
return Function.Call<bool>((Hash)0xA33CDCCDA663159E);
}

/// <summary>
/// If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.<br />Does nothing if the mission flag is set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x971927086CFD2158<br />
/// </para>
/// </remarks>
public static void SetRandomEventFlag(bool toggle)
{
Function.Call((Hash)0x971927086CFD2158, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2D57F1D764117B1<br />
/// </para>
/// </remarks>
public static bool GetRandomEventFlag()
{
return Function.Call<bool>((Hash)0xD2D57F1D764117B1);
}

/// <summary>
/// Returns pointer to an empty string.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24DA7D7667FD7B09<br />
/// </para>
/// </remarks>
public static string GetContentToLoad()
{
return Function.Call<string>((Hash)0x24DA7D7667FD7B09);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4DCDF92BF64236CD<br />
/// </para>
/// </remarks>
public static void ActivityFeedCreate(string p0, string p1)
{
Function.Call((Hash)0x4DCDF92BF64236CD, p0, p1);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31125FD509D9043F<br />
/// </para>
/// </remarks>
public static void ActivityFeedAddSubstringToCaption(string p0)
{
Function.Call((Hash)0x31125FD509D9043F, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBD3205A207939ED<br />
/// </para>
/// </remarks>
public static void ActivityFeedAddLiteralSubstringToCaption(string p0)
{
Function.Call((Hash)0xEBD3205A207939ED, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97E7E2C04245115B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ActivityFeedAddIntToCaption(int /* bug: Any */ p0)
{
Function.Call((Hash)0x97E7E2C04245115B, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x916CA67D26FD1E37<br />
/// </para>
/// </remarks>
public static void ActivityFeedLargeImageUrl(string p0)
{
Function.Call((Hash)0x916CA67D26FD1E37, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB078CA2B5E82ADD<br />
/// </para>
/// </remarks>
public static void ActivityFeedActionStartWithCommandLine(string p0, string p1)
{
Function.Call((Hash)0xEB078CA2B5E82ADD, p0, p1);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x703CC7F60CBB2B57<br />
/// </para>
/// </remarks>
public static void ActivityFeedActionStartWithCommandLineAdd(string p0)
{
Function.Call((Hash)0x703CC7F60CBB2B57, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8951EB9C6906D3C8<br />
/// </para>
/// </remarks>
public static void ActivityFeedPost()
{
Function.Call((Hash)0x8951EB9C6906D3C8);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub). Seems to be PS4 specific.<br /><br />Used only once in the scripts (ingamehud) with p0 = &quot;AF_GAMEMODE&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA4B8D83BDC75551<br />
/// </para>
/// </remarks>
public static void ActivityFeedOnlinePlayedWithPost(string p0)
{
Function.Call((Hash)0xBA4B8D83BDC75551, p0);
}

/// <summary>
/// Hardcoded to return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8B9C0EC9E183F35<br />
/// </para>
/// </remarks>
public static bool HasResumedFromSuspend()
{
return Function.Call<bool>((Hash)0xE8B9C0EC9E183F35);
}

/// <summary>
/// Sets GtaThread+0x14A
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65D2EBB47E1CEC21<br />
/// </para>
/// </remarks>
public static void SetScriptHighPrio(bool toggle)
{
Function.Call((Hash)0x65D2EBB47E1CEC21, toggle);
}

/// <summary>
/// Sets bit 3 in GtaThread+0x150
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F2135B6129620C1<br />
/// </para>
/// </remarks>
public static void SetThisIsATriggerScript(bool toggle)
{
Function.Call((Hash)0x6F2135B6129620C1, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D74E26F54B4E5C3<br />
/// </para>
/// </remarks>
public static void InformCodeOfContentIdOfCurrentUgcMission(string p0)
{
Function.Call((Hash)0x8D74E26F54B4E5C3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB335F761606DB47C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetBaseElementLocationFromMetadataBlock(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, bool p3)
{
return Function.Call<bool>((Hash)0xB335F761606DB47C, p0, p1, p2, p3);
}

/// <summary>
/// Returns current weather name hash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x564B884A05EC45A3<br />
/// </para>
/// </remarks>
public static uint GetPrevWeatherTypeHashName()
{
return Function.Call<uint>((Hash)0x564B884A05EC45A3);
}

/// <summary>
/// Returns weather name hash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x711327CD09C8F162<br />
/// </para>
/// </remarks>
public static uint GetNextWeatherTypeHashName()
{
return Function.Call<uint>((Hash)0x711327CD09C8F162);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44F28F86433B10A9<br />
/// </para>
/// </remarks>
public static bool IsPrevWeatherType(string weatherType)
{
return Function.Call<bool>((Hash)0x44F28F86433B10A9, weatherType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FAA3A30BEC0F25D<br />
/// </para>
/// </remarks>
public static bool IsNextWeatherType(string weatherType)
{
return Function.Call<bool>((Hash)0x2FAA3A30BEC0F25D, weatherType);
}

/// <summary>
/// The following weatherTypes are used in the scripts:<br />&quot;CLEAR&quot;<br />&quot;EXTRASUNNY&quot;<br />&quot;CLOUDS&quot;<br />&quot;OVERCAST&quot;<br />&quot;RAIN&quot;<br />&quot;CLEARING&quot;<br />&quot;THUNDER&quot;<br />&quot;SMOG&quot;<br />&quot;FOGGY&quot;<br />&quot;XMAS&quot;<br />&quot;SNOW&quot;<br />&quot;SNOWLIGHT&quot;<br />&quot;BLIZZARD&quot;<br />&quot;HALLOWEEN&quot;<br />&quot;NEUTRAL&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x704983DF373B198F<br />
/// </para>
/// </remarks>
public static void SetWeatherTypePersist(string weatherType)
{
Function.Call((Hash)0x704983DF373B198F, weatherType);
}

/// <summary>
/// The following weatherTypes are used in the scripts:<br />&quot;CLEAR&quot;<br />&quot;EXTRASUNNY&quot;<br />&quot;CLOUDS&quot;<br />&quot;OVERCAST&quot;<br />&quot;RAIN&quot;<br />&quot;CLEARING&quot;<br />&quot;THUNDER&quot;<br />&quot;SMOG&quot;<br />&quot;FOGGY&quot;<br />&quot;XMAS&quot;<br />&quot;SNOW&quot;<br />&quot;SNOWLIGHT&quot;<br />&quot;BLIZZARD&quot;<br />&quot;HALLOWEEN&quot;<br />&quot;NEUTRAL&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED712CA327900C8A<br />
/// </para>
/// </remarks>
public static void SetWeatherTypeNowPersist(string weatherType)
{
Function.Call((Hash)0xED712CA327900C8A, weatherType);
}

/// <summary>
/// The following weatherTypes are used in the scripts:<br />&quot;CLEAR&quot;<br />&quot;EXTRASUNNY&quot;<br />&quot;CLOUDS&quot;<br />&quot;OVERCAST&quot;<br />&quot;RAIN&quot;<br />&quot;CLEARING&quot;<br />&quot;THUNDER&quot;<br />&quot;SMOG&quot;<br />&quot;FOGGY&quot;<br />&quot;XMAS&quot;<br />&quot;SNOW&quot;<br />&quot;SNOWLIGHT&quot;<br />&quot;BLIZZARD&quot;<br />&quot;HALLOWEEN&quot;<br />&quot;NEUTRAL&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29B487C359E19889<br />
/// </para>
/// </remarks>
public static void SetWeatherTypeNow(string weatherType)
{
Function.Call((Hash)0x29B487C359E19889, weatherType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB5045B7C42B75BF<br />
/// </para>
/// </remarks>
public static void SetWeatherTypeOvertimePersist(string weatherType, float time)
{
Function.Call((Hash)0xFB5045B7C42B75BF, weatherType, time);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B05F884CF7E8020<br />
/// </para>
/// </remarks>
public static void SetRandomWeatherType()
{
Function.Call((Hash)0x8B05F884CF7E8020);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCC39339BEF76CF5<br />
/// </para>
/// </remarks>
public static void ClearWeatherTypePersist()
{
Function.Call((Hash)0xCCC39339BEF76CF5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0CF97F497FE7D048<br />
/// </para>
/// </remarks>
public static void ClearWeatherTypeNowPersistNetwork(int milliseconds)
{
Function.Call((Hash)0x0CF97F497FE7D048, milliseconds);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3BBE884A14BB413<br />
/// </para>
/// </remarks>
public static void GetCurrWeatherState(ref uint weatherType1, ref uint weatherType2, ref float percentWeather2)
{
var nativeAssistPointerVar0 = weatherType1;
var nativeAssistPointerVar1 = weatherType2;
var nativeAssistPointerVar2 = percentWeather2;
unsafe {
Function.Call((Hash)0xF3BBE884A14BB413, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
weatherType1 = nativeAssistPointerVar0;
weatherType2 = nativeAssistPointerVar1;
percentWeather2 = nativeAssistPointerVar2;
}

/// <summary>
/// Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it&apos;s set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:<br /><br />execute &quot;NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(&quot;&quot;RAIN&quot;&quot;), Game.GetHashKey(&quot;&quot;SMOG&quot;&quot;), 0.50f);<br /><br />Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:<br /><br />CLEAR  0x36A83D84<br />EXTRASUNNY  0x97AA0A79<br />CLOUDS  0x30FDAF5C<br />OVERCAST    0xBB898D2D<br />RAIN    0x54A69840<br />CLEARING    0x6DB1A50D<br />THUNDER 0xB677829F<br />SMOG    0x10DCF4B5<br />FOGGY   0xAE737644<br />XMAS    0xAAC9C895<br />SNOWLIGHT   0x23FB812B<br />BLIZZARD    0x27EA2814<br /><br /><br /><br /><br /><br />/* OLD INVALID INFO BELOW */<br />Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.<br /><br />If an invalid hash is specified for sourceWeather, the current weather type will be used.<br />If an invalid hash is specified for targetWeather, the next weather type will be used.<br />If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x578C752848ECFA0C<br />
/// </para>
/// </remarks>
public static void SetCurrWeatherState(uint weatherType1, uint weatherType2, float percentWeather2)
{
Function.Call((Hash)0x578C752848ECFA0C, weatherType1, weatherType2, percentWeather2);
}

/// <summary>
/// Appears to have an optional bool parameter that is unused in the scripts.<br /><br />If you pass true, something will be set to zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA43D5C6FE51ADBEF<br />
/// </para>
/// </remarks>
public static void SetOverrideWeather(string weatherType)
{
Function.Call((Hash)0xA43D5C6FE51ADBEF, weatherType);
}

/// <summary>
/// Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x1178E104409FE58C<br />
/// </para>
/// </remarks>
public static void SetOverrideWeatherex(string weatherType, bool p1)
{
Function.Call((Hash)0x1178E104409FE58C, weatherType, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x338D2E3477711050<br />
/// </para>
/// </remarks>
public static void ClearOverrideWeather()
{
Function.Call((Hash)0x338D2E3477711050);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8F87EAD7533B176<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetShorewaveamplitude(float amplitude)
{
Function.Call((Hash)0xB8F87EAD7533B176, amplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3EAD29AB273ECE8<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetShorewaveminamplitude(float minAmplitude)
{
Function.Call((Hash)0xC3EAD29AB273ECE8, minAmplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7A1127490312C36<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetShorewavemaxamplitude(float maxAmplitude)
{
Function.Call((Hash)0xA7A1127490312C36, maxAmplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31727907B2C43C55<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetOceannoiseminamplitude(float minAmplitude)
{
Function.Call((Hash)0x31727907B2C43C55, minAmplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x405591EC8FD9096D<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetOceanwaveamplitude(float amplitude)
{
Function.Call((Hash)0x405591EC8FD9096D, amplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF751B16FB32ABC1D<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetOceanwaveminamplitude(float minAmplitude)
{
Function.Call((Hash)0xF751B16FB32ABC1D, minAmplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3E6360DDE733E82<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetOceanwavemaxamplitude(float maxAmplitude)
{
Function.Call((Hash)0xB3E6360DDE733E82, maxAmplitude);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C9C0B1EEB1F9072<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetRipplebumpiness(float bumpiness)
{
Function.Call((Hash)0x7C9C0B1EEB1F9072, bumpiness);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6216B116083A7CB4<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetRippleminbumpiness(float minBumpiness)
{
Function.Call((Hash)0x6216B116083A7CB4, minBumpiness);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F5E6BB6B34540DA<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetRipplemaxbumpiness(float maxBumpiness)
{
Function.Call((Hash)0x9F5E6BB6B34540DA, maxBumpiness);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9854DFDE0D833D6<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetRippledisturb(float disturb)
{
Function.Call((Hash)0xB9854DFDE0D833D6, disturb);
}

/// <summary>
/// This seems to edit the water wave, intensity around your current location.<br /><br />0.0f = Normal<br />1.0f = So Calm and Smooth, a boat will stay still.<br />3.0f = Really Intense.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC54A08C85AE4D410<br />
/// </para>
/// </remarks>
public static void WaterOverrideSetStrength(float strength)
{
Function.Call((Hash)0xC54A08C85AE4D410, strength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8434F1DFF41D6E7<br />
/// </para>
/// </remarks>
public static void WaterOverrideFadeIn(float p0)
{
Function.Call((Hash)0xA8434F1DFF41D6E7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3C221ADDDE31A11<br />
/// </para>
/// </remarks>
public static void WaterOverrideFadeOut(float p0)
{
Function.Call((Hash)0xC3C221ADDDE31A11, p0);
}

/// <summary>
/// Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC3A74E8384A9919<br />
/// </para>
/// </remarks>
public static void SetWind(float speed)
{
Function.Call((Hash)0xAC3A74E8384A9919, speed);
}

/// <summary>
/// Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE09ECEDBABE47FC<br />
/// </para>
/// </remarks>
public static void SetWindSpeed(float speed)
{
Function.Call((Hash)0xEE09ECEDBABE47FC, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8CF1CC0AFCD3F12<br />
/// </para>
/// </remarks>
public static float GetWindSpeed()
{
return Function.Call<float>((Hash)0xA8CF1CC0AFCD3F12);
}

/// <summary>
/// The wind direction in radians<br />180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB0F4468467B4528<br />
/// </para>
/// </remarks>
public static void SetWindDirection(float direction)
{
Function.Call((Hash)0xEB0F4468467B4528, direction);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F400FEF721170DA<br />
/// </para>
/// </remarks>
public static Vector3 GetWindDirection()
{
return Function.Call<Vector3>((Hash)0x1F400FEF721170DA);
}

/// <summary>
/// With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won&apos;t increase after that.<br />With an `intensity` of `0.0f` rain and rain sounds are disabled and there won&apos;t be any new puddles.<br />To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x643E26EA6E024D92<br />
/// </para>
/// </remarks>
public static void SetRain(float intensity)
{
Function.Call((Hash)0x643E26EA6E024D92, intensity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x96695E368AD855F3<br />
/// </para>
/// </remarks>
public static float GetRainLevel()
{
return Function.Call<float>((Hash)0x96695E368AD855F3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x7F06937B0CDCBC1A<br />
/// </para>
/// </remarks>
public static void SetSnow(float level)
{
Function.Call((Hash)0x7F06937B0CDCBC1A, level);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5868A966E5BE3AE<br />
/// </para>
/// </remarks>
public static float GetSnowLevel()
{
return Function.Call<float>((Hash)0xC5868A966E5BE3AE);
}

/// <summary>
/// creates single lightning+thunder at random position
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6062E089251C898<br />
/// </para>
/// </remarks>
public static void ForceLightningFlash()
{
Function.Call((Hash)0xF6062E089251C898);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02DEAAC8F8EA7FE7<br />
/// </para>
/// </remarks>
public static void SetCloudSettingsOverride(string p0)
{
Function.Call((Hash)0x02DEAAC8F8EA7FE7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11B56FBBF7224868<br />
/// </para>
/// </remarks>
public static void PreloadCloudHat(string name)
{
Function.Call((Hash)0x11B56FBBF7224868, name);
}

/// <summary>
/// The following cloudhats are useable:<br />altostratus<br />Cirrus<br />cirrocumulus<br />Clear 01<br />Cloudy 01<br />Contrails<br />Horizon<br />horizonband1<br />horizonband2<br />horizonband3<br />horsey<br />Nimbus<br />Puffs<br />RAIN<br />Snowy 01<br />Stormy 01<br />stratoscumulus<br />Stripey<br />shower<br />Wispy<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC4842A34657BFCB<br />
/// </para>
/// </remarks>
public static void LoadCloudHat(string name, float transitionTime)
{
Function.Call((Hash)0xFC4842A34657BFCB, name, transitionTime);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA74802FB8D0B7814<br />
/// </para>
/// </remarks>
public static void UnloadCloudHat(string name, float p1)
{
Function.Call((Hash)0xA74802FB8D0B7814, name, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x957E790EA1727B64<br />
/// </para>
/// </remarks>
public static void UnloadAllCloudHats()
{
Function.Call((Hash)0x957E790EA1727B64);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF36199225D6D8C86<br />
/// </para>
/// </remarks>
public static void SetCloudsAlpha(float opacity)
{
Function.Call((Hash)0xF36199225D6D8C86, opacity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20AC25E781AE4A84<br />
/// </para>
/// </remarks>
public static float GetCloudsAlpha()
{
return Function.Call<float>((Hash)0x20AC25E781AE4A84);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CD27B0045628463<br />
/// </para>
/// </remarks>
public static int GetGameTimer()
{
return Function.Call<int>((Hash)0x9CD27B0045628463);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15C40837039FFAF7<br />
/// </para>
/// </remarks>
public static float GetFrameTime()
{
return Function.Call<float>((Hash)0x15C40837039FFAF7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE599A503B3837E1B<br />
/// </para>
/// </remarks>
public static float GetSystemTimeStep()
{
return Function.Call<float>((Hash)0xE599A503B3837E1B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC8202EFC642E6F2<br />
/// </para>
/// </remarks>
public static int GetFrameCount()
{
return Function.Call<int>((Hash)0xFC8202EFC642E6F2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x313CE5879CEB6FCD<br />
/// </para>
/// </remarks>
public static float GetRandomFloatInRange(float startRange, float endRange)
{
return Function.Call<float>((Hash)0x313CE5879CEB6FCD, startRange, endRange);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD53343AA4FB7DD28<br />
/// </para>
/// </remarks>
public static int GetRandomIntInRange(int startRange, int endRange)
{
return Function.Call<int>((Hash)0xD53343AA4FB7DD28, startRange, endRange);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xF2D49816A804D134<br />
/// </para>
/// </remarks>
public static int GetRandomMwcIntInRange(int startRange, int endRange)
{
return Function.Call<int>((Hash)0xF2D49816A804D134, startRange, endRange);
}

/// <summary>
/// Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!<br /><br />x: Position on the X-axis to get ground elevation at.<br />y: Position on the Y-axis to get ground elevation at.<br />z: Position on the Z-axis to get ground elevation at.<br />groundZ: The ground elevation at the specified position.<br />ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket<br /><br />Bear in mind this native can only calculate the elevation when the coordinates are within the client&apos;s render distance.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC906A7DAB05C8D2B<br />
/// </para>
/// </remarks>
public static bool GetGroundZFor3dCoord(float x, float y, float z, ref float groundZ, bool ignoreWater, bool p5)
{
var nativeAssistPointerVar0 = groundZ;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC906A7DAB05C8D2B, x, y, z, &nativeAssistPointerVar0, ignoreWater, p5);
}
groundZ = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BDC7BFC57A81E76<br />
/// </para>
/// </remarks>
public static bool GetGroundZAndNormalFor3dCoord(float x, float y, float z, ref float groundZ, ref Vector3 normal)
{
var nativeAssistPointerVar0 = groundZ;
var nativeAssistPointerVar1 = normal;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8BDC7BFC57A81E76, x, y, z, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
groundZ = nativeAssistPointerVar0;
normal = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x9E82F0F362881B29<br />
/// </para>
/// </remarks>
public static bool GetGroundZExcludingObjectsFor3dCoord(float x, float y, float z, ref float groundZ, bool p4, bool p5)
{
var nativeAssistPointerVar0 = groundZ;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x9E82F0F362881B29, x, y, z, &nativeAssistPointerVar0, p4, p5);
}
groundZ = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC843060B5765DCE7<br />
/// </para>
/// </remarks>
public static float Asin(float p0)
{
return Function.Call<float>((Hash)0xC843060B5765DCE7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D08B970013C34B6<br />
/// </para>
/// </remarks>
public static float Acos(float p0)
{
return Function.Call<float>((Hash)0x1D08B970013C34B6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x632106CC96E82E91<br />
/// </para>
/// </remarks>
public static float Tan(float p0)
{
return Function.Call<float>((Hash)0x632106CC96E82E91, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9D1795CD5043663<br />
/// </para>
/// </remarks>
public static float Atan(float p0)
{
return Function.Call<float>((Hash)0xA9D1795CD5043663, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8927CBF9D22261A4<br />
/// </para>
/// </remarks>
public static float Atan2(float p0, float p1)
{
return Function.Call<float>((Hash)0x8927CBF9D22261A4, p0, p1);
}

/// <summary>
/// Returns the distance between two three-dimensional points, optionally ignoring the Z values.<br />If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.<br /><br />Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1B760881820C952<br />
/// </para>
/// </remarks>
public static float GetDistanceBetweenCoords(float x1, float y1, float z1, float x2, float y2, float z2, bool useZ)
{
return Function.Call<float>((Hash)0xF1B760881820C952, x1, y1, z1, x2, y2, z2, useZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x186FC4BE848E1C92<br />
/// </para>
/// </remarks>
public static float GetAngleBetween2dVectors(float x1, float y1, float x2, float y2)
{
return Function.Call<float>((Hash)0x186FC4BE848E1C92, x1, y1, x2, y2);
}

/// <summary>
/// dx = x1 - x2<br />dy = y1 - y2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FFB6B224F4B2926<br />
/// </para>
/// </remarks>
public static float GetHeadingFromVector2d(float dx, float dy)
{
return Function.Call<float>((Hash)0x2FFB6B224F4B2926, dx, dy);
}

/// <summary>
/// returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F8F6405F4777AF6<br />
/// </para>
/// </remarks>
public static float GetRatioOfClosestPointOnLine(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp)
{
return Function.Call<float>((Hash)0x7F8F6405F4777AF6, x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
}

/// <summary>
/// clamp: sets whether the product should be clamped between the given coordinates
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21C235BC64831E5A<br />
/// </para>
/// </remarks>
public static Vector3 GetClosestPointOnLine(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp)
{
return Function.Call<Vector3>((Hash)0x21C235BC64831E5A, x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF56DFB7B61BE7276<br />
/// </para>
/// </remarks>
public static bool GetLinePlaneIntersection(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, ref float p12)
{
var nativeAssistPointerVar0 = p12;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF56DFB7B61BE7276, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, &nativeAssistPointerVar0);
}
p12 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xA0AD167E4B39D9A2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetPointAreaOverlap(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9, int /* bug: Any */ p10, int /* bug: Any */ p11, int /* bug: Any */ p12, int /* bug: Any */ p13)
{
return Function.Call<bool>((Hash)0xA0AD167E4B39D9A2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}

/// <summary>
/// This sets bit [offset] of [address] to on.<br /><br />The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.<br /><br />Example:<br />MISC::SET_BIT(&amp;bitAddress, 1);<br /><br />To check if this bit has been enabled:<br />MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards<br /><br />Please note, this method may assign a value to [address] when used.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x933D6A9EEC1BACD0<br />
/// </para>
/// </remarks>
public static void SetBit(ref int address, int offset)
{
var nativeAssistPointerVar0 = address;
unsafe {
Function.Call((Hash)0x933D6A9EEC1BACD0, &nativeAssistPointerVar0, offset);
}
address = nativeAssistPointerVar0;
}

/// <summary>
/// This sets bit [offset] of [address] to off.<br /><br />Example:<br />MISC::CLEAR_BIT(&amp;bitAddress, 1);<br /><br />To check if this bit has been enabled:<br />MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE80492A9AC099A93<br />
/// </para>
/// </remarks>
public static void ClearBit(ref int address, int offset)
{
var nativeAssistPointerVar0 = address;
unsafe {
Function.Call((Hash)0xE80492A9AC099A93, &nativeAssistPointerVar0, offset);
}
address = nativeAssistPointerVar0;
}

/// <summary>
/// This native converts its past string to hash. It is hashed using jenkins one at a time method.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD24D37CC275948CC<br />
/// </para>
/// </remarks>
public static uint GetHashKey(string @string)
{
return Function.Call<uint>((Hash)0xD24D37CC275948CC, @string);
}

/// <summary>
/// This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2F6A2FA49278625<br />
/// </para>
/// </remarks>
public static void SlerpNearQuaternion(float t, float x, float y, float z, float w, float x1, float y1, float z1, float w1, ref float outX, ref float outY, ref float outZ, ref float outW)
{
var nativeAssistPointerVar0 = outX;
var nativeAssistPointerVar1 = outY;
var nativeAssistPointerVar2 = outZ;
var nativeAssistPointerVar3 = outW;
unsafe {
Function.Call((Hash)0xF2F6A2FA49278625, t, x, y, z, w, x1, y1, z1, w1, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
outX = nativeAssistPointerVar0;
outY = nativeAssistPointerVar1;
outZ = nativeAssistPointerVar2;
outW = nativeAssistPointerVar3;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA61B4DF533DCB56E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsAreaOccupied(float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7, bool p8, bool p9, bool p10, int /* bug: Any */ p11, bool p12)
{
return Function.Call<bool>((Hash)0xA61B4DF533DCB56E, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x39455BF4F4F55186<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsAreaOccupiedSlow(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9, int /* bug: Any */ p10, int /* bug: Any */ p11, int /* bug: Any */ p12)
{
return Function.Call<bool>((Hash)0x39455BF4F4F55186, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}

/// <summary>
/// `range`: The range, seems to not be very accurate during testing.<br />`p4`: Unknown, when set to true it seems to always return true no matter what I try.<br />`checkVehicle`: Check for any vehicles in that area.<br />`checkPeds`: Check for any peds in that area.<br />`ignoreEntity`: This entity will be ignored if it&apos;s in the area. Set to 0 if you don&apos;t want to exclude any entities.<br />The BOOL parameters that are documented have not been confirmed. They are just documented from what I&apos;ve found during testing. They may not work as expected in all cases.<br /><br />Returns true if there is anything in that location matching the provided parameters.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADCDE75E1C60F32D<br />
/// </para>
/// </remarks>
public static bool IsPositionOccupied(float x, float y, float z, float range, bool p4, bool checkVehicles, bool checkPeds, bool p7, bool p8, int /* Entity */ ignoreEntity, bool p10)
{
return Function.Call<bool>((Hash)0xADCDE75E1C60F32D, x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE54E209C35FFA18D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPointObscuredByAMissionEntity(float p0, float p1, float p2, float p3, float p4, float p5, int /* bug: Any */ p6)
{
return Function.Call<bool>((Hash)0xE54E209C35FFA18D, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA56F01F3765B93A0<br />
/// </para>
/// </remarks>
public static void ClearArea(float X, float Y, float Z, float radius, bool p4, bool ignoreCopCars, bool ignoreObjects, bool p7)
{
Function.Call((Hash)0xA56F01F3765B93A0, X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);
}

/// <summary>
/// MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn&apos;t seem to change anything. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x957838AAF91BD12D<br />
/// </para>
/// </remarks>
public static void ClearAreaLeaveVehicleHealth(float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7)
{
Function.Call((Hash)0x957838AAF91BD12D, x, y, z, radius, p4, p5, p6, p7);
}

/// <summary>
/// Example:<br />CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01C7B9B38428AEB6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ClearAreaOfVehicles(float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7, bool p8, bool p9, int /* bug: Any */ p10)
{
Function.Call((Hash)0x01C7B9B38428AEB6, x, y, z, radius, p4, p5, p6, p7, p8, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11DB3500F042A8AA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ClearAngledAreaOfVehicles(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool p7, bool p8, bool p9, bool p10, bool p11, int /* bug: Any */ p12, int /* bug: Any */ p13)
{
Function.Call((Hash)0x11DB3500F042A8AA, x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13);
}

/// <summary>
/// I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD9B9B385AAC7F5B<br />
/// </para>
/// </remarks>
public static void ClearAreaOfObjects(float x, float y, float z, float radius, int flags)
{
Function.Call((Hash)0xDD9B9B385AAC7F5B, x, y, z, radius, flags);
}

/// <summary>
/// Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE31FD6CE464AC59<br />
/// </para>
/// </remarks>
public static void ClearAreaOfPeds(float x, float y, float z, float radius, int flags)
{
Function.Call((Hash)0xBE31FD6CE464AC59, x, y, z, radius, flags);
}

/// <summary>
/// flags appears to always be 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04F8FC8FCF58F88D<br />
/// </para>
/// </remarks>
public static void ClearAreaOfCops(float x, float y, float z, float radius, int flags)
{
Function.Call((Hash)0x04F8FC8FCF58F88D, x, y, z, radius, flags);
}

/// <summary>
/// flags is usually 0 in the scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A1CB9094635D1A6<br />
/// </para>
/// </remarks>
public static void ClearAreaOfProjectiles(float x, float y, float z, float radius, int flags)
{
Function.Call((Hash)0x0A1CB9094635D1A6, x, y, z, radius, flags);
}

/// <summary>
/// Possibly used to clear scenario points.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EC6F9A478A6A512<br />
/// </para>
/// </remarks>
public static void ClearScenarioSpawnHistory()
{
Function.Call((Hash)0x7EC6F9A478A6A512);
}

/// <summary>
/// ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9BF75D28165FF77<br />
/// </para>
/// </remarks>
public static void SetSaveMenuActive(bool ignoreVehicle)
{
Function.Call((Hash)0xC9BF75D28165FF77, ignoreVehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x397BAA01068BAA96<br />
/// </para>
/// </remarks>
public static int GetStatusOfManualSave()
{
return Function.Call<int>((Hash)0x397BAA01068BAA96);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB938B7E6D3C0620C<br />
/// </para>
/// </remarks>
public static void SetCreditsActive(bool toggle)
{
Function.Call((Hash)0xB938B7E6D3C0620C, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB51B9AB9EF81868C<br />
/// </para>
/// </remarks>
public static void SetCreditsFadeOutWithScreen(bool toggle)
{
Function.Call((Hash)0xB51B9AB9EF81868C, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x075F1D57402C93BA<br />
/// </para>
/// </remarks>
public static bool HaveCreditsReachedEnd()
{
return Function.Call<bool>((Hash)0x075F1D57402C93BA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DC711BC69C548DF<br />
/// </para>
/// </remarks>
public static void TerminateAllScriptsWithThisName(string scriptName)
{
Function.Call((Hash)0x9DC711BC69C548DF, scriptName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9243BAC96D64C050<br />
/// </para>
/// </remarks>
public static void NetworkSetScriptIsSafeForNetworkGame()
{
Function.Call((Hash)0x9243BAC96D64C050);
}

/// <summary>
/// Returns the index of the newly created hospital spawn point.<br /><br />p3 might be radius?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F464EF988465A81<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int AddHospitalRestart(float x, float y, float z, float p3, int /* bug: Any */ p4)
{
return Function.Call<int>((Hash)0x1F464EF988465A81, x, y, z, p3, p4);
}

/// <summary>
/// The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8535819C450EBA8<br />
/// </para>
/// </remarks>
public static void DisableHospitalRestart(int hospitalIndex, bool toggle)
{
Function.Call((Hash)0xC8535819C450EBA8, hospitalIndex, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x452736765B31FC4B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int AddPoliceRestart(float p0, float p1, float p2, float p3, int /* bug: Any */ p4)
{
return Function.Call<int>((Hash)0x452736765B31FC4B, p0, p1, p2, p3, p4);
}

/// <summary>
/// Disables the spawn point at the police house on the specified index.<br /><br />policeIndex: The police house index.<br />toggle: true to enable the spawn point, false to disable.<br /><br />- Nacorpio
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23285DED6EBD7EA3<br />
/// </para>
/// </remarks>
public static void DisablePoliceRestart(int policeIndex, bool toggle)
{
Function.Call((Hash)0x23285DED6EBD7EA3, policeIndex, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x706B5EDCAA7FA663<br />
/// </para>
/// </remarks>
public static void SetRestartCoordOverride(float x, float y, float z, float heading)
{
Function.Call((Hash)0x706B5EDCAA7FA663, x, y, z, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2716D40842EAF79<br />
/// </para>
/// </remarks>
public static void ClearRestartCoordOverride()
{
Function.Call((Hash)0xA2716D40842EAF79);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C2B3493FBF51C71<br />
/// </para>
/// </remarks>
public static void PauseDeathArrestRestart(bool toggle)
{
Function.Call((Hash)0x2C2B3493FBF51C71, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21FFB63D8C615361<br />
/// </para>
/// </remarks>
public static void IgnoreNextRestart(bool toggle)
{
Function.Call((Hash)0x21FFB63D8C615361, toggle);
}

/// <summary>
/// Sets whether the game should fade out after the player dies.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A18E01DF2C87B86<br />
/// </para>
/// </remarks>
public static void SetFadeOutAfterDeath(bool toggle)
{
Function.Call((Hash)0x4A18E01DF2C87B86, toggle);
}

/// <summary>
/// Sets whether the game should fade out after the player is arrested.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E0B4DC0D990A4E7<br />
/// </para>
/// </remarks>
public static void SetFadeOutAfterArrest(bool toggle)
{
Function.Call((Hash)0x1E0B4DC0D990A4E7, toggle);
}

/// <summary>
/// Sets whether the game should fade in after the player dies or is arrested.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA66D2796BA33F12<br />
/// </para>
/// </remarks>
public static void SetFadeInAfterDeathArrest(bool toggle)
{
Function.Call((Hash)0xDA66D2796BA33F12, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3D78F59DFE18D79<br />
/// </para>
/// </remarks>
public static void SetFadeInAfterLoad(bool toggle)
{
Function.Call((Hash)0xF3D78F59DFE18D79, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0714D0A7EEECA54<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int RegisterSaveHouse(float p0, float p1, float p2, float p3, int /* bug: structure */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
return Function.Call<int>((Hash)0xC0714D0A7EEECA54, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F548CABEAE553BC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSaveHouse(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x4F548CABEAE553BC, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1162EA8AE9D24EEA<br />
/// </para>
/// </remarks>
public static bool OverrideSaveHouse(bool p0, float p1, float p2, float p3, float p4, bool p5, float p6, float p7)
{
return Function.Call<bool>((Hash)0x1162EA8AE9D24EEA, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4A0065E39C9F25C<br />
/// </para>
/// </remarks>
public static bool GetSaveHouseDetailsAfterSuccessfulLoad(ref Vector3 p0, ref float p1, ref bool fadeInAfterLoad, ref bool p3)
{
var nativeAssistPointerVar0 = p0;
var nativeAssistPointerVar1 = p1;
var nativeAssistPointerVar2 = fadeInAfterLoad;
var nativeAssistPointerVar3 = p3;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA4A0065E39C9F25C, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
p0 = nativeAssistPointerVar0;
p1 = nativeAssistPointerVar1;
fadeInAfterLoad = nativeAssistPointerVar2;
p3 = nativeAssistPointerVar3;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50EEAAD86232EE55<br />
/// </para>
/// </remarks>
public static void DoAutoSave()
{
Function.Call((Hash)0x50EEAAD86232EE55);
}

/// <summary>
/// Returns true if profile setting 208 is equal to 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E04F06094C87047<br />
/// </para>
/// </remarks>
public static bool GetIsAutoSaveOff()
{
return Function.Call<bool>((Hash)0x6E04F06094C87047);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69240733738C19A0<br />
/// </para>
/// </remarks>
public static bool IsAutoSaveInProgress()
{
return Function.Call<bool>((Hash)0x69240733738C19A0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2107A3773771186D<br />
/// </para>
/// </remarks>
public static bool HasCodeRequestedAutosave()
{
return Function.Call<bool>((Hash)0x2107A3773771186D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06462A961E94B67C<br />
/// </para>
/// </remarks>
public static void ClearCodeRequestedAutosave()
{
Function.Call((Hash)0x06462A961E94B67C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0E500246FF73D66<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void BeginReplayStats(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE0E500246FF73D66, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69FE6DC87BD2A5E9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AddReplayStatValue(int /* bug: Any */ value)
{
Function.Call((Hash)0x69FE6DC87BD2A5E9, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA23E821FBDF8A5F2<br />
/// </para>
/// </remarks>
public static void EndReplayStats()
{
Function.Call((Hash)0xA23E821FBDF8A5F2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD642319C54AADEB6<br />
/// </para>
/// </remarks>
public static bool HaveReplayStatsBeenStored()
{
return Function.Call<bool>((Hash)0xD642319C54AADEB6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B1F2E327B6B6FE1<br />
/// </para>
/// </remarks>
public static int GetReplayStatMissionId()
{
return Function.Call<int>((Hash)0x5B1F2E327B6B6FE1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B626A0150E4D449<br />
/// </para>
/// </remarks>
public static int GetReplayStatMissionType()
{
return Function.Call<int>((Hash)0x2B626A0150E4D449);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC9274A7EF6B2867<br />
/// </para>
/// </remarks>
public static int GetReplayStatCount()
{
return Function.Call<int>((Hash)0xDC9274A7EF6B2867);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8098C8D6597AAE18<br />
/// </para>
/// </remarks>
public static int GetReplayStatAtIndex(int index)
{
return Function.Call<int>((Hash)0x8098C8D6597AAE18, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B1AB132A16FDA55<br />
/// </para>
/// </remarks>
public static void ClearReplayStats()
{
Function.Call((Hash)0x1B1AB132A16FDA55);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72DE52178C291CB5<br />
/// </para>
/// </remarks>
public static bool QueueMissionRepeatLoad()
{
return Function.Call<bool>((Hash)0x72DE52178C291CB5);
}

/// <summary>
/// Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.<br />Returns 1 if the message isn&apos;t currently on screen
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44A0BDC559B35F6E<br />
/// </para>
/// </remarks>
public static bool QueueMissionRepeatSave()
{
return Function.Call<bool>((Hash)0x44A0BDC559B35F6E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB2104E905C6F2E9<br />
/// </para>
/// </remarks>
public static bool QueueMissionRepeatSaveForBenchmarkTest()
{
return Function.Call<bool>((Hash)0xEB2104E905C6F2E9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B5E102E4A42F2BF<br />
/// </para>
/// </remarks>
public static int GetStatusOfMissionRepeatSave()
{
return Function.Call<int>((Hash)0x2B5E102E4A42F2BF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A75CE2956274ADD<br />
/// </para>
/// </remarks>
public static bool IsMemoryCardInUse()
{
return Function.Call<bool>((Hash)0x8A75CE2956274ADD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x867654CBC7606F2C<br />
/// </para>
/// </remarks>
public static void ShootSingleBulletBetweenCoords(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, uint weaponHash, int /* Ped */ ownerPed, bool isAudible, bool isInvisible, float speed)
{
Function.Call((Hash)0x867654CBC7606F2C, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed);
}

/// <summary>
/// entity - entity to ignore
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3A7742E0B7A2F8B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ShootSingleBulletBetweenCoordsIgnoreEntity(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, uint weaponHash, int /* Ped */ ownerPed, bool isAudible, bool isInvisible, float speed, int /* Entity */ entity, int /* bug: Any */ p14)
{
Function.Call((Hash)0xE3A7742E0B7A2F8B, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14);
}

/// <summary>
/// entity - entity to ignore<br />targetEntity - entity to home in on, if the weapon hash provided supports homing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFE5756E7407064A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ShootSingleBulletBetweenCoordsIgnoreEntityNew(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, uint weaponHash, int /* Ped */ ownerPed, bool isAudible, bool isInvisible, float speed, int /* Entity */ entity, bool p14, bool p15, int /* Entity */ targetEntity, bool p17, int /* bug: Any */ p18, int /* bug: Any */ p19, int /* bug: Any */ p20)
{
Function.Call((Hash)0xBFE5756E7407064A, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20);
}

/// <summary>
/// Gets the dimensions of a model.<br /><br />Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.<br /><br />Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &amp;v_1A, &amp;v_17);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03E8D3D5F549087A<br />
/// </para>
/// </remarks>
public static void GetModelDimensions(uint modelHash, ref Vector3 minimum, ref Vector3 maximum)
{
var nativeAssistPointerVar0 = minimum;
var nativeAssistPointerVar1 = maximum;
unsafe {
Function.Call((Hash)0x03E8D3D5F549087A, modelHash, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
minimum = nativeAssistPointerVar0;
maximum = nativeAssistPointerVar1;
}

/// <summary>
/// Sets a visually fake wanted level on the user interface. Used by Rockstar&apos;s scripts to &quot;override&quot; regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.<br /><br />Max is 6, anything above this makes it just 6. Also the mini-map gets the red &amp; blue flashing effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1454F2448DE30163<br />
/// </para>
/// </remarks>
public static void SetFakeWantedLevel(int fakeWantedLevel)
{
Function.Call((Hash)0x1454F2448DE30163, fakeWantedLevel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C9296CBCD1B971E<br />
/// </para>
/// </remarks>
public static int GetFakeWantedLevel()
{
return Function.Call<int>((Hash)0x4C9296CBCD1B971E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF14878FC50BEC6EE<br />
/// </para>
/// </remarks>
public static void UsingMissionCreator(bool toggle)
{
Function.Call((Hash)0xF14878FC50BEC6EE, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEA36202FC3382DF<br />
/// </para>
/// </remarks>
public static void AllowMissionCreatorWarp(bool toggle)
{
Function.Call((Hash)0xDEA36202FC3382DF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19E00D7322C6F85B<br />
/// </para>
/// </remarks>
public static void SetMinigameInProgress(bool toggle)
{
Function.Call((Hash)0x19E00D7322C6F85B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B4A15E44DE0F478<br />
/// </para>
/// </remarks>
public static bool IsMinigameInProgress()
{
return Function.Call<bool>((Hash)0x2B4A15E44DE0F478);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B30F65D7B710098<br />
/// </para>
/// </remarks>
public static bool IsThisAMinigameScript()
{
return Function.Call<bool>((Hash)0x7B30F65D7B710098);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61A23B7EDA9BDA24<br />
/// </para>
/// </remarks>
public static bool IsSniperInverted()
{
return Function.Call<bool>((Hash)0x61A23B7EDA9BDA24);
}

/// <summary>
/// Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3D15555431AB793<br />
/// </para>
/// </remarks>
public static bool ShouldUseMetricMeasurements()
{
return Function.Call<bool>((Hash)0xD3D15555431AB793);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC488FF2356EA7791<br />
/// </para>
/// </remarks>
public static int GetProfileSetting(int profileSetting)
{
return Function.Call<int>((Hash)0xC488FF2356EA7791, profileSetting);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C515FAB3FF9EA92<br />
/// </para>
/// </remarks>
public static bool AreStringsEqual(string string1, string string2)
{
return Function.Call<bool>((Hash)0x0C515FAB3FF9EA92, string1, string2);
}

/// <summary>
/// Compares two strings up to a specified number of characters.<br /><br />Parameters:<br />str1 - String to be compared.<br />str2 - String to be compared.<br />matchCase - Comparison will be case-sensitive.<br />maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.<br /><br />Returns:<br />A value indicating the relationship between the strings:<br />&lt;0 - The first non-matching character in &apos;str1&apos; is less than the one in &apos;str2&apos;. (e.g. &apos;A&apos; &lt; &apos;B&apos;, so result = -1)<br />0 - The contents of both strings are equal.<br />&gt;0 - The first non-matching character in &apos;str1&apos; is less than the one in &apos;str2&apos;. (e.g. &apos;B&apos; &gt; &apos;A&apos;, so result = 1)<br /><br />Examples:<br />MISC::COMPARE_STRINGS(&quot;STRING&quot;, &quot;string&quot;, false, -1); // 0; equal<br />MISC::COMPARE_STRINGS(&quot;TESTING&quot;, &quot;test&quot;, false, 4); // 0; equal<br />MISC::COMPARE_STRINGS(&quot;R2D2&quot;, &quot;R2xx&quot;, false, 2); // 0; equal<br />MISC::COMPARE_STRINGS(&quot;foo&quot;, &quot;bar&quot;, false, -1); // 4; &apos;f&apos; &gt; &apos;b&apos;<br />MISC::COMPARE_STRINGS(&quot;A&quot;, &quot;A&quot;, true, 1); // 0; equal<br /><br />When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:<br />MISC::COMPARE_STRINGS(&quot;A&quot;, &quot;a&quot;, true, 1); // -1; &apos;A&apos; &lt; &apos;a&apos;<br />MISC::COMPARE_STRINGS(&quot;a&quot;, &quot;A&quot;, true, 1); // 1; &apos;a&apos; &gt; &apos;A&apos;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E34710ECD4AB0EB<br />
/// </para>
/// </remarks>
public static int CompareStrings(string str1, string str2, bool matchCase, int maxLength)
{
return Function.Call<int>((Hash)0x1E34710ECD4AB0EB, str1, str2, matchCase, maxLength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0D31AD191A74F87<br />
/// </para>
/// </remarks>
public static int Absi(int value)
{
return Function.Call<int>((Hash)0xF0D31AD191A74F87, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73D57CFFDD12C355<br />
/// </para>
/// </remarks>
public static float Absf(float value)
{
return Function.Call<float>((Hash)0x73D57CFFDD12C355, value);
}

/// <summary>
/// Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEFCF11B01287125<br />
/// </para>
/// </remarks>
public static bool IsSniperBulletInArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0xFEFCF11B01287125, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.<br /><br />- Nacorpio<br /><br /><br />ownedByPlayer = only projectiles fired by the player will be detected.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5270A8FBC098C3F8<br />
/// </para>
/// </remarks>
public static bool IsProjectileInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0x5270A8FBC098C3F8, x1, y1, z1, x2, y2, z2, ownedByPlayer);
}

/// <summary>
/// Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E0DC353342C4A6D<br />
/// </para>
/// </remarks>
public static bool IsProjectileTypeInArea(float x1, float y1, float z1, float x2, float y2, float z2, int type, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0x2E0DC353342C4A6D, x1, y1, z1, x2, y2, z2, type, ownedByPlayer);
}

/// <summary>
/// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0BC12401061DEA0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsProjectileTypeInAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width, int /* bug: Any */ p7, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0xF0BC12401061DEA0, x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34318593248C8FB2<br />
/// </para>
/// </remarks>
public static bool IsProjectileTypeWithinDistance(float x, float y, float z, uint projectileHash, float radius, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0x34318593248C8FB2, x, y, z, projectileHash, radius, ownedByPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D7A43EC6A5FEA45<br />
/// </para>
/// </remarks>
public static bool GetCoordsOfProjectileTypeInArea(float x1, float y1, float z1, float x2, float y2, float z2, uint projectileHash, ref Vector3 projectilePos, bool ownedByPlayer)
{
var nativeAssistPointerVar0 = projectilePos;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8D7A43EC6A5FEA45, x1, y1, z1, x2, y2, z2, projectileHash, &nativeAssistPointerVar0, ownedByPlayer);
}
projectilePos = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFB4138EEFED7B81<br />
/// </para>
/// </remarks>
public static bool GetCoordsOfProjectileTypeWithinDistance(int /* Ped */ ped, uint weaponHash, float distance, ref Vector3 outCoords, bool p4)
{
var nativeAssistPointerVar0 = outCoords;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xDFB4138EEFED7B81, ped, weaponHash, distance, &nativeAssistPointerVar0, p4);
}
outCoords = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82FDE6A57EE4EE44<br />
/// </para>
/// </remarks>
public static bool GetProjectileOfProjectileTypeWithinDistance(int /* Ped */ ped, uint weaponHash, float distance, ref Vector3 outCoords, ref int /* Object* */ outProjectile, bool p5)
{
var nativeAssistPointerVar0 = outCoords;
var nativeAssistPointerVar1 = outProjectile;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x82FDE6A57EE4EE44, ped, weaponHash, distance, &nativeAssistPointerVar0, &nativeAssistPointerVar1, p5);
}
outCoords = nativeAssistPointerVar0;
outProjectile = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA<br />See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.<br />Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A8B5F3C01E2B477<br />
/// </para>
/// </remarks>
public static bool IsBulletInAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0x1A8B5F3C01E2B477, x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F2023999AD51C1F<br />
/// </para>
/// </remarks>
public static bool IsBulletInArea(float x, float y, float z, float radius, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0x3F2023999AD51C1F, x, y, z, radius, ownedByPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE0F6D7450D37351<br />
/// </para>
/// </remarks>
public static bool IsBulletInBox(float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer)
{
return Function.Call<bool>((Hash)0xDE0F6D7450D37351, x1, y1, z1, x2, y2, z2, ownedByPlayer);
}

/// <summary>
/// p3 - possibly radius?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9870ACFB89A90995<br />
/// </para>
/// </remarks>
public static bool HasBulletImpactedInArea(float x, float y, float z, float p3, bool p4, bool p5)
{
return Function.Call<bool>((Hash)0x9870ACFB89A90995, x, y, z, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC8C5D7CFEAB8394<br />
/// </para>
/// </remarks>
public static bool HasBulletImpactedInBox(float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7)
{
return Function.Call<bool>((Hash)0xDC8C5D7CFEAB8394, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// PS4
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA72BC0B675B1519E<br />
/// </para>
/// </remarks>
public static bool IsOrbisVersion()
{
return Function.Call<bool>((Hash)0xA72BC0B675B1519E);
}

/// <summary>
/// XBOX ONE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D982ADB1978442D<br />
/// </para>
/// </remarks>
public static bool IsDurangoVersion()
{
return Function.Call<bool>((Hash)0x4D982ADB1978442D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6201B4DAF662A9D<br />
/// </para>
/// </remarks>
public static bool IsXbox360Version()
{
return Function.Call<bool>((Hash)0xF6201B4DAF662A9D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCA1072C29D096C2<br />
/// </para>
/// </remarks>
public static bool IsPs3Version()
{
return Function.Call<bool>((Hash)0xCCA1072C29D096C2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48AF36444B965238<br />
/// </para>
/// </remarks>
public static bool IsPcVersion()
{
return Function.Call<bool>((Hash)0x48AF36444B965238);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x0A27B2B6282F7169<br />
/// </para>
/// </remarks>
public static bool IsSteamVersion()
{
return Function.Call<bool>((Hash)0x0A27B2B6282F7169);
}

/// <summary>
/// Used to block some of the prostitute stuff due to laws in Australia.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F1935CA1F724008<br />
/// </para>
/// </remarks>
public static bool IsAussieVersion()
{
return Function.Call<bool>((Hash)0x9F1935CA1F724008);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xB8C0BB75D8A77DB3<br />
/// </para>
/// </remarks>
public static bool IsJapaneseVersion()
{
return Function.Call<bool>((Hash)0xB8C0BB75D8A77DB3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x138679CA01E21F53<br />
/// </para>
/// </remarks>
public static bool IsXboxPlatform()
{
return Function.Call<bool>((Hash)0x138679CA01E21F53);
}

/// <summary>
/// Xbox Series (Scarlett) version...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xC545AB1CF97ABB34<br />
/// </para>
/// </remarks>
public static bool IsScarlettVersion()
{
return Function.Call<bool>((Hash)0xC545AB1CF97ABB34);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xF911E695C1EB8518<br />
/// </para>
/// </remarks>
public static bool IsScePlatform()
{
return Function.Call<bool>((Hash)0xF911E695C1EB8518);
}

/// <summary>
/// PS5 (Prospero) version...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x807ABE1AB65C24D2<br />
/// </para>
/// </remarks>
public static bool IsProsperoVersion()
{
return Function.Call<bool>((Hash)0x807ABE1AB65C24D2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF22B6C47C6EAB066<br />
/// </para>
/// </remarks>
public static bool IsStringNull(string @string)
{
return Function.Call<bool>((Hash)0xF22B6C47C6EAB066, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA042B6957743895<br />
/// </para>
/// </remarks>
public static bool IsStringNullOrEmpty(string @string)
{
return Function.Call<bool>((Hash)0xCA042B6957743895, @string);
}

/// <summary>
/// Returns false if it&apos;s a null or empty string or if the string is too long. outInteger will be set to -999 in that case.<br /><br />If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A5F40FE637EB584<br />
/// </para>
/// </remarks>
public static bool StringToInt(string @string, ref int outInteger)
{
var nativeAssistPointerVar0 = outInteger;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x5A5F40FE637EB584, @string, &nativeAssistPointerVar0);
}
outInteger = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EF07E15701D61ED<br />
/// </para>
/// </remarks>
public static void SetBitsInRange(ref int @var, int rangeStart, int rangeEnd, int p3)
{
var nativeAssistPointerVar0 = @var;
unsafe {
Function.Call((Hash)0x8EF07E15701D61ED, &nativeAssistPointerVar0, rangeStart, rangeEnd, p3);
}
@var = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53158863FCC0893A<br />
/// </para>
/// </remarks>
public static int GetBitsInRange(int @var, int rangeStart, int rangeEnd)
{
return Function.Call<int>((Hash)0x53158863FCC0893A, @var, rangeStart, rangeEnd);
}

/// <summary>
/// See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A992DA297A4630C<br />
/// </para>
/// </remarks>
public static int AddStuntJump(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4, float camX, float camY, float camZ, int p15, int p16, int p17)
{
return Function.Call<int>((Hash)0x1A992DA297A4630C, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17);
}

/// <summary>
/// Creates a new stunt jump.<br /><br />The radius1 and radius2 might actually not be a radius at all, but that&apos;s what it seems to me testing them in-game. But they may be &apos;angle&apos; floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.<br /><br />Info about the specific &apos;parameter sections&apos;:<br /><br /><br />**x1, y1, z1, x2, y2, z2 and radius1:**<br /><br />First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you&apos;re not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I&apos;m not really sure about it&apos;s exact purpose.<br /><br /><br />**x3, y3, z3, x4, y4, z4 and radius2:**<br /><br />Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone &apos;radius&apos; float value, just because you have quite a lot of places where you can land (I&apos;m guessing).<br /><br /><br />**camX, camY and camZ:**<br /><br />The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.<br /><br /><br />**unk1, unk2 and unk3:**<br /><br />Not sure what these are for, but they&apos;re always `150, 0, 0` in decompiled scripts.<br /><br />Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBE5D803A5360CBF<br />
/// </para>
/// </remarks>
public static int AddStuntJumpAngled(float x1, float y1, float z1, float x2, float y2, float z2, float radius1, float x3, float y3, float z3, float x4, float y4, float z4, float radius2, float camX, float camY, float camZ, int p17, int p18, int p19)
{
return Function.Call<int>((Hash)0xBBE5D803A5360CBF, x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19);
}

/// <summary>
/// Toggles some stunt jump stuff.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xFB80AB299D2EE1BD<br />
/// </para>
/// </remarks>
public static void ToggleShowOptionalStuntJumpCamera(bool toggle)
{
Function.Call((Hash)0xFB80AB299D2EE1BD, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC518000E39DAE1F<br />
/// </para>
/// </remarks>
public static void DeleteStuntJump(int p0)
{
Function.Call((Hash)0xDC518000E39DAE1F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE369A5783B866016<br />
/// </para>
/// </remarks>
public static void EnableStuntJumpSet(int p0)
{
Function.Call((Hash)0xE369A5783B866016, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5272EBEDD4747F6<br />
/// </para>
/// </remarks>
public static void DisableStuntJumpSet(int p0)
{
Function.Call((Hash)0xA5272EBEDD4747F6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD79185689F8FD5DF<br />
/// </para>
/// </remarks>
public static void SetStuntJumpsCanTrigger(bool toggle)
{
Function.Call((Hash)0xD79185689F8FD5DF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A3F19700A4D0525<br />
/// </para>
/// </remarks>
public static bool IsStuntJumpInProgress()
{
return Function.Call<bool>((Hash)0x7A3F19700A4D0525);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2272B0A1343129F4<br />
/// </para>
/// </remarks>
public static bool IsStuntJumpMessageShowing()
{
return Function.Call<bool>((Hash)0x2272B0A1343129F4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x996DD1E1E02F1008<br />
/// </para>
/// </remarks>
public static int GetNumSuccessfulStuntJumps()
{
return Function.Call<int>((Hash)0x996DD1E1E02F1008);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6856EC3D35C81EA4<br />
/// </para>
/// </remarks>
public static int GetTotalSuccessfulStuntJumps()
{
return Function.Call<int>((Hash)0x6856EC3D35C81EA4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6B7B0ACD4E4B75E<br />
/// </para>
/// </remarks>
public static void CancelStuntJump()
{
Function.Call((Hash)0xE6B7B0ACD4E4B75E);
}

/// <summary>
/// Make sure to call this from the correct thread if you&apos;re using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x577D1284D6873711<br />
/// </para>
/// </remarks>
public static void SetGamePaused(bool toggle)
{
Function.Call((Hash)0x577D1284D6873711, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA391C728106F7AF<br />
/// </para>
/// </remarks>
public static void SetThisScriptCanBePaused(bool toggle)
{
Function.Call((Hash)0xAA391C728106F7AF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB98236CAAECEF897<br />
/// </para>
/// </remarks>
public static void SetThisScriptCanRemoveBlipsCreatedByAnyScript(bool toggle)
{
Function.Call((Hash)0xB98236CAAECEF897, toggle);
}

/// <summary>
/// This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the &quot;amount&quot; represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/<br /><br />INT_SCORES_SCORTED was a hash collision
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x071E2A839DE82D90<br />
/// </para>
/// </remarks>
public static bool HasCheatWithHashBeenActivated(uint hash, int amount)
{
return Function.Call<bool>((Hash)0x071E2A839DE82D90, hash, amount);
}

/// <summary>
/// Get inputted &quot;Cheat code&quot;, for example:<br /><br />while (TRUE)<br />{<br />    if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))<br />    {<br />       // Do something.<br />    }<br />    SYSTEM::WAIT(0);<br />}<br /><br />Calling this will also set the last saved string hash to zero.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x557E43C447E700A8<br />
/// </para>
/// </remarks>
public static bool HasPcCheatWithHashBeenActivated(uint hash)
{
return Function.Call<bool>((Hash)0x557E43C447E700A8, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xFA3FFB0EEBC288A3<br />
/// </para>
/// </remarks>
public static void OverrideFreezeFlags(bool p0)
{
Function.Call((Hash)0xFA3FFB0EEBC288A3, p0);
}

/// <summary>
/// Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.<br />Sets the maximum prop density and changes a loading screen flag from &apos;loading story mode&apos; to &apos;loading GTA Online&apos;. Does not touch DLC map data at all.<br /><br />In fact, I doubt this changes the flag whatsoever, that&apos;s the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BAE5AD2508DF078<br />
/// </para>
/// </remarks>
public static void SetInstancePriorityMode(int p0)
{
Function.Call((Hash)0x9BAE5AD2508DF078, p0);
}

/// <summary>
/// Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5F0A8EBD3F361CE<br />
/// </para>
/// </remarks>
public static void SetInstancePriorityHint(int flag)
{
Function.Call((Hash)0xC5F0A8EBD3F361CE, flag);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EA2B6AF97ECA6ED<br />
/// </para>
/// </remarks>
public static bool IsFrontendFading()
{
return Function.Call<bool>((Hash)0x7EA2B6AF97ECA6ED);
}

/// <summary>
/// spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7472BB270D7B4F3E<br />
/// </para>
/// </remarks>
public static void PopulateNow()
{
Function.Call((Hash)0x7472BB270D7B4F3E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBAD6729F7B1F4FC<br />
/// </para>
/// </remarks>
public static int GetIndexOfCurrentLevel()
{
return Function.Call<int>((Hash)0xCBAD6729F7B1F4FC);
}

/// <summary>
/// level can be from 0 to 3<br />0: 9.8 - normal<br />1: 2.4 - low<br />2: 0.1 - very low<br />3: 0.0 - off
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x740E14FAD5842351<br />
/// </para>
/// </remarks>
public static void SetGravityLevel(int level)
{
Function.Call((Hash)0x740E14FAD5842351, level);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9575F812C6A7997<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StartSaveData(int /* bug: structure */ p0, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0xA9575F812C6A7997, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74E20C9145FB66FD<br />
/// </para>
/// </remarks>
public static void StopSaveData()
{
Function.Call((Hash)0x74E20C9145FB66FD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA09F896CE912481F<br />
/// </para>
/// </remarks>
public static int GetSizeOfSaveData(bool p0)
{
return Function.Call<int>((Hash)0xA09F896CE912481F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34C9EE5986258415<br />
/// </para>
/// </remarks>
public static void RegisterIntToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x34C9EE5986258415, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA735353C77334EA0<br />
/// </para>
/// </remarks>
public static void RegisterInt64ToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0xA735353C77334EA0, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10C2FA78D0E128A1<br />
/// </para>
/// </remarks>
public static void RegisterEnumToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x10C2FA78D0E128A1, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CAEC29ECB5DFEBB<br />
/// </para>
/// </remarks>
public static void RegisterFloatToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x7CAEC29ECB5DFEBB, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8F4131414C835A1<br />
/// </para>
/// </remarks>
public static void RegisterBoolToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0xC8F4131414C835A1, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDB1232C5BEAE62F<br />
/// </para>
/// </remarks>
public static void RegisterTextLabelToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0xEDB1232C5BEAE62F, p0, name);
}

/// <summary>
/// MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&amp;a_0._f1, &quot;tlPlateText&quot;);<br />MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&amp;a_0._f1C, &quot;tlPlateText_pending&quot;);<br />MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&amp;a_0._f10B, &quot;tlCarAppPlateText&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F7794F28C6B2535<br />
/// </para>
/// </remarks>
public static void RegisterTextLabel15ToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x6F7794F28C6B2535, p0, name);
}

/// <summary>
/// Only found 3 times in decompiled scripts.<br /><br />MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, &quot;Movie_Name_For_This_Player&quot;);<br />MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&amp;a_0._fB, &quot;Ringtone_For_This_Player&quot;);<br />MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&amp;a_0._f1EC4._f12[v_A/*6*/], &amp;v_13); // where v_13 is &quot;MPATMLOGSCRS0&quot; thru &quot;MPATMLOGSCRS15&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48F069265A0E4BEC<br />
/// </para>
/// </remarks>
public static void RegisterTextLabel23ToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x48F069265A0E4BEC, p0, name);
}

/// <summary>
/// Only found 2 times in decompiled scripts.<br /><br />MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&amp;a_0._f1F5A._f6[0/*8*/], &quot;TEMPSTAT_LABEL&quot;); // gets saved in a struct called &quot;g_SaveData_STRING_ScriptSaves&quot;<br />MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&amp;a_0._f4B4[v_1A/*8*/], &amp;v_5); // where v_5 is &quot;Name0&quot; thru &quot;Name9&quot;, gets saved in a struct called &quot;OUTFIT_Name&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8269816F6CFD40F8<br />
/// </para>
/// </remarks>
public static void RegisterTextLabel31ToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0x8269816F6CFD40F8, p0, name);
}

/// <summary>
/// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, &quot;Thumb_label&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f10, &quot;Photo_label&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, &quot;GXTlabel&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f21, &quot;StringComp&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f43, &quot;SecondStringComp&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f53, &quot;ThirdStringComp&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f32, &quot;SenderStringComp&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f726[v_1A/*16*/], &amp;v_20); // where v_20 is &quot;LastJobTL_0_1&quot; thru &quot;LastJobTL_2_1&quot;, gets saved in a struct called &quot;LAST_JobGamer_TL&quot;<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f4B, &quot;PAID_PLAYER&quot;);<br />MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&amp;a_0._f5B, &quot;RADIO_STATION&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAA457EF263E8763<br />
/// </para>
/// </remarks>
public static void RegisterTextLabel63ToSave(int /* bug: structure */ p0, string name)
{
Function.Call((Hash)0xFAA457EF263E8763, p0, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF737600CDDBEADD<br />
/// </para>
/// </remarks>
public static void StartSaveStructWithSize(int /* bug: structure */ p0, int size, string structName)
{
Function.Call((Hash)0xBF737600CDDBEADD, p0, size, structName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB1774DF12BB9F12<br />
/// </para>
/// </remarks>
public static void StopSaveStruct()
{
Function.Call((Hash)0xEB1774DF12BB9F12);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60FE567DF1B1AF9D<br />
/// </para>
/// </remarks>
public static void StartSaveArrayWithSize(int /* bug: structure */ p0, int size, string arrayName)
{
Function.Call((Hash)0x60FE567DF1B1AF9D, p0, size, arrayName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04456F95153C6BE4<br />
/// </para>
/// </remarks>
public static void StopSaveArray()
{
Function.Call((Hash)0x04456F95153C6BE4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x213AEB2B90CBA7AC<br />
/// </para>
/// </remarks>
public static void CopyScriptStruct(int /* bug: structure */ dst, int /* bug: structure */ src, int size)
{
Function.Call((Hash)0x213AEB2B90CBA7AC, dst, src, size);
}

/// <summary>
/// https://alloc8or.re/gta5/doc/enums/DispatchType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC0F817884CDD856<br />
/// </para>
/// </remarks>
public static void EnableDispatchService(int dispatchService, bool toggle)
{
Function.Call((Hash)0xDC0F817884CDD856, dispatchService, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B2BD3773123EA2F<br />
/// </para>
/// </remarks>
public static void BlockDispatchServiceResourceCreation(int dispatchService, bool toggle)
{
Function.Call((Hash)0x9B2BD3773123EA2F, dispatchService, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB4A0C2D56441717<br />
/// </para>
/// </remarks>
public static int GetNumberResourcesAllocatedToWantedLevel(int dispatchService)
{
return Function.Call<int>((Hash)0xEB4A0C2D56441717, dispatchService);
}

/// <summary>
/// As for the &apos;police&apos; incident, it will call police cars to you, but unlike PedsInCavalcades &amp; Merryweather they won&apos;t start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. <br /><br />Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).<br /><br />Side Note 2: I say it breaks as if you call this proper,<br />if(CREATE_INCIDENT) etc it will return false if you do as I said above.<br />=====================================================
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F892CAF67444AE7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool CreateIncident(int dispatchService, float x, float y, float z, int numUnits, float radius, ref int outIncidentID, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
var nativeAssistPointerVar0 = outIncidentID;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x3F892CAF67444AE7, dispatchService, x, y, z, numUnits, radius, &nativeAssistPointerVar0, p7, p8);
}
outIncidentID = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// As for the &apos;police&apos; incident, it will call police cars to you, but unlike PedsInCavalcades &amp; Merryweather they won&apos;t start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. <br /><br />Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).<br /><br />Side Note 2: I say it breaks as if you call this proper,<br />if(CREATE_INCIDENT) etc it will return false if you do as I said above.<br />=====================================================
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05983472F0494E60<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool CreateIncidentWithEntity(int dispatchService, int /* Ped */ ped, int numUnits, float radius, ref int outIncidentID, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
var nativeAssistPointerVar0 = outIncidentID;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x05983472F0494E60, dispatchService, ped, numUnits, radius, &nativeAssistPointerVar0, p5, p6);
}
outIncidentID = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Delete an incident with a given id.<br /><br />=======================================================<br />Correction, I have change this to int, instead of int*<br />as it doesn&apos;t use a pointer to the createdIncident.<br />If you try it you will crash (or) freeze.<br />=======================================================
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x556C1AA270D5A207<br />
/// </para>
/// </remarks>
public static void DeleteIncident(int incidentId)
{
Function.Call((Hash)0x556C1AA270D5A207, incidentId);
}

/// <summary>
/// =======================================================<br />Correction, I have change this to int, instead of int*<br />as it doesn&apos;t use a pointer to the createdIncident.<br />If you try it you will crash (or) freeze.<br />=======================================================
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8BC6461E629BEAA<br />
/// </para>
/// </remarks>
public static bool IsIncidentValid(int incidentId)
{
return Function.Call<bool>((Hash)0xC8BC6461E629BEAA, incidentId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB08B85D860E7BA3C<br />
/// </para>
/// </remarks>
public static void SetIncidentRequestedUnits(int incidentId, int dispatchService, int numUnits)
{
Function.Call((Hash)0xB08B85D860E7BA3C, incidentId, dispatchService, numUnits);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD261BA3E7E998072<br />
/// </para>
/// </remarks>
public static void SetIdealSpawnDistanceForIncident(int incidentId, float p1)
{
Function.Call((Hash)0xD261BA3E7E998072, incidentId, p1);
}

/// <summary>
/// Finds a position ahead of the player by predicting the players next actions.<br />The positions match path finding node positions.<br />When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6874E2190B0C1972<br />
/// </para>
/// </remarks>
public static bool FindSpawnPointInDirection(float posX, float posY, float posZ, float fwdVecX, float fwdVecY, float fwdVecZ, float distance, ref Vector3 spawnPoint)
{
var nativeAssistPointerVar0 = spawnPoint;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x6874E2190B0C1972, posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, &nativeAssistPointerVar0);
}
spawnPoint = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67F6413D3220E18D<br />
/// </para>
/// </remarks>
public static int AddPopMultiplierArea(float x1, float y1, float z1, float x2, float y2, float z2, float p6, float p7, bool p8, bool p9)
{
return Function.Call<int>((Hash)0x67F6413D3220E18D, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1327E2FE9746BAEE<br />
/// </para>
/// </remarks>
public static bool DoesPopMultiplierAreaExist(int id)
{
return Function.Call<bool>((Hash)0x1327E2FE9746BAEE, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB129E447A2EDA4BF<br />
/// </para>
/// </remarks>
public static void RemovePopMultiplierArea(int id, bool p1)
{
Function.Call((Hash)0xB129E447A2EDA4BF, id, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x1312F4B242609CE3<br />
/// </para>
/// </remarks>
public static bool IsPopMultiplierAreaNetworked(int id)
{
return Function.Call<bool>((Hash)0x1312F4B242609CE3, id);
}

/// <summary>
/// This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x32C7A7E8C43A1F80<br />
/// </para>
/// </remarks>
public static int AddPopMultiplierSphere(float x, float y, float z, float radius, float pedMultiplier, float vehicleMultiplier, bool p6, bool p7)
{
return Function.Call<int>((Hash)0x32C7A7E8C43A1F80, x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x171BAFB3C60389F4<br />
/// </para>
/// </remarks>
public static bool DoesPopMultiplierSphereExist(int id)
{
return Function.Call<bool>((Hash)0x171BAFB3C60389F4, id);
}

/// <summary>
/// Removes population multiplier sphere
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6869BECDD8F2403<br />
/// </para>
/// </remarks>
public static void RemovePopMultiplierSphere(int id, bool p1)
{
Function.Call((Hash)0xE6869BECDD8F2403, id, p1);
}

/// <summary>
/// Makes the ped jump around like they&apos;re in a tennis match
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28A04B411933F8A6<br />
/// </para>
/// </remarks>
public static void EnableTennisMode(int /* Ped */ ped, bool toggle, bool p2)
{
Function.Call((Hash)0x28A04B411933F8A6, ped, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D5479D115290C3F<br />
/// </para>
/// </remarks>
public static bool IsTennisMode(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x5D5479D115290C3F, ped);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE266ED23311F24D4<br />
/// </para>
/// </remarks>
public static void PlayTennisSwingAnim(int /* Ped */ ped, string animDict, string animName, float p3, float p4, bool p5)
{
Function.Call((Hash)0xE266ED23311F24D4, ped, animDict, animName, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17DF68D720AA77F8<br />
/// </para>
/// </remarks>
public static bool GetTennisSwingAnimComplete(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x17DF68D720AA77F8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19BFED045C647C49<br />
/// </para>
/// </remarks>
public static bool GetTennisSwingAnimCanBeInterrupted(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x19BFED045C647C49, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE95B0C7D5BA3B96B<br />
/// </para>
/// </remarks>
public static bool GetTennisSwingAnimSwung(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xE95B0C7D5BA3B96B, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8FA9C42FC5D7C64B<br />
/// </para>
/// </remarks>
public static void PlayTennisDiveAnim(int /* Ped */ ped, int p1, float p2, float p3, float p4, bool p5)
{
Function.Call((Hash)0x8FA9C42FC5D7C64B, ped, p1, p2, p3, p4, p5);
}

/// <summary>
/// From the scripts:<br /><br />MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), &quot;ForcedStopDirection&quot;, v_E);<br /><br />Related to tennis mode.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54F157E0336A3822<br />
/// </para>
/// </remarks>
public static void SetTennisMoveNetworkSignalFloat(int /* Ped */ ped, string p1, float p2)
{
Function.Call((Hash)0x54F157E0336A3822, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x5896F2BD5683A4E1<br />
/// </para>
/// </remarks>
public static void ResetDispatchSpawnLocation()
{
Function.Call((Hash)0x5896F2BD5683A4E1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD10F442036302D50<br />
/// </para>
/// </remarks>
public static void SetDispatchSpawnLocation(float x, float y, float z)
{
Function.Call((Hash)0xD10F442036302D50, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77A84429DD9F0A15<br />
/// </para>
/// </remarks>
public static void ResetDispatchIdealSpawnDistance()
{
Function.Call((Hash)0x77A84429DD9F0A15);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FE601A64180D423<br />
/// </para>
/// </remarks>
public static void SetDispatchIdealSpawnDistance(float p0)
{
Function.Call((Hash)0x6FE601A64180D423, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB2DB0CAD13154B3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ResetDispatchTimeBetweenSpawnAttempts(int /* bug: Any */ p0)
{
Function.Call((Hash)0xEB2DB0CAD13154B3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44F7CBC1BEB3327D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDispatchTimeBetweenSpawnAttempts(int /* bug: Any */ p0, float p1)
{
Function.Call((Hash)0x44F7CBC1BEB3327D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48838ED9937A15D1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDispatchTimeBetweenSpawnAttemptsMultiplier(int /* bug: Any */ p0, float p1)
{
Function.Call((Hash)0x48838ED9937A15D1, p0, p1);
}

/// <summary>
/// To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA<br />See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x918C7B2D2FF3928B<br />
/// </para>
/// </remarks>
public static int AddDispatchSpawnAngledBlockingArea(float x1, float y1, float z1, float x2, float y2, float z2, float width)
{
return Function.Call<int>((Hash)0x918C7B2D2FF3928B, x1, y1, z1, x2, y2, z2, width);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D4259F1FEB81DA9<br />
/// </para>
/// </remarks>
public static int AddDispatchSpawnSphereBlockingArea(float x1, float y1, float x2, float y2)
{
return Function.Call<int>((Hash)0x2D4259F1FEB81DA9, x1, y1, x2, y2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x264AC28B01B353A5<br />
/// </para>
/// </remarks>
public static void RemoveDispatchSpawnBlockingArea(int p0)
{
Function.Call((Hash)0x264AC28B01B353A5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC7BFD5C1D83EA75<br />
/// </para>
/// </remarks>
public static void ResetDispatchSpawnBlockingAreas()
{
Function.Call((Hash)0xAC7BFD5C1D83EA75);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9F692D349249528<br />
/// </para>
/// </remarks>
public static void ResetWantedResponseNumPedsToSpawn()
{
Function.Call((Hash)0xD9F692D349249528);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE532EC1A63231B4F<br />
/// </para>
/// </remarks>
public static void SetWantedResponseNumPedsToSpawn(int p0, int p1)
{
Function.Call((Hash)0xE532EC1A63231B4F, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8721407EE9C3FF6<br />
/// </para>
/// </remarks>
public static void AddTacticalNavMeshPoint(float x, float y, float z)
{
Function.Call((Hash)0xB8721407EE9C3FF6, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3CD58CCA6CDA852<br />
/// </para>
/// </remarks>
public static void ClearTacticalNavMeshPoints()
{
Function.Call((Hash)0xB3CD58CCA6CDA852);
}

/// <summary>
/// Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2587A48BC88DFADF<br />
/// </para>
/// </remarks>
public static void SetRiotModeEnabled(bool toggle)
{
Function.Call((Hash)0x2587A48BC88DFADF, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA78CFA0366592FE<br />
/// </para>
/// </remarks>
public static void DisplayOnscreenKeyboardWithLongerInitialString(int p0, string windowTitle, int /* bug: structure */ p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, string defaultConcat4, string defaultConcat5, string defaultConcat6, string defaultConcat7, int maxInputLength)
{
Function.Call((Hash)0xCA78CFA0366592FE, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
}

/// <summary>
/// sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.<br /><br />NOTE: windowTitle uses text labels, and an invalid value will display nothing.<br /><br />www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474<br /><br />windowTitle&apos;s<br />-----------------<br />CELL_EMAIL_BOD  =   &quot;Enter your Eyefind message&quot;<br />CELL_EMAIL_BODE =   &quot;Message too long. Try again&quot;<br />CELL_EMAIL_BODF    =   &quot;Forbidden message. Try again&quot;<br />CELL_EMAIL_SOD    =   &quot;Enter your Eyefind subject&quot;<br />CELL_EMAIL_SODE =   &quot;Subject too long. Try again&quot;<br />CELL_EMAIL_SODF    =   &quot;Forbidden text. Try again&quot;<br />CELL_EMASH_BOD   =   &quot;Enter your Eyefind message&quot;<br />CELL_EMASH_BODE =   &quot;Message too long. Try again&quot;<br />CELL_EMASH_BODF    =   &quot;Forbidden message. Try again&quot;<br />CELL_EMASH_SOD    =   &quot;Enter your Eyefind subject&quot;<br />CELL_EMASH_SODE =   &quot;Subject too long. Try again&quot;<br />CELL_EMASH_SODF    =   &quot;Forbidden Text. Try again&quot;<br />FMMC_KEY_TIP10   =   &quot;Enter Synopsis&quot;<br />FMMC_KEY_TIP12  =   &quot;Enter Custom Team Name&quot;<br />FMMC_KEY_TIP12F =   &quot;Forbidden Text. Try again&quot;<br />FMMC_KEY_TIP12N  =   &quot;Custom Team Name&quot;<br />FMMC_KEY_TIP8 =   &quot;Enter Message&quot;<br />FMMC_KEY_TIP8F   =   &quot;Forbidden Text. Try again&quot;<br />FMMC_KEY_TIP8FS  =   &quot;Invalid Message. Try again&quot;<br />FMMC_KEY_TIP8S  =   &quot;Enter Message&quot;<br />FMMC_KEY_TIP9    =   &quot;Enter Outfit Name&quot;<br />FMMC_KEY_TIP9F   =   &quot;Invalid Outfit Name. Try again&quot;<br />FMMC_KEY_TIP9N  =   &quot;Outfit Name&quot;<br />PM_NAME_CHALL  =   &quot;Enter Challenge Name&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00DC833F2568DBF6<br />
/// </para>
/// </remarks>
public static void DisplayOnscreenKeyboard(int p0, string windowTitle, string p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, int maxInputLength)
{
Function.Call((Hash)0x00DC833F2568DBF6, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
}

/// <summary>
/// Returns the current status of the onscreen keyboard, and updates the output.<br /><br />Status Codes:<br /><br />-1: Keyboard isn&apos;t active<br />0: User still editing<br />1: User has finished editing<br />2: User has canceled editing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0CF2B696BBF945AE<br />
/// </para>
/// </remarks>
public static int UpdateOnscreenKeyboard()
{
return Function.Call<int>((Hash)0x0CF2B696BBF945AE);
}

/// <summary>
/// Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8362B09B91893647<br />
/// </para>
/// </remarks>
public static string GetOnscreenKeyboardResult()
{
return Function.Call<string>((Hash)0x8362B09B91893647);
}

/// <summary>
/// DO NOT use this as it doesn&apos;t clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.<br />Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x58A39BE597CE99CD<br />
/// </para>
/// </remarks>
public static void CancelOnscreenKeyboard()
{
Function.Call((Hash)0x58A39BE597CE99CD);
}

/// <summary>
/// p0 was always 2 in R* scripts.<br />Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3ED1438C1F5C6612<br />
/// </para>
/// </remarks>
public static void NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(int p0)
{
Function.Call((Hash)0x3ED1438C1F5C6612, p0);
}

/// <summary>
/// Appears to remove stealth kill action from memory
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6A12939F16D85BE<br />
/// </para>
/// </remarks>
public static void ActionManagerEnableAction(uint hash, bool enable)
{
Function.Call((Hash)0xA6A12939F16D85BE, hash, enable);
}

/// <summary>
/// GET_GAME_TIMER() / 1000
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x3F60413F5DF65748<br />
/// </para>
/// </remarks>
public static int GetRealWorldTime()
{
return Function.Call<int>((Hash)0x3F60413F5DF65748);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EAE0A6E978894A2<br />
/// </para>
/// </remarks>
public static void SupressRandomEventThisFrame(int eventType, bool suppress)
{
Function.Call((Hash)0x1EAE0A6E978894A2, eventType, suppress);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA66C71C98D5F2CFB<br />
/// </para>
/// </remarks>
public static void SetExplosiveAmmoThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xA66C71C98D5F2CFB, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11879CDD803D30F4<br />
/// </para>
/// </remarks>
public static void SetFireAmmoThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x11879CDD803D30F4, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF1BED81BFDC0FE0<br />
/// </para>
/// </remarks>
public static void SetExplosiveMeleeThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xFF1BED81BFDC0FE0, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57FFF03E423A4C0B<br />
/// </para>
/// </remarks>
public static void SetSuperJumpThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x57FFF03E423A4C0B, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x438822C279B73B93<br />
/// </para>
/// </remarks>
public static void SetBeastJumpThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x438822C279B73B93, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xA1183BCFEE0F93D1<br />
/// </para>
/// </remarks>
public static void SetForcedJumpThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xA1183BCFEE0F93D1, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FDDF453C0C756EC<br />
/// </para>
/// </remarks>
public static bool HasGameInstalledThisSession()
{
return Function.Call<bool>((Hash)0x6FDDF453C0C756EC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB00CA71DA386228<br />
/// </para>
/// </remarks>
public static void SetTickerJohnmarstonIsDone()
{
Function.Call((Hash)0xFB00CA71DA386228);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AA3BEFA29F03AD4<br />
/// </para>
/// </remarks>
public static bool AreProfileSettingsValid()
{
return Function.Call<bool>((Hash)0x5AA3BEFA29F03AD4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3D969D2785FFB5E<br />
/// </para>
/// </remarks>
public static void PreventArrestStateThisFrame()
{
Function.Call((Hash)0xE3D969D2785FFB5E);
}

/// <summary>
/// Sets the localplayer playerinfo state back to playing (State 0)<br /><br />States are:<br />-1: &quot;Invalid&quot;<br />0: &quot;Playing&quot;<br />1: &quot;Died&quot;<br />2: &quot;Arrested&quot;<br />3: &quot;Failed Mission&quot;<br />4: &quot;Left Game&quot;<br />5: &quot;Respawn&quot;<br />6: &quot;In MP Cutscene&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0AA53F866B3134D<br />
/// </para>
/// </remarks>
public static void ForceGameStatePlaying()
{
Function.Call((Hash)0xC0AA53F866B3134D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A60017F841A54F2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ScriptRaceInit(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0A60017F841A54F2, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1FF6BF9A63E5757F<br />
/// </para>
/// </remarks>
public static void ScriptRaceShutdown()
{
Function.Call((Hash)0x1FF6BF9A63E5757F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1BB299305C3E8C13<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ScriptRacePlayerHitCheckpoint(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x1BB299305C3E8C13, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EF5573A1F801A5C<br />
/// </para>
/// </remarks>
public static bool ScriptRaceGetPlayerSplitTime(int /* Player */ player, ref int p1, ref int p2)
{
var nativeAssistPointerVar0 = p1;
var nativeAssistPointerVar1 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8EF5573A1F801A5C, player, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
p1 = nativeAssistPointerVar0;
p2 = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92790862E36C2ADA<br />
/// </para>
/// </remarks>
public static void StartEndUserBenchmark()
{
Function.Call((Hash)0x92790862E36C2ADA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7DB36C24634F52B<br />
/// </para>
/// </remarks>
public static void StopEndUserBenchmark()
{
Function.Call((Hash)0xC7DB36C24634F52B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x437138B6A830166A<br />
/// </para>
/// </remarks>
public static void ResetEndUserBenchmark()
{
Function.Call((Hash)0x437138B6A830166A);
}

/// <summary>
/// Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37DEB0AA183FB6D8<br />
/// </para>
/// </remarks>
public static void SaveEndUserBenchmark()
{
Function.Call((Hash)0x37DEB0AA183FB6D8);
}

/// <summary>
/// Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA2F2061875EED90<br />
/// </para>
/// </remarks>
public static bool UiStartedEndUserBenchmark()
{
return Function.Call<bool>((Hash)0xEA2F2061875EED90);
}

/// <summary>
/// Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BBBD13E5041A79E<br />
/// </para>
/// </remarks>
public static bool LandingScreenStartedEndUserBenchmark()
{
return Function.Call<bool>((Hash)0x3BBBD13E5041A79E);
}

/// <summary>
/// Returns true if command line option &apos;-benchmark&apos; is set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA049A5BE0F04F2F8<br />
/// </para>
/// </remarks>
public static bool IsCommandlineEndUserBenchmark()
{
return Function.Call<bool>((Hash)0xA049A5BE0F04F2F8);
}

/// <summary>
/// Returns value of the &apos;-benchmarkIterations&apos; command line option.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4750FC27570311EC<br />
/// </para>
/// </remarks>
public static int GetBenchmarkIterations()
{
return Function.Call<int>((Hash)0x4750FC27570311EC);
}

/// <summary>
/// Returns value of the &apos;-benchmarkPass&apos; command line option.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B2366C3F2A5C8DF<br />
/// </para>
/// </remarks>
public static int GetBenchmarkPass()
{
return Function.Call<int>((Hash)0x1B2366C3F2A5C8DF);
}

/// <summary>
/// In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xE574A662ACAEFBB1<br />
/// </para>
/// </remarks>
public static void RestartGame()
{
Function.Call((Hash)0xE574A662ACAEFBB1);
}

/// <summary>
/// Exits the game and downloads a fresh social club update on next restart.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB6891F03362FB12<br />
/// </para>
/// </remarks>
public static void QuitGame()
{
Function.Call((Hash)0xEB6891F03362FB12);
}

/// <summary>
/// Hardcoded to always return true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14832BF2ABA53FC5<br />
/// </para>
/// </remarks>
public static bool HasAsyncInstallFinished()
{
return Function.Call<bool>((Hash)0x14832BF2ABA53FC5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC79AE21974B01FB2<br />
/// </para>
/// </remarks>
public static void CleanupAsyncInstall()
{
Function.Call((Hash)0xC79AE21974B01FB2);
}

/// <summary>
/// aka &quot;constrained&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x684A41975F077262<br />
/// </para>
/// </remarks>
public static bool PlmIsInConstrainedMode()
{
return Function.Call<bool>((Hash)0x684A41975F077262);
}

/// <summary>
/// Returns duration of how long the game has been in power-saving mode (aka &quot;constrained&quot;) in milliseconds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xABB2FA71C83A1B72<br />
/// </para>
/// </remarks>
public static int PlmGetConstrainedDurationMs()
{
return Function.Call<int>((Hash)0xABB2FA71C83A1B72);
}

/// <summary>
/// If toggle is true, the ped&apos;s head is shown in the pause menu<br />If toggle is false, the ped&apos;s head is not shown in the pause menu
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EBB7E87AA0DBED4<br />
/// </para>
/// </remarks>
public static void SetPlayerIsInAnimalForm(bool toggle)
{
Function.Call((Hash)0x4EBB7E87AA0DBED4, toggle);
}

/// <summary>
/// Although we don&apos;t have a jenkins hash for this one, the name is 100% confirmed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9689123E3F213AA5<br />
/// </para>
/// </remarks>
public static bool GetIsPlayerInAnimalForm()
{
return Function.Call<bool>((Hash)0x9689123E3F213AA5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D8D44ADBBA61EF2<br />
/// </para>
/// </remarks>
public static void SetPlayerIsRepeatingAMission(bool toggle)
{
Function.Call((Hash)0x9D8D44ADBBA61EF2, toggle);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23227DF0B2115469<br />
/// </para>
/// </remarks>
public static void DisableScreenDimmingThisFrame()
{
Function.Call((Hash)0x23227DF0B2115469);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD10282B6E3751BA0<br />
/// </para>
/// </remarks>
public static float GetCityDensity()
{
return Function.Call<float>((Hash)0xD10282B6E3751BA0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x693478ACBD7F18E7<br />
/// </para>
/// </remarks>
public static void UseActiveCameraForTimeslicingCentre()
{
Function.Call((Hash)0x693478ACBD7F18E7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x4B82FA6F2D624634<br />
/// </para>
/// </remarks>
public static void SetContentIdIndex(uint contentId, int index)
{
Function.Call((Hash)0x4B82FA6F2D624634, contentId, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xECF041186C5A94DC<br />
/// </para>
/// </remarks>
public static int GetContentIdIndex(uint contentId)
{
return Function.Call<int>((Hash)0xECF041186C5A94DC, contentId);
}

#endregion
#region MOBILE
/// <summary>
/// Creates a mobile phone of the specified type.<br /><br />Possible phone types:<br /><br />0 - Default phone / Michael&apos;s phone<br />1 - Trevor&apos;s phone<br />2 - Franklin&apos;s phone<br />3 - Unused police phone<br />4 - Prologue phone<br /><br />Higher values may crash your game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4E8E696C532FBC7<br />
/// </para>
/// </remarks>
public static void CreateMobilePhone(int phoneType)
{
Function.Call((Hash)0xA4E8E696C532FBC7, phoneType);
}

/// <summary>
/// Destroys the currently active mobile phone.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BC861DF703E5097<br />
/// </para>
/// </remarks>
public static void DestroyMobilePhone()
{
Function.Call((Hash)0x3BC861DF703E5097);
}

/// <summary>
/// The minimum/default is 500.0f. If you plan to make it bigger set it&apos;s position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you&apos;d need to call it everytime before you re-open the phone.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBDD322A73D6D932<br />
/// </para>
/// </remarks>
public static void SetMobilePhoneScale(float scale)
{
Function.Call((Hash)0xCBDD322A73D6D932, scale);
}

/// <summary>
/// Last parameter is unknown and always zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB779C0CA917E865<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetMobilePhoneRotation(float rotX, float rotY, float rotZ, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBB779C0CA917E865, rotX, rotY, rotZ, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CEFB61F193070AE<br />
/// </para>
/// </remarks>
public static void GetMobilePhoneRotation(ref Vector3 rotation, int /* Vehicle */ p1)
{
var nativeAssistPointerVar0 = rotation;
unsafe {
Function.Call((Hash)0x1CEFB61F193070AE, &nativeAssistPointerVar0, p1);
}
rotation = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x693A5C6D6734085B<br />
/// </para>
/// </remarks>
public static void SetMobilePhonePosition(float posX, float posY, float posZ)
{
Function.Call((Hash)0x693A5C6D6734085B, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x584FDFDA48805B86<br />
/// </para>
/// </remarks>
public static void GetMobilePhonePosition(ref Vector3 position)
{
var nativeAssistPointerVar0 = position;
unsafe {
Function.Call((Hash)0x584FDFDA48805B86, &nativeAssistPointerVar0);
}
position = nativeAssistPointerVar0;
}

/// <summary>
/// If bool Toggle = true so the mobile is hide to screen.<br />If bool Toggle = false so the mobile is show to screen.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF511F759238A5122<br />
/// </para>
/// </remarks>
public static void ScriptIsMovingMobilePhoneOffscreen(bool toggle)
{
Function.Call((Hash)0xF511F759238A5122, toggle);
}

/// <summary>
/// This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.<br /><br /><br />I can confirm the above. This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4E2813898C97A4B<br />
/// </para>
/// </remarks>
public static bool CanPhoneBeSeenOnScreen()
{
return Function.Call<bool>((Hash)0xC4E2813898C97A4B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x375A706A5C2FD084<br />
/// </para>
/// </remarks>
public static void SetMobilePhoneDofState(bool toggle)
{
Function.Call((Hash)0x375A706A5C2FD084, toggle);
}

/// <summary>
/// For move the finger of player, the value of int goes 1 at 5.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95C9E72F3D7DEC9B<br />
/// </para>
/// </remarks>
public static void CellSetInput(int direction)
{
Function.Call((Hash)0x95C9E72F3D7DEC9B, direction);
}

/// <summary>
/// if the bool &quot;Toggle&quot; is &quot;true&quot; so the phone is lean.<br />if the bool &quot;Toggle&quot; is &quot;false&quot; so the phone is not lean.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44E44169EF70138E<br />
/// </para>
/// </remarks>
public static void CellHorizontalModeToggle(bool toggle)
{
Function.Call((Hash)0x44E44169EF70138E, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDE8F069C542D126<br />
/// </para>
/// </remarks>
public static void CellCamActivate(bool p0, bool p1)
{
Function.Call((Hash)0xFDE8F069C542D126, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x015C49A93E3E086E<br />
/// </para>
/// </remarks>
public static void CellCamActivateSelfieMode(bool toggle)
{
Function.Call((Hash)0x015C49A93E3E086E, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2CCBE62CD4C91A4<br />
/// </para>
/// </remarks>
public static void CellCamActivateShallowDofMode(bool toggle)
{
Function.Call((Hash)0xA2CCBE62CD4C91A4, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B0B4AEED5B9B41C<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeSideOffsetScaling(float p0)
{
Function.Call((Hash)0x1B0B4AEED5B9B41C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53F4892D18EC90A4<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeHorzPanOffset(float p0)
{
Function.Call((Hash)0x53F4892D18EC90A4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3117D84EFA60F77B<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeVertPanOffset(float p0)
{
Function.Call((Hash)0x3117D84EFA60F77B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15E69E2802C24B8D<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeRollOffset(float p0)
{
Function.Call((Hash)0x15E69E2802C24B8D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC2890471901861C<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeDistanceScaling(float p0)
{
Function.Call((Hash)0xAC2890471901861C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD6ADE981781FCA09<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeHeadYawOffset(float p0)
{
Function.Call((Hash)0xD6ADE981781FCA09, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1E22DC13F5EEBAD<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeHeadRollOffset(float p0)
{
Function.Call((Hash)0xF1E22DC13F5EEBAD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x466DA42C89865553<br />
/// </para>
/// </remarks>
public static void CellCamSetSelfieModeHeadPitchOffset(float p0)
{
Function.Call((Hash)0x466DA42C89865553, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x439E9BC95B7E7FBE<br />
/// </para>
/// </remarks>
public static bool CellCamIsCharVisibleNoFaceCheck(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x439E9BC95B7E7FBE, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4A53E05F68B6FA1<br />
/// </para>
/// </remarks>
public static void GetMobilePhoneRenderId(ref int renderId)
{
var nativeAssistPointerVar0 = renderId;
unsafe {
Function.Call((Hash)0xB4A53E05F68B6FA1, &nativeAssistPointerVar0);
}
renderId = nativeAssistPointerVar0;
}

#endregion
#region MONEY
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DA5ECD1A56CBA6D<br />
/// </para>
/// </remarks>
public static void NetworkInitializeCash(int wallet, int bank)
{
Function.Call((Hash)0x3DA5ECD1A56CBA6D, wallet, bank);
}

/// <summary>
/// Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05A50AF38947EB8D<br />
/// </para>
/// </remarks>
public static void NetworkDeleteCharacter(int characterSlot, bool p1, bool p2)
{
Function.Call((Hash)0x05A50AF38947EB8D, characterSlot, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x821418C727FCACD7<br />
/// </para>
/// </remarks>
public static void NetworkManualDeleteCharacter(int characterSlot)
{
Function.Call((Hash)0x821418C727FCACD7, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB2456B2040A6A67<br />
/// </para>
/// </remarks>
public static bool NetworkGetPlayerIsHighEarner()
{
return Function.Call<bool>((Hash)0xFB2456B2040A6A67);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA921DED15FDF28F5<br />
/// </para>
/// </remarks>
public static void NetworkClearCharacterWallet(int characterSlot)
{
Function.Call((Hash)0xA921DED15FDF28F5, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB18DF9CB95E0105<br />
/// </para>
/// </remarks>
public static void NetworkGivePlayerJobshareCash(int amount, int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0xFB18DF9CB95E0105, amount, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56A3B51944C50598<br />
/// </para>
/// </remarks>
public static void NetworkReceivePlayerJobshareCash(int value, int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0x56A3B51944C50598, value, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C2473301B1C66BA<br />
/// </para>
/// </remarks>
public static bool NetworkCanShareJobCash()
{
return Function.Call<bool>((Hash)0x1C2473301B1C66BA);
}

/// <summary>
/// index<br />-------<br />See function sub_1005 in am_boat_taxi.ysc<br /><br />context<br />----------<br />&quot;BACKUP_VAGOS&quot;<br />&quot;BACKUP_LOST&quot;<br />&quot;BACKUP_FAMILIES&quot;<br />&quot;HIRE_MUGGER&quot;<br />&quot;HIRE_MERCENARY&quot;<br />&quot;BUY_CARDROPOFF&quot;<br />&quot;HELI_PICKUP&quot;<br />&quot;BOAT_PICKUP&quot;<br />&quot;CLEAR_WANTED&quot;<br />&quot;HEAD_2_HEAD&quot;<br />&quot;CHALLENGE&quot;<br />&quot;SHARE_LAST_JOB&quot;<br />&quot;DEFAULT&quot;<br /><br />reason<br />---------<br />&quot;NOTREACHTARGET&quot;<br />&quot;TARGET_ESCAPE&quot;<br />&quot;DELIVERY_FAIL&quot;<br />&quot;NOT_USED&quot;<br />&quot;TEAM_QUIT&quot;<br />&quot;SERVER_ERROR&quot;<br />&quot;RECEIVE_LJ_L&quot;<br />&quot;CHALLENGE_PLAYER_LEFT&quot;<br />&quot;DEFAULT&quot;<br /><br />unk<br />-----<br />Unknown bool value<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9C812CD7C46E817<br />
/// </para>
/// </remarks>
public static void NetworkRefundCash(int index, string context, string reason, bool unk)
{
Function.Call((Hash)0xF9C812CD7C46E817, index, context, reason, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18B7AE224B087E26<br />
/// </para>
/// </remarks>
public static void NetworkDeductCash(int amount, string p1, string p2, bool p3, bool p4, bool p5)
{
Function.Call((Hash)0x18B7AE224B087E26, amount, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81404F3DC124FE5B<br />
/// </para>
/// </remarks>
public static bool NetworkMoneyCanBet(int amount, bool p1, bool p2)
{
return Function.Call<bool>((Hash)0x81404F3DC124FE5B, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A54E33660DED67F<br />
/// </para>
/// </remarks>
public static bool NetworkCanBet(int amount)
{
return Function.Call<bool>((Hash)0x3A54E33660DED67F, amount);
}

/// <summary>
/// GTAO_CASINO_HOUSE<br />GTAO_CASINO_INSIDETRACK<br />GTAO_CASINO_LUCKYWHEEL<br />GTAO_CASINO_BLACKJACK<br />GTAO_CASINO_ROULETTE<br />GTAO_CASINO_SLOTS<br />GTAO_CASINO_PURCHASE_CHIPS<br /><br />NETWORK_C*
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x158C16F5E4CF41F8<br />
/// </para>
/// </remarks>
public static bool NetworkCasinoCanBet(uint hash)
{
return Function.Call<bool>((Hash)0x158C16F5E4CF41F8, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x394DCDB9E836B7A9<br />
/// </para>
/// </remarks>
public static bool NetworkCasinoCanBetPvc()
{
return Function.Call<bool>((Hash)0x394DCDB9E836B7A9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xF62F6D9528358FE4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCasinoCanBetAmount(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xF62F6D9528358FE4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x8968D4D8C6C40C11<br />
/// </para>
/// </remarks>
public static bool NetworkCasinoCanBuyChipsPvc()
{
return Function.Call<bool>((Hash)0x8968D4D8C6C40C11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x3BD101471C7F9EEC<br />
/// </para>
/// </remarks>
public static bool NetworkCasinoBuyChips(int p0, int p1)
{
return Function.Call<bool>((Hash)0x3BD101471C7F9EEC, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xED44897CB336F480<br />
/// </para>
/// </remarks>
public static bool NetworkCasinoSellChips(int p0, int p1)
{
return Function.Call<bool>((Hash)0xED44897CB336F480, p0, p1);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD0F5B5D932AE473<br />
/// </para>
/// </remarks>
public static void NetworkDeferCashTransactionsUntilShopSave()
{
Function.Call((Hash)0xCD0F5B5D932AE473);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x9777734DAD16992F<br />
/// </para>
/// </remarks>
public static bool CanPayAmountToBoss(int p0, int p1, int amount, ref int p3)
{
var nativeAssistPointerVar0 = p3;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x9777734DAD16992F, p0, p1, amount, &nativeAssistPointerVar0);
}
p3 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED1517D3AF17C698<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromPickup(int amount)
{
Function.Call((Hash)0xED1517D3AF17C698, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x718FBBF67414FA36<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromCashingOut(int amount)
{
Function.Call((Hash)0x718FBBF67414FA36, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA03D4ACE0A3284CE<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromGangattackPickup(int amount)
{
Function.Call((Hash)0xA03D4ACE0A3284CE, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xFA700D8A9905F78A<br />
/// </para>
/// </remarks>
public static void NetworkEarnAssassinateTargetKilled(int amount)
{
Function.Call((Hash)0xFA700D8A9905F78A, amount);
}

/// <summary>
/// For the money bags that drop a max of $40,000. Often called 40k bags.<br /><br />Most likely NETWORK_EARN_FROM_ROB***
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF514621E8EA463D0<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromRobArmoredCars(int amount)
{
Function.Call((Hash)0xF514621E8EA463D0, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1CC1B9EC3007A2A<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromCrateDrop(int amount)
{
Function.Call((Hash)0xB1CC1B9EC3007A2A, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x827A5BA1A44ACA6D<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromBetting(int amount, string p1)
{
Function.Call((Hash)0x827A5BA1A44ACA6D, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2CC4836834E8A98<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromJob(int amount, string p1)
{
Function.Call((Hash)0xB2CC4836834E8A98, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xDEBBF584665411D0<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromJobx2(int amount, string p1)
{
Function.Call((Hash)0xDEBBF584665411D0, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xC8407624CEF2354B<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromPremiumJob(int amount, string p1)
{
Function.Call((Hash)0xC8407624CEF2354B, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61326EE6DF15B0CA<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromBendJob(int amount, string heistHash)
{
Function.Call((Hash)0x61326EE6DF15B0CA, amount, heistHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B171E6B2F64D8DF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromChallengeWin(int /* bug: Any */ p0, int /* bug: structure */ p1, bool p2)
{
Function.Call((Hash)0x2B171E6B2F64D8DF, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x131BB5DA15453ACF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromBounty(int amount, int /* bug: structure */ gamerHandle, int /* bug: structure */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x131BB5DA15453ACF, amount, gamerHandle, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF92A014A634442D6<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromImportExport(int amount, uint modelHash)
{
Function.Call((Hash)0xF92A014A634442D6, amount, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45B8154E077D9E4D<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromHoldups(int amount)
{
Function.Call((Hash)0x45B8154E077D9E4D, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x849648349D77F5C5<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromProperty(int amount, uint propertyName)
{
Function.Call((Hash)0x849648349D77F5C5, amount, propertyName);
}

/// <summary>
/// DSPORT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x515B4A22E4D3C6D7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromAiTargetKill(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x515B4A22E4D3C6D7, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4337511FA8221D36<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromNotBadsport(int amount)
{
Function.Call((Hash)0x4337511FA8221D36, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02CE1D6AC0FC73EA<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromRockstar(int amount)
{
Function.Call((Hash)0x02CE1D6AC0FC73EA, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB539BD8A4C1EECF8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7)
{
Function.Call((Hash)0xB539BD8A4C1EECF8, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F4D00167E41E0AD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromPersonalVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
Function.Call((Hash)0x3F4D00167E41E0AD, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// type either Monthly,Weekly,Daily
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EA318C91C1A8786<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromDailyObjectives(int amount, string type, int characterSlot)
{
Function.Call((Hash)0x6EA318C91C1A8786, amount, type, characterSlot);
}

/// <summary>
/// Example for p1: &quot;AM_DISTRACT_COPS&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB6DB092FBAE29E6<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromAmbientJob(int p0, string p1, int /* bug: structure */ p2)
{
Function.Call((Hash)0xFB6DB092FBAE29E6, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6816FB4416760775<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromJobBonus(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2)
{
Function.Call((Hash)0x6816FB4416760775, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xFA009A62990671D4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromCriminalMastermind(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xFA009A62990671D4, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x9D4FDBB035229669<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnHeistAward(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x9D4FDBB035229669, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x11B0A20C493F7E36<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFirstTimeBonus(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x11B0A20C493F7E36, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xCDA1C62BE2777802<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnGoon(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xCDA1C62BE2777802, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x08B0CA7A6AB3AC32<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnBoss(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x08B0CA7A6AB3AC32, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x0CB1BE0633C024A8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAgency(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0CB1BE0633C024A8, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x3E4ADAFF1830F146<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromWarehouse(int amount, int id)
{
Function.Call((Hash)0x3E4ADAFF1830F146, amount, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xECA658CE2A4E5A72<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromContraband(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0xECA658CE2A4E5A72, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x84C0116D012E8FC2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromDestroyingContraband(int /* bug: Any */ p0)
{
Function.Call((Hash)0x84C0116D012E8FC2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x6B7E4FB50D5F3D65<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromSmugglerWork(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x6B7E4FB50D5F3D65, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x31BA138F6304FB9F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromHangarTrade(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x31BA138F6304FB9F, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x55A1E095DB052FA5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnPurchaseClubHouse(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x55A1E095DB052FA5, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x8586789730B10CAF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromBusinessProduct(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x8586789730B10CAF, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xEDEAD9A91EC768B3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromVehicleExport(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xEDEAD9A91EC768B3, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xDEE612F2D71B0308<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnSmugglerAgency(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xDEE612F2D71B0308, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xF6B170F9A02E9E87<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnBountyHunterReward(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF6B170F9A02E9E87, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x42FCE14F50F27291<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromBusinessBattle(int /* bug: Any */ p0)
{
Function.Call((Hash)0x42FCE14F50F27291, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xA75EAC69F59E96E7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromClubManagementParticipation(int /* bug: Any */ p0, int p1)
{
Function.Call((Hash)0xA75EAC69F59E96E7, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xC5156361F26E2212<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromFmbbPhonecallMission(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC5156361F26E2212, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x0B39CF0D53F1C883<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromBusinessHubSell(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x0B39CF0D53F1C883, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x1FDA0AA679C9919B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromFmbbBossWork(int /* bug: Any */ p0)
{
Function.Call((Hash)0x1FDA0AA679C9919B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xFFFBA1B1F7C0B6F4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFmbbWageBonus(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFFFBA1B1F7C0B6F4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB3CAA6B422164DA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCanSpendMoney(int /* bug: Any */ p0, bool p1, bool p2, bool p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0xAB3CAA6B422164DA, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7303E27CC6532080<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCanSpendMoney2(int /* bug: Any */ p0, bool p1, bool p2, bool p3, int /* bug: structure */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
return Function.Call<bool>((Hash)0x7303E27CC6532080, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0077C797F66A355<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBuyItem(int amount, uint item, int /* bug: Any */ p2, int /* bug: Any */ p3, bool p4, string item_name, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, bool p9)
{
Function.Call((Hash)0xF0077C797F66A355, amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17C3A7D31EAE39F9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentTaxi(int amount, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x17C3A7D31EAE39F9, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FD5ED82CBBE9989<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkPayEmployeeWage(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x5FD5ED82CBBE9989, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9346E14F2AF74D46<br />
/// </para>
/// </remarks>
public static void NetworkPayMatchEntryFee(int amount, string matchId, bool p2, bool p3)
{
Function.Call((Hash)0x9346E14F2AF74D46, amount, matchId, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C436FD11FFA692F<br />
/// </para>
/// </remarks>
public static void NetworkSpentBetting(int amount, int p1, string matchId, bool p3, bool p4)
{
Function.Call((Hash)0x1C436FD11FFA692F, amount, p1, matchId, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xD99DB210089617FE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentWager(int /* bug: Any */ p0, int /* bug: Any */ p1, int amount)
{
Function.Call((Hash)0xD99DB210089617FE, p0, p1, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE99784E4467689C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentInStripclub(int /* bug: Any */ p0, bool p1, int /* bug: Any */ p2, bool p3)
{
Function.Call((Hash)0xEE99784E4467689C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9B067E55253E3DD<br />
/// </para>
/// </remarks>
public static void NetworkBuyHealthcare(int cost, bool p1, bool p2)
{
Function.Call((Hash)0xD9B067E55253E3DD, cost, p1, p2);
}

/// <summary>
/// p1 = 0 (always)<br />p2 = 1 (always)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x763B4BD305338F19<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBuyAirstrike(int cost, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x763B4BD305338F19, cost, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3EDDAA42411D3B9<br />
/// </para>
/// </remarks>
public static void NetworkBuyBackupGang(int p0, int p1, bool p2, bool p3)
{
Function.Call((Hash)0xA3EDDAA42411D3B9, p0, p1, p2, p3);
}

/// <summary>
/// p1 = 0 (always)<br />p2 = 1 (always)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81AA4610E3FD3A69<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBuyHeliStrike(int cost, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x81AA4610E3FD3A69, cost, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB162DC95C0A3317B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentAmmoDrop(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xB162DC95C0A3317B, p0, p1, p2, p3);
}

/// <summary>
/// p1 is just an assumption. p2 was false and p3 was true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7B718E197453F2D9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBuyBounty(int amount, int /* Player */ victim, bool p2, bool p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x7B718E197453F2D9, amount, victim, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x650A08A280870AF6<br />
/// </para>
/// </remarks>
public static void NetworkBuyProperty(int cost, uint propertyName, bool p2, bool p3)
{
Function.Call((Hash)0x650A08A280870AF6, cost, propertyName, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75AF80E61248EEBD<br />
/// </para>
/// </remarks>
public static void NetworkBuySmokes(int p0, bool p1, bool p2)
{
Function.Call((Hash)0x75AF80E61248EEBD, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7BF1D73DB2ECA492<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentHeliPickup(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x7BF1D73DB2ECA492, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x524EE43A37232C00<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBoatPickup(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x524EE43A37232C00, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6DD8458CE24012C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBullShark(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xA6DD8458CE24012C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x289016EC778D60E0<br />
/// </para>
/// </remarks>
public static void NetworkSpentCashDrop(int amount, bool p1, bool p2)
{
Function.Call((Hash)0x289016EC778D60E0, amount, p1, p2);
}

/// <summary>
/// Only used once in a script (am_contact_requests)<br />p1 = 0<br />p2 = 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE404BFB981665BF0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentHireMugger(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE404BFB981665BF0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x995A65F15F581359<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentRobbedByMugger(int amount, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x995A65F15F581359, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7B80E2BF9D80BD6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentHireMercenary(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE7B80E2BF9D80BD6, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1B13771A843C4F6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyWantedlevel(int /* bug: Any */ p0, int /* bug: structure */ p1, bool p2, bool p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xE1B13771A843C4F6, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA628A745E2275C5D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyOfftheradar(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xA628A745E2275C5D, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E176F1B18BC0637<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyRevealPlayers(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x6E176F1B18BC0637, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC03C719DB2F4306<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentCarwash(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, bool p3, bool p4)
{
Function.Call((Hash)0xEC03C719DB2F4306, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B38ECB05A63A685<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentCinema(int /* bug: Any */ p0, int /* bug: Any */ p1, bool p2, bool p3)
{
Function.Call((Hash)0x6B38ECB05A63A685, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FE61782AD94CC09<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentTelescope(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x7FE61782AD94CC09, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9B86B9872039763<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentHoldups(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0xD9B86B9872039763, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D3A430D1A809179<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyPassiveMode(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x6D3A430D1A809179, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA230C9682556CF1<br />
/// </para>
/// </remarks>
public static void NetworkSpentBankInterest(int p0, bool p1, bool p2)
{
Function.Call((Hash)0xCA230C9682556CF1, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB21B89501CFAC79E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentProstitutes(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0xB21B89501CFAC79E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x812F5488B1B2A299<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentArrestBail(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x812F5488B1B2A299, p0, p1, p2);
}

/// <summary>
/// According to how I understood this in the freemode script alone,<br />The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it&apos;s gonna charge you for that specific vehicle model.<br /><br />The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.<br /><br />The third parameter is the network handle as they call their little struct&lt;13&gt; func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, &quot;Previous_Owner&quot;).<br /><br />The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.<br /><br />The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,<br />bool hasTheMoney = MONEY::_GET_BANK_BALANCE() &lt; carCost.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FF28D88C766E3E8<br />
/// </para>
/// </remarks>
public static void NetworkSpentPayVehicleInsurancePremium(int amount, uint vehicleModel, int /* bug: structure */ gamerHandle, bool notBankrupt, bool hasTheMoney)
{
Function.Call((Hash)0x9FF28D88C766E3E8, amount, vehicleModel, gamerHandle, notBankrupt, hasTheMoney);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACDE7185B374177C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentCallPlayer(int /* bug: Any */ p0, int /* bug: structure */ p1, bool p2, bool p3)
{
Function.Call((Hash)0xACDE7185B374177C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29B260B84947DFCC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBounty(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x29B260B84947DFCC, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A445B64ED7ABEB5<br />
/// </para>
/// </remarks>
public static void NetworkSpentFromRockstar(int p0, bool p1, bool p2)
{
Function.Call((Hash)0x6A445B64ED7ABEB5, p0, p1, p2);
}

/// <summary>
/// Hardcoded to return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B5016A6433A68C5<br />
/// </para>
/// </remarks>
public static int NetworkSpendEarnedFromBankAndWallets(int amount)
{
return Function.Call<int>((Hash)0x9B5016A6433A68C5, amount);
}

/// <summary>
/// This isn&apos;t a hash collision.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20194D48EAEC9A41<br />
/// </para>
/// </remarks>
public static string ProcessCashGift(ref int p0, ref int p1, string p2)
{
var nativeAssistPointerVar0 = p0;
var nativeAssistPointerVar1 = p1;
string retVal;
unsafe {
retVal = Function.Call<string>((Hash)0x20194D48EAEC9A41, &nativeAssistPointerVar0, &nativeAssistPointerVar1, p2);
}
p0 = nativeAssistPointerVar0;
p1 = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xCD4D66B43B1DD28D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentMoveSubmarine(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xCD4D66B43B1DD28D, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C99101F7FCE2EE5<br />
/// </para>
/// </remarks>
public static void NetworkSpentPlayerHealthcare(int p0, int p1, bool p2, bool p3)
{
Function.Call((Hash)0x7C99101F7FCE2EE5, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5BB406F4E04019F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentNoCops(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xD5BB406F4E04019F, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x948705F6F9C50824<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentCargoSourcing(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x948705F6F9C50824, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8204DA7934DF3155<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentRequestJob(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x8204DA7934DF3155, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D26502BB97BFE62<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentRequestHeist(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x9D26502BB97BFE62, p0, p1, p2, p3);
}

/// <summary>
/// The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.<br /><br />The last 3 parameters are, <br />2,0,1 in the am_ferriswheel.c<br />1,0,1 in the am_rollercoaster.c<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A7B3952DD64D2B5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBuyFairgroundRide(int amount, int /* bug: Any */ p1, bool p2, bool p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x8A7B3952DD64D2B5, amount, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C4FCCD2E4DEB394<br />
/// </para>
/// </remarks>
public static bool NetworkEconomyHasFixedCrazyNumbers()
{
return Function.Call<bool>((Hash)0x7C4FCCD2E4DEB394);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28F174A67B8D0C2F<br />
/// </para>
/// </remarks>
public static void NetworkSpentJobSkip(int amount, string matchId, bool p2, bool p3)
{
Function.Call((Hash)0x28F174A67B8D0C2F, amount, matchId, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xFFBE02CD385356BD<br />
/// </para>
/// </remarks>
public static bool NetworkSpentBossGoon(int amount, bool p1, bool p2)
{
return Function.Call<bool>((Hash)0xFFBE02CD385356BD, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x08A1B82B91900682<br />
/// </para>
/// </remarks>
public static void NetworkSpendGoon(int p0, int p1, int amount)
{
Function.Call((Hash)0x08A1B82B91900682, p0, p1, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xDBC966A01C02BCA7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBoss(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xDBC966A01C02BCA7, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xE7DF4E0545DFB56E<br />
/// </para>
/// </remarks>
public static void NetworkSpentMoveYacht(int amount, bool p1, bool p2)
{
Function.Call((Hash)0xE7DF4E0545DFB56E, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xFC4EE00A7B3BFB76<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentRenameOrganization(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xFC4EE00A7B3BFB76, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x30FD873ECE50E9F6<br />
/// </para>
/// </remarks>
public static void NetworkBuyContrabandMission(int p0, int p1, uint p2, bool p3, bool p4)
{
Function.Call((Hash)0x30FD873ECE50E9F6, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x112209CE0290C03A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaServiceHeli(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x112209CE0290C03A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xED5FD7AF10F5E262<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaServiceVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xED5FD7AF10F5E262, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x0D30EB83668E63C5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaServiceSnack(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0D30EB83668E63C5, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xB49ECA122467D05F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaServiceDancer(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xB49ECA122467D05F, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xE23ADC6FCB1F29AE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaServiceImpound(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xE23ADC6FCB1F29AE, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x0FE8E1FCD2B86B33<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPaHeliPickup(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0FE8E1FCD2B86B33, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x69EF772B192614C1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseOfficeProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x69EF772B192614C1, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x8E243837643D9583<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeOfficeProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x8E243837643D9583, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xBD0EFB25CCA8F97A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseWarehouseProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBD0EFB25CCA8F97A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xA95F667A755725DA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeWarehouseProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xA95F667A755725DA, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x33981D6804E62F49<br />
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseImpexpWarehouseProperty(int amount, int /* bug: structure */ data, bool p2, bool p3)
{
Function.Call((Hash)0x33981D6804E62F49, amount, data, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x4128464231E3CA0B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeImpexpWarehouseProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x4128464231E3CA0B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x2FAB6614CE22E196<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentTradeImpexpWarehouseProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2FAB6614CE22E196, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x05F04155A226FBBF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentOrderWarehouseVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x05F04155A226FBBF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xE8B0B270B6E7C76E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentOrderBodyguardVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE8B0B270B6E7C76E, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x5BCDE0F640C773D2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentJukebox(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x5BCDE0F640C773D2, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x998E18CEB44487FC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseClubHouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x998E18CEB44487FC, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xFA07759E6FDDD7CF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeClubHouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xFA07759E6FDDD7CF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x6FD97159FE3C971A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseBusinessProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x6FD97159FE3C971A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x675D19C6067CAE08<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeBusinessProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x675D19C6067CAE08, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xA51B086B0B2C0F7A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentTradeBusinessProperty(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xA51B086B0B2C0F7A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xD7CCCBA28C4ECAF0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentMcAbility(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xD7CCCBA28C4ECAF0, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x0035BB914316F1E3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPayBusinessSupplies(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0035BB914316F1E3, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x5F456788B05FAEAC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentChangeAppearance(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x5F456788B05FAEAC, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xA75CCF58A60A5FD1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentVehicleExportMods(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0xA75CCF58A60A5FD1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xB4C2EC463672474E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseOfficeGarage(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xB4C2EC463672474E, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x2AFC2D19B50797F2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeOfficeGarage(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2AFC2D19B50797F2, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xC1952F3773BA18FE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentImportExportRepair(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xC1952F3773BA18FE, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xCCB339CC970452DA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseHangar(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xCCB339CC970452DA, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x615EB504B0788DAF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeHangar(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x615EB504B0788DAF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xB18AC2ECBB15CB6A<br />
/// </para>
/// </remarks>
public static void NetworkSpentHangarUtilityCharges(int amount, bool p1, bool p2)
{
Function.Call((Hash)0xB18AC2ECBB15CB6A, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xB1F1346FD57685D7<br />
/// </para>
/// </remarks>
public static void NetworkSpentHangarStaffCharges(int amount, bool p1, bool p2)
{
Function.Call((Hash)0xB1F1346FD57685D7, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xAC272C0AE01B4BD8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyTruck(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xAC272C0AE01B4BD8, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x365E877C61D6988B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeTruck(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x365E877C61D6988B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x12D148D26538D0F9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyBunker(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x12D148D26538D0F9, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0C82D21A77C22D49<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpradeBunker(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0C82D21A77C22D49, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x9251B6ABF2D0A5B4<br />
/// </para>
/// </remarks>
public static void NetworkEarnFromSellBunker(int amount, uint bunkerHash)
{
Function.Call((Hash)0x9251B6ABF2D0A5B4, amount, bunkerHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x5D97630A8A0EF123<br />
/// </para>
/// </remarks>
public static void NetworkSpentBallisticEquipment(int amount, bool p1, bool p2)
{
Function.Call((Hash)0x5D97630A8A0EF123, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x7A5349B773584675<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnRdrBonus(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0x7A5349B773584675, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x35F8DA0E8A31EF1B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnWagePayment(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0x35F8DA0E8A31EF1B, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x005ACA7100BD101D<br />
/// </para>
/// </remarks>
public static void NetworkEarnWagePaymentBonus(int amount)
{
Function.Call((Hash)0x005ACA7100BD101D, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x4EA3F425C7744D21<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyBase(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x4EA3F425C7744D21, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x3DD3F33A5D55EA6F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeBase(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x3DD3F33A5D55EA6F, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0CCE73BC7A11E885<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentBuyTiltrotor(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x0CCE73BC7A11E885, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x165E135D6DFA2907<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeTiltrotor(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x165E135D6DFA2907, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x5BBBD92186E1F1C5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentEmployAssassins(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x5BBBD92186E1F1C5, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x771ADB0E7635B7BF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendGangopsCannon(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x771ADB0E7635B7BF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xDA947AE8880D5C18<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendGangopsSkipMission(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xDA947AE8880D5C18, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x487009DD91D93429<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCasinoHeistSkipMission(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x487009DD91D93429, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0E1E2FF3F4EC11AA<br />
/// </para>
/// </remarks>
public static void NetworkEarnSellBase(int amount, uint baseNameHash)
{
Function.Call((Hash)0x0E1E2FF3F4EC11AA, amount, baseNameHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x5B669CF2299A271F<br />
/// </para>
/// </remarks>
public static void NetworkEarnTargetRefund(int amount, int p1)
{
Function.Call((Hash)0x5B669CF2299A271F, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2DCB19ABAB0380A8<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsWages(int amount, int p1)
{
Function.Call((Hash)0x2DCB19ABAB0380A8, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x15BB2A5C757EB91F<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsWagesBonus(int amount, int p1)
{
Function.Call((Hash)0x15BB2A5C757EB91F, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xCAC672087B4A24AB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnDarChallenge(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0xCAC672087B4A24AB, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x128A747F4A230952<br />
/// </para>
/// </remarks>
public static void NetworkEarnDoomsdayFinaleBonus(int amount, uint vehicleHash)
{
Function.Call((Hash)0x128A747F4A230952, amount, vehicleHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xA9A31475F530DFDA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnGangopsAward(int amount, string unk, int /* bug: Any */ p2)
{
Function.Call((Hash)0xA9A31475F530DFDA, amount, unk, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2597A0D4A4FC2C77<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsElite(int amount, string unk, int actIndex)
{
Function.Call((Hash)0x2597A0D4A4FC2C77, amount, unk, actIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x1B882107C23A9022<br />
/// </para>
/// </remarks>
public static void NetworkServiceEarnGangopsRivalDelivery(int earnedMoney)
{
Function.Call((Hash)0x1B882107C23A9022, earnedMoney);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xA19EC0786E326E06<br />
/// </para>
/// </remarks>
public static void NetworkSpendGangopsStartStrand(int type, int amount, bool p2, bool p3)
{
Function.Call((Hash)0xA19EC0786E326E06, type, amount, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x5ECE6FD7B4EC8D6A<br />
/// </para>
/// </remarks>
public static void NetworkSpendGangopsTripSkip(int amount, bool p1, bool p2)
{
Function.Call((Hash)0x5ECE6FD7B4EC8D6A, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xED26584F6BDCBBFD<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsPrepParticipation(int amount)
{
Function.Call((Hash)0xED26584F6BDCBBFD, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xA9160796D47A2CF8<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsSetup(int amount, string unk)
{
Function.Call((Hash)0xA9160796D47A2CF8, amount, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x1C121FC9545E0D52<br />
/// </para>
/// </remarks>
public static void NetworkEarnGangopsFinale(int amount, string unk)
{
Function.Call((Hash)0x1C121FC9545E0D52, amount, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2A7CEC72C3443BCC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendGangopsRepairCost(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x2A7CEC72C3443BCC, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xE0F82D68C7039158<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnNightclub(int /* bug: Any */ p0)
{
Function.Call((Hash)0xE0F82D68C7039158, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xB4DEAE67F35E2ACD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnNightclubDancing(int /* bug: Any */ p0)
{
Function.Call((Hash)0xB4DEAE67F35E2ACD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xFDD8D2440DAF1590<br />
/// </para>
/// </remarks>
public static void NetworkEarnBbEventBonus(int amount)
{
Function.Call((Hash)0xFDD8D2440DAF1590, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x2A93C46AAB1EACC9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseHackerTruck(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2A93C46AAB1EACC9, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x226C284C830D0CA8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeHackerTruck(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x226C284C830D0CA8, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xE8815FE993896AD3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnHackerTruck(int /* bug: Any */ p0, int amount, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE8815FE993896AD3, p0, amount, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xED76D195E6E3BF7F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentPurchaseNightclubAndWarehouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xED76D195E6E3BF7F, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x1DC9B749E7AE282B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentUpgradeNightclubAndWarehouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x1DC9B749E7AE282B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xC6E74CF8C884C880<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnNightclubAndWarehouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0xC6E74CF8C884C880, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x65482BFD0923C8A1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendNightclubAndWarehouse(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x65482BFD0923C8A1, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xE284D46FFDB82E36<br />
/// </para>
/// </remarks>
public static void NetworkSpentRdrHatchetBonus(int amount, bool p1, bool p2)
{
Function.Call((Hash)0xE284D46FFDB82E36, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x876056684281655D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentNightclubEntryFee(int /* Player */ player, int amount, int /* bug: Any */ p1, bool p2, bool p3)
{
Function.Call((Hash)0x876056684281655D, player, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xDD21B016E4289465<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendNightclubBarDrink(int amount, int /* bug: Any */ p1, bool p2, bool p3)
{
Function.Call((Hash)0xDD21B016E4289465, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x1BEA0CD93470BB1F<br />
/// </para>
/// </remarks>
public static void NetworkSpendBountyHunterMission(int amount, bool p1, bool p2)
{
Function.Call((Hash)0x1BEA0CD93470BB1F, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xF6C8A544E4CF14FC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentRehireDj(int amount, int /* bug: Any */ p1, bool p2, bool p3)
{
Function.Call((Hash)0xF6C8A544E4CF14FC, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x14EAEA58F93B55AF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpentArenaJoinSpectator(int amount, int /* bug: Any */ p1, bool p2, bool p3)
{
Function.Call((Hash)0x14EAEA58F93B55AF, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xE08256F972C7BB2C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnArenaSkillLevelProgression(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE08256F972C7BB2C, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x0F99F70C61F14619<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnArenaCareerProgression(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0x0F99F70C61F14619, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xE5F5A060439C2F5D<br />
/// </para>
/// </remarks>
public static void NetworkSpendMakeItRain(int amount, bool p1, bool p2)
{
Function.Call((Hash)0xE5F5A060439C2F5D, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x40D5DA9550B7CB46<br />
/// </para>
/// </remarks>
public static void NetworkSpendBuyArena(int amount, bool p1, bool p2, string p3)
{
Function.Call((Hash)0x40D5DA9550B7CB46, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x037ABB06825D7AB1<br />
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeArena(int amount, bool p1, bool p2, string p3)
{
Function.Call((Hash)0x037ABB06825D7AB1, amount, p1, p2, p3);
}

/// <summary>
/// type either, 1 for cam spectate, 2 for drone
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x7049BF858601DC0F<br />
/// </para>
/// </remarks>
public static void NetworkSpendArenaSpectatorBox(int amount, int type, bool p2, bool p3)
{
Function.Call((Hash)0x7049BF858601DC0F, amount, type, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x9A5BD1D0000B339C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSpinTheWheelPayment(int amount, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0x9A5BD1D0000B339C, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x676C48776CACBB5A<br />
/// </para>
/// </remarks>
public static void NetworkEarnSpinTheWheelCash(int amount)
{
Function.Call((Hash)0x676C48776CACBB5A, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x619496D837EFD920<br />
/// </para>
/// </remarks>
public static void NetworkSpendArenaPremium(int amount, bool p1, bool p2)
{
Function.Call((Hash)0x619496D837EFD920, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x631F1CB8FB4130AA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnArenaWar(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x631F1CB8FB4130AA, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x5E7AE8AABE8B7C0D<br />
/// </para>
/// </remarks>
public static void NetworkEarnArenaWarAssassinateTarget(int amount)
{
Function.Call((Hash)0x5E7AE8AABE8B7C0D, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xA82959062361B259<br />
/// </para>
/// </remarks>
public static void NetworkEarnArenaWarEventCargo(int amount)
{
Function.Call((Hash)0xA82959062361B259, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xDFF49EE984E7AAE8<br />
/// </para>
/// </remarks>
public static void NetworkEarnRcTimeTrial(int amount)
{
Function.Call((Hash)0xDFF49EE984E7AAE8, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x5128DF14A5BB86FC<br />
/// </para>
/// </remarks>
public static void NetworkEarnDailyObjectiveEvent(int amount)
{
Function.Call((Hash)0x5128DF14A5BB86FC, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xFBBE0570EDF39D46<br />
/// </para>
/// </remarks>
public static void NetworkSpendCasinoMembership(int amount, bool p1, bool p2, int p3)
{
Function.Call((Hash)0xFBBE0570EDF39D46, amount, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x34A6FC4D06C4DA0F<br />
/// </para>
/// </remarks>
public static void NetworkSpendBuyCasino(int amount, bool p1, bool p2, int /* bug: structure */ data)
{
Function.Call((Hash)0x34A6FC4D06C4DA0F, amount, p1, p2, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x4740D62BC1B4EBEA<br />
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeCasino(int amount, bool p1, bool p2, int /* bug: structure */ data)
{
Function.Call((Hash)0x4740D62BC1B4EBEA, amount, p1, p2, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x88BF9B612B84D3C3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCasinoGeneric(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x88BF9B612B84D3C3, amount, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x0819DB99FD2FBBD8<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoTimeTrialWin(int amount)
{
Function.Call((Hash)0x0819DB99FD2FBBD8, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x5517F90043466049<br />
/// </para>
/// </remarks>
public static void NetworkEarnCollectablesActionFigures(int amount)
{
Function.Call((Hash)0x5517F90043466049, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x83AD64F53F4E9483<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoCollectableCompletedCollection(int amount)
{
Function.Call((Hash)0x83AD64F53F4E9483, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x8BCB27A057DF7B7F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnSellPrizeVehicle(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x8BCB27A057DF7B7F, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x566FD402B25787DE<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoMissionReward(int amount)
{
Function.Call((Hash)0x566FD402B25787DE, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xAC95ED552157E092<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoStoryMissionReward(int amount)
{
Function.Call((Hash)0xAC95ED552157E092, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x09E8F18641BE2575<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoMissionParticipation(int amount)
{
Function.Call((Hash)0x09E8F18641BE2575, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x973A9781A34F8DEB<br />
/// </para>
/// </remarks>
public static void NetworkEarnCasinoAward(int amount, uint hash)
{
Function.Call((Hash)0x973A9781A34F8DEB, amount, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x870289A558348378<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBuyArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x870289A558348378, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x5574637681911FDA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x5574637681911FDA, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xD30E8392F407C328<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCasinoHeist(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9, int /* bug: Any */ p10)
{
Function.Call((Hash)0xD30E8392F407C328, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xB5B58E24868CB09E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendArcadeMgmt(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xB5B58E24868CB09E, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xEAD3D81F2C3A1458<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendPlayArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xEAD3D81F2C3A1458, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x43AA7FAC4E6D6687<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x43AA7FAC4E6D6687, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x72E7C7B9615FA3C3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCasinoHeist(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x72E7C7B9615FA3C3, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x4C3B75694F7E0D9C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnUpgradeArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x4C3B75694F7E0D9C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xD29334ED1A256DBF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnArcade(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xD29334ED1A256DBF, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xA95CFB4E02390842<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCollectables(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xA95CFB4E02390842, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x0DD362F14F18942A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnChallenge(int amount, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x0DD362F14F18942A, amount, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x3EC7471E6909798A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCasinoHeistAwards(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x3EC7471E6909798A, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x84FF63BD4966F33D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCollectableItem(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0x84FF63BD4966F33D, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x5C9B198AF5A54FA6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCollectableCompletedCollection(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0x5C9B198AF5A54FA6, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xDE68E30D89F97132<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnYatchMission(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0xDE68E30D89F97132, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xE2E244AB823B4483<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnDispatchCall(int amount, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE2E244AB823B4483, amount, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x54ABA22FA6371249<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBeachParty(int /* bug: Any */ p0)
{
Function.Call((Hash)0x54ABA22FA6371249, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x6C8BC1488527AAAB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSubmarine(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x6C8BC1488527AAAB, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xC991C255AA6D90B2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCasinoClub(int amount1, int /* bug: Any */ p1, bool p2, int /* bug: Any */ p3, int p4, int p5, int p6, int amount2, int /* bug: Any */ p8)
{
Function.Call((Hash)0xC991C255AA6D90B2, amount1, p1, p2, p3, p4, p5, p6, amount2, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x90CD7C6871FBF1B4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBuySub(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x90CD7C6871FBF1B4, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x89049A84065CE68E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeSub(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x89049A84065CE68E, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xE86689E5F82DE429<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendIslandHeist(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE86689E5F82DE429, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xD21D111C46BA9F15<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnIslandHeist(int amount1, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int amount2, int p5)
{
Function.Call((Hash)0xD21D111C46BA9F15, amount1, p1, p2, p3, amount2, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xA51338E0DCCD4065<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnBeachPartyLostFound(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xA51338E0DCCD4065, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xE2BB399D90942091<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFromIslandHeistDjMission(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE2BB399D90942091, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x1464E17207CD36E2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCarClubMembership(int amount1, int /* bug: Any */ p1, int /* bug: Any */ p2, int amount2, int /* bug: Any */ p4)
{
Function.Call((Hash)0x1464E17207CD36E2, amount1, p1, p2, amount2, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x925227803A0EAA1B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCarClubBar(int /* bug: Any */ p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x925227803A0EAA1B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x9BEA350D7C48061B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendAutoshopModify(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x9BEA350D7C48061B, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xD1E46824E6FB92B5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCarClubTakeover(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xD1E46824E6FB92B5, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xEEB7E5D1FEB20869<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBuyAutoshop(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xEEB7E5D1FEB20869, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xDD829AA198FDC46C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeAutoshop(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xDD829AA198FDC46C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x36A7FD5A7194B03E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAutoshopBusiness(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x36A7FD5A7194B03E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xC66D1CF99ED7FE25<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAutoshopIncome(int /* bug: Any */ p0, int p1)
{
Function.Call((Hash)0xC66D1CF99ED7FE25, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xBC6227792A188E2E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnCarclubMembership(int /* bug: Any */ p0)
{
Function.Call((Hash)0xBC6227792A188E2E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x533073E8A596008C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnDailyVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x533073E8A596008C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xFE65AFE7308E32B2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnDailyVehicleBonus(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFE65AFE7308E32B2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xB846F547D3792DF6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnTunerAward(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xB846F547D3792DF6, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xBCB266247193AC61<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnTunerRobbery(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xBCB266247193AC61, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xC10322A8D3E061EE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnUpgradeAutoshop(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xC10322A8D3E061EE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x93AA4165CB67E925<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendInteractionMenuAbility(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x93AA4165CB67E925, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xB9F7A469460E7A4A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSetCommonFields(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, bool p3)
{
Function.Call((Hash)0xB9F7A469460E7A4A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x7E2F4E8F44CAF4E0<br />
/// </para>
/// </remarks>
public static void NetworkSpendSetDiscount(bool p0)
{
Function.Call((Hash)0x7E2F4E8F44CAF4E0, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xEA8CD3C9B3C35884<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBuyAgency(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xEA8CD3C9B3C35884, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x6CCA64840589A3B6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendUpgradeAgency(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x6CCA64840589A3B6, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x1B2120405080125C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendAgency(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x1B2120405080125C, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xBF8793B91EA094A7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendHidden(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBF8793B91EA094A7, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xD9DF467CBE4398C8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSourceBike(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xD9DF467CBE4398C8, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xD86581F9E7CDA383<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendCompSuv(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xD86581F9E7CDA383, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x61A2DF64ED2D396E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSuvFstTrvl(int p0, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x61A2DF64ED2D396E, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xEBD482B82ACB8BAD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendSupply(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xEBD482B82ACB8BAD, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x923AEA8E78F8DF0B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBikeShop(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x923AEA8E78F8DF0B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x02D24A35A9CC3503<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendVehicleRequested(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x02D24A35A9CC3503, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x2CEB0E0BC2A77C05<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendGunrunning(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2CEB0E0BC2A77C05, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x663B4B9D11742A12<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAgencySafe(int /* bug: Any */ p0)
{
Function.Call((Hash)0x663B4B9D11742A12, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x146D4EB6D22A403F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAwardContract(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x146D4EB6D22A403F, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x38482AD49CB905C7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAgencyContract(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x38482AD49CB905C7, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x7397A115030F1BE3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAwardPhone(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x7397A115030F1BE3, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xE29F3D5FA63B1B82<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAgencyPhone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xE29F3D5FA63B1B82, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x88D6C327D6C57C45<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAwardFixerMission(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x88D6C327D6C57C45, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x6283E5DE4C4460C6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFixerPrep(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x6283E5DE4C4460C6, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xBA154373C5FE51E8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFixerFinale(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xBA154373C5FE51E8, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xF4A8E57460BF2037<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFixerAgencyShortTrip(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xF4A8E57460BF2037, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x5B4DBDED84D6A420<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnAwardShortTrip(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x5B4DBDED84D6A420, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x235D41210B3A1A5E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnFixerRivalDelivery(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x235D41210B3A1A5E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xD07C7C3F1995108C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnUpgradeAgency(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xD07C7C3F1995108C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x1254B5B3925EFD3D<br />
/// </para>
/// </remarks>
public static void NetworkSpendApartmentUtilities(int amount, bool p1, bool p2, int /* bug: structure */ data)
{
Function.Call((Hash)0x1254B5B3925EFD3D, amount, p1, p2, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x92D1CFDA1227FF1C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSpendBusinessPropertyFees(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x92D1CFDA1227FF1C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x45087AE480B233AC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnSightseeingReward(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x45087AE480B233AC, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x2C5809EB9DF57257<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnBikerShop(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x2C5809EB9DF57257, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x71BEC32FA466E105<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkEarnBiker(int /* bug: Any */ p0)
{
Function.Call((Hash)0x71BEC32FA466E105, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x59498BC8B1C8B15C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkYohanSourceGoods(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x59498BC8B1C8B15C, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76EF28DA05EA395A<br />
/// </para>
/// </remarks>
public static int NetworkGetVcBankBalance()
{
return Function.Call<int>((Hash)0x76EF28DA05EA395A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA40F9C2623F6A8B5<br />
/// </para>
/// </remarks>
public static int NetworkGetVcWalletBalance(int characterSlot)
{
return Function.Call<int>((Hash)0xA40F9C2623F6A8B5, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CBAD97E059E1B94<br />
/// </para>
/// </remarks>
public static int NetworkGetVcBalance()
{
return Function.Call<int>((Hash)0x5CBAD97E059E1B94);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D1E75F91C07DEE5<br />
/// </para>
/// </remarks>
public static int NetworkGetEvcBalance()
{
return Function.Call<int>((Hash)0x5D1E75F91C07DEE5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F54F3B6C202FB4E<br />
/// </para>
/// </remarks>
public static int NetworkGetPvcBalance()
{
return Function.Call<int>((Hash)0x4F54F3B6C202FB4E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9B10B529DCFB33B<br />
/// </para>
/// </remarks>
public static string NetworkGetStringWalletBalance(int characterSlot)
{
return Function.Call<string>((Hash)0xF9B10B529DCFB33B, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6FA3979BED01B81<br />
/// </para>
/// </remarks>
public static string NetworkGetStringBankBalance()
{
return Function.Call<string>((Hash)0xA6FA3979BED01B81);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x700AF71AE615E6DD<br />
/// </para>
/// </remarks>
public static string NetworkGetStringBankWalletBalance()
{
return Function.Call<string>((Hash)0x700AF71AE615E6DD);
}

/// <summary>
/// Returns true if wallet balance &gt;= amount.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED5AB8860415BABA<br />
/// </para>
/// </remarks>
public static bool NetworkGetCanSpendFromWallet(int amount, int characterSlot)
{
return Function.Call<bool>((Hash)0xED5AB8860415BABA, amount, characterSlot);
}

/// <summary>
/// Returns true if bank balance &gt;= amount.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA31FD6A0865B6D14<br />
/// </para>
/// </remarks>
public static bool NetworkGetCanSpendFromBank(int amount)
{
return Function.Call<bool>((Hash)0xA31FD6A0865B6D14, amount);
}

/// <summary>
/// Returns true if bank balance + wallet balance &gt;= amount.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC18531D7019A535<br />
/// </para>
/// </remarks>
public static bool NetworkGetCanSpendFromBankAndWallet(int amount, int characterSlot)
{
return Function.Call<bool>((Hash)0xDC18531D7019A535, amount, characterSlot);
}

/// <summary>
/// Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13A8DE2FD77D04F3<br />
/// </para>
/// </remarks>
public static int NetworkGetPvcTransferBalance()
{
return Function.Call<int>((Hash)0x13A8DE2FD77D04F3);
}

/// <summary>
/// Returns false if amount &gt; wallet balance or daily transfer limit has been hit.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x08E8EEADFD0DC4A0<br />
/// </para>
/// </remarks>
public static bool NetworkGetCanTransferCash(int amount)
{
return Function.Call<bool>((Hash)0x08E8EEADFD0DC4A0, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D17BE59D2123284<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCanReceivePlayerCash(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x5D17BE59D2123284, p0, p1, p2, p3);
}

/// <summary>
/// Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA560AC9EEB1E19B<br />
/// </para>
/// </remarks>
public static int NetworkGetRemainingTransferBalance()
{
return Function.Call<int>((Hash)0xEA560AC9EEB1E19B);
}

/// <summary>
/// Does nothing and always returns 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF70EFA14FE091429<br />
/// </para>
/// </remarks>
public static int WithdrawVc(int amount)
{
return Function.Call<int>((Hash)0xF70EFA14FE091429, amount);
}

/// <summary>
/// Does nothing and always returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE260E0BB9CD995AC<br />
/// </para>
/// </remarks>
public static bool DepositVc(int amount)
{
return Function.Call<bool>((Hash)0xE260E0BB9CD995AC, amount);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE154B48B68EF72BC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HasVcWithdrawalCompleted(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xE154B48B68EF72BC, p0);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FCF8DDEA146C45B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool WasVcWithdrawalSuccessful(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x6FCF8DDEA146C45B, p0);
}

#endregion
#region NETSHOPPING
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x7D2708796355B20B<br />
/// </para>
/// </remarks>
public static bool NetGameserverUseServerTransactions()
{
return Function.Call<bool>((Hash)0x7D2708796355B20B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD4D7EAF8A30F637<br />
/// </para>
/// </remarks>
public static bool NetGameserverCatalogItemIsValid(string name)
{
return Function.Call<bool>((Hash)0xBD4D7EAF8A30F637, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x247F0F73A182EA0B<br />
/// </para>
/// </remarks>
public static bool NetGameserverCatalogItemKeyIsValid(uint hash)
{
return Function.Call<bool>((Hash)0x247F0F73A182EA0B, hash);
}

/// <summary>
/// bool is always true in game scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC27009422FCCA88D<br />
/// </para>
/// </remarks>
public static int NetGameserverGetPrice(uint itemHash, uint categoryHash, bool p2)
{
return Function.Call<int>((Hash)0xC27009422FCCA88D, itemHash, categoryHash, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C4487461E9B0DCB<br />
/// </para>
/// </remarks>
public static bool NetGameserverCatalogIsValid()
{
return Function.Call<bool>((Hash)0x3C4487461E9B0DCB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B949A1E6AEC8F6A<br />
/// </para>
/// </remarks>
public static bool NetGameserverIsCatalogCurrent()
{
return Function.Call<bool>((Hash)0x2B949A1E6AEC8F6A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85F6C9ABA1DE2BCF<br />
/// </para>
/// </remarks>
public static uint NetGameserverGetCatalogCloudCrc()
{
return Function.Call<uint>((Hash)0x85F6C9ABA1DE2BCF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x357B152EF96C30B6<br />
/// </para>
/// </remarks>
public static bool NetGameserverRefreshServerCatalog()
{
return Function.Call<bool>((Hash)0x357B152EF96C30B6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF38DAFBB49EDE5E<br />
/// </para>
/// </remarks>
public static bool NetGameserverRetrieveCatalogRefreshStatus(ref int state)
{
var nativeAssistPointerVar0 = state;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xCF38DAFBB49EDE5E, &nativeAssistPointerVar0);
}
state = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3E5A7C64CA2C6ED<br />
/// </para>
/// </remarks>
public static bool NetGameserverInitSession()
{
return Function.Call<bool>((Hash)0xE3E5A7C64CA2C6ED);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0395CB47B022E62C<br />
/// </para>
/// </remarks>
public static bool NetGameserverRetrieveInitSessionStatus(ref int p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x0395CB47B022E62C, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA135AC892A58FC07<br />
/// </para>
/// </remarks>
public static bool NetGameserverStartSession(int charSlot)
{
return Function.Call<bool>((Hash)0xA135AC892A58FC07, charSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72EB7BA9B69BF6AB<br />
/// </para>
/// </remarks>
public static bool NetGameserverStartSessionPending()
{
return Function.Call<bool>((Hash)0x72EB7BA9B69BF6AB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x170910093218C8B9<br />
/// </para>
/// </remarks>
public static bool NetGameserverRetrieveStartSessionStatus(ref int p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x170910093218C8B9, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC13C38E47EA5DF31<br />
/// </para>
/// </remarks>
public static bool NetGameserverRetrieveSessionErrorCode(ref int p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC13C38E47EA5DF31, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB24F0944DA203D9E<br />
/// </para>
/// </remarks>
public static bool NetGameserverIsSessionValid(int charSlot)
{
return Function.Call<bool>((Hash)0xB24F0944DA203D9E, charSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74A0FD0688F1EE45<br />
/// </para>
/// </remarks>
public static bool NetGameserverClearSession(int p0)
{
return Function.Call<bool>((Hash)0x74A0FD0688F1EE45, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F41D51BA3BCD1F1<br />
/// </para>
/// </remarks>
public static bool NetGameserverSessionApplyReceivedData(int charSlot)
{
return Function.Call<bool>((Hash)0x2F41D51BA3BCD1F1, charSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x810E8431C0614BF9<br />
/// </para>
/// </remarks>
public static bool NetGameserverIsSessionRefreshPending()
{
return Function.Call<bool>((Hash)0x810E8431C0614BF9);
}

/// <summary>
/// Note: only one of the arguments can be set to true at a time
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35A1B3E1D1315CFA<br />
/// </para>
/// </remarks>
public static bool NetGameserverStartSessionRestart(bool inventory, bool playerbalance)
{
return Function.Call<bool>((Hash)0x35A1B3E1D1315CFA, inventory, playerbalance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x613F125BA3BD2EB9<br />
/// </para>
/// </remarks>
public static bool NetGameserverTransactionInProgress()
{
return Function.Call<bool>((Hash)0x613F125BA3BD2EB9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x897433D292B44130<br />
/// </para>
/// </remarks>
public static bool NetGameserverGetSessionStateAndStatus(ref int p0, ref bool p1)
{
var nativeAssistPointerVar0 = p0;
var nativeAssistPointerVar1 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x897433D292B44130, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
p0 = nativeAssistPointerVar0;
p1 = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x279F08B1A4B29B7E<br />
/// </para>
/// </remarks>
public static bool NetGameserverBasketStart(ref int transactionId, uint categoryHash, uint actionHash, int flags)
{
var nativeAssistPointerVar0 = transactionId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x279F08B1A4B29B7E, &nativeAssistPointerVar0, categoryHash, actionHash, flags);
}
transactionId = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xFA336E7F40C0A0D0<br />
/// </para>
/// </remarks>
public static bool NetGameserverBasketEnd()
{
return Function.Call<bool>((Hash)0xFA336E7F40C0A0D0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA65568121DF2EA26<br />
/// </para>
/// </remarks>
public static bool NetGameserverBasketIsActive()
{
return Function.Call<bool>((Hash)0xA65568121DF2EA26);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF30980718C8ED876<br />
/// </para>
/// </remarks>
public static bool NetGameserverBasketAddItem(int /* bug: structure */ itemData, int quantity)
{
return Function.Call<bool>((Hash)0xF30980718C8ED876, itemData, quantity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27F76CC6C55AD30E<br />
/// </para>
/// </remarks>
public static bool NetGameserverBasketIsFull()
{
return Function.Call<bool>((Hash)0x27F76CC6C55AD30E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1A0450ED46A7812<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetGameserverBasketApplyServerData(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xE1A0450ED46A7812, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39BE7CEA8D9CC8E6<br />
/// </para>
/// </remarks>
public static bool NetGameserverCheckoutStart(int transactionId)
{
return Function.Call<bool>((Hash)0x39BE7CEA8D9CC8E6, transactionId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C5FD37B5499582E<br />
/// </para>
/// </remarks>
public static bool NetGameserverBeginService(ref int transactionId, uint categoryHash, uint itemHash, uint actionTypeHash, int value, int flags)
{
var nativeAssistPointerVar0 = transactionId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x3C5FD37B5499582E, &nativeAssistPointerVar0, categoryHash, itemHash, actionTypeHash, value, flags);
}
transactionId = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2A99A9B524BEFFF<br />
/// </para>
/// </remarks>
public static bool NetGameserverEndService(int transactionId)
{
return Function.Call<bool>((Hash)0xE2A99A9B524BEFFF, transactionId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51F1A8E48C3D2F6D<br />
/// </para>
/// </remarks>
public static bool NetGameserverDeleteCharacter(int slot, bool transfer, uint reason)
{
return Function.Call<bool>((Hash)0x51F1A8E48C3D2F6D, slot, transfer, reason);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A6D923DFFC9BD89<br />
/// </para>
/// </remarks>
public static int NetGameserverDeleteCharacterGetStatus()
{
return Function.Call<int>((Hash)0x0A6D923DFFC9BD89);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x112CEF1615A1139F<br />
/// </para>
/// </remarks>
public static bool NetGameserverDeleteSetTelemetryNonceSeed()
{
return Function.Call<bool>((Hash)0x112CEF1615A1139F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD47A2C1BA117471D<br />
/// </para>
/// </remarks>
public static bool NetGameserverTransferBankToWallet(int charSlot, int amount)
{
return Function.Call<bool>((Hash)0xD47A2C1BA117471D, charSlot, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2F7FE5309181C7D<br />
/// </para>
/// </remarks>
public static bool NetGameserverTransferWalletToBank(int charSlot, int amount)
{
return Function.Call<bool>((Hash)0xC2F7FE5309181C7D, charSlot, amount);
}

/// <summary>
/// Same as 0x350AA5EBC03D3BD2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23789E777D14CE44<br />
/// </para>
/// </remarks>
public static int NetGameserverTransferBankToWalletGetStatus()
{
return Function.Call<int>((Hash)0x23789E777D14CE44);
}

/// <summary>
/// Same as 0x23789E777D14CE44
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x350AA5EBC03D3BD2<br />
/// </para>
/// </remarks>
public static int NetGameserverTransferWalletToBankGetStatus()
{
return Function.Call<int>((Hash)0x350AA5EBC03D3BD2);
}

/// <summary>
/// Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x498C1E05CE5F7877<br />
/// </para>
/// </remarks>
public static bool NetGameserverTransferCashSetTelemetryNonceSeed()
{
return Function.Call<bool>((Hash)0x498C1E05CE5F7877);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9507D4271988E1AE<br />
/// </para>
/// </remarks>
public static bool NetGameserverSetTelemetryNonceSeed(int p0)
{
return Function.Call<bool>((Hash)0x9507D4271988E1AE, p0);
}

#endregion
#region NETWORK
/// <summary>
/// Online version is defined here: update\update.rpf\common\data\version.txt<br /><br />Example:<br /><br />[ONLINE_VERSION_NUMBER]<br />1.33<br /><br />_GET_ONLINE_VERSION() will return &quot;1.33&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCA9373EF340AC0A<br />
/// </para>
/// </remarks>
public static string GetOnlineVersion()
{
return Function.Call<string>((Hash)0xFCA9373EF340AC0A);
}

/// <summary>
/// Returns whether the player is signed into Social Club.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x054354A99211EB96<br />
/// </para>
/// </remarks>
public static bool NetworkIsSignedIn()
{
return Function.Call<bool>((Hash)0x054354A99211EB96);
}

/// <summary>
/// Returns whether the game is not in offline mode.<br /><br />seemed not to work for some ppl
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1077788E268557C2<br />
/// </para>
/// </remarks>
public static bool NetworkIsSignedOnline()
{
return Function.Call<bool>((Hash)0x1077788E268557C2);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD545D44CCE70597<br />
/// </para>
/// </remarks>
public static bool NetworkIsNpAvailable()
{
return Function.Call<bool>((Hash)0xBD545D44CCE70597);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBCAB9E5048434F4<br />
/// </para>
/// </remarks>
public static bool NetworkIsNpPending()
{
return Function.Call<bool>((Hash)0xEBCAB9E5048434F4);
}

/// <summary>
/// Hardcoded to return zero.<br /><br />==== PS4 specific info ====<br /><br />Returns some sort of unavailable reason:<br />-1 = REASON_INVALID<br /> 0 = REASON_OTHER<br /> 1 = REASON_SYSTEM_UPDATE<br /> 2 = REASON_GAME_UPDATE<br /> 3 = REASON_SIGNED_OUT<br /> 4 = REASON_AGE<br /> 5 = REASON_CONNECTION<br /><br />=================================
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74FB3E29E6D10FA9<br />
/// </para>
/// </remarks>
public static int NetworkGetNpUnavailableReason()
{
return Function.Call<int>((Hash)0x74FB3E29E6D10FA9);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7808619F31FF22DB<br />
/// </para>
/// </remarks>
public static bool NetworkIsConnetedToNpPresence()
{
return Function.Call<bool>((Hash)0x7808619F31FF22DB);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0FA4EC6A05DA44E<br />
/// </para>
/// </remarks>
public static bool NetworkIsLoggedInToPsn()
{
return Function.Call<bool>((Hash)0xA0FA4EC6A05DA44E);
}

/// <summary>
/// Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85443FF4C328F53B<br />
/// </para>
/// </remarks>
public static bool NetworkHasValidRosCredentials()
{
return Function.Call<bool>((Hash)0x85443FF4C328F53B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D11E61A4ABF49CC<br />
/// </para>
/// </remarks>
public static bool NetworkIsRefreshingRosCredentials()
{
return Function.Call<bool>((Hash)0x8D11E61A4ABF49CC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A4CF4F48AD77302<br />
/// </para>
/// </remarks>
public static bool NetworkIsCloudAvailable()
{
return Function.Call<bool>((Hash)0x9A4CF4F48AD77302);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67A5589628E0CFF6<br />
/// </para>
/// </remarks>
public static bool NetworkHasSocialClubAccount()
{
return Function.Call<bool>((Hash)0x67A5589628E0CFF6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA9775570DB788CF<br />
/// </para>
/// </remarks>
public static bool NetworkAreSocialClubPoliciesCurrent()
{
return Function.Call<bool>((Hash)0xBA9775570DB788CF);
}

/// <summary>
/// If you are host, returns true else returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DB296B814EDDA07<br />
/// </para>
/// </remarks>
public static bool NetworkIsHost()
{
return Function.Call<bool>((Hash)0x8DB296B814EDDA07);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x8251FB94DC4FDFC8<br />
/// </para>
/// </remarks>
public static Player NetworkGetHostPlayerIndex()
{
return Function.Call<Player>((Hash)0x8251FB94DC4FDFC8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4237E822315D8BA9<br />
/// </para>
/// </remarks>
public static bool NetworkWasGameSuspended()
{
return Function.Call<bool>((Hash)0x4237E822315D8BA9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25CB5A9F37BFD063<br />
/// </para>
/// </remarks>
public static bool NetworkHaveOnlinePrivileges()
{
return Function.Call<bool>((Hash)0x25CB5A9F37BFD063);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1353F87E89946207<br />
/// </para>
/// </remarks>
public static bool NetworkHasAgeRestrictions()
{
return Function.Call<bool>((Hash)0x1353F87E89946207);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72D918C99BCACC54<br />
/// </para>
/// </remarks>
public static bool NetworkHaveUserContentPrivileges(int p0)
{
return Function.Call<bool>((Hash)0x72D918C99BCACC54, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEEF48CDF5B6CE7C<br />
/// </para>
/// </remarks>
public static bool NetworkHaveCommunicationPrivileges(int p0, int /* Player */ player)
{
return Function.Call<bool>((Hash)0xAEEF48CDF5B6CE7C, p0, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78321BEA235FD8CD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCheckOnlinePrivileges(int /* bug: Any */ p0, bool p1)
{
return Function.Call<bool>((Hash)0x78321BEA235FD8CD, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x595F028698072DD9<br />
/// </para>
/// </remarks>
public static bool NetworkCheckUserContentPrivileges(int p0, int p1, bool p2)
{
return Function.Call<bool>((Hash)0x595F028698072DD9, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83F28CE49FBBFFBA<br />
/// </para>
/// </remarks>
public static bool NetworkCheckCommunicationPrivileges(int p0, int p1, bool p2)
{
return Function.Call<bool>((Hash)0x83F28CE49FBBFFBA, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x07EAB372C8841D99<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCheckTextCommunicationPrivileges(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x07EAB372C8841D99, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x906CA41A4B74ECA4<br />
/// </para>
/// </remarks>
public static bool NetworkIsUsingOnlinePromotion()
{
return Function.Call<bool>((Hash)0x906CA41A4B74ECA4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x023ACAB2DC9DC4A4<br />
/// </para>
/// </remarks>
public static bool NetworkShouldShowPromotionAlertScreen()
{
return Function.Call<bool>((Hash)0x023ACAB2DC9DC4A4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76BF03FADBF154F5<br />
/// </para>
/// </remarks>
public static bool NetworkHasSocialNetworkingSharingPriv()
{
return Function.Call<bool>((Hash)0x76BF03FADBF154F5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9614B71F8ADB982B<br />
/// </para>
/// </remarks>
public static int NetworkGetAgeGroup()
{
return Function.Call<int>((Hash)0x9614B71F8ADB982B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x0CF6CC51AA18F0F8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCheckPrivileges(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x0CF6CC51AA18F0F8, p0, p1, p2);
}

/// <summary>
/// Hardcoded to return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x64E5C4CC82847B73<br />
/// </para>
/// </remarks>
public static bool NetworkIsPrivilegeCheckInProgress()
{
return Function.Call<bool>((Hash)0x64E5C4CC82847B73);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x1F7BC3539F9E0224<br />
/// </para>
/// </remarks>
public static void NetworkSetPrivilegeCheckResultNotNeeded()
{
Function.Call((Hash)0x1F7BC3539F9E0224);
}

/// <summary>
/// Hardcoded to return true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xDE9225854F37BF72<br />
/// </para>
/// </remarks>
public static bool NetworkResolvePrivilegeUserContent()
{
return Function.Call<bool>((Hash)0xDE9225854F37BF72);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EA784D197556507<br />
/// </para>
/// </remarks>
public static bool NetworkHavePlatformSubscription()
{
return Function.Call<bool>((Hash)0x5EA784D197556507);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8ACB6459542A8C8<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlatformSubscriptionCheckPending()
{
return Function.Call<bool>((Hash)0xA8ACB6459542A8C8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83FE8D7229593017<br />
/// </para>
/// </remarks>
public static void NetworkShowAccountUpgradeUi()
{
Function.Call((Hash)0x83FE8D7229593017);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x7788DFE15016A182<br />
/// </para>
/// </remarks>
public static bool NetworkIsShowingSystemUiOrRecentlyRequestedUpsell()
{
return Function.Call<bool>((Hash)0x7788DFE15016A182);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x53C10C8BD774F2C9<br />
/// </para>
/// </remarks>
public static bool NetworkNeedToStartNewGameButBlocked()
{
return Function.Call<bool>((Hash)0x53C10C8BD774F2C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x580CE4438479CC61<br />
/// </para>
/// </remarks>
public static bool NetworkCanBail()
{
return Function.Call<bool>((Hash)0x580CE4438479CC61);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95914459A87EBA28<br />
/// </para>
/// </remarks>
public static void NetworkBail(int p0, int p1, int p2)
{
Function.Call((Hash)0x95914459A87EBA28, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x283B6062A2C01E9B<br />
/// </para>
/// </remarks>
public static void NetworkOnReturnToSinglePlayer()
{
Function.Call((Hash)0x283B6062A2C01E9B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0x8B4FFC790CA131EF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkTransitionStart(int p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x8B4FFC790CA131EF, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0xC3BFED92026A2AAD<br />
/// </para>
/// </remarks>
public static bool NetworkTransitionAddStage(uint hash, int p1, int p2, int state, int p4)
{
return Function.Call<bool>((Hash)0xC3BFED92026A2AAD, hash, p1, p2, state, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0x04918A41BC9B8157<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkTransitionFinish(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x04918A41BC9B8157, p0, p1, p2);
}

/// <summary>
/// 11 - Need to download tunables.<br />12 - Need to download background script.<br /><br />Returns 1 if the multiplayer is loaded, otherwhise 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF50DA1A3F8B1BA4<br />
/// </para>
/// </remarks>
public static bool NetworkCanAccessMultiplayer(ref int loadingState)
{
var nativeAssistPointerVar0 = loadingState;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xAF50DA1A3F8B1BA4, &nativeAssistPointerVar0);
}
loadingState = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9747292807126EDA<br />
/// </para>
/// </remarks>
public static bool NetworkIsMultiplayerDisabled()
{
return Function.Call<bool>((Hash)0x9747292807126EDA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E782A910C362C25<br />
/// </para>
/// </remarks>
public static bool NetworkCanEnterMultiplayer()
{
return Function.Call<bool>((Hash)0x7E782A910C362C25);
}

/// <summary>
/// unknown params<br /><br />p0 = 0, 2, or 999 (The global is 999 by default.)<br />p1 = 0 (Always in every script it&apos;s found in atleast.)<br />p2 = 0, 3, or 4 (Based on a var that is determined by a function.)<br />p3 = maxPlayers (It&apos;s obvious in x360 scripts it&apos;s always 18)<br />p4 = 0 (Always in every script it&apos;s found in atleast.)<br />p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)<br />p5 is reset to 0 if,<br />Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 &amp;&amp; Global_1312631 = true/1) those are passed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x330ED4D05491934F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSessionDoFreeroamQuickmatch(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int maxPlayers, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x330ED4D05491934F, p0, p1, p2, maxPlayers, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CFC76E0D087C994<br />
/// </para>
/// </remarks>
public static bool NetworkSessionDoFriendMatchmaking(int p0, int p1, int maxPlayers, bool p3)
{
return Function.Call<bool>((Hash)0x2CFC76E0D087C994, p0, p1, maxPlayers, p3);
}

/// <summary>
/// p4 seems to be unused in 1.60/build 2628
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94BC51E9449D917F<br />
/// </para>
/// </remarks>
public static bool NetworkSessionDoCrewMatchmaking(int crewId, int p1, int p2, int maxPlayers, bool p4)
{
return Function.Call<bool>((Hash)0x94BC51E9449D917F, crewId, p1, p2, maxPlayers, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE3E347A87ACEB82<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSessionDoActivityQuickmatch(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0xBE3E347A87ACEB82, p0, p1, p2, p3, p4);
}

/// <summary>
/// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F3D4ED9BEE4E61D<br />
/// </para>
/// </remarks>
public static bool NetworkSessionHost(int p0, int maxPlayers, bool p2)
{
return Function.Call<bool>((Hash)0x6F3D4ED9BEE4E61D, p0, maxPlayers, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED34C0C02C098BB7<br />
/// </para>
/// </remarks>
public static bool NetworkSessionHostClosed(int p0, int maxPlayers)
{
return Function.Call<bool>((Hash)0xED34C0C02C098BB7, p0, maxPlayers);
}

/// <summary>
/// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9CFD27A5D578D83<br />
/// </para>
/// </remarks>
public static bool NetworkSessionHostFriendsOnly(int p0, int maxPlayers)
{
return Function.Call<bool>((Hash)0xB9CFD27A5D578D83, p0, maxPlayers);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBCFA2EA2E206890<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsClosedFriends()
{
return Function.Call<bool>((Hash)0xFBCFA2EA2E206890);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74732C6CA90DA2B4<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsClosedCrew()
{
return Function.Call<bool>((Hash)0x74732C6CA90DA2B4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3929C2379B60CCE<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsSolo()
{
return Function.Call<bool>((Hash)0xF3929C2379B60CCE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEF70AA5B3F89BA1<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsPrivate()
{
return Function.Call<bool>((Hash)0xCEF70AA5B3F89BA1);
}

/// <summary>
/// p0 is always false and p1 varies.<br />NETWORK_SESSION_END(0, 1)<br />NETWORK_SESSION_END(0, 0)<br />Results in: &quot;Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA02E59562D711006<br />
/// </para>
/// </remarks>
public static bool NetworkSessionEnd(bool p0, bool p1)
{
return Function.Call<bool>((Hash)0xA02E59562D711006, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xB9351A07A0D458B1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSessionLeave(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xB9351A07A0D458B1, p0);
}

/// <summary>
/// Only works as host.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA8904DC5F304220<br />
/// </para>
/// </remarks>
public static void NetworkSessionKickPlayer(int /* Player */ player)
{
Function.Call((Hash)0xFA8904DC5F304220, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD6D09A6F32F49EF1<br />
/// </para>
/// </remarks>
public static bool NetworkSessionGetKickVote(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xD6D09A6F32F49EF1, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x041C7F2A6C9894E6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSessionReserveSlotsTransition(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x041C7F2A6C9894E6, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59DF79317F85A7E0<br />
/// </para>
/// </remarks>
public static bool NetworkJoinPreviouslyFailedSession()
{
return Function.Call<bool>((Hash)0x59DF79317F85A7E0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFE1E5B792D92B34<br />
/// </para>
/// </remarks>
public static bool NetworkJoinPreviouslyFailedTransition()
{
return Function.Call<bool>((Hash)0xFFE1E5B792D92B34);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49EC8030F5015F8B<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetMatchmakingGroup(int matchmakingGroup)
{
Function.Call((Hash)0x49EC8030F5015F8B, matchmakingGroup);
}

/// <summary>
/// playerType is an unsigned int from 0 to 4<br />0 = regular joiner<br />4 = spectator
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B6A4DD0AF9CE215<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetMatchmakingGroupMax(int playerType, int playerCount)
{
Function.Call((Hash)0x8B6A4DD0AF9CE215, playerType, playerCount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56CE820830EF040B<br />
/// </para>
/// </remarks>
public static int NetworkSessionGetMatchmakingGroupFree(int p0)
{
return Function.Call<int>((Hash)0x56CE820830EF040B, p0);
}

/// <summary>
/// groupId range: [0, 4]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCAE55F48D3D7875C<br />
/// </para>
/// </remarks>
public static void NetworkSessionAddActiveMatchmakingGroup(int groupId)
{
Function.Call((Hash)0xCAE55F48D3D7875C, groupId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF49ABC20D8552257<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSessionSetUniqueCrewLimit(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF49ABC20D8552257, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4811BBAC21C5FCD5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSessionSetUniqueCrewLimitTransition(int /* bug: Any */ p0)
{
Function.Call((Hash)0x4811BBAC21C5FCD5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5539C3EBF104A53A<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetUniqueCrewOnlyCrewsTransition(bool p0)
{
Function.Call((Hash)0x5539C3EBF104A53A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x702BC4D605522539<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSessionSetCrewLimitMaxMembersTransition(int /* bug: Any */ p0)
{
Function.Call((Hash)0x702BC4D605522539, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F52E880AAF6C8CA<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetMatchmakingPropertyId(bool p0)
{
Function.Call((Hash)0x3F52E880AAF6C8CA, p0);
}

/// <summary>
/// p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1EEA2DDA9FFA69D<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetMatchmakingMentalState(int p0)
{
Function.Call((Hash)0xF1EEA2DDA9FFA69D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x59D421683D31835A<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetNumBosses(int num)
{
Function.Call((Hash)0x59D421683D31835A, num);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1153FA02A659051C<br />
/// </para>
/// </remarks>
public static void NetworkSessionSetScriptValidateJoin()
{
Function.Call((Hash)0x1153FA02A659051C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC19F6C8E7865A6FF<br />
/// </para>
/// </remarks>
public static void NetworkSessionValidateJoin(bool p0)
{
Function.Call((Hash)0xC19F6C8E7865A6FF, p0);
}

/// <summary>
/// ..
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x236406F60CF216D6<br />
/// </para>
/// </remarks>
public static void NetworkAddFollowers(ref int p0, int p1)
{
var nativeAssistPointerVar0 = p0;
unsafe {
Function.Call((Hash)0x236406F60CF216D6, &nativeAssistPointerVar0, p1);
}
p0 = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x058F43EC59A8631A<br />
/// </para>
/// </remarks>
public static void NetworkClearFollowers()
{
Function.Call((Hash)0x058F43EC59A8631A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D03BFBD643B2A02<br />
/// </para>
/// </remarks>
public static void NetworkGetGlobalMultiplayerClock(ref int hours, ref int minutes, ref int seconds)
{
var nativeAssistPointerVar0 = hours;
var nativeAssistPointerVar1 = minutes;
var nativeAssistPointerVar2 = seconds;
unsafe {
Function.Call((Hash)0x6D03BFBD643B2A02, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
hours = nativeAssistPointerVar0;
minutes = nativeAssistPointerVar1;
seconds = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x600F8CB31C7AAB6E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSessionSetGamemode(int /* bug: Any */ p0)
{
Function.Call((Hash)0x600F8CB31C7AAB6E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xDFFA5BE8381C3314<br />
/// </para>
/// </remarks>
public static int NetworkSessionGetHostAimPreference()
{
return Function.Call<int>((Hash)0xDFFA5BE8381C3314);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE532D6811B3A4D2A<br />
/// </para>
/// </remarks>
public static bool NetworkFindGamersInCrew(int crewId)
{
return Function.Call<bool>((Hash)0xE532D6811B3A4D2A, crewId);
}

/// <summary>
/// Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.<br />There can be up to 15 attributes, they are as follows:<br /><br />0 = Races<br />1 = Parachuting<br />2 = Horde<br />3 = Darts<br />4 = Arm Wrestling<br />5 = Tennis<br />6 = Golf<br />7 = Shooting Range<br />8 = Deathmatch<br />9 = MPPLY_MCMWIN/MPPLY_CRMISSION
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7B2CFDE5C9F700D<br />
/// </para>
/// </remarks>
public static bool NetworkFindMatchedGamers(int attribute, float fallbackLimit, float lowerLimit, float upperLimit)
{
return Function.Call<bool>((Hash)0xF7B2CFDE5C9F700D, attribute, fallbackLimit, lowerLimit, upperLimit);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDDF64C91BFCF0AA<br />
/// </para>
/// </remarks>
public static bool NetworkIsFindingGamers()
{
return Function.Call<bool>((Hash)0xDDDF64C91BFCF0AA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9B83B77929D8863<br />
/// </para>
/// </remarks>
public static bool NetworkDidFindGamersSucceed()
{
return Function.Call<bool>((Hash)0xF9B83B77929D8863);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1B043EE79A916FB<br />
/// </para>
/// </remarks>
public static int NetworkGetNumFoundGamers()
{
return Function.Call<int>((Hash)0xA1B043EE79A916FB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DCFF2AFB68B3476<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkGetFoundGamer(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x9DCFF2AFB68B3476, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D14CCEE1B40381A<br />
/// </para>
/// </remarks>
public static void NetworkClearFoundGamers()
{
Function.Call((Hash)0x6D14CCEE1B40381A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85A0EF54A500882C<br />
/// </para>
/// </remarks>
public static bool NetworkQueueGamerForStatus(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x85A0EF54A500882C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CC848A861D01493<br />
/// </para>
/// </remarks>
public static bool NetworkGetGamerStatusFromQueue()
{
return Function.Call<bool>((Hash)0x2CC848A861D01493);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94A8394D150B013A<br />
/// </para>
/// </remarks>
public static bool NetworkIsGettingGamerStatus()
{
return Function.Call<bool>((Hash)0x94A8394D150B013A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AE17C6B0134B7F1<br />
/// </para>
/// </remarks>
public static bool NetworkDidGetGamerStatusSucceed()
{
return Function.Call<bool>((Hash)0x5AE17C6B0134B7F1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02A8BEC6FD9AF660<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkGetGamerStatusResult(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x02A8BEC6FD9AF660, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x86E0660E4F5C956D<br />
/// </para>
/// </remarks>
public static void NetworkClearGetGamerStatus()
{
Function.Call((Hash)0x86E0660E4F5C956D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6F8AB8A4189CF3A<br />
/// </para>
/// </remarks>
public static void NetworkSessionJoinInvite()
{
Function.Call((Hash)0xC6F8AB8A4189CF3A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FBF47B1B36D36F9<br />
/// </para>
/// </remarks>
public static void NetworkSessionCancelInvite()
{
Function.Call((Hash)0x2FBF47B1B36D36F9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA29177F7703B5644<br />
/// </para>
/// </remarks>
public static void NetworkSessionForceCancelInvite()
{
Function.Call((Hash)0xA29177F7703B5644);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC8C7B9B88C4A668<br />
/// </para>
/// </remarks>
public static bool NetworkHasPendingInvite()
{
return Function.Call<bool>((Hash)0xAC8C7B9B88C4A668);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC42DD763159F3461<br />
/// </para>
/// </remarks>
public static bool NetworkHasConfirmedInvite()
{
return Function.Call<bool>((Hash)0xC42DD763159F3461);
}

/// <summary>
/// Triggers a CEventNetworkInviteConfirmed event
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62A0296C1BB1CEB3<br />
/// </para>
/// </remarks>
public static bool NetworkRequestInviteConfirmedEvent()
{
return Function.Call<bool>((Hash)0x62A0296C1BB1CEB3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23DFB504655D0CE4<br />
/// </para>
/// </remarks>
public static bool NetworkSessionWasInvited()
{
return Function.Call<bool>((Hash)0x23DFB504655D0CE4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE57397B4A3429DD0<br />
/// </para>
/// </remarks>
public static void NetworkSessionGetInviter(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0xE57397B4A3429DD0, gamerHandle);
}

/// <summary>
/// Seems to be true while &quot;Getting GTA Online session details&quot; shows up.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD313DE83394AF134<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsAwaitingInviteResponse()
{
return Function.Call<bool>((Hash)0xD313DE83394AF134);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDB6F89C729CF388<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsDisplayingInviteConfirmation()
{
return Function.Call<bool>((Hash)0xBDB6F89C729CF388);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0682D67EF1FBA3D<br />
/// </para>
/// </remarks>
public static void NetworkSuppressInvite(bool toggle)
{
Function.Call((Hash)0xA0682D67EF1FBA3D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34F9E9049454A7A0<br />
/// </para>
/// </remarks>
public static void NetworkBlockInvites(bool toggle)
{
Function.Call((Hash)0x34F9E9049454A7A0, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFEB8AF24FC1D0BB<br />
/// </para>
/// </remarks>
public static void NetworkBlockJoinQueueInvites(bool toggle)
{
Function.Call((Hash)0xCFEB8AF24FC1D0BB, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x68980414688F7F9D<br />
/// </para>
/// </remarks>
public static void NetworkSetCanReceiveRsInvites(bool p0)
{
Function.Call((Hash)0x68980414688F7F9D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF814FEC6A19FD6E0<br />
/// </para>
/// </remarks>
public static void NetworkStoreInviteThroughRestart()
{
Function.Call((Hash)0xF814FEC6A19FD6E0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B07B9CE4D390375<br />
/// </para>
/// </remarks>
public static void NetworkAllowInviteProcessInPlayerSwitch(bool p0)
{
Function.Call((Hash)0x6B07B9CE4D390375, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AC752103856FB20<br />
/// </para>
/// </remarks>
public static void NetworkSetScriptReadyForEvents(bool toggle)
{
Function.Call((Hash)0x7AC752103856FB20, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74698374C45701D2<br />
/// </para>
/// </remarks>
public static bool NetworkIsOfflineInvitePending()
{
return Function.Call<bool>((Hash)0x74698374C45701D2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x140E6A44870A11CE<br />
/// </para>
/// </remarks>
public static void NetworkClearOfflineInvitePending()
{
Function.Call((Hash)0x140E6A44870A11CE);
}

/// <summary>
/// Loads up the map that is loaded when beeing in mission creator<br />Player gets placed in a mix between online/offline mode<br />p0 is always 2 in R* scripts.<br /><br />Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC74C33FCA52856D5<br />
/// </para>
/// </remarks>
public static void NetworkSessionHostSinglePlayer(int p0)
{
Function.Call((Hash)0xC74C33FCA52856D5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3442775428FD2DAA<br />
/// </para>
/// </remarks>
public static void NetworkSessionLeaveSinglePlayer()
{
Function.Call((Hash)0x3442775428FD2DAA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10FAB35428CCC9D7<br />
/// </para>
/// </remarks>
public static bool NetworkIsGameInProgress()
{
return Function.Call<bool>((Hash)0x10FAB35428CCC9D7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD83C2B94E7508980<br />
/// </para>
/// </remarks>
public static bool NetworkIsSessionActive()
{
return Function.Call<bool>((Hash)0xD83C2B94E7508980);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA97246103B63917<br />
/// </para>
/// </remarks>
public static bool NetworkIsInSession()
{
return Function.Call<bool>((Hash)0xCA97246103B63917);
}

/// <summary>
/// This checks if player is playing on gta online or not.<br />Please add an if and block your mod if this is &quot;true&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DE624D2FC4B603F<br />
/// </para>
/// </remarks>
public static bool NetworkIsSessionStarted()
{
return Function.Call<bool>((Hash)0x9DE624D2FC4B603F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4435D66A8E2905E<br />
/// </para>
/// </remarks>
public static bool NetworkIsSessionBusy()
{
return Function.Call<bool>((Hash)0xF4435D66A8E2905E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EEBC3694E49C572<br />
/// </para>
/// </remarks>
public static bool NetworkCanSessionEnd()
{
return Function.Call<bool>((Hash)0x4EEBC3694E49C572);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x4C9034162368E206<br />
/// </para>
/// </remarks>
public static int NetworkGetGameMode()
{
return Function.Call<int>((Hash)0x4C9034162368E206);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x271CC6AB59EBF9A5<br />
/// </para>
/// </remarks>
public static void NetworkSessionMarkVisible(bool toggle)
{
Function.Call((Hash)0x271CC6AB59EBF9A5, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA416D68C631496A<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsVisible()
{
return Function.Call<bool>((Hash)0xBA416D68C631496A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA73667484D7037C3<br />
/// </para>
/// </remarks>
public static void NetworkSessionBlockJoinRequests(bool toggle)
{
Function.Call((Hash)0xA73667484D7037C3, toggle);
}

/// <summary>
/// num player slots allowed in session, seems to work? 32 max
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4AB419E0D86ACAE<br />
/// </para>
/// </remarks>
public static void NetworkSessionChangeSlots(int slots, bool p1)
{
Function.Call((Hash)0xB4AB419E0D86ACAE, slots, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53AFD64C6758F2F9<br />
/// </para>
/// </remarks>
public static int NetworkSessionGetPrivateSlots()
{
return Function.Call<int>((Hash)0x53AFD64C6758F2F9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C1556705F864230<br />
/// </para>
/// </remarks>
public static bool NetworkSessionVoiceHost()
{
return Function.Call<bool>((Hash)0x9C1556705F864230);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6793E42BE02B575D<br />
/// </para>
/// </remarks>
public static bool NetworkSessionVoiceLeave()
{
return Function.Call<bool>((Hash)0x6793E42BE02B575D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xABD5E88B8A2D3DB2<br />
/// </para>
/// </remarks>
public static void NetworkSessionVoiceConnectToPlayer(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0xABD5E88B8A2D3DB2, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F8413B7FC2AA6B9<br />
/// </para>
/// </remarks>
public static void NetworkSessionVoiceRespondToRequest(bool p0, int p1)
{
Function.Call((Hash)0x7F8413B7FC2AA6B9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B8ED3DB018927B1<br />
/// </para>
/// </remarks>
public static void NetworkSessionVoiceSetTimeout(int timeout)
{
Function.Call((Hash)0x5B8ED3DB018927B1, timeout);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x855BC38818F6F684<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsInVoiceSession()
{
return Function.Call<bool>((Hash)0x855BC38818F6F684);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5D3453C98456528<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsVoiceSessionActive()
{
return Function.Call<bool>((Hash)0xB5D3453C98456528);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF0912DDF7C4CB4B<br />
/// </para>
/// </remarks>
public static bool NetworkSessionIsVoiceSessionBusy()
{
return Function.Call<bool>((Hash)0xEF0912DDF7C4CB4B);
}

/// <summary>
/// Message is limited to 64 characters.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A214F2EC889B100<br />
/// </para>
/// </remarks>
public static bool NetworkSendTextMessage(string message, int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x3A214F2EC889B100, message, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75138790B4359A74<br />
/// </para>
/// </remarks>
public static void NetworkSetActivitySpectator(bool toggle)
{
Function.Call((Hash)0x75138790B4359A74, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12103B9E0C9F92FB<br />
/// </para>
/// </remarks>
public static bool NetworkIsActivitySpectator()
{
return Function.Call<bool>((Hash)0x12103B9E0C9F92FB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x0E4F77F7B9D74D84<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetActivityPlayerMax(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0E4F77F7B9D74D84, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D277B76D1D12222<br />
/// </para>
/// </remarks>
public static void NetworkSetActivitySpectatorMax(int maxSpectators)
{
Function.Call((Hash)0x9D277B76D1D12222, maxSpectators);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73E2B500410DA5A2<br />
/// </para>
/// </remarks>
public static int NetworkGetActivityPlayerNum(bool p0)
{
return Function.Call<int>((Hash)0x73E2B500410DA5A2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2763BBAA72A7BCB9<br />
/// </para>
/// </remarks>
public static bool NetworkIsActivitySpectatorFromHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x2763BBAA72A7BCB9, gamerHandle);
}

/// <summary>
/// p0: Unknown int<br />p1: Unknown int<br />p2: Unknown int<br />p3: Unknown int<br />p4: Unknown always 0 in decompiled scripts<br />p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.<br />p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.<br />p7: Unknown int, it&apos;s an int according to decompiled scripts, however the value is always 0 or 1.<br />p8: Unknown int, it&apos;s an int according to decompiled scripts, however the value is always 0 or 1.<br />p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?<br /><br />From what I can tell it looks like it does the following:<br />Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they&apos;re pretty much all unknown right now.<br />You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA60BB5CE242BB254<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkHostTransition(int p0, int p1, int p2, int p3, int /* bug: Any */ p4, bool p5, bool p6, int p7, int /* bug: Any */ p8, int p9)
{
return Function.Call<bool>((Hash)0xA60BB5CE242BB254, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71FB0EBCD4915D56<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkDoTransitionQuickmatch(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x71FB0EBCD4915D56, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA091A5E44F0072E5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkDoTransitionQuickmatchAsync(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0xA091A5E44F0072E5, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C4AB58491FDC98A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkDoTransitionQuickmatchWithGroup(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: structure */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7)
{
return Function.Call<bool>((Hash)0x9C4AB58491FDC98A, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA06509A691D12BE4<br />
/// </para>
/// </remarks>
public static bool NetworkJoinGroupActivity()
{
return Function.Call<bool>((Hash)0xA06509A691D12BE4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x1888694923EF4591<br />
/// </para>
/// </remarks>
public static void NetworkClearGroupActivity()
{
Function.Call((Hash)0x1888694923EF4591);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB13E88E655E5A3BC<br />
/// </para>
/// </remarks>
public static void NetworkRetainActivityGroup()
{
Function.Call((Hash)0xB13E88E655E5A3BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6512765E3BE78C50<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionClosedFriends()
{
return Function.Call<bool>((Hash)0x6512765E3BE78C50);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0DBD5D7E3C5BEC3B<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionClosedCrew()
{
return Function.Call<bool>((Hash)0x0DBD5D7E3C5BEC3B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DC577201723960A<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionSolo()
{
return Function.Call<bool>((Hash)0x5DC577201723960A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A6AA44FF8E931E6<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionPrivate()
{
return Function.Call<bool>((Hash)0x5A6AA44FF8E931E6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x617F49C2668E6155<br />
/// </para>
/// </remarks>
public static int NetworkGetNumTransitionNonAsyncGamers()
{
return Function.Call<int>((Hash)0x617F49C2668E6155);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x261E97AD7BCF3D40<br />
/// </para>
/// </remarks>
public static void NetworkMarkAsPreferredActivity(bool p0)
{
Function.Call((Hash)0x261E97AD7BCF3D40, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39917E1B4CB0F911<br />
/// </para>
/// </remarks>
public static void NetworkMarkAsWaitingAsync(bool p0)
{
Function.Call((Hash)0x39917E1B4CB0F911, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x2CE9D95E4051AECD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetInProgressFinishTime(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2CE9D95E4051AECD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF26739BCD9907D5<br />
/// </para>
/// </remarks>
public static void NetworkSetTransitionCreatorHandle(int /* bug: structure */ p0)
{
Function.Call((Hash)0xEF26739BCD9907D5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB3272229A82C759<br />
/// </para>
/// </remarks>
public static void NetworkClearTransitionCreatorHandle()
{
Function.Call((Hash)0xFB3272229A82C759);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A595C32F77DFF76<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkInviteGamersToTransition(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x4A595C32F77DFF76, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA2C8073411ECDB6<br />
/// </para>
/// </remarks>
public static void NetworkSetGamerInvitedToTransition(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0xCA2C8073411ECDB6, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD23A1A815D21DB19<br />
/// </para>
/// </remarks>
public static bool NetworkLeaveTransition()
{
return Function.Call<bool>((Hash)0xD23A1A815D21DB19);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DCF46CB1A4F0884<br />
/// </para>
/// </remarks>
public static bool NetworkLaunchTransition()
{
return Function.Call<bool>((Hash)0x2DCF46CB1A4F0884);
}

/// <summary>
/// Appears to set whether a transition should be started when the session is migrating.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2E9C1AB8A92E8CD<br />
/// </para>
/// </remarks>
public static void NetworkSetDoNotLaunchFromJoinAsMigratedHost(bool toggle)
{
Function.Call((Hash)0xA2E9C1AB8A92E8CD, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x023782EFC70585EE<br />
/// </para>
/// </remarks>
public static void NetworkCancelTransitionMatchmaking()
{
Function.Call((Hash)0x023782EFC70585EE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAA572036990CD1B<br />
/// </para>
/// </remarks>
public static void NetworkBailTransition(int p0, int p1, int p2)
{
Function.Call((Hash)0xEAA572036990CD1B, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E9BB38102A589B0<br />
/// </para>
/// </remarks>
public static bool NetworkDoTransitionToGame(bool p0, int maxPlayers)
{
return Function.Call<bool>((Hash)0x3E9BB38102A589B0, p0, maxPlayers);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4665F51EFED00034<br />
/// </para>
/// </remarks>
public static bool NetworkDoTransitionToNewGame(bool p0, int maxPlayers, bool p2)
{
return Function.Call<bool>((Hash)0x4665F51EFED00034, p0, maxPlayers, p2);
}

/// <summary>
/// p2 is true 3/4 of the occurrences I found.<br />&apos;players&apos; is the number of players for a session. On PS3/360 it&apos;s always 18. On PC it&apos;s 32.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3AAD8B2FCA1E289F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkDoTransitionToFreemode(int /* bug: structure */ p0, int /* bug: Any */ p1, bool p2, int players, bool p4)
{
return Function.Call<bool>((Hash)0x3AAD8B2FCA1E289F, p0, p1, p2, players, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E80A5BA8109F974<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkDoTransitionToNewFreemode(int /* bug: structure */ p0, int /* bug: Any */ p1, int players, bool p3, bool p4, bool p5)
{
return Function.Call<bool>((Hash)0x9E80A5BA8109F974, p0, p1, players, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D7696D8F4FA6CB7<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionToGame()
{
return Function.Call<bool>((Hash)0x9D7696D8F4FA6CB7);
}

/// <summary>
/// Returns count.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73B000F7FBC55829<br />
/// </para>
/// </remarks>
public static int NetworkGetTransitionMembers(int /* bug: structure */ data, int dataCount)
{
return Function.Call<int>((Hash)0x73B000F7FBC55829, data, dataCount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x521638ADA1BA0D18<br />
/// </para>
/// </remarks>
public static void NetworkApplyTransitionParameter(int p0, int p1)
{
Function.Call((Hash)0x521638ADA1BA0D18, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBEFC2E77084F599<br />
/// </para>
/// </remarks>
public static void NetworkApplyTransitionParameterString(int p0, string @string, bool p2)
{
Function.Call((Hash)0xEBEFC2E77084F599, p0, @string, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31D1D2B858D25E6B<br />
/// </para>
/// </remarks>
public static bool NetworkSendTransitionGamerInstruction(int /* bug: structure */ gamerHandle, string p1, int p2, int p3, bool p4)
{
return Function.Call<bool>((Hash)0x31D1D2B858D25E6B, gamerHandle, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5728BB6D63E3FF1D<br />
/// </para>
/// </remarks>
public static bool NetworkMarkTransitionGamerAsFullyJoined(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x5728BB6D63E3FF1D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B824797C9BF2159<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionHost()
{
return Function.Call<bool>((Hash)0x0B824797C9BF2159);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B5C83BA3EFE6A10<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionHostFromHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x6B5C83BA3EFE6A10, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65042B9774C4435E<br />
/// </para>
/// </remarks>
public static bool NetworkGetTransitionHost(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x65042B9774C4435E, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68049AEFF83D8F0A<br />
/// </para>
/// </remarks>
public static bool NetworkIsInTransition()
{
return Function.Call<bool>((Hash)0x68049AEFF83D8F0A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53FA83401D9C07FE<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionStarted()
{
return Function.Call<bool>((Hash)0x53FA83401D9C07FE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x520F3282A53D26B7<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionBusy()
{
return Function.Call<bool>((Hash)0x520F3282A53D26B7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x292564C735375EDF<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionMatchmaking()
{
return Function.Call<bool>((Hash)0x292564C735375EDF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC571D0E77D8BBC29<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionLeavePostponed()
{
return Function.Call<bool>((Hash)0xC571D0E77D8BBC29);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x1398582B7F72B3ED<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkTransitionSetInProgress(int /* bug: Any */ p0)
{
Function.Call((Hash)0x1398582B7F72B3ED, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x1F8E00FB18239600<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkTransitionSetContentCreator(int /* bug: Any */ p0)
{
Function.Call((Hash)0x1F8E00FB18239600, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xF6F4383B7C92F11A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkTransitionSetActivityIsland(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF6F4383B7C92F11A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B3A8F7CA3A38FDE<br />
/// </para>
/// </remarks>
public static void NetworkOpenTransitionMatchmaking()
{
Function.Call((Hash)0x2B3A8F7CA3A38FDE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43F4DBA69710E01E<br />
/// </para>
/// </remarks>
public static void NetworkCloseTransitionMatchmaking()
{
Function.Call((Hash)0x43F4DBA69710E01E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37A4494483B9F5C9<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionOpenToMatchmaking()
{
return Function.Call<bool>((Hash)0x37A4494483B9F5C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C978FDA19692C2C<br />
/// </para>
/// </remarks>
public static void NetworkSetTransitionVisibilityLock(bool p0, bool p1)
{
Function.Call((Hash)0x0C978FDA19692C2C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0A484CB2F829FBE<br />
/// </para>
/// </remarks>
public static bool NetworkIsTransitionVisibilityLocked()
{
return Function.Call<bool>((Hash)0xD0A484CB2F829FBE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30DE938B516F0AD2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetTransitionActivityId(int /* bug: Any */ p0)
{
Function.Call((Hash)0x30DE938B516F0AD2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEEDA5E6D7080987<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkChangeTransitionSlots(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0xEEEDA5E6D7080987, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x973D76AA760A6CB6<br />
/// </para>
/// </remarks>
public static void NetworkTransitionBlockJoinRequests(bool p0)
{
Function.Call((Hash)0x973D76AA760A6CB6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AC9CCBFA8C29795<br />
/// </para>
/// </remarks>
public static bool NetworkHasPlayerStartedTransition(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x9AC9CCBFA8C29795, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2615AA2A695930C1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkAreTransitionDetailsValid(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x2615AA2A695930C1, p0);
}

/// <summary>
/// int handle[76];<br />          NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &amp;handle[0], 13);<br />          Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&amp;handle[0]);<br />          NETWORK_JOIN_TRANSITION(uVar2);<br />nothing doin.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D060B08CD63321A<br />
/// </para>
/// </remarks>
public static bool NetworkJoinTransition(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x9D060B08CD63321A, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7284A47B3540E6CF<br />
/// </para>
/// </remarks>
public static bool NetworkHasInvitedGamerToTransition(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x7284A47B3540E6CF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F9990BF5F22759C<br />
/// </para>
/// </remarks>
public static bool NetworkHasTransitionInviteBeenAcked(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x3F9990BF5F22759C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05095437424397FA<br />
/// </para>
/// </remarks>
public static bool NetworkIsActivitySession()
{
return Function.Call<bool>((Hash)0x05095437424397FA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x236905C700FDB54D<br />
/// </para>
/// </remarks>
public static void NetworkDisableRealtimeMultiplayer()
{
Function.Call((Hash)0x236905C700FDB54D);
}

/// <summary>
/// Does nothing. It&apos;s just a nullsub.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A9FDE3A5A6D0437<br />
/// </para>
/// </remarks>
public static void NetworkSetPresenceSessionInvitesBlocked(bool toggle)
{
Function.Call((Hash)0x4A9FDE3A5A6D0437, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3C7A6AFDB244624<br />
/// </para>
/// </remarks>
public static bool NetworkSendInviteViaPresence(int /* bug: structure */ gamerHandle, string p1, int dataCount, int p3)
{
return Function.Call<bool>((Hash)0xC3C7A6AFDB244624, gamerHandle, p1, dataCount, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC116FF9B4D488291<br />
/// </para>
/// </remarks>
public static bool NetworkSendTransitionInviteViaPresence(int /* bug: structure */ gamerHandle, string p1, int dataCount, int p3)
{
return Function.Call<bool>((Hash)0xC116FF9B4D488291, gamerHandle, p1, dataCount, p3);
}

/// <summary>
/// Contains the string &quot;NETWORK_SEND_PRESENCE_TRANSITION_INVITE&quot; but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1171A97A3D3981B6<br />
/// </para>
/// </remarks>
public static bool NetworkSendImportantTransitionInviteViaPresence(int /* bug: structure */ gamerHandle, string p1, int dataCount, int p3)
{
return Function.Call<bool>((Hash)0x1171A97A3D3981B6, gamerHandle, p1, dataCount, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x742B58F723233ED9<br />
/// </para>
/// </remarks>
public static int NetworkGetPresenceInviteIndexById(int p0)
{
return Function.Call<int>((Hash)0x742B58F723233ED9, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEFA968912D0F78D<br />
/// </para>
/// </remarks>
public static int NetworkGetNumPresenceInvites()
{
return Function.Call<int>((Hash)0xCEFA968912D0F78D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA91550DF9318B22<br />
/// </para>
/// </remarks>
public static bool NetworkAcceptPresenceInvite(int p0)
{
return Function.Call<bool>((Hash)0xFA91550DF9318B22, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0210268DB0974B1<br />
/// </para>
/// </remarks>
public static bool NetworkRemovePresenceInvite(int p0)
{
return Function.Call<bool>((Hash)0xF0210268DB0974B1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFF09646E12EC386<br />
/// </para>
/// </remarks>
public static int NetworkGetPresenceInviteId(int p0)
{
return Function.Call<int>((Hash)0xDFF09646E12EC386, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4962CC4AA2F345B7<br />
/// </para>
/// </remarks>
public static string NetworkGetPresenceInviteInviter(int p0)
{
return Function.Call<string>((Hash)0x4962CC4AA2F345B7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38D5B0FEBB086F75<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkGetPresenceInviteHandle(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x38D5B0FEBB086F75, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26E1CD96B0903D60<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkGetPresenceInviteSessionId(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x26E1CD96B0903D60, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24409FC4C55CB22D<br />
/// </para>
/// </remarks>
public static string NetworkGetPresenceInviteContentId(int p0)
{
return Function.Call<string>((Hash)0x24409FC4C55CB22D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD39B3FFF8FFDD5BF<br />
/// </para>
/// </remarks>
public static int NetworkGetPresenceInvitePlaylistLength(int p0)
{
return Function.Call<int>((Hash)0xD39B3FFF8FFDD5BF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x728C4CC7920CD102<br />
/// </para>
/// </remarks>
public static int NetworkGetPresenceInvitePlaylistCurrent(int p0)
{
return Function.Call<int>((Hash)0x728C4CC7920CD102, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DBF2DF0AEB7D289<br />
/// </para>
/// </remarks>
public static bool NetworkGetPresenceInviteFromAdmin(int p0)
{
return Function.Call<bool>((Hash)0x3DBF2DF0AEB7D289, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8806CEBFABD3CE05<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkGetPresenceInviteIsTournament(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8806CEBFABD3CE05, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76D9B976C4C09FDE<br />
/// </para>
/// </remarks>
public static bool NetworkHasFollowInvite()
{
return Function.Call<bool>((Hash)0x76D9B976C4C09FDE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC88156EBB786F8D5<br />
/// </para>
/// </remarks>
public static bool NetworkActionFollowInvite()
{
return Function.Call<bool>((Hash)0xC88156EBB786F8D5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x439BFDE3CD0610F6<br />
/// </para>
/// </remarks>
public static bool NetworkClearFollowInvite()
{
return Function.Call<bool>((Hash)0x439BFDE3CD0610F6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBF8284D8CADEB53<br />
/// </para>
/// </remarks>
public static void NetworkRemoveAndCancelAllInvites()
{
Function.Call((Hash)0xEBF8284D8CADEB53);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7524B431B2E6F7EE<br />
/// </para>
/// </remarks>
public static void NetworkRemoveTransitionInvite(int /* bug: structure */ p0)
{
Function.Call((Hash)0x7524B431B2E6F7EE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x726E0375C7A26368<br />
/// </para>
/// </remarks>
public static void NetworkRemoveAllTransitionInvite()
{
Function.Call((Hash)0x726E0375C7A26368);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF083835B70BA9BFE<br />
/// </para>
/// </remarks>
public static void NetworkRemoveAndCancelAllTransitionInvites()
{
Function.Call((Hash)0xF083835B70BA9BFE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D80CD1D0E6327DE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkInviteGamers(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x9D80CD1D0E6327DE, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D86CD31E8976ECE<br />
/// </para>
/// </remarks>
public static bool NetworkHasInvitedGamer(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x4D86CD31E8976ECE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x71DC455F5CD1C2B1<br />
/// </para>
/// </remarks>
public static bool NetworkHasMadeInviteDecision(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x71DC455F5CD1C2B1, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x3855FB5EB2C5E8B2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkGetInviteReplyStatus(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x3855FB5EB2C5E8B2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74881E6BCAE2327C<br />
/// </para>
/// </remarks>
public static bool NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x74881E6BCAE2327C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7206F674F2A3B1BB<br />
/// </para>
/// </remarks>
public static bool NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x7206F674F2A3B1BB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66F010A4B031A331<br />
/// </para>
/// </remarks>
public static void NetworkSetInviteOnCallForInviteMenu(int /* bug: structure */ p0)
{
Function.Call((Hash)0x66F010A4B031A331, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44B37CDCAE765AAE<br />
/// </para>
/// </remarks>
public static bool NetworkCheckDataManagerSucceededForHandle(int p0, int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x44B37CDCAE765AAE, p0, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x4AD490AE1536933B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkCheckDataManagerForHandle(int /* bug: Any */ p0, int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x4AD490AE1536933B, p0, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D77A82DC2D0DA59<br />
/// </para>
/// </remarks>
public static void NetworkSetInviteFailedMessageForInviteMenu(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
Function.Call((Hash)0x0D77A82DC2D0DA59, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBBD7C4991B64809<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool FilloutPmPlayerList(int /* bug: structure */ gamerHandle, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xCBBD7C4991B64809, gamerHandle, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x716B6DB9D1886106<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool FilloutPmPlayerListWithNames(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x716B6DB9D1886106, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE26CCFF8094D8C74<br />
/// </para>
/// </remarks>
public static bool RefreshPlayerListStats(int p0)
{
return Function.Call<bool>((Hash)0xE26CCFF8094D8C74, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x796A87B3B68D1F3D<br />
/// </para>
/// </remarks>
public static bool NetworkSetCurrentDataManagerHandle(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x796A87B3B68D1F3D, p0);
}

/// <summary>
/// Hardcoded to return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FC5650B0271CB57<br />
/// </para>
/// </remarks>
public static bool NetworkIsInPlatformParty()
{
return Function.Call<bool>((Hash)0x2FC5650B0271CB57);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01ABCE5E7CBDA196<br />
/// </para>
/// </remarks>
public static int NetworkGetPlatformPartyMemberCount()
{
return Function.Call<int>((Hash)0x01ABCE5E7CBDA196);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x120364DE2845DAF8<br />
/// </para>
/// </remarks>
public static int NetworkGetPlatformPartyMembers(int /* bug: structure */ data, int dataSize)
{
return Function.Call<int>((Hash)0x120364DE2845DAF8, data, dataSize);
}

/// <summary>
/// Hardcoded to return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD8B834A8BA05048<br />
/// </para>
/// </remarks>
public static bool NetworkIsInPlatformPartyChat()
{
return Function.Call<bool>((Hash)0xFD8B834A8BA05048);
}

/// <summary>
/// This would be nice to see if someone is in party chat, but 2 sad notes.<br />1) It only becomes true if said person is speaking in that party at the time.<br />2) It will never, become true unless you are in that party with said person.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DE9945BCC9AEC52<br />
/// </para>
/// </remarks>
public static bool NetworkIsChattingInPlatformParty(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x8DE9945BCC9AEC52, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BF66D2E7414F686<br />
/// </para>
/// </remarks>
public static bool NetworkCanQueueForPreviousSessionJoin()
{
return Function.Call<bool>((Hash)0x2BF66D2E7414F686);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14922ED3E38761F0<br />
/// </para>
/// </remarks>
public static bool NetworkIsQueuingForSessionJoin()
{
return Function.Call<bool>((Hash)0x14922ED3E38761F0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x6CE50E47F5543D0C<br />
/// </para>
/// </remarks>
public static void NetworkClearQueuedJoinRequest()
{
Function.Call((Hash)0x6CE50E47F5543D0C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA2888E3833C8E96<br />
/// </para>
/// </remarks>
public static void NetworkSendQueuedJoinRequest()
{
Function.Call((Hash)0xFA2888E3833C8E96);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25D990F8E0E3F13C<br />
/// </para>
/// </remarks>
public static void NetworkRemoveAllQueuedJoinRequests()
{
Function.Call((Hash)0x25D990F8E0E3F13C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1B84178F8674195<br />
/// </para>
/// </remarks>
public static void NetworkSeedRandomNumberGenerator(int seed)
{
Function.Call((Hash)0xF1B84178F8674195, seed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x599E4FA1F87EB5FF<br />
/// </para>
/// </remarks>
public static int NetworkGetRandomInt()
{
return Function.Call<int>((Hash)0x599E4FA1F87EB5FF);
}

/// <summary>
/// Same as GET_RANDOM_INT_IN_RANGE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE30CF56F1EFA5F43<br />
/// </para>
/// </remarks>
public static int NetworkGetRandomIntRanged(int rangeStart, int rangeEnd)
{
return Function.Call<int>((Hash)0xE30CF56F1EFA5F43, rangeStart, rangeEnd);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x655B91F1495A9090<br />
/// </para>
/// </remarks>
public static bool NetworkPlayerIsCheater()
{
return Function.Call<bool>((Hash)0x655B91F1495A9090);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x172F75B6EE2233BA<br />
/// </para>
/// </remarks>
public static int NetworkPlayerGetCheaterReason()
{
return Function.Call<int>((Hash)0x172F75B6EE2233BA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19D8DA0E5A68045A<br />
/// </para>
/// </remarks>
public static bool NetworkPlayerIsBadsport()
{
return Function.Call<bool>((Hash)0x19D8DA0E5A68045A);
}

/// <summary>
/// p1 = 6
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46FB3ED415C7641C<br />
/// </para>
/// </remarks>
public static bool TriggerPlayerCrcHackerCheck(int /* Player */ player, int p1, uint scriptHash)
{
return Function.Call<bool>((Hash)0x46FB3ED415C7641C, player, p1, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xA12D3A5A3753CC23<br />
/// </para>
/// </remarks>
public static bool TriggerTuningCrcHackerCheck(int /* Player */ player, string p1, string p2)
{
return Function.Call<bool>((Hash)0xA12D3A5A3753CC23, player, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF287F506767CC8A9<br />
/// </para>
/// </remarks>
public static bool TriggerFileCrcHackerCheck(int /* Player */ player, string p1)
{
return Function.Call<bool>((Hash)0xF287F506767CC8A9, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x472841A026D26D8B<br />
/// </para>
/// </remarks>
public static bool RemoteCheaterPlayerDetected(int /* Player */ player, int a, int b)
{
return Function.Call<bool>((Hash)0x472841A026D26D8B, player, a, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC5E3AF5289DCA81<br />
/// </para>
/// </remarks>
public static bool BadSportPlayerLeftDetected(int /* bug: structure */ gamerHandle, int @event, int amountReceived)
{
return Function.Call<bool>((Hash)0xEC5E3AF5289DCA81, gamerHandle, @event, amountReceived);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x7F562DBC212E81F9<br />
/// </para>
/// </remarks>
public static void NetworkAddInvalidObjectModel(uint modelHash)
{
Function.Call((Hash)0x7F562DBC212E81F9, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x791EDB5803B2F468<br />
/// </para>
/// </remarks>
public static void NetworkRemoveInvalidObjectModel(uint modelHash)
{
Function.Call((Hash)0x791EDB5803B2F468, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x03B2F03A53D85E41<br />
/// </para>
/// </remarks>
public static void NetworkClearInvalidObjectModels()
{
Function.Call((Hash)0x03B2F03A53D85E41);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE66C690248F11150<br />
/// </para>
/// </remarks>
public static void NetworkApplyPedScarData(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0xE66C690248F11150, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CA59E306ECB80A5<br />
/// </para>
/// </remarks>
public static void NetworkSetThisScriptIsNetworkScript(int maxNumMissionParticipants, bool p1, int instanceId)
{
Function.Call((Hash)0x1CA59E306ECB80A5, maxNumMissionParticipants, p1, instanceId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1110739EEADB592<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkTryToSetThisScriptIsNetworkScript(int /* bug: Any */ p0, bool p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xD1110739EEADB592, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2910669969E9535E<br />
/// </para>
/// </remarks>
public static bool NetworkGetThisScriptIsNetworkScript()
{
return Function.Call<bool>((Hash)0x2910669969E9535E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6C90FBC38E395EE<br />
/// </para>
/// </remarks>
public static int NetworkGetMaxNumParticipants()
{
return Function.Call<int>((Hash)0xA6C90FBC38E395EE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18D0456E86604654<br />
/// </para>
/// </remarks>
public static int NetworkGetNumParticipants()
{
return Function.Call<int>((Hash)0x18D0456E86604654);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57D158647A6BFABF<br />
/// </para>
/// </remarks>
public static int NetworkGetScriptStatus()
{
return Function.Call<int>((Hash)0x57D158647A6BFABF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E9B2F01C50DF595<br />
/// </para>
/// </remarks>
public static void NetworkRegisterHostBroadcastVariables(ref int vars, int numVars, string debugName)
{
var nativeAssistPointerVar0 = vars;
unsafe {
Function.Call((Hash)0x3E9B2F01C50DF595, &nativeAssistPointerVar0, numVars, debugName);
}
vars = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3364AA97340CA215<br />
/// </para>
/// </remarks>
public static void NetworkRegisterPlayerBroadcastVariables(ref int vars, int numVars, string debugName)
{
var nativeAssistPointerVar0 = vars;
unsafe {
Function.Call((Hash)0x3364AA97340CA215, &nativeAssistPointerVar0, numVars, debugName);
}
vars = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xEA8C0DDB10E2822A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkRegisterHighFrequencyHostBroadcastVariables(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xEA8C0DDB10E2822A, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xD6D7478CA62B8D41<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkRegisterHighFrequencyPlayerBroadcastVariables(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xD6D7478CA62B8D41, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x64F62AFB081E260D<br />
/// </para>
/// </remarks>
public static void NetworkFinishBroadcastingData()
{
Function.Call((Hash)0x64F62AFB081E260D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D10B3795F3FC886<br />
/// </para>
/// </remarks>
public static bool NetworkHasReceivedHostBroadcastData()
{
return Function.Call<bool>((Hash)0x5D10B3795F3FC886);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24FB80D107371267<br />
/// </para>
/// </remarks>
public static Player NetworkGetPlayerIndex(int /* Player */ player)
{
return Function.Call<Player>((Hash)0x24FB80D107371267, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B84DF6AF2A46938<br />
/// </para>
/// </remarks>
public static int NetworkGetParticipantIndex(int index)
{
return Function.Call<int>((Hash)0x1B84DF6AF2A46938, index);
}

/// <summary>
/// Returns the Player associated to a given Ped when in an online session.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C0E2E0125610278<br />
/// </para>
/// </remarks>
public static Player NetworkGetPlayerIndexFromPed(int /* Ped */ ped)
{
return Function.Call<Player>((Hash)0x6C0E2E0125610278, ped);
}

/// <summary>
/// Returns the amount of players connected in the current session. Only works when connected to a session/server.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4A79DD2D9600654<br />
/// </para>
/// </remarks>
public static int NetworkGetNumConnectedPlayers()
{
return Function.Call<int>((Hash)0xA4A79DD2D9600654);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93DC1BE4E1ABE9D1<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerConnected(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x93DC1BE4E1ABE9D1, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF61D4B4702EE9EB<br />
/// </para>
/// </remarks>
public static int NetworkGetTotalNumPlayers()
{
return Function.Call<int>((Hash)0xCF61D4B4702EE9EB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FF8FF40B6357D45<br />
/// </para>
/// </remarks>
public static bool NetworkIsParticipantActive(int p0)
{
return Function.Call<bool>((Hash)0x6FF8FF40B6357D45, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8DFD30D6973E135<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerActive(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xB8DFD30D6973E135, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3CA58F6CB7CBD784<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerAParticipant(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x3CA58F6CB7CBD784, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83CD99A1E6061AB5<br />
/// </para>
/// </remarks>
public static bool NetworkIsHostOfThisScript()
{
return Function.Call<bool>((Hash)0x83CD99A1E6061AB5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7B4D79B01FA7A5C<br />
/// </para>
/// </remarks>
public static Player NetworkGetHostOfThisScript()
{
return Function.Call<Player>((Hash)0xC7B4D79B01FA7A5C);
}

/// <summary>
/// scriptName examples:<br />&quot;freemode&quot;, &quot;AM_CR_SecurityVan&quot;, ...<br /><br />Most of the time, these values are used:<br />instance_id = -1<br />position_hash = 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D6A14F1F9A736FC<br />
/// </para>
/// </remarks>
public static Player NetworkGetHostOfScript(string scriptName, int instance_id, int position_hash)
{
return Function.Call<Player>((Hash)0x1D6A14F1F9A736FC, scriptName, instance_id, position_hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B3D11CD9FFCDFC9<br />
/// </para>
/// </remarks>
public static void NetworkSetMissionFinished()
{
Function.Call((Hash)0x3B3D11CD9FFCDFC9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D40DF90FAD26098<br />
/// </para>
/// </remarks>
public static bool NetworkIsScriptActive(string scriptName, int instance_id, bool p2, int position_hash)
{
return Function.Call<bool>((Hash)0x9D40DF90FAD26098, scriptName, instance_id, p2, position_hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2245<br />
/// <b>Native ID:</b> 0xDA7DE67F5FE5EE13<br />
/// </para>
/// </remarks>
public static bool NetworkIsScriptActiveByHash(uint scriptHash, int p1, bool p2, int p3)
{
return Function.Call<bool>((Hash)0xDA7DE67F5FE5EE13, scriptHash, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x560B423D73015E77<br />
/// </para>
/// </remarks>
public static bool NetworkIsThreadANetworkScript(int threadId)
{
return Function.Call<bool>((Hash)0x560B423D73015E77, threadId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3658E8CD94FC121A<br />
/// </para>
/// </remarks>
public static int NetworkGetNumScriptParticipants(string scriptName, int instance_id, int position_hash)
{
return Function.Call<int>((Hash)0x3658E8CD94FC121A, scriptName, instance_id, position_hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x638A3A81733086DB<br />
/// </para>
/// </remarks>
public static int NetworkGetInstanceIdOfThisScript()
{
return Function.Call<int>((Hash)0x638A3A81733086DB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x257ED0FADF750BCF<br />
/// </para>
/// </remarks>
public static uint NetworkGetPositionHashOfThisScript()
{
return Function.Call<uint>((Hash)0x257ED0FADF750BCF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1AD5B71586B94820<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerAParticipantOnScript(int /* Player */ player, string script, int instance_id)
{
return Function.Call<bool>((Hash)0x1AD5B71586B94820, player, script, instance_id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2302C0264EA58D31<br />
/// </para>
/// </remarks>
public static void NetworkPreventScriptHostMigration()
{
Function.Call((Hash)0x2302C0264EA58D31);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x741A3D8380319A81<br />
/// </para>
/// </remarks>
public static void NetworkRequestToBeHostOfThisScript()
{
Function.Call((Hash)0x741A3D8380319A81);
}

/// <summary>
/// Return the local Participant ID
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90986E8876CE0A83<br />
/// </para>
/// </remarks>
public static Player ParticipantId()
{
return Function.Call<Player>((Hash)0x90986E8876CE0A83);
}

/// <summary>
/// Return the local Participant ID.<br /><br />This native is exactly the same as &apos;PARTICIPANT_ID&apos; native.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57A3BDDAD8E5AA0A<br />
/// </para>
/// </remarks>
public static int ParticipantIdToInt()
{
return Function.Call<int>((Hash)0x57A3BDDAD8E5AA0A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x2DA41ED6E1FCD7A5<br />
/// </para>
/// </remarks>
public static Player NetworkGetKillerOfPlayer(int /* Player */ player, ref uint weaponHash)
{
var nativeAssistPointerVar0 = weaponHash;
Player retVal;
unsafe {
retVal = Function.Call<Player>((Hash)0x2DA41ED6E1FCD7A5, player, &nativeAssistPointerVar0);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A1ADEEF01740A24<br />
/// </para>
/// </remarks>
public static Player NetworkGetDestroyerOfNetworkId(int netId, ref uint weaponHash)
{
var nativeAssistPointerVar0 = weaponHash;
Player retVal;
unsafe {
retVal = Function.Call<Player>((Hash)0x7A1ADEEF01740A24, netId, &nativeAssistPointerVar0);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xC434133D9BA52777<br />
/// </para>
/// </remarks>
public static Player NetworkGetDestroyerOfEntity(int /* Entity */ entity, ref uint weaponHash)
{
var nativeAssistPointerVar0 = weaponHash;
Player retVal;
unsafe {
retVal = Function.Call<Player>((Hash)0xC434133D9BA52777, entity, &nativeAssistPointerVar0);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x83660B734994124D<br />
/// </para>
/// </remarks>
public static bool NetworkGetAssistedKillOfEntity(int /* Player */ player, int /* Entity */ entity, ref int p2)
{
var nativeAssistPointerVar0 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x83660B734994124D, player, entity, &nativeAssistPointerVar0);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CACA84440FA26F6<br />
/// </para>
/// </remarks>
public static bool NetworkGetAssistedDamageOfEntity(int /* Player */ player, int /* Entity */ entity, ref int p2)
{
var nativeAssistPointerVar0 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x4CACA84440FA26F6, player, entity, &nativeAssistPointerVar0);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42B2DAA6B596F5F8<br />
/// </para>
/// </remarks>
public static int NetworkGetEntityKillerOfPlayer(int /* Player */ player, ref uint weaponHash)
{
var nativeAssistPointerVar0 = weaponHash;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x42B2DAA6B596F5F8, player, &nativeAssistPointerVar0);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x2C863ACDCD12B3DB<br />
/// </para>
/// </remarks>
public static void NetworkSetCurrentPublicContentId(string missionId)
{
Function.Call((Hash)0x2C863ACDCD12B3DB, missionId);
}

/// <summary>
/// mpSettingSpawn:<br /><br />enum eMpSettingSpawn<br />{<br />	MP_SETTING_SPAWN_NULL,<br />	MP_SETTING_SPAWN_PROPERTY,<br />	MP_SETTING_SPAWN_LAST_POSITION,<br />	MP_SETTING_SPAWN_GARAGE,<br />	MP_SETTING_SPAWN_RANDOM,<br />	MP_SETTING_SPAWN_PRIVATE_YACHT,<br />	MP_SETTING_SPAWN_OFFICE,<br />	MP_SETTING_SPAWN_CLUBHOUSE,<br />	MP_SETTING_SPAWN_IE_WAREHOUSE,<br />	MP_SETTING_SPAWN_BUNKER,<br />	MP_SETTING_SPAWN_HANGAR,<br />	MP_SETTING_SPAWN_DEFUNCT_BASE,<br />	MP_SETTING_SPAWN_NIGHTCLUB,<br />	MP_SETTING_SPAWN_ARENA_GARAGE,<br />	MP_SETTING_SPAWN_CASINO_APARTMENT,<br />	MP_SETTING_SPAWN_ARCADE,<br />	MP_SETTING_SPAWN_SUBMARINE,<br />	MP_SETTING_SPAWN_CAR_MEET,<br />	MP_SETTING_SPAWN_AUTO_SHOP,<br />	MP_SETTING_SPAWN_FIXER_HQ,<br />	MP_SETTING_SPAWN_MAX,<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0xAA6D5451DC3448B6<br />
/// </para>
/// </remarks>
public static void NetworkSetCurrentSpawnLocationOption(uint mpSettingSpawn)
{
Function.Call((Hash)0xAA6D5451DC3448B6, mpSettingSpawn);
}

/// <summary>
/// Used by MetricVEHICLE_DIST_DRIVEN
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x8C70252FC40F320B<br />
/// </para>
/// </remarks>
public static void NetworkSetVehicleDrivenInTestDrive(bool toggle)
{
Function.Call((Hash)0x8C70252FC40F320B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA23C49EAA83ACFB<br />
/// </para>
/// </remarks>
public static void NetworkResurrectLocalPlayer(float x, float y, float z, float heading, bool unk, bool changetime, bool p6, int p7, int p8)
{
Function.Call((Hash)0xEA23C49EAA83ACFB, x, y, z, heading, unk, changetime, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D95C7E2D7E07307<br />
/// </para>
/// </remarks>
public static void NetworkSetLocalPlayerInvincibleTime(int time)
{
Function.Call((Hash)0x2D95C7E2D7E07307, time);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A8694B48715B000<br />
/// </para>
/// </remarks>
public static bool NetworkIsLocalPlayerInvincible()
{
return Function.Call<bool>((Hash)0x8A8694B48715B000);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DD368BF06983221<br />
/// </para>
/// </remarks>
public static void NetworkDisableInvincibleFlashing(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x9DD368BF06983221, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xF0BC9BCD24A511D5<br />
/// </para>
/// </remarks>
public static void NetworkPatchPostCutsceneHs4fTunEnt(int /* Ped */ ped)
{
Function.Call((Hash)0xF0BC9BCD24A511D5, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x524FF0AEFF9C3973<br />
/// </para>
/// </remarks>
public static void NetworkSetLocalPlayerSyncLookAt(bool toggle)
{
Function.Call((Hash)0x524FF0AEFF9C3973, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB07D3185E11657A5<br />
/// </para>
/// </remarks>
public static bool NetworkHasEntityBeenRegisteredWithThisThread(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xB07D3185E11657A5, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA11700682F3AD45C<br />
/// </para>
/// </remarks>
public static int NetworkGetNetworkIdFromEntity(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0xA11700682F3AD45C, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE4E5D9B0A4FF560<br />
/// </para>
/// </remarks>
public static int NetworkGetEntityFromNetworkId(int netId)
{
return Function.Call<int>((Hash)0xCE4E5D9B0A4FF560, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7827959479DCC78<br />
/// </para>
/// </remarks>
public static bool NetworkGetEntityIsNetworked(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xC7827959479DCC78, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0991549DE4D64762<br />
/// </para>
/// </remarks>
public static bool NetworkGetEntityIsLocal(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x0991549DE4D64762, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06FAACD625D80CAA<br />
/// </para>
/// </remarks>
public static void NetworkRegisterEntityAsNetworked(int /* Entity */ entity)
{
Function.Call((Hash)0x06FAACD625D80CAA, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7368E683BB9038D6<br />
/// </para>
/// </remarks>
public static void NetworkUnregisterNetworkedEntity(int /* Entity */ entity)
{
Function.Call((Hash)0x7368E683BB9038D6, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38CE16C96BD11344<br />
/// </para>
/// </remarks>
public static bool NetworkDoesNetworkIdExist(int netId)
{
return Function.Call<bool>((Hash)0x38CE16C96BD11344, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18A47D074708FD68<br />
/// </para>
/// </remarks>
public static bool NetworkDoesEntityExistWithNetworkId(int netId)
{
return Function.Call<bool>((Hash)0x18A47D074708FD68, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA670B3662FAFFBD0<br />
/// </para>
/// </remarks>
public static bool NetworkRequestControlOfNetworkId(int netId)
{
return Function.Call<bool>((Hash)0xA670B3662FAFFBD0, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D36070FE0215186<br />
/// </para>
/// </remarks>
public static bool NetworkHasControlOfNetworkId(int netId)
{
return Function.Call<bool>((Hash)0x4D36070FE0215186, netId);
}

/// <summary>
/// Returns true if the specified network id is controlled by someone else.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x7242F8B741CE1086<br />
/// </para>
/// </remarks>
public static bool NetworkIsNetworkIdRemotelyControlled(int netId)
{
return Function.Call<bool>((Hash)0x7242F8B741CE1086, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB69317BF5E782347<br />
/// </para>
/// </remarks>
public static bool NetworkRequestControlOfEntity(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xB69317BF5E782347, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x870DDFD5A4A796E4<br />
/// </para>
/// </remarks>
public static bool NetworkRequestControlOfDoor(int doorID)
{
return Function.Call<bool>((Hash)0x870DDFD5A4A796E4, doorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01BF60A500E28887<br />
/// </para>
/// </remarks>
public static bool NetworkHasControlOfEntity(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x01BF60A500E28887, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BC9495F0B3B6FA6<br />
/// </para>
/// </remarks>
public static bool NetworkHasControlOfPickup(Pickup pickup)
{
return Function.Call<bool>((Hash)0x5BC9495F0B3B6FA6, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB3C68ADB06195DF<br />
/// </para>
/// </remarks>
public static bool NetworkHasControlOfDoor(uint doorHash)
{
return Function.Call<bool>((Hash)0xCB3C68ADB06195DF, doorHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC01E93FAC20C3346<br />
/// </para>
/// </remarks>
public static bool NetworkIsDoorNetworked(uint doorHash)
{
return Function.Call<bool>((Hash)0xC01E93FAC20C3346, doorHash);
}

/// <summary>
/// calls from vehicle to net.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4C94523F023419C<br />
/// </para>
/// </remarks>
public static int VehToNet(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xB4C94523F023419C, vehicle);
}

/// <summary>
/// gets the network id of a ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EDEC3C276198689<br />
/// </para>
/// </remarks>
public static int PedToNet(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x0EDEC3C276198689, ped);
}

/// <summary>
/// Lets objects spawn online simply do it like this:<br /><br />int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99BFDC94A603E541<br />
/// </para>
/// </remarks>
public static int ObjToNet(int /* Object */ @object)
{
return Function.Call<int>((Hash)0x99BFDC94A603E541, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x367B936610BA360C<br />
/// </para>
/// </remarks>
public static int NetToVeh(int netHandle)
{
return Function.Call<int>((Hash)0x367B936610BA360C, netHandle);
}

/// <summary>
/// gets the ped id of a network id
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDCD95FC216A8B3E<br />
/// </para>
/// </remarks>
public static int NetToPed(int netHandle)
{
return Function.Call<int>((Hash)0xBDCD95FC216A8B3E, netHandle);
}

/// <summary>
/// gets the object id of a network id
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8515F5FEA14CB3F<br />
/// </para>
/// </remarks>
public static int NetToObj(int netHandle)
{
return Function.Call<int>((Hash)0xD8515F5FEA14CB3F, netHandle);
}

/// <summary>
/// gets the entity id of a network id
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFFEAB45A9A9094A<br />
/// </para>
/// </remarks>
public static int NetToEnt(int netHandle)
{
return Function.Call<int>((Hash)0xBFFEAB45A9A9094A, netHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE86051786B66CD8E<br />
/// </para>
/// </remarks>
public static void NetworkGetLocalHandle(int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
Function.Call((Hash)0xE86051786B66CD8E, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCD51DD8F87AEC5C<br />
/// </para>
/// </remarks>
public static void NetworkHandleFromUserId(string userId, int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
Function.Call((Hash)0xDCD51DD8F87AEC5C, userId, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0FD21BED61E5C4C<br />
/// </para>
/// </remarks>
public static void NetworkHandleFromMemberId(string memberId, int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
Function.Call((Hash)0xA0FD21BED61E5C4C, memberId, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x388EB2B86C73B6B3<br />
/// </para>
/// </remarks>
public static void NetworkHandleFromPlayer(int /* Player */ player, int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
Function.Call((Hash)0x388EB2B86C73B6B3, player, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC1D768F2F5D6C05<br />
/// </para>
/// </remarks>
public static uint NetworkHashFromPlayerHandle(int /* Player */ player)
{
return Function.Call<uint>((Hash)0xBC1D768F2F5D6C05, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58575AC3CF2CA8EC<br />
/// </para>
/// </remarks>
public static uint NetworkHashFromGamerHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<uint>((Hash)0x58575AC3CF2CA8EC, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD45CB817D7E177D2<br />
/// </para>
/// </remarks>
public static void NetworkHandleFromFriend(int friendIndex, int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
Function.Call((Hash)0xD45CB817D7E177D2, friendIndex, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F0C0A981D73FA56<br />
/// </para>
/// </remarks>
public static bool NetworkGamertagFromHandleStart(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x9F0C0A981D73FA56, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB071E27958EF4CF0<br />
/// </para>
/// </remarks>
public static bool NetworkGamertagFromHandlePending()
{
return Function.Call<bool>((Hash)0xB071E27958EF4CF0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD00798DBA7523DD<br />
/// </para>
/// </remarks>
public static bool NetworkGamertagFromHandleSucceeded()
{
return Function.Call<bool>((Hash)0xFD00798DBA7523DD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x426141162EBE5CDB<br />
/// </para>
/// </remarks>
public static string NetworkGetGamertagFromHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<string>((Hash)0x426141162EBE5CDB, gamerHandle);
}

/// <summary>
/// Hardcoded to return -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD66C9E72B3CC4982<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkDisplaynamesFromHandlesStart(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0xD66C9E72B3CC4982, p0, p1);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58CC181719256197<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkGetDisplaynamesFromHandles(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0x58CC181719256197, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57DBA049E110F217<br />
/// </para>
/// </remarks>
public static bool NetworkAreHandlesTheSame(int /* bug: structure */ gamerHandle1, int /* bug: structure */ gamerHandle2)
{
return Function.Call<bool>((Hash)0x57DBA049E110F217, gamerHandle1, gamerHandle2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F79B93B0A8E4133<br />
/// </para>
/// </remarks>
public static bool NetworkIsHandleValid(int /* bug: structure */ gamerHandle, int gamerHandleSize)
{
return Function.Call<bool>((Hash)0x6F79B93B0A8E4133, gamerHandle, gamerHandleSize);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE5F689CF5A0A49D<br />
/// </para>
/// </remarks>
public static Player NetworkGetPlayerFromGamerHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<Player>((Hash)0xCE5F689CF5A0A49D, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC82630132081BB6F<br />
/// </para>
/// </remarks>
public static string NetworkMemberIdFromGamerHandle(int /* bug: structure */ gamerHandle)
{
return Function.Call<string>((Hash)0xC82630132081BB6F, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F10B05DDF8D16E9<br />
/// </para>
/// </remarks>
public static bool NetworkIsGamerInMySession(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x0F10B05DDF8D16E9, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x859ED1CEA343FCA8<br />
/// </para>
/// </remarks>
public static void NetworkShowProfileUi(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0x859ED1CEA343FCA8, gamerHandle);
}

/// <summary>
/// Returns the name of a given player. Returns &quot;**Invalid**&quot; if rlGamerInfo of the given player cannot be retrieved or the player doesn&apos;t exist.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7718D2E2060837D2<br />
/// </para>
/// </remarks>
public static string NetworkPlayerGetName(int /* Player */ player)
{
return Function.Call<string>((Hash)0x7718D2E2060837D2, player);
}

/// <summary>
/// Returns a string of the player&apos;s Rockstar Id. <br />Takes a 24 char buffer. Returns the buffer or &quot;**Invalid**&quot; if rlGamerInfo of the given player cannot be retrieved or the player doesn&apos;t exist.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4927FC39CD0869A0<br />
/// </para>
/// </remarks>
public static string NetworkPlayerGetUserid(int /* Player */ player, ref int userID)
{
var nativeAssistPointerVar0 = userID;
string retVal;
unsafe {
retVal = Function.Call<string>((Hash)0x4927FC39CD0869A0, player, &nativeAssistPointerVar0);
}
userID = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.<br />Returns always false in Singleplayer.<br /><br />No longer used for dev checks since first mods were released on PS3 &amp; 360.<br />R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,<br />if that is present it will unlock dev stuff.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x544ABDDA3B409B6D<br />
/// </para>
/// </remarks>
public static bool NetworkPlayerIsRockstarDev(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x544ABDDA3B409B6D, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x565E430DB3B05BEC<br />
/// </para>
/// </remarks>
public static bool NetworkPlayerIndexIsCheater(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x565E430DB3B05BEC, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x815F18AD865F057F<br />
/// </para>
/// </remarks>
public static int NetworkEntityGetObjectId(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x815F18AD865F057F, entity);
}

/// <summary>
/// I&apos;ve had this return the player&apos;s ped handle sometimes, but also other random entities.<br />Whatever p0 is, it&apos;s at least not synced to other players.<br />At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).<br />But another p0 value may return an entity for player x, but not for player y (it&apos;ll just return -1 even if the entity exists on both clients).<br /><br />Returns an entity handle or -1, value changes based on p0&apos;s value.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x37D5F739FD494675<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkGetEntityFromObjectId(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x37D5F739FD494675, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E58745504313A2E<br />
/// </para>
/// </remarks>
public static bool NetworkIsInactiveProfile(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x7E58745504313A2E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFEBB0D5D8F687D2<br />
/// </para>
/// </remarks>
public static int NetworkGetMaxFriends()
{
return Function.Call<int>((Hash)0xAFEBB0D5D8F687D2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x203F1CFD823B27A4<br />
/// </para>
/// </remarks>
public static int NetworkGetFriendCount()
{
return Function.Call<int>((Hash)0x203F1CFD823B27A4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE11EBBB2A783FE8B<br />
/// </para>
/// </remarks>
public static string NetworkGetFriendName(int friendIndex)
{
return Function.Call<string>((Hash)0xE11EBBB2A783FE8B, friendIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4164F227D052E293<br />
/// </para>
/// </remarks>
public static string NetworkGetFriendDisplayName(int friendIndex)
{
return Function.Call<string>((Hash)0x4164F227D052E293, friendIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x425A44533437B64D<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriendOnline(string name)
{
return Function.Call<bool>((Hash)0x425A44533437B64D, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87EB7A3FFCB314DB<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriendHandleOnline(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x87EB7A3FFCB314DB, gamerHandle);
}

/// <summary>
/// In scripts R* calls &apos;NETWORK_GET_FRIEND_NAME&apos; in this param.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2EA9A3BEDF3F17B8<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriendInSameTitle(string friendName)
{
return Function.Call<bool>((Hash)0x2EA9A3BEDF3F17B8, friendName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57005C18827F3A28<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriendInMultiplayer(string friendName)
{
return Function.Call<bool>((Hash)0x57005C18827F3A28, friendName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A24A179F9B31654<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriend(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x1A24A179F9B31654, gamerHandle);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BE73DA6984A6E33<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkIsPendingFriend(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x0BE73DA6984A6E33, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EA101606F6E4D81<br />
/// </para>
/// </remarks>
public static bool NetworkIsAddingFriend()
{
return Function.Call<bool>((Hash)0x6EA101606F6E4D81);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E02D73914064223<br />
/// </para>
/// </remarks>
public static bool NetworkAddFriend(int /* bug: structure */ gamerHandle, string message)
{
return Function.Call<bool>((Hash)0x8E02D73914064223, gamerHandle, message);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAD8F2A42B844821<br />
/// </para>
/// </remarks>
public static bool NetworkIsFriendIndexOnline(int friendIndex)
{
return Function.Call<bool>((Hash)0xBAD8F2A42B844821, friendIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B857666604B1A74<br />
/// </para>
/// </remarks>
public static void NetworkSetPlayerIsPassive(bool toggle)
{
Function.Call((Hash)0x1B857666604B1A74, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82377B65E943F72D<br />
/// </para>
/// </remarks>
public static bool NetworkGetPlayerOwnsWaypoint(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x82377B65E943F72D, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC927EC229934AF60<br />
/// </para>
/// </remarks>
public static bool NetworkCanSetWaypoint()
{
return Function.Call<bool>((Hash)0xC927EC229934AF60);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x4C2A9FDC22377075<br />
/// </para>
/// </remarks>
public static void NetworkIgnoreRemoteWaypoints()
{
Function.Call((Hash)0x4C2A9FDC22377075);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB309EBEA797E001F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSetScriptAutomuted(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xB309EBEA797E001F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26F07DD83A5F7F98<br />
/// </para>
/// </remarks>
public static bool NetworkHasAutomuteOverride()
{
return Function.Call<bool>((Hash)0x26F07DD83A5F7F98);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE870F9F1F7B4F1FA<br />
/// </para>
/// </remarks>
public static bool NetworkHasHeadset()
{
return Function.Call<bool>((Hash)0xE870F9F1F7B4F1FA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D395EA61622E116<br />
/// </para>
/// </remarks>
public static void NetworkSetLookAtTalkers(bool p0)
{
Function.Call((Hash)0x7D395EA61622E116, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0D2AF00BCC234CA<br />
/// </para>
/// </remarks>
public static bool NetworkIsPushToTalkActive()
{
return Function.Call<bool>((Hash)0xC0D2AF00BCC234CA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2FD55CB574BCC55<br />
/// </para>
/// </remarks>
public static bool NetworkGamerHasHeadset(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xF2FD55CB574BCC55, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71C33B22606CD88A<br />
/// </para>
/// </remarks>
public static bool NetworkIsGamerTalking(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x71C33B22606CD88A, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x559EBF901A8C68E0<br />
/// </para>
/// </remarks>
public static bool NetworkPermissionsHasGamerRecord(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x559EBF901A8C68E0, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F5D1AD832AEB06C<br />
/// </para>
/// </remarks>
public static bool NetworkCanCommunicateWithGamer(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x8F5D1AD832AEB06C, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xA150A4F065806B1F<br />
/// </para>
/// </remarks>
public static bool NetworkCanTextChatWithGamer(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xA150A4F065806B1F, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE60DE011B6C7978<br />
/// </para>
/// </remarks>
public static bool NetworkIsGamerMutedByMe(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xCE60DE011B6C7978, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF02A2C93F1F26DA<br />
/// </para>
/// </remarks>
public static bool NetworkAmIMutedByGamer(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xDF02A2C93F1F26DA, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE944C4F5AF1B5883<br />
/// </para>
/// </remarks>
public static bool NetworkIsGamerBlockedByMe(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xE944C4F5AF1B5883, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15337C7C268A27B2<br />
/// </para>
/// </remarks>
public static bool NetworkAmIBlockedByGamer(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x15337C7C268A27B2, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB57A49545BA53CE7<br />
/// </para>
/// </remarks>
public static bool NetworkCanViewGamerUserContent(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xB57A49545BA53CE7, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCA4318E1AB03F1F<br />
/// </para>
/// </remarks>
public static bool NetworkHasViewGamerUserContentResult(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xCCA4318E1AB03F1F, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07DD29D5E22763F1<br />
/// </para>
/// </remarks>
public static bool NetworkCanPlayMultiplayerWithGamer(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x07DD29D5E22763F1, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x135F9B7B7ADD2185<br />
/// </para>
/// </remarks>
public static bool NetworkCanGamerPlayMultiplayerWithMe(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x135F9B7B7ADD2185, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x021ABCBD98EC4320<br />
/// </para>
/// </remarks>
public static bool NetworkCanSendLocalInvite(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x021ABCBD98EC4320, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x421E34C55F125964<br />
/// </para>
/// </remarks>
public static bool NetworkCanReceiveLocalInvite(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0x421E34C55F125964, gamerHandle);
}

/// <summary>
/// returns true if someone is screaming or talking in a microphone
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x031E11F3D447647E<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerTalking(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x031E11F3D447647E, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FB99A8B08D18FD6<br />
/// </para>
/// </remarks>
public static bool NetworkPlayerHasHeadset(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x3FB99A8B08D18FD6, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C71288AE68EDE39<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerMutedByMe(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x8C71288AE68EDE39, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D6981DFC91A8604<br />
/// </para>
/// </remarks>
public static bool NetworkAmIMutedByPlayer(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x9D6981DFC91A8604, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57AF1F8E27483721<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerBlockedByMe(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x57AF1F8E27483721, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87F395D957D4353D<br />
/// </para>
/// </remarks>
public static bool NetworkAmIBlockedByPlayer(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x87F395D957D4353D, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21A1684A25C2867F<br />
/// </para>
/// </remarks>
public static float NetworkGetPlayerLoudness(int /* Player */ player)
{
return Function.Call<float>((Hash)0x21A1684A25C2867F, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBF12D65F95AD686<br />
/// </para>
/// </remarks>
public static void NetworkSetTalkerProximity(float value)
{
Function.Call((Hash)0xCBF12D65F95AD686, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84F0F13120B4E098<br />
/// </para>
/// </remarks>
public static float NetworkGetTalkerProximity()
{
return Function.Call<float>((Hash)0x84F0F13120B4E098);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBABEC9E69A91C57B<br />
/// </para>
/// </remarks>
public static void NetworkSetVoiceActive(bool toggle)
{
Function.Call((Hash)0xBABEC9E69A91C57B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFEB46DCD7D8D5EB<br />
/// </para>
/// </remarks>
public static void NetworkRemainInGameChat(bool p0)
{
Function.Call((Hash)0xCFEB46DCD7D8D5EB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF66059A131AA269<br />
/// </para>
/// </remarks>
public static void NetworkOverrideTransitionChat(bool p0)
{
Function.Call((Hash)0xAF66059A131AA269, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5B4883AC32F24C3<br />
/// </para>
/// </remarks>
public static void NetworkSetTeamOnlyChat(bool toggle)
{
Function.Call((Hash)0xD5B4883AC32F24C3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x265559DA40B3F327<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetScriptControllingTeams(int /* bug: Any */ p0)
{
Function.Call((Hash)0x265559DA40B3F327, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x4348BFDA56023A2F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkSetSameTeamAsLocalPlayer(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x4348BFDA56023A2F, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F697A66CE78674E<br />
/// </para>
/// </remarks>
public static void NetworkOverrideTeamRestrictions(int team, bool toggle)
{
Function.Call((Hash)0x6F697A66CE78674E, team, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70DA3BF8DACD3210<br />
/// </para>
/// </remarks>
public static void NetworkSetOverrideSpectatorMode(bool toggle)
{
Function.Call((Hash)0x70DA3BF8DACD3210, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C5C1E2C2FF814B1<br />
/// </para>
/// </remarks>
public static void NetworkSetOverrideTutorialSessionChat(bool toggle)
{
Function.Call((Hash)0x3C5C1E2C2FF814B1, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D7AFCBF21C51712<br />
/// </para>
/// </remarks>
public static void NetworkSetProximityAffectsTeam(bool toggle)
{
Function.Call((Hash)0x9D7AFCBF21C51712, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF46A1E03E8755980<br />
/// </para>
/// </remarks>
public static void NetworkSetNoSpectatorChat(bool toggle)
{
Function.Call((Hash)0xF46A1E03E8755980, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A5D89D7769A40D8<br />
/// </para>
/// </remarks>
public static void NetworkSetIgnoreSpectatorChatLimitsSameTeam(bool toggle)
{
Function.Call((Hash)0x6A5D89D7769A40D8, toggle);
}

/// <summary>
/// Could possibly bypass being muted or automatically muted
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3039AE5AD2C9C0C4<br />
/// </para>
/// </remarks>
public static void NetworkOverrideChatRestrictions(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x3039AE5AD2C9C0C4, player, toggle);
}

/// <summary>
/// This is used alongside the native,<br />&apos;NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS&apos;. Read its description for more info.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97DD4C5944CC2E6A<br />
/// </para>
/// </remarks>
public static void NetworkOverrideSendRestrictions(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x97DD4C5944CC2E6A, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57B192B4D4AD23D5<br />
/// </para>
/// </remarks>
public static void NetworkOverrideSendRestrictionsAll(bool toggle)
{
Function.Call((Hash)0x57B192B4D4AD23D5, toggle);
}

/// <summary>
/// R* uses this to hear all player when spectating. <br />It allows you to hear other online players when their chat is on none, crew and or friends
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDF73E2B1FEC5AB4<br />
/// </para>
/// </remarks>
public static void NetworkOverrideReceiveRestrictions(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xDDF73E2B1FEC5AB4, player, toggle);
}

/// <summary>
/// p0 is always false in scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FF2862B61A58AF9<br />
/// </para>
/// </remarks>
public static void NetworkOverrideReceiveRestrictionsAll(bool toggle)
{
Function.Call((Hash)0x0FF2862B61A58AF9, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF6212C2EFEF1A23<br />
/// </para>
/// </remarks>
public static void NetworkSetVoiceChannel(int channel)
{
Function.Call((Hash)0xEF6212C2EFEF1A23, channel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE036A705F989E049<br />
/// </para>
/// </remarks>
public static void NetworkClearVoiceChannel()
{
Function.Call((Hash)0xE036A705F989E049);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBD2056652689917<br />
/// </para>
/// </remarks>
public static void NetworkApplyVoiceProximityOverride(float x, float y, float z)
{
Function.Call((Hash)0xDBD2056652689917, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF03755696450470C<br />
/// </para>
/// </remarks>
public static void NetworkClearVoiceProximityOverride()
{
Function.Call((Hash)0xF03755696450470C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E3AA4CA2B6FB0EE<br />
/// </para>
/// </remarks>
public static void NetworkEnableVoiceBandwidthRestriction(int /* Player */ player)
{
Function.Call((Hash)0x5E3AA4CA2B6FB0EE, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA575C391FEA25CC<br />
/// </para>
/// </remarks>
public static void NetworkDisableVoiceBandwidthRestriction(int /* Player */ player)
{
Function.Call((Hash)0xCA575C391FEA25CC, player);
}

/// <summary>
/// NETWORK_GET_M[A-U]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADB57E5B663CCA8B<br />
/// </para>
/// </remarks>
public static void NetworkGetMuteCountForPlayer(int /* Player */ p0, ref float p1, ref float p2)
{
var nativeAssistPointerVar0 = p1;
var nativeAssistPointerVar1 = p2;
unsafe {
Function.Call((Hash)0xADB57E5B663CCA8B, p0, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
p1 = nativeAssistPointerVar0;
p2 = nativeAssistPointerVar1;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x8EF52ACAECC51D9C<br />
/// </para>
/// </remarks>
public static void NetworkSetSpectatorToNonSpectatorTextChat(bool toggle)
{
Function.Call((Hash)0x8EF52ACAECC51D9C, toggle);
}

/// <summary>
/// Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FCF4D7069B09026<br />
/// </para>
/// </remarks>
public static bool NetworkTextChatIsTyping()
{
return Function.Call<bool>((Hash)0x5FCF4D7069B09026);
}

/// <summary>
/// Starts a new singleplayer game (at the prologue).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x593850C16A36B692<br />
/// </para>
/// </remarks>
public static void ShutdownAndLaunchSinglePlayerGame()
{
Function.Call((Hash)0x593850C16A36B692);
}

/// <summary>
/// In singleplayer this will re-load your game.<br /><br />In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you&apos;re the host, if you&apos;re not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.<br /><br />You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won&apos;t end up loading into SP at all.<br /><br />Somewhat related note: opening the pause menu after loading into this &apos;singleplayer&apos; mode crashes the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x9ECA15ADFE141431<br />
/// </para>
/// </remarks>
public static bool ShutdownAndLoadMostRecentSave()
{
return Function.Call<bool>((Hash)0x9ECA15ADFE141431);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF808475FA571D823<br />
/// </para>
/// </remarks>
public static void NetworkSetFriendlyFireOption(bool toggle)
{
Function.Call((Hash)0xF808475FA571D823, toggle);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DCCACDCFC569362<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetRichPresence(int p0, int p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x1DCCACDCFC569362, p0, p1, p2, p3);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E200C2BCF4164EB<br />
/// </para>
/// </remarks>
public static void NetworkSetRichPresenceString(int p0, string textLabel)
{
Function.Call((Hash)0x3E200C2BCF4164EB, p0, textLabel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5ED0356A0CE3A34F<br />
/// </para>
/// </remarks>
public static int NetworkGetTimeoutTime()
{
return Function.Call<int>((Hash)0x5ED0356A0CE3A34F);
}

/// <summary>
/// p4 and p5 are always 0 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9769F811D1785B03<br />
/// </para>
/// </remarks>
public static void NetworkLeavePedBehindBeforeWarp(int /* Player */ player, float x, float y, float z, bool p4, bool p5)
{
Function.Call((Hash)0x9769F811D1785B03, player, x, y, z, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF22E0F32968E967<br />
/// </para>
/// </remarks>
public static void NetworkLeavePedBehindBeforeCutscene(int /* Player */ player, bool p1)
{
Function.Call((Hash)0xBF22E0F32968E967, player, p1);
}

/// <summary>
/// entity must be a valid entity; ped can be NULL
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x715135F4B82AC90D<br />
/// </para>
/// </remarks>
public static void RemoveAllStickyBombsFromEntity(int /* Entity */ entity, int /* Ped */ ped)
{
Function.Call((Hash)0x715135F4B82AC90D, entity, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x17C9E241111A674D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkKeepEntityCollisionDisabledAfterAnimScene(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x17C9E241111A674D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x2E4C123D1C8A710E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkIsAnyPlayerNear(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
return Function.Call<bool>((Hash)0x2E4C123D1C8A710E, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x579CCED0265D4896<br />
/// </para>
/// </remarks>
public static bool NetworkClanServiceIsValid()
{
return Function.Call<bool>((Hash)0x579CCED0265D4896);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB124B57F571D8F18<br />
/// </para>
/// </remarks>
public static bool NetworkClanPlayerIsActive(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xB124B57F571D8F18, gamerHandle);
}

/// <summary>
/// bufferSize is 35 in the scripts.<br /><br />bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can&apos;t explain why 35 * sizeof(int) == 280 and not 140, but I&apos;ll get back to you on that.<br /><br />the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]<br /><br />https://pastebin.com/cSZniHak
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEE6EACBE8874FBA<br />
/// </para>
/// </remarks>
public static bool NetworkClanPlayerGetDesc(int /* bug: structure */ clanDesc, int bufferSize, int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xEEE6EACBE8874FBA, clanDesc, bufferSize, gamerHandle);
}

/// <summary>
/// bufferSize is 35 in the scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7543BB439F63792B<br />
/// </para>
/// </remarks>
public static bool NetworkClanIsRockstarClan(int /* bug: structure */ clanDesc, int bufferSize)
{
return Function.Call<bool>((Hash)0x7543BB439F63792B, clanDesc, bufferSize);
}

/// <summary>
/// bufferSize is 35 in the scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF45352426FF3A4F0<br />
/// </para>
/// </remarks>
public static void NetworkClanGetUiFormattedTag(int /* bug: structure */ clanDesc, int bufferSize, string formattedTag)
{
Function.Call((Hash)0xF45352426FF3A4F0, clanDesc, bufferSize, formattedTag);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F471B79ACC90BEF<br />
/// </para>
/// </remarks>
public static int NetworkClanGetLocalMembershipsCount()
{
return Function.Call<int>((Hash)0x1F471B79ACC90BEF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48DE78AF2C8885B8<br />
/// </para>
/// </remarks>
public static bool NetworkClanGetMembershipDesc(int /* bug: structure */ memberDesc, int p1)
{
return Function.Call<bool>((Hash)0x48DE78AF2C8885B8, memberDesc, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA989044E70010ABE<br />
/// </para>
/// </remarks>
public static bool NetworkClanDownloadMembership(int /* bug: structure */ gamerHandle)
{
return Function.Call<bool>((Hash)0xA989044E70010ABE, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B9E023DC6EBEDC0<br />
/// </para>
/// </remarks>
public static bool NetworkClanDownloadMembershipPending(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0x5B9E023DC6EBEDC0, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3F64A6A91432477<br />
/// </para>
/// </remarks>
public static bool NetworkClanAnyDownloadMembershipPending()
{
return Function.Call<bool>((Hash)0xB3F64A6A91432477);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB6E6FEE99D866B2<br />
/// </para>
/// </remarks>
public static bool NetworkClanRemoteMembershipsAreInCache(ref int p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xBB6E6FEE99D866B2, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAB11F6C4ADBC2C1<br />
/// </para>
/// </remarks>
public static int NetworkClanGetMembershipCount(ref int p0)
{
var nativeAssistPointerVar0 = p0;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xAAB11F6C4ADBC2C1, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48A59CF88D43DF0E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkClanGetMembershipValid(ref int p0, int /* bug: Any */ p1)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x48A59CF88D43DF0E, &nativeAssistPointerVar0, p1);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8BC2011F67B3411<br />
/// </para>
/// </remarks>
public static bool NetworkClanGetMembership(ref int p0, int /* bug: structure */ clanMembership, int p2)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC8BC2011F67B3411, &nativeAssistPointerVar0, clanMembership, p2);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FAAA4F4FC71F87F<br />
/// </para>
/// </remarks>
public static bool NetworkClanJoin(int clanDesc)
{
return Function.Call<bool>((Hash)0x9FAAA4F4FC71F87F, clanDesc);
}

/// <summary>
/// Only documented...<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x729E3401F0430686<br />
/// </para>
/// </remarks>
public static bool NetworkClanCrewinfoGetStringValue(string animDict, string animName)
{
return Function.Call<bool>((Hash)0x729E3401F0430686, animDict, animName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B51EDBEFC301339<br />
/// </para>
/// </remarks>
public static bool NetworkClanCrewinfoGetCrewranktitle(int p0, string p1)
{
return Function.Call<bool>((Hash)0x2B51EDBEFC301339, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC32EA7A2F6CA7557<br />
/// </para>
/// </remarks>
public static bool NetworkClanHasCrewinfoMetadataBeenReceived()
{
return Function.Call<bool>((Hash)0xC32EA7A2F6CA7557);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5835D9CD92E83184<br />
/// </para>
/// </remarks>
public static bool NetworkClanGetEmblemTxdName(int /* bug: structure */ netHandle, string txdName)
{
return Function.Call<bool>((Hash)0x5835D9CD92E83184, netHandle, txdName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13518FF1C6B28938<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkClanRequestEmblem(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x13518FF1C6B28938, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA134777FF7F33331<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkClanIsEmblemReady(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xA134777FF7F33331, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x113E6E3E50E286B0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkClanReleaseEmblem(int /* bug: Any */ p0)
{
Function.Call((Hash)0x113E6E3E50E286B0, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AA46BADAD0E27ED<br />
/// </para>
/// </remarks>
public static bool NetworkGetPrimaryClanDataClear()
{
return Function.Call<bool>((Hash)0x9AA46BADAD0E27ED);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x042E4B70B93E6054<br />
/// </para>
/// </remarks>
public static void NetworkGetPrimaryClanDataCancel()
{
Function.Call((Hash)0x042E4B70B93E6054);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE86D8191B762107<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkGetPrimaryClanDataStart(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xCE86D8191B762107, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5074DB804E28CE7<br />
/// </para>
/// </remarks>
public static bool NetworkGetPrimaryClanDataPending()
{
return Function.Call<bool>((Hash)0xB5074DB804E28CE7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B4F04F19376A0BA<br />
/// </para>
/// </remarks>
public static bool NetworkGetPrimaryClanDataSuccess()
{
return Function.Call<bool>((Hash)0x5B4F04F19376A0BA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC080FF658B2E41DA<br />
/// </para>
/// </remarks>
public static bool NetworkGetPrimaryClanDataNew(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xC080FF658B2E41DA, p0, p1);
}

/// <summary>
/// Whether or not another player is allowed to take control of the entity
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x299EEB23175895FC<br />
/// </para>
/// </remarks>
public static void SetNetworkIdCanMigrate(int netId, bool toggle)
{
Function.Call((Hash)0x299EEB23175895FC, netId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE05E81A888FA63C8<br />
/// </para>
/// </remarks>
public static void SetNetworkIdExistsOnAllMachines(int netId, bool toggle)
{
Function.Call((Hash)0xE05E81A888FA63C8, netId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8A024587329F36A<br />
/// </para>
/// </remarks>
public static void SetNetworkIdAlwaysExistsForPlayer(int netId, int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xA8A024587329F36A, netId, player, toggle);
}

/// <summary>
/// &quot;No Reassign&quot; in CPhysicalScriptGameStateDataNode
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x9D724B400A7E8FFC<br />
/// </para>
/// </remarks>
public static void SetNetworkIdCanBeReassigned(int netId, bool toggle)
{
Function.Call((Hash)0x9D724B400A7E8FFC, netId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD830567D88A1E873<br />
/// </para>
/// </remarks>
public static void NetworkSetEntityCanBlend(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xD830567D88A1E873, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x0379DAF89BA09AA5<br />
/// </para>
/// </remarks>
public static void NetworkSetObjectCanBlendWhenFixed(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x0379DAF89BA09AA5, @object, toggle);
}

/// <summary>
/// if set to true other network players can&apos;t see it<br />if set to false other network player can see it<br />=========================================<br />^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.<br /><br />pc or last gen?<br /><br />^^ last-gen
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1CA12B18AEF5298<br />
/// </para>
/// </remarks>
public static void NetworkSetEntityOnlyExistsForParticipants(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xF1CA12B18AEF5298, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6928482543022B4<br />
/// </para>
/// </remarks>
public static void SetNetworkIdVisibleInCutscene(int netId, bool p1, bool p2)
{
Function.Call((Hash)0xA6928482543022B4, netId, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x32EBD154CB6B8B99<br />
/// </para>
/// </remarks>
public static void SetNetworkIdVisibleInCutsceneHack(int netId, bool p1, bool p2)
{
Function.Call((Hash)0x32EBD154CB6B8B99, netId, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x76B3F29D3F967692<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetNetworkIdVisibleInCutsceneRemainHack(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x76B3F29D3F967692, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAA553E7DD28A457<br />
/// </para>
/// </remarks>
public static void SetNetworkCutsceneEntities(bool toggle)
{
Function.Call((Hash)0xAAA553E7DD28A457, toggle);
}

/// <summary>
/// Getter for SET_NETWORK_CUTSCENE_ENTITIES.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x66D6A5E9C511214A<br />
/// </para>
/// </remarks>
public static bool AreCutsceneEntitiesNetworked()
{
return Function.Call<bool>((Hash)0x66D6A5E9C511214A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FA36981311FA4FF<br />
/// </para>
/// </remarks>
public static void SetNetworkIdPassControlInTutorial(int netId, bool state)
{
Function.Call((Hash)0x3FA36981311FA4FF, netId, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1607996431332DF<br />
/// </para>
/// </remarks>
public static bool IsNetworkIdOwnedByParticipant(int netId)
{
return Function.Call<bool>((Hash)0xA1607996431332DF, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1065D68947E7B6E<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerVisibleInCutscene(bool p0, bool p1)
{
Function.Call((Hash)0xD1065D68947E7B6E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5F773C1A1D9D168<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerInvisibleLocally(bool p0)
{
Function.Call((Hash)0xE5F773C1A1D9D168, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7619364C82D3BF14<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerVisibleLocally(bool p0)
{
Function.Call((Hash)0x7619364C82D3BF14, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12B37D54667DB0B8<br />
/// </para>
/// </remarks>
public static void SetPlayerInvisibleLocally(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x12B37D54667DB0B8, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAA10F1FAFB11AF2<br />
/// </para>
/// </remarks>
public static void SetPlayerVisibleLocally(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xFAA10F1FAFB11AF2, player, toggle);
}

/// <summary>
/// Hardcoded to not work in SP.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x416DBD4CD6ED8DD2<br />
/// </para>
/// </remarks>
public static void FadeOutLocalPlayer(bool p0)
{
Function.Call((Hash)0x416DBD4CD6ED8DD2, p0);
}

/// <summary>
/// normal - transition like when your coming out of LSC<br />slow - transition like when you walk into a mission<br /> 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE564951F95E09ED<br />
/// </para>
/// </remarks>
public static void NetworkFadeOutEntity(int /* Entity */ entity, bool normal, bool slow)
{
Function.Call((Hash)0xDE564951F95E09ED, entity, normal, slow);
}

/// <summary>
/// state - 0 does 5 fades<br />state - 1 does 6 fades<br /><br />p3: setting to 1 made vehicle fade in slower, probably &quot;slow&quot; as per NETWORK_FADE_OUT_ENTITY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F4ED342ACEFE62D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkFadeInEntity(int /* Entity */ entity, bool state, int /* bug: Any */ p2)
{
Function.Call((Hash)0x1F4ED342ACEFE62D, entity, state, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x631DC5DFF4B110E3<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerFading(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x631DC5DFF4B110E3, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x422F32CC7E56ABAD<br />
/// </para>
/// </remarks>
public static bool NetworkIsEntityFading(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x422F32CC7E56ABAD, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE73092F4157CD126<br />
/// </para>
/// </remarks>
public static bool IsPlayerInCutscene(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xE73092F4157CD126, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0031D3C8F36AB82<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetEntityVisibleInCutscene(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0xE0031D3C8F36AB82, p0, p1, p2);
}

/// <summary>
/// Makes the provided entity visible for yourself for the current frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE135A9FF3F5D05D8<br />
/// </para>
/// </remarks>
public static void SetEntityLocallyInvisible(int /* Entity */ entity)
{
Function.Call((Hash)0xE135A9FF3F5D05D8, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x241E289B5C059EDC<br />
/// </para>
/// </remarks>
public static void SetEntityLocallyVisible(int /* Entity */ entity)
{
Function.Call((Hash)0x241E289B5C059EDC, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E192E33AD436366<br />
/// </para>
/// </remarks>
public static bool IsDamageTrackerActiveOnNetworkId(int netID)
{
return Function.Call<bool>((Hash)0x6E192E33AD436366, netID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD45B1FFCCD52FF19<br />
/// </para>
/// </remarks>
public static void ActivateDamageTrackerOnNetworkId(int netID, bool toggle)
{
Function.Call((Hash)0xD45B1FFCCD52FF19, netID, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xB2092A1EAA7FD45F<br />
/// </para>
/// </remarks>
public static bool IsDamageTrackerActiveOnPlayer(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xB2092A1EAA7FD45F, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xBEC0816FF5ACBCDA<br />
/// </para>
/// </remarks>
public static void ActivateDamageTrackerOnPlayer(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xBEC0816FF5ACBCDA, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD82CF8E64C8729D8<br />
/// </para>
/// </remarks>
public static bool IsSphereVisibleToAnotherMachine(float p0, float p1, float p2, float p3)
{
return Function.Call<bool>((Hash)0xD82CF8E64C8729D8, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC3A310219E5DA62<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsSphereVisibleToPlayer(int /* bug: Any */ p0, float p1, float p2, float p3, float p4)
{
return Function.Call<bool>((Hash)0xDC3A310219E5DA62, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E5C93BD0C32FBF8<br />
/// </para>
/// </remarks>
public static void ReserveNetworkMissionObjects(int amount)
{
Function.Call((Hash)0x4E5C93BD0C32FBF8, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB60FEBA45333D36F<br />
/// </para>
/// </remarks>
public static void ReserveNetworkMissionPeds(int amount)
{
Function.Call((Hash)0xB60FEBA45333D36F, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76B02E21ED27A469<br />
/// </para>
/// </remarks>
public static void ReserveNetworkMissionVehicles(int amount)
{
Function.Call((Hash)0x76B02E21ED27A469, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x797F9C5E661D920E<br />
/// </para>
/// </remarks>
public static void ReserveLocalNetworkMissionObjects(int amount)
{
Function.Call((Hash)0x797F9C5E661D920E, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x2C8DF5D129595281<br />
/// </para>
/// </remarks>
public static void ReserveLocalNetworkMissionPeds(int amount)
{
Function.Call((Hash)0x2C8DF5D129595281, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x42613035157E4208<br />
/// </para>
/// </remarks>
public static void ReserveLocalNetworkMissionVehicles(int amount)
{
Function.Call((Hash)0x42613035157E4208, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x800DD4721A8B008B<br />
/// </para>
/// </remarks>
public static bool CanRegisterMissionObjects(int amount)
{
return Function.Call<bool>((Hash)0x800DD4721A8B008B, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCBF4FEF9FA5D781<br />
/// </para>
/// </remarks>
public static bool CanRegisterMissionPeds(int amount)
{
return Function.Call<bool>((Hash)0xBCBF4FEF9FA5D781, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7277F1F2E085EE74<br />
/// </para>
/// </remarks>
public static bool CanRegisterMissionVehicles(int amount)
{
return Function.Call<bool>((Hash)0x7277F1F2E085EE74, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x0A49D1CB6E34AF72<br />
/// </para>
/// </remarks>
public static bool CanRegisterMissionPickups(int amount)
{
return Function.Call<bool>((Hash)0x0A49D1CB6E34AF72, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xE16AA70CE9BEEDC3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool CanRegisterMissionDoors(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xE16AA70CE9BEEDC3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69778E7564BADE6D<br />
/// </para>
/// </remarks>
public static bool CanRegisterMissionEntities(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt)
{
return Function.Call<bool>((Hash)0x69778E7564BADE6D, ped_amt, vehicle_amt, object_amt, pickup_amt);
}

/// <summary>
/// p0 appears to be for MP
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA81B5F10BC43AC2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetNumReservedMissionObjects(bool p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0xAA81B5F10BC43AC2, p0, p1);
}

/// <summary>
/// p0 appears to be for MP
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F13D5AE5CB17E17<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetNumReservedMissionPeds(bool p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x1F13D5AE5CB17E17, p0, p1);
}

/// <summary>
/// p0 appears to be for MP
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF3A965906452031<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetNumReservedMissionVehicles(bool p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0xCF3A965906452031, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12B6281B6C6706C0<br />
/// </para>
/// </remarks>
public static int GetNumCreatedMissionObjects(bool p0)
{
return Function.Call<int>((Hash)0x12B6281B6C6706C0, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB215C4B56A7FAE7<br />
/// </para>
/// </remarks>
public static int GetNumCreatedMissionPeds(bool p0)
{
return Function.Call<int>((Hash)0xCB215C4B56A7FAE7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0CD9AB83489430EA<br />
/// </para>
/// </remarks>
public static int GetNumCreatedMissionVehicles(bool p0)
{
return Function.Call<int>((Hash)0x0CD9AB83489430EA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xE42D626EEC94E5D9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void GetReservedMissionEntitiesInArea(float x, float y, float z, int /* bug: Any */ p3, int /* bug: structure */ out1, int /* bug: structure */ out2, int /* bug: structure */ out3)
{
Function.Call((Hash)0xE42D626EEC94E5D9, x, y, z, p3, out1, out2, out3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7BE335216B5EC7C<br />
/// </para>
/// </remarks>
public static int GetMaxNumNetworkObjects()
{
return Function.Call<int>((Hash)0xC7BE335216B5EC7C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C1F7D49C39D2289<br />
/// </para>
/// </remarks>
public static int GetMaxNumNetworkPeds()
{
return Function.Call<int>((Hash)0x0C1F7D49C39D2289);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AFCE529F69B21FF<br />
/// </para>
/// </remarks>
public static int GetMaxNumNetworkVehicles()
{
return Function.Call<int>((Hash)0x0AFCE529F69B21FF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA72835064DD63E4C<br />
/// </para>
/// </remarks>
public static int GetMaxNumNetworkPickups()
{
return Function.Call<int>((Hash)0xA72835064DD63E4C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xBA7F0B77D80A4EB7<br />
/// </para>
/// </remarks>
public static void NetworkSetObjectScopeDistance(int /* Object */ @object, float range)
{
Function.Call((Hash)0xBA7F0B77D80A4EB7, @object, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x0F1A4B45B7693B95<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkAllowCloningWhileInTutorial(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x0F1A4B45B7693B95, p0, p1);
}

/// <summary>
/// A value between 1.0 and 5.0<br /><br />_NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xC6FCEE21C6FCEE21<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkSetTaskCutsceneInscopeMultipler(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC6FCEE21C6FCEE21, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A5487FE9FAA6B48<br />
/// </para>
/// </remarks>
public static int GetNetworkTime()
{
return Function.Call<int>((Hash)0x7A5487FE9FAA6B48);
}

/// <summary>
/// Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.<br />Could be used for benchmarking since it can return times in ticks.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89023FBBF9200E9F<br />
/// </para>
/// </remarks>
public static int GetNetworkTimeAccurate()
{
return Function.Call<int>((Hash)0x89023FBBF9200E9F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46718ACEEDEAFC84<br />
/// </para>
/// </remarks>
public static bool HasNetworkTimeStarted()
{
return Function.Call<bool>((Hash)0x46718ACEEDEAFC84);
}

/// <summary>
/// Adds the first argument to the second.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x017008CCDAD48503<br />
/// </para>
/// </remarks>
public static int GetTimeOffset(int timeA, int timeB)
{
return Function.Call<int>((Hash)0x017008CCDAD48503, timeA, timeB);
}

/// <summary>
/// Subtracts the second argument from the first, then returns whether the result is negative.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB2CF5148012C8D0<br />
/// </para>
/// </remarks>
public static bool IsTimeLessThan(int timeA, int timeB)
{
return Function.Call<bool>((Hash)0xCB2CF5148012C8D0, timeA, timeB);
}

/// <summary>
/// Subtracts the first argument from the second, then returns whether the result is negative.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE350F8651E4346C<br />
/// </para>
/// </remarks>
public static bool IsTimeMoreThan(int timeA, int timeB)
{
return Function.Call<bool>((Hash)0xDE350F8651E4346C, timeA, timeB);
}

/// <summary>
/// Returns true if the two times are equal; otherwise returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5BC95857BD6D512<br />
/// </para>
/// </remarks>
public static bool IsTimeEqualTo(int timeA, int timeB)
{
return Function.Call<bool>((Hash)0xF5BC95857BD6D512, timeA, timeB);
}

/// <summary>
/// Subtracts the second argument from the first.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2C6FC031D46FFF0<br />
/// </para>
/// </remarks>
public static int GetTimeDifference(int timeA, int timeB)
{
return Function.Call<int>((Hash)0xA2C6FC031D46FFF0, timeA, timeB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E23B1777A927DAD<br />
/// </para>
/// </remarks>
public static string GetTimeAsString(int time)
{
return Function.Call<string>((Hash)0x9E23B1777A927DAD, time);
}

/// <summary>
/// Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF12E6CD06C73D69E<br />
/// </para>
/// </remarks>
public static string GetCloudTimeAsString()
{
return Function.Call<string>((Hash)0xF12E6CD06C73D69E);
}

/// <summary>
/// Returns POSIX timestamp, an int representing the cloud time.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A73240B49945C76<br />
/// </para>
/// </remarks>
public static int GetCloudTimeAsInt()
{
return Function.Call<int>((Hash)0x9A73240B49945C76);
}

/// <summary>
/// Takes the specified time and writes it to the structure specified in the second argument.<br /><br />struct date_time<br />{<br />    int year;<br />    int PADDING1;<br />    int month;<br />    int PADDING2;<br />    int day;<br />    int PADDING3;<br />    int hour;<br />    int PADDING4;<br />    int minute;<br />    int PADDING5;<br />    int second;<br />    int PADDING6;<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC97AF97FA68E5D5<br />
/// </para>
/// </remarks>
public static void ConvertPosixTime(int posixTime, int /* bug: structure */ timeStructure)
{
Function.Call((Hash)0xAC97AF97FA68E5D5, posixTime, timeStructure);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x423DE3854BB50894<br />
/// </para>
/// </remarks>
public static void NetworkSetInSpectatorMode(bool toggle, int /* Ped */ playerPed)
{
Function.Call((Hash)0x423DE3854BB50894, toggle, playerPed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x419594E137637120<br />
/// </para>
/// </remarks>
public static void NetworkSetInSpectatorModeExtended(bool toggle, int /* Ped */ playerPed, bool p2)
{
Function.Call((Hash)0x419594E137637120, toggle, playerPed, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC18DB55AE19E046<br />
/// </para>
/// </remarks>
public static void NetworkSetInFreeCamMode(bool toggle)
{
Function.Call((Hash)0xFC18DB55AE19E046, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C707A667DF8B9FA<br />
/// </para>
/// </remarks>
public static void NetworkSetAntagonisticToPlayer(bool toggle, int /* Player */ player)
{
Function.Call((Hash)0x5C707A667DF8B9FA, toggle, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x048746E388762E11<br />
/// </para>
/// </remarks>
public static bool NetworkIsInSpectatorMode()
{
return Function.Call<bool>((Hash)0x048746E388762E11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CA5DE655269FEC4<br />
/// </para>
/// </remarks>
public static void NetworkSetInMpCutscene(bool p0, bool p1)
{
Function.Call((Hash)0x9CA5DE655269FEC4, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CC27C9FA2040220<br />
/// </para>
/// </remarks>
public static bool NetworkIsInMpCutscene()
{
return Function.Call<bool>((Hash)0x6CC27C9FA2040220);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63F9EE203C3619F2<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerInMpCutscene(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x63F9EE203C3619F2, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xFAC18E7356BD3210<br />
/// </para>
/// </remarks>
public static void NetworkHideProjectileInCutscene()
{
Function.Call((Hash)0xFAC18E7356BD3210);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC51713AB6EC36E8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetNetworkVehicleRespotTimer(int netId, int time, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xEC51713AB6EC36E8, netId, time, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6274C4712850841E<br />
/// </para>
/// </remarks>
public static void SetNetworkVehicleAsGhost(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x6274C4712850841E, vehicle, toggle);
}

/// <summary>
/// rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xA2A707979FE754DC<br />
/// </para>
/// </remarks>
public static void SetNetworkVehicleMaxPositionDeltaMultiplier(int /* Vehicle */ vehicle, float multiplier)
{
Function.Call((Hash)0xA2A707979FE754DC, vehicle, multiplier);
}

/// <summary>
/// Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x838DA0936A24ED4D<br />
/// </para>
/// </remarks>
public static void SetNetworkEnableHighSpeedEdgeFallDetection(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x838DA0936A24ED4D, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FFE9B4144F9712F<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerAsGhost(bool toggle, bool p1)
{
Function.Call((Hash)0x5FFE9B4144F9712F, toggle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21D04D7BC538C146<br />
/// </para>
/// </remarks>
public static bool IsEntityAGhost(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x21D04D7BC538C146, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x13F1FCB111B820B0<br />
/// </para>
/// </remarks>
public static void SetNonParticipantsOfThisScriptAsGhosts(bool p0)
{
Function.Call((Hash)0x13F1FCB111B820B0, p0);
}

/// <summary>
/// Enables ghosting between specific players
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xA7C511FA1C5BDA38<br />
/// </para>
/// </remarks>
public static void SetRemotePlayerAsGhost(int /* Player */ player, bool p1)
{
Function.Call((Hash)0xA7C511FA1C5BDA38, player, p1);
}

/// <summary>
/// Must be a value between 1 and 254
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x658500AE6D723A7E<br />
/// </para>
/// </remarks>
public static void SetGhostAlpha(int alpha)
{
Function.Call((Hash)0x658500AE6D723A7E, alpha);
}

/// <summary>
/// Resets the entity ghost alpha to the default value (128)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x17330EBF2F2124A8<br />
/// </para>
/// </remarks>
public static void ResetGhostAlpha()
{
Function.Call((Hash)0x17330EBF2F2124A8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x4BA166079D658ED4<br />
/// </para>
/// </remarks>
public static void SetEntityGhostedForGhostPlayers(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x4BA166079D658ED4, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xD7B6C73CAD419BCF<br />
/// </para>
/// </remarks>
public static void SetInvertGhosting(bool p0)
{
Function.Call((Hash)0xD7B6C73CAD419BCF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x7EF7649B64D7FF10<br />
/// </para>
/// </remarks>
public static bool IsEntityInGhostCollision(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x7EF7649B64D7FF10, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77758139EC9B66C7<br />
/// </para>
/// </remarks>
public static void UsePlayerColourInsteadOfTeamColour(bool toggle)
{
Function.Call((Hash)0x77758139EC9B66C7, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CD6BC4C2BBDD526<br />
/// </para>
/// </remarks>
public static int NetworkCreateSynchronisedScene(float x, float y, float z, float xRot, float yRot, float zRot, int rotationOrder, bool useOcclusionPortal, bool looped, float p9, float animTime, float p11)
{
return Function.Call<int>((Hash)0x7CD6BC4C2BBDD526, x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x742A637471BCECD9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkAddPedToSynchronisedScene(int /* Ped */ ped, int netScene, string animDict, string animnName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, int /* bug: Any */ p9)
{
Function.Call((Hash)0x742A637471BCECD9, ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xA5EAFE473E45C442<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkAddPedToSynchronisedSceneWithIk(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0xA5EAFE473E45C442, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2404D68CBC855FA<br />
/// </para>
/// </remarks>
public static void NetworkAddEntityToSynchronisedScene(int /* Entity */ entity, int netScene, string animDict, string animName, float speed, float speedMulitiplier, int flag)
{
Function.Call((Hash)0xF2404D68CBC855FA, entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
}

/// <summary>
/// Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.<br />In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x45F35C0EDC33B03B<br />
/// </para>
/// </remarks>
public static void NetworkAddMapEntityToSynchronisedScene(int netScene, uint modelHash, float x, float y, float z, float p5, string p6, float p7, float p8, int flags)
{
Function.Call((Hash)0x45F35C0EDC33B03B, netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF8BD3B0BD6D42D7<br />
/// </para>
/// </remarks>
public static void NetworkAddSynchronisedSceneCamera(int netScene, string animDict, string animName)
{
Function.Call((Hash)0xCF8BD3B0BD6D42D7, netScene, animDict, animName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x478DCBD2A98B705A<br />
/// </para>
/// </remarks>
public static void NetworkAttachSynchronisedSceneToEntity(int netScene, int /* Entity */ entity, int bone)
{
Function.Call((Hash)0x478DCBD2A98B705A, netScene, entity, bone);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A1B3FCDB36C8697<br />
/// </para>
/// </remarks>
public static void NetworkStartSynchronisedScene(int netScene)
{
Function.Call((Hash)0x9A1B3FCDB36C8697, netScene);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC254481A4574CB2F<br />
/// </para>
/// </remarks>
public static void NetworkStopSynchronisedScene(int netScene)
{
Function.Call((Hash)0xC254481A4574CB2F, netScene);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02C40BF885C567B6<br />
/// </para>
/// </remarks>
public static int NetworkGetLocalSceneFromNetworkId(int netId)
{
return Function.Call<int>((Hash)0x02C40BF885C567B6, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9B43A33D09CADA7<br />
/// </para>
/// </remarks>
public static void NetworkForceLocalUseOfSyncedSceneCamera(int netScene)
{
Function.Call((Hash)0xC9B43A33D09CADA7, netScene);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x144DA052257AE7D8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkAllowRemoteSyncedSceneLocalPlayerRequests(int /* bug: Any */ p0)
{
Function.Call((Hash)0x144DA052257AE7D8, p0);
}

/// <summary>
/// p0 is always 0. p1 is pointing to a global.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB1F9381E80FA13F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NetworkFindLargestBunchOfPlayers(int p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xFB1F9381E80FA13F, p0, p1);
}

/// <summary>
/// One of the first things it does is get the players ped.<br />Then it calls a function that is used in some tasks and ped based functions.<br />p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A6FFA2433E2F14C<br />
/// </para>
/// </remarks>
public static bool NetworkStartRespawnSearchForPlayer(int /* Player */ player, float x, float y, float z, float radius, float p5, float p6, float p7, int flags)
{
return Function.Call<bool>((Hash)0x5A6FFA2433E2F14C, player, x, y, z, radius, p5, p6, p7, flags);
}

/// <summary>
/// p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4BA92A18502BCA61<br />
/// </para>
/// </remarks>
public static bool NetworkStartRespawnSearchInAngledAreaForPlayer(int /* Player */ player, float x1, float y1, float z1, float x2, float y2, float z2, float width, float p8, float p9, float p10, int flags)
{
return Function.Call<bool>((Hash)0x4BA92A18502BCA61, player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C891A251567DFCE<br />
/// </para>
/// </remarks>
public static int NetworkQueryRespawnResults(int /* bug: structure */ p0)
{
return Function.Call<int>((Hash)0x3C891A251567DFCE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB8F2A6F3DF08CBE<br />
/// </para>
/// </remarks>
public static void NetworkCancelRespawnSearch()
{
Function.Call((Hash)0xFB8F2A6F3DF08CBE);
}

/// <summary>
/// Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x371EA43692861CF1<br />
/// </para>
/// </remarks>
public static void NetworkGetRespawnResult(int randomInt, ref Vector3 coordinates, ref float heading)
{
var nativeAssistPointerVar0 = coordinates;
var nativeAssistPointerVar1 = heading;
unsafe {
Function.Call((Hash)0x371EA43692861CF1, randomInt, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
coordinates = nativeAssistPointerVar0;
heading = nativeAssistPointerVar1;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C34F1208B8923FD<br />
/// </para>
/// </remarks>
public static int NetworkGetRespawnResultFlags(int p0)
{
return Function.Call<int>((Hash)0x6C34F1208B8923FD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17E0198B3882C2CB<br />
/// </para>
/// </remarks>
public static void NetworkStartSoloTutorialSession()
{
Function.Call((Hash)0x17E0198B3882C2CB);
}

/// <summary>
/// teamId must be &lt; 3, instanceId must be &lt; 64
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB680D403909DC70<br />
/// </para>
/// </remarks>
public static void NetworkAllowGangToJoinTutorialSession(int teamId, int instanceId)
{
Function.Call((Hash)0xFB680D403909DC70, teamId, instanceId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0AFAFF5A51D72F7<br />
/// </para>
/// </remarks>
public static void NetworkEndTutorialSession()
{
Function.Call((Hash)0xD0AFAFF5A51D72F7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADA24309FE08DACF<br />
/// </para>
/// </remarks>
public static bool NetworkIsInTutorialSession()
{
return Function.Call<bool>((Hash)0xADA24309FE08DACF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB37E4E6A2388CA7B<br />
/// </para>
/// </remarks>
public static bool NetworkWaitingPopClearTutorialSession()
{
return Function.Call<bool>((Hash)0xB37E4E6A2388CA7B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35F0B98A8387274D<br />
/// </para>
/// </remarks>
public static bool NetworkIsTutorialSessionChangePending()
{
return Function.Call<bool>((Hash)0x35F0B98A8387274D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B39236746714134<br />
/// </para>
/// </remarks>
public static int NetworkGetPlayerTutorialSessionInstance(int /* Player */ player)
{
return Function.Call<int>((Hash)0x3B39236746714134, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DE986FC9A87C474<br />
/// </para>
/// </remarks>
public static bool NetworkArePlayersInSameTutorialSession(int /* Player */ player, int index)
{
return Function.Call<bool>((Hash)0x9DE986FC9A87C474, player, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xFEA7A352DDB34D52<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkBlockProxyMigrationBetweenTutorialSessions(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFEA7A352DDB34D52, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBDF066252829606<br />
/// </para>
/// </remarks>
public static void NetworkConcealPlayer(int /* Player */ player, bool toggle, bool p2)
{
Function.Call((Hash)0xBBDF066252829606, player, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x919B3C98ED8292F9<br />
/// </para>
/// </remarks>
public static bool NetworkIsPlayerConcealed(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x919B3C98ED8292F9, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x1632BE0AC1E62876<br />
/// </para>
/// </remarks>
public static void NetworkConcealEntity(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x1632BE0AC1E62876, entity, toggle);
}

/// <summary>
/// Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x71302EC70689052A<br />
/// </para>
/// </remarks>
public static bool NetworkIsEntityConcealed(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x71302EC70689052A, entity);
}

/// <summary>
/// Works in Singleplayer too.<br />Passing wrong data (e.g. hours above 23) will cause the game to crash.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE679E3E06E363892<br />
/// </para>
/// </remarks>
public static void NetworkOverrideClockTime(int hours, int minutes, int seconds)
{
Function.Call((Hash)0xE679E3E06E363892, hours, minutes, seconds);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x42BF1D2E723B6D7E<br />
/// </para>
/// </remarks>
public static void NetworkOverrideClockRate(int ms)
{
Function.Call((Hash)0x42BF1D2E723B6D7E, ms);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD972DF67326F966E<br />
/// </para>
/// </remarks>
public static void NetworkClearClockTimeOverride()
{
Function.Call((Hash)0xD972DF67326F966E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7C95D322FF57522<br />
/// </para>
/// </remarks>
public static bool NetworkIsClockTimeOverridden()
{
return Function.Call<bool>((Hash)0xD7C95D322FF57522);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x494C8FB299290269<br />
/// </para>
/// </remarks>
public static int NetworkAddEntityArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<int>((Hash)0x494C8FB299290269, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// To remove, see: NETWORK_REMOVE_ENTITY_AREA<br />See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x376C6375BA60293A<br />
/// </para>
/// </remarks>
public static int NetworkAddEntityAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width)
{
return Function.Call<int>((Hash)0x376C6375BA60293A, x1, y1, z1, x2, y2, z2, width);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25B99872D588A101<br />
/// </para>
/// </remarks>
public static int NetworkAddClientEntityArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<int>((Hash)0x25B99872D588A101, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x2B1C623823DB0D9D<br />
/// </para>
/// </remarks>
public static int NetworkAddClientEntityAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float radius)
{
return Function.Call<int>((Hash)0x2B1C623823DB0D9D, x1, y1, z1, x2, y2, z2, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93CF869BAA0C4874<br />
/// </para>
/// </remarks>
public static bool NetworkRemoveEntityArea(int areaHandle)
{
return Function.Call<bool>((Hash)0x93CF869BAA0C4874, areaHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE64A3CA08DFA37A9<br />
/// </para>
/// </remarks>
public static bool NetworkEntityAreaDoesExist(int areaHandle)
{
return Function.Call<bool>((Hash)0xE64A3CA08DFA37A9, areaHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4DF7CFFF471A7FB1<br />
/// </para>
/// </remarks>
public static bool NetworkEntityAreaHaveAllReplied(int areaHandle)
{
return Function.Call<bool>((Hash)0x4DF7CFFF471A7FB1, areaHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A2D4E8BF4265B0F<br />
/// </para>
/// </remarks>
public static bool NetworkEntityAreaIsOccupied(int areaHandle)
{
return Function.Call<bool>((Hash)0x4A2D4E8BF4265B0F, areaHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B1813ABA29016C5<br />
/// </para>
/// </remarks>
public static void NetworkUseHighPrecisionBlending(int netID, bool toggle)
{
Function.Call((Hash)0x2B1813ABA29016C5, netID, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xA6FCECCF4721D679<br />
/// </para>
/// </remarks>
public static void NetworkSetCustomArenaBallParams(int netId)
{
Function.Call((Hash)0xA6FCECCF4721D679, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x95BAF97C82464629<br />
/// </para>
/// </remarks>
public static void NetworkEntityUseHighPrecisionRotation(int netId, bool toggle)
{
Function.Call((Hash)0x95BAF97C82464629, netId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x924426BFFD82E915<br />
/// </para>
/// </remarks>
public static bool NetworkRequestCloudBackgroundScripts()
{
return Function.Call<bool>((Hash)0x924426BFFD82E915);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8132C0EB8B2B3293<br />
/// </para>
/// </remarks>
public static bool NetworkIsCloudBackgroundScriptRequestPending()
{
return Function.Call<bool>((Hash)0x8132C0EB8B2B3293);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42FB3B532D526E6C<br />
/// </para>
/// </remarks>
public static void NetworkRequestCloudTunables()
{
Function.Call((Hash)0x42FB3B532D526E6C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0467C11ED88B7D28<br />
/// </para>
/// </remarks>
public static bool NetworkIsTunableCloudRequestPending()
{
return Function.Call<bool>((Hash)0x0467C11ED88B7D28);
}

/// <summary>
/// Actually returns the version (TUNABLE_VERSION)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10BD227A753B0D84<br />
/// </para>
/// </remarks>
public static int NetworkGetTunableCloudCrc()
{
return Function.Call<int>((Hash)0x10BD227A753B0D84);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85E5F8B9B898B20A<br />
/// </para>
/// </remarks>
public static bool NetworkDoesTunableExist(string tunableContext, string tunableName)
{
return Function.Call<bool>((Hash)0x85E5F8B9B898B20A, tunableContext, tunableName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BE1146DFD5D4468<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableInt(string tunableContext, string tunableName, ref int value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8BE1146DFD5D4468, tunableContext, tunableName, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5608CA7BC163A5F<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableFloat(string tunableContext, string tunableName, ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xE5608CA7BC163A5F, tunableContext, tunableName, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA6A47A573ABB75A<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableBool(string tunableContext, string tunableName)
{
return Function.Call<bool>((Hash)0xAA6A47A573ABB75A, tunableContext, tunableName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4E53E1419D81127<br />
/// </para>
/// </remarks>
public static bool NetworkDoesTunableExistHash(uint tunableContext, uint tunableName)
{
return Function.Call<bool>((Hash)0xE4E53E1419D81127, tunableContext, tunableName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0xFAFC23AEE23868DB<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableModificationDetectionClear()
{
return Function.Call<bool>((Hash)0xFAFC23AEE23868DB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40FCE03E50E8DBE8<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableIntHash(uint tunableContext, uint tunableName, ref int value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x40FCE03E50E8DBE8, tunableContext, tunableName, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x3A8B55FDA4C8DDEF<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableIntModificationDetectionRegistrationHash(uint contextHash, uint nameHash, ref int value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x3A8B55FDA4C8DDEF, contextHash, nameHash, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x972BC203BBC4C4D5<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableFloatHash(uint tunableContext, uint tunableName, ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x972BC203BBC4C4D5, tunableContext, tunableName, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x1950DAE9848A4739<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableFloatModificationDetectionRegistrationHash(uint contextHash, uint nameHash, ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x1950DAE9848A4739, contextHash, nameHash, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA16B69D93D71A45<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableBoolHash(uint tunableContext, uint tunableName)
{
return Function.Call<bool>((Hash)0xEA16B69D93D71A45, tunableContext, tunableName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x697F508861875B42<br />
/// </para>
/// </remarks>
public static bool NetworkAccessTunableBoolModificationDetectionRegistrationHash(uint contextHash, uint nameHash, ref bool value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x697F508861875B42, contextHash, nameHash, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Returns defaultValue if the tunable doesn&apos;t exist.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7420099936CE286<br />
/// </para>
/// </remarks>
public static bool NetworkTryAccessTunableBoolHash(uint tunableContext, uint tunableName, bool defaultValue)
{
return Function.Call<bool>((Hash)0xC7420099936CE286, tunableContext, tunableName, defaultValue);
}

/// <summary>
/// Return the content modifier id (the tunables context if you want) of a specific content.<br /><br />It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.<br /><br />The mission id can be found on the Social club, for example, &apos;socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA&apos;<br /><br />&apos;A8M6Bz8MLEC5xngvDCzGwA&apos; is the mission id, so the game hash this and use it as the parameter for this native.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x187382F8A3E0A6C3<br />
/// </para>
/// </remarks>
public static int NetworkGetContentModifierListId(uint contentHash)
{
return Function.Call<int>((Hash)0x187382F8A3E0A6C3, contentHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DB53B37A2F211A0<br />
/// </para>
/// </remarks>
public static int NetworkGetBoneIdOfFatalHit()
{
return Function.Call<int>((Hash)0x7DB53B37A2F211A0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72433699B4E6DD64<br />
/// </para>
/// </remarks>
public static void NetworkResetBodyTracker()
{
Function.Call((Hash)0x72433699B4E6DD64);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD38C4A6D047C019D<br />
/// </para>
/// </remarks>
public static int NetworkGetNumberBodyTrackerHits()
{
return Function.Call<int>((Hash)0xD38C4A6D047C019D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E0BF682CC778D49<br />
/// </para>
/// </remarks>
public static bool NetworkHasBoneBeenHitByKiller(int boneIndex)
{
return Function.Call<bool>((Hash)0x2E0BF682CC778D49, boneIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EDE326D47CD0F3E<br />
/// </para>
/// </remarks>
public static bool NetworkSetAttributeDamageToPlayer(int /* Ped */ ped, int /* Player */ player)
{
return Function.Call<bool>((Hash)0x0EDE326D47CD0F3E, ped, player);
}

/// <summary>
/// Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x890E2C5ABED7236D<br />
/// </para>
/// </remarks>
public static void NetworkTriggerDamageEventForZeroDamage(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x890E2C5ABED7236D, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x38B7C51AB1EDC7D8<br />
/// </para>
/// </remarks>
public static void NetworkTriggerDamageEventForZeroWeaponHash(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x38B7C51AB1EDC7D8, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x3FC795691834481D<br />
/// </para>
/// </remarks>
public static void NetworkSetNoLongerNeeded(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x3FC795691834481D, entity, toggle);
}

/// <summary>
/// In the console script dumps, this is only referenced once. <br />NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);<br /><br />^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.<br />Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?<br /><br />am_plane_takedown.c <br />network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);<br /><br />armenian2.c <br />network_explode_vehicle(Local_80[6 &lt;2&gt;], 1, 0, 0);<br /><br />fm_horde_controler.c<br />network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);<br /><br />fm_mission_controller.c, has 6 hits so not going to list them.<br /><br />Side note, setting the first parameter to 0 seems to mute sound or so?<br /><br />Seems it&apos;s like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x301A42153C9AD707<br />
/// </para>
/// </remarks>
public static bool NetworkExplodeVehicle(int /* Vehicle */ vehicle, bool isAudible, bool isInvisible, int netId)
{
return Function.Call<bool>((Hash)0x301A42153C9AD707, vehicle, isAudible, isInvisible, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x2A5E0621DD815A9A<br />
/// </para>
/// </remarks>
public static void NetworkExplodeHeli(int /* Vehicle */ vehicle, bool isAudible, bool isInvisible, int netId)
{
Function.Call((Hash)0x2A5E0621DD815A9A, vehicle, isAudible, isInvisible, netId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD71A4ECAB22709E<br />
/// </para>
/// </remarks>
public static void NetworkUseLogarithmicBlendingThisFrame(int /* Entity */ entity)
{
Function.Call((Hash)0xCD71A4ECAB22709E, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7E30DE9272B6D49<br />
/// </para>
/// </remarks>
public static void NetworkOverrideCoordsAndHeading(int /* Entity */ entity, float x, float y, float z, float heading)
{
Function.Call((Hash)0xA7E30DE9272B6D49, entity, x, y, z, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0xE6717E652B8C8D8A<br />
/// </para>
/// </remarks>
public static void NetworkEnableExtraVehicleOrientationBlendChecks(int netId, bool toggle)
{
Function.Call((Hash)0xE6717E652B8C8D8A, netId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x407091CF6037118E<br />
/// </para>
/// </remarks>
public static void NetworkDisableProximityMigration(int netID)
{
Function.Call((Hash)0x407091CF6037118E, netID);
}

/// <summary>
/// value must be &lt; 255
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1775961C2FBBCB5C<br />
/// </para>
/// </remarks>
public static void NetworkSetPropertyId(int id)
{
Function.Call((Hash)0x1775961C2FBBCB5C, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2B82527CA77053E<br />
/// </para>
/// </remarks>
public static void NetworkClearPropertyId()
{
Function.Call((Hash)0xC2B82527CA77053E);
}

/// <summary>
/// p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x367EF5E2F439B4C6<br />
/// </para>
/// </remarks>
public static void NetworkSetPlayerMentalState(int p0)
{
Function.Call((Hash)0x367EF5E2F439B4C6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94538037EE44F5CF<br />
/// </para>
/// </remarks>
public static void NetworkSetMinimumRankForMission(bool p0)
{
Function.Call((Hash)0x94538037EE44F5CF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD0BE0BFC927EAC1<br />
/// </para>
/// </remarks>
public static void NetworkCacheLocalPlayerHeadBlendData()
{
Function.Call((Hash)0xBD0BE0BFC927EAC1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x237D5336A9A54108<br />
/// </para>
/// </remarks>
public static bool NetworkHasCachedPlayerHeadBlendData(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x237D5336A9A54108, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99B72C7ABDE5C910<br />
/// </para>
/// </remarks>
public static bool NetworkApplyCachedPlayerHeadBlendData(int /* Ped */ ped, int /* Player */ player)
{
return Function.Call<bool>((Hash)0x99B72C7ABDE5C910, ped, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2EAC213D5EA0623<br />
/// </para>
/// </remarks>
public static int GetNumCommerceItems()
{
return Function.Call<int>((Hash)0xF2EAC213D5EA0623);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA14EEF5B7CD2C30<br />
/// </para>
/// </remarks>
public static bool IsCommerceDataValid()
{
return Function.Call<bool>((Hash)0xEA14EEF5B7CD2C30);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB606E6CC59664972<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TriggerCommerceDataFetch(int /* bug: Any */ p0)
{
Function.Call((Hash)0xB606E6CC59664972, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D4DC17C38FEAFF0<br />
/// </para>
/// </remarks>
public static bool IsCommerceDataFetchInProgress()
{
return Function.Call<bool>((Hash)0x1D4DC17C38FEAFF0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x662635855957C411<br />
/// </para>
/// </remarks>
public static string GetCommerceItemId(int index)
{
return Function.Call<string>((Hash)0x662635855957C411, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4271092CA7EDF48<br />
/// </para>
/// </remarks>
public static string GetCommerceItemName(int index)
{
return Function.Call<string>((Hash)0xB4271092CA7EDF48, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA94551B50B4932C<br />
/// </para>
/// </remarks>
public static string GetCommerceProductPrice(int index)
{
return Function.Call<string>((Hash)0xCA94551B50B4932C, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A7776C709904AB0<br />
/// </para>
/// </remarks>
public static int GetCommerceItemNumCats(int index)
{
return Function.Call<int>((Hash)0x2A7776C709904AB0, index);
}

/// <summary>
/// index2 is unused
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F44CBF56D79FAC0<br />
/// </para>
/// </remarks>
public static string GetCommerceItemCat(int index, int index2)
{
return Function.Call<string>((Hash)0x6F44CBF56D79FAC0, index, index2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58C21165F6545892<br />
/// </para>
/// </remarks>
public static void OpenCommerceStore(string p0, string p1, int p2)
{
Function.Call((Hash)0x58C21165F6545892, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2EAC52B4019E2782<br />
/// </para>
/// </remarks>
public static bool IsCommerceStoreOpen()
{
return Function.Call<bool>((Hash)0x2EAC52B4019E2782);
}

/// <summary>
/// Access to the store for shark cards etc...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9641A9FF718E9C5E<br />
/// </para>
/// </remarks>
public static void SetStoreEnabled(bool toggle)
{
Function.Call((Hash)0x9641A9FF718E9C5E, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2F952104FC6DD4B<br />
/// </para>
/// </remarks>
public static bool RequestCommerceItemImage(int index)
{
return Function.Call<bool>((Hash)0xA2F952104FC6DD4B, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72D0706CD6CCDB58<br />
/// </para>
/// </remarks>
public static void ReleaseAllCommerceItemImages()
{
Function.Call((Hash)0x72D0706CD6CCDB58);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x722F5D28B61C5EA8<br />
/// </para>
/// </remarks>
public static string GetCommerceItemTexturename(int index)
{
return Function.Call<string>((Hash)0x722F5D28B61C5EA8, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x883D79C4071E18B3<br />
/// </para>
/// </remarks>
public static bool IsStoreAvailableToUser()
{
return Function.Call<bool>((Hash)0x883D79C4071E18B3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x265635150FB0D82E<br />
/// </para>
/// </remarks>
public static void DelayMpStoreOpen()
{
Function.Call((Hash)0x265635150FB0D82E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x444C4525ECE0A4B9<br />
/// </para>
/// </remarks>
public static void ResetStoreNetworkGameTracking()
{
Function.Call((Hash)0x444C4525ECE0A4B9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59328EB08C5CEB2B<br />
/// </para>
/// </remarks>
public static bool IsUserOldEnoughToAccessStore()
{
return Function.Call<bool>((Hash)0x59328EB08C5CEB2B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAE628F1E9ADB239<br />
/// </para>
/// </remarks>
public static void SetLastViewedShopItem(uint p0, int p1, uint p2)
{
Function.Call((Hash)0xFAE628F1E9ADB239, p0, p1, p2);
}

/// <summary>
/// Checks some commerce stuff
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x754615490A029508<br />
/// </para>
/// </remarks>
public static int GetUserPremiumAccess()
{
return Function.Call<int>((Hash)0x754615490A029508);
}

/// <summary>
/// Checks some commerce stuff
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x155467ACA0F55705<br />
/// </para>
/// </remarks>
public static int GetUserStarterAccess()
{
return Function.Call<int>((Hash)0x155467ACA0F55705);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC64DED7EF0D2FE37<br />
/// </para>
/// </remarks>
public static int CloudDeleteMemberFile(string p0)
{
return Function.Call<int>((Hash)0xC64DED7EF0D2FE37, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C61B39930D045DA<br />
/// </para>
/// </remarks>
public static bool CloudHasRequestCompleted(int handle)
{
return Function.Call<bool>((Hash)0x4C61B39930D045DA, handle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A3D5568AF297CD5<br />
/// </para>
/// </remarks>
public static bool CloudDidRequestSucceed(int handle)
{
return Function.Call<bool>((Hash)0x3A3D5568AF297CD5, handle);
}

/// <summary>
/// Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F18196C8D38768D<br />
/// </para>
/// </remarks>
public static void CloudCheckAvailability()
{
Function.Call((Hash)0x4F18196C8D38768D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7ABAC5DE675EE3B<br />
/// </para>
/// </remarks>
public static bool CloudIsCheckingAvailability()
{
return Function.Call<bool>((Hash)0xC7ABAC5DE675EE3B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B0CC10720653F3B<br />
/// </para>
/// </remarks>
public static bool CloudGetAvailabilityCheckResult()
{
return Function.Call<bool>((Hash)0x0B0CC10720653F3B);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B0C2964BA471961<br />
/// </para>
/// </remarks>
public static int GetContentToLoadType()
{
return Function.Call<int>((Hash)0x8B0C2964BA471961);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88B588B41FF7868E<br />
/// </para>
/// </remarks>
public static bool GetIsLaunchFromLiveArea()
{
return Function.Call<bool>((Hash)0x88B588B41FF7868E);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67FC09BC554A75E5<br />
/// </para>
/// </remarks>
public static bool GetIsLiveAreaLaunchWithContent()
{
return Function.Call<bool>((Hash)0x67FC09BC554A75E5);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x966DD84FB6A46017<br />
/// </para>
/// </remarks>
public static void ClearServiceEventArguments()
{
Function.Call((Hash)0x966DD84FB6A46017);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x152D90E4C1B4738A<br />
/// </para>
/// </remarks>
public static bool UgcCopyContent(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x152D90E4C1B4738A, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FEDF86898F100E9<br />
/// </para>
/// </remarks>
public static bool UgcIsCreating()
{
return Function.Call<bool>((Hash)0x9FEDF86898F100E9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E24341A7F92A74B<br />
/// </para>
/// </remarks>
public static bool UgcHasCreateFinished()
{
return Function.Call<bool>((Hash)0x5E24341A7F92A74B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24E4E51FC16305F9<br />
/// </para>
/// </remarks>
public static bool UgcDidCreateSucceed()
{
return Function.Call<bool>((Hash)0x24E4E51FC16305F9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBC5E768C7A77A6A<br />
/// </para>
/// </remarks>
public static int UgcGetCreateResult()
{
return Function.Call<int>((Hash)0xFBC5E768C7A77A6A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC55A0B40FFB1ED23<br />
/// </para>
/// </remarks>
public static string UgcGetCreateContentId()
{
return Function.Call<string>((Hash)0xC55A0B40FFB1ED23);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17440AA15D1D3739<br />
/// </para>
/// </remarks>
public static void UgcClearCreateResult()
{
Function.Call((Hash)0x17440AA15D1D3739);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BF438815F5D96EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcQueryMyContent(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x9BF438815F5D96EA, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x692D58DF40657E8C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcQueryByCategory(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, string p3, int /* bug: Any */ p4, bool p5)
{
return Function.Call<bool>((Hash)0x692D58DF40657E8C, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x158EC424F35EC469<br />
/// </para>
/// </remarks>
public static bool UgcQueryByContentId(string contentId, bool latestVersion, string contentTypeName)
{
return Function.Call<bool>((Hash)0x158EC424F35EC469, contentId, latestVersion, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7397A83F7A2A462<br />
/// </para>
/// </remarks>
public static bool UgcQueryByContentIds(int /* bug: structure */ data, int count, bool latestVersion, string contentTypeName)
{
return Function.Call<bool>((Hash)0xC7397A83F7A2A462, data, count, latestVersion, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D4CB481FAC835E8<br />
/// </para>
/// </remarks>
public static bool UgcQueryMostRecentlyCreatedContent(int offset, int count, string contentTypeName, int p3)
{
return Function.Call<bool>((Hash)0x6D4CB481FAC835E8, offset, count, contentTypeName, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5A4B59980401588<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetBookmarkedContent(int /* bug: Any */ p0, int /* bug: Any */ p1, string p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0xD5A4B59980401588, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3195F8DD0D531052<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetMyContent(int /* bug: Any */ p0, int /* bug: Any */ p1, string p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0x3195F8DD0D531052, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9E1CCAE8BA4C281<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetFriendContent(int /* bug: Any */ p0, int /* bug: Any */ p1, string p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0xF9E1CCAE8BA4C281, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F6E2821885CAEE2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetCrewContent(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, string p3, int /* bug: structure */ p4)
{
return Function.Call<bool>((Hash)0x9F6E2821885CAEE2, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x678BB03C1A3BD51E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetGetByCategory(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, string p3, int /* bug: structure */ p4)
{
return Function.Call<bool>((Hash)0x678BB03C1A3BD51E, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x815E5E3073DA1D67<br />
/// </para>
/// </remarks>
public static bool UgcGetGetByContentId(string contentId, string contentTypeName)
{
return Function.Call<bool>((Hash)0x815E5E3073DA1D67, contentId, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8322EEB38BE7C26<br />
/// </para>
/// </remarks>
public static bool UgcGetGetByContentIds(int /* bug: structure */ data, int dataCount, string contentTypeName)
{
return Function.Call<bool>((Hash)0xB8322EEB38BE7C26, data, dataCount, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7862BC5ED1DFD7E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetMostRecentlyCreatedContent(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0xA7862BC5ED1DFD7E, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97A770BEEF227E2B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetMostRecentlyPlayedContent(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0x97A770BEEF227E2B, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5324A0E3E4CE3570<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetTopRatedContent(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
return Function.Call<bool>((Hash)0x5324A0E3E4CE3570, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE9B99B6853181409<br />
/// </para>
/// </remarks>
public static void UgcCancelQuery()
{
Function.Call((Hash)0xE9B99B6853181409);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD53ACDBEF24A46E8<br />
/// </para>
/// </remarks>
public static bool UgcIsGetting()
{
return Function.Call<bool>((Hash)0xD53ACDBEF24A46E8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02ADA21EA2F6918F<br />
/// </para>
/// </remarks>
public static bool UgcHasGetFinished()
{
return Function.Call<bool>((Hash)0x02ADA21EA2F6918F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x941E5306BCD7C2C7<br />
/// </para>
/// </remarks>
public static bool UgcDidGetSucceed()
{
return Function.Call<bool>((Hash)0x941E5306BCD7C2C7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC87E740D9F3872CC<br />
/// </para>
/// </remarks>
public static bool UgcWasQueryForceCancelled()
{
return Function.Call<bool>((Hash)0xC87E740D9F3872CC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDF7F927136C224B<br />
/// </para>
/// </remarks>
public static int UgcGetQueryResult()
{
return Function.Call<int>((Hash)0xEDF7F927136C224B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0A6138401BCB837<br />
/// </para>
/// </remarks>
public static int UgcGetContentNum()
{
return Function.Call<int>((Hash)0xE0A6138401BCB837);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x769951E2455E2EB5<br />
/// </para>
/// </remarks>
public static int UgcGetContentTotal()
{
return Function.Call<int>((Hash)0x769951E2455E2EB5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A17A27D75C74887<br />
/// </para>
/// </remarks>
public static uint UgcGetContentHash()
{
return Function.Call<uint>((Hash)0x3A17A27D75C74887);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA96394A0EECFA65<br />
/// </para>
/// </remarks>
public static void UgcClearQueryResults()
{
Function.Call((Hash)0xBA96394A0EECFA65);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD67AD041A394C9C<br />
/// </para>
/// </remarks>
public static string UgcGetContentUserId(int p0)
{
return Function.Call<string>((Hash)0xCD67AD041A394C9C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x584770794D758C18<br />
/// </para>
/// </remarks>
public static bool UgcGetContentCreatorGamerHandle(int p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x584770794D758C18, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C8D2739BA44AF0F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentCreatedByLocalPlayer(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8C8D2739BA44AF0F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x703F12425ECA8BF5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static string UgcGetContentUserName(int /* bug: Any */ p0)
{
return Function.Call<string>((Hash)0x703F12425ECA8BF5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEAB987727C5A8A4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentIsUsingScNickname(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xAEAB987727C5A8A4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7BAB11E7C9C6C5A<br />
/// </para>
/// </remarks>
public static int UgcGetContentCategory(int p0)
{
return Function.Call<int>((Hash)0xA7BAB11E7C9C6C5A, p0);
}

/// <summary>
/// Return the mission id of a job.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55AA95F481D694D2<br />
/// </para>
/// </remarks>
public static string UgcGetContentId(int p0)
{
return Function.Call<string>((Hash)0x55AA95F481D694D2, p0);
}

/// <summary>
/// Return the root content id of a job.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0173D6BFF4E0348<br />
/// </para>
/// </remarks>
public static string UgcGetRootContentId(int p0)
{
return Function.Call<string>((Hash)0xC0173D6BFF4E0348, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF09786A7FCAB582<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static string UgcGetContentName(int /* bug: Any */ p0)
{
return Function.Call<string>((Hash)0xBF09786A7FCAB582, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CF0448787B23758<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentDescriptionHash(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x7CF0448787B23758, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAF6BABF9E7CCC13<br />
/// </para>
/// </remarks>
public static string UgcGetContentPath(int p0, int p1)
{
return Function.Call<string>((Hash)0xBAF6BABF9E7CCC13, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFD115B373C0DF63<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UgcGetContentUpdatedDate(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
Function.Call((Hash)0xCFD115B373C0DF63, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37025B27D9B658B1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentFileVersion(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x37025B27D9B658B1, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D610EB0FEA716D9<br />
/// </para>
/// </remarks>
public static bool UgcGetContentHasLoResPhoto(int p0)
{
return Function.Call<bool>((Hash)0x1D610EB0FEA716D9, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FCC39C46C3C03BD<br />
/// </para>
/// </remarks>
public static bool UgcGetContentHasHiResPhoto(int p0)
{
return Function.Call<bool>((Hash)0x7FCC39C46C3C03BD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x32DD916F3F7C9672<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentLanguage(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x32DD916F3F7C9672, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3054F114121C21EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentIsPublished(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x3054F114121C21EA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9240A96C74CCA13<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentIsVerified(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xA9240A96C74CCA13, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1ACCFBA3D8DAB2EE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static float UgcGetContentRating(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<float>((Hash)0x1ACCFBA3D8DAB2EE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x759299C5BB31D2A9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentRatingCount(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x759299C5BB31D2A9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87E5C46C187FE0AE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentRatingPositiveCount(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x87E5C46C187FE0AE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E548C0D7AE39FF9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int UgcGetContentRatingNegativeCount(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x4E548C0D7AE39FF9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70EA8DA57840F9BE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentHasPlayerRecord(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x70EA8DA57840F9BE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x993CBE59D350D225<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcGetContentHasPlayerBookmarked(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x993CBE59D350D225, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x171DF6A0C07FB3DC<br />
/// </para>
/// </remarks>
public static int UgcRequestContentDataFromIndex(int p0, int p1)
{
return Function.Call<int>((Hash)0x171DF6A0C07FB3DC, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FD2990AF016795E<br />
/// </para>
/// </remarks>
public static int UgcRequestContentDataFromParams(string contentTypeName, string contentId, int p2, int p3, int p4)
{
return Function.Call<int>((Hash)0x7FD2990AF016795E, contentTypeName, contentId, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E0165278F6339EE<br />
/// </para>
/// </remarks>
public static int UgcRequestCachedDescription(int p0)
{
return Function.Call<int>((Hash)0x5E0165278F6339EE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D5DC831176D0114<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcIsDescriptionRequestInProgress(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x2D5DC831176D0114, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBFA8D50ADDC54C4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcHasDescriptionRequestFinished(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xEBFA8D50ADDC54C4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x162C23CA83ED0A62<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcDidDescriptionRequestSucceed(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x162C23CA83ED0A62, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40F7E66472DF3E5C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static string UgcGetCachedDescription(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<string>((Hash)0x40F7E66472DF3E5C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A34CD9C3C5BEC44<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcReleaseCachedDescription(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x5A34CD9C3C5BEC44, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68103E2247887242<br />
/// </para>
/// </remarks>
public static void UgcReleaseAllCachedDescriptions()
{
Function.Call((Hash)0x68103E2247887242);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DE0F5F50D723CAA<br />
/// </para>
/// </remarks>
public static bool UgcPublish(string contentId, string baseContentId, string contentTypeName)
{
return Function.Call<bool>((Hash)0x1DE0F5F50D723CAA, contentId, baseContentId, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x274A1519DFC1094F<br />
/// </para>
/// </remarks>
public static bool UgcSetBookmarked(string contentId, bool bookmarked, string contentTypeName)
{
return Function.Call<bool>((Hash)0x274A1519DFC1094F, contentId, bookmarked, contentTypeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD05D1A6C74DA3498<br />
/// </para>
/// </remarks>
public static bool UgcSetDeleted(int /* bug: structure */ p0, bool p1, string p2)
{
return Function.Call<bool>((Hash)0xD05D1A6C74DA3498, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45E816772E93A9DB<br />
/// </para>
/// </remarks>
public static bool UgcIsModifying()
{
return Function.Call<bool>((Hash)0x45E816772E93A9DB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x299EF3C576773506<br />
/// </para>
/// </remarks>
public static bool UgcHasModifyFinished()
{
return Function.Call<bool>((Hash)0x299EF3C576773506);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x793FF272D5B365F4<br />
/// </para>
/// </remarks>
public static bool UgcDidModifySucceed()
{
return Function.Call<bool>((Hash)0x793FF272D5B365F4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A0A3D1A186A5508<br />
/// </para>
/// </remarks>
public static int UgcGetModifyResult()
{
return Function.Call<int>((Hash)0x5A0A3D1A186A5508);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1E5E0204A6FCC70<br />
/// </para>
/// </remarks>
public static void UgcClearModifyResult()
{
Function.Call((Hash)0xA1E5E0204A6FCC70);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB746D20B17F2A229<br />
/// </para>
/// </remarks>
public static bool UgcGetCreatorsByUserId(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xB746D20B17F2A229, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63B406D7884BFA95<br />
/// </para>
/// </remarks>
public static bool UgcHasQueryCreatorsFinished()
{
return Function.Call<bool>((Hash)0x63B406D7884BFA95);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D02279C83BE69FE<br />
/// </para>
/// </remarks>
public static bool UgcDidQueryCreatorsSucceed()
{
return Function.Call<bool>((Hash)0x4D02279C83BE69FE);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x597F8DBA9B206FC7<br />
/// </para>
/// </remarks>
public static int UgcGetCreatorNum()
{
return Function.Call<int>((Hash)0x597F8DBA9B206FC7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CAE833B0EE0C500<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcLoadOfflineQuery(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x5CAE833B0EE0C500, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61A885D3F7CFEE9A<br />
/// </para>
/// </remarks>
public static void UgcClearOfflineQuery()
{
Function.Call((Hash)0x61A885D3F7CFEE9A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF98DDE0A8ED09323<br />
/// </para>
/// </remarks>
public static void UgcSetQueryDataFromOffline(bool p0)
{
Function.Call((Hash)0xF98DDE0A8ED09323, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD75DABC0957BF33<br />
/// </para>
/// </remarks>
public static void UgcSetUsingOfflineContent(bool p0)
{
Function.Call((Hash)0xFD75DABC0957BF33, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF53E48461B71EECB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool UgcIsLanguageSupported(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xF53E48461B71EECB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x098AB65B9ED9A9EC<br />
/// </para>
/// </remarks>
public static bool FacebookPostCompletedHeist(string heistName, int cashEarned, int xpEarned)
{
return Function.Call<bool>((Hash)0x098AB65B9ED9A9EC, heistName, cashEarned, xpEarned);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC48473142545431<br />
/// </para>
/// </remarks>
public static bool FacebookPostCreateCharacter()
{
return Function.Call<bool>((Hash)0xDC48473142545431);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AE1F1653B554AB9<br />
/// </para>
/// </remarks>
public static bool FacebookPostCompletedMilestone(int milestoneId)
{
return Function.Call<bool>((Hash)0x0AE1F1653B554AB9, milestoneId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62B9FEC9A11F10EF<br />
/// </para>
/// </remarks>
public static bool FacebookHasPostCompleted()
{
return Function.Call<bool>((Hash)0x62B9FEC9A11F10EF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA75E2B6733DA5142<br />
/// </para>
/// </remarks>
public static bool FacebookDidPostSucceed()
{
return Function.Call<bool>((Hash)0xA75E2B6733DA5142);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43865688AE10F0D7<br />
/// </para>
/// </remarks>
public static bool FacebookCanPostToFacebook()
{
return Function.Call<bool>((Hash)0x43865688AE10F0D7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16160DA74A8E74A2<br />
/// </para>
/// </remarks>
public static int TextureDownloadRequest(int /* bug: structure */ gamerHandle, string filePath, string name, bool p3)
{
return Function.Call<int>((Hash)0x16160DA74A8E74A2, gamerHandle, filePath, name, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B203B4AFDE53A4F<br />
/// </para>
/// </remarks>
public static int TitleTextureDownloadRequest(string filePath, string name, bool p2)
{
return Function.Call<int>((Hash)0x0B203B4AFDE53A4F, filePath, name, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x308F96458B7087CC<br />
/// </para>
/// </remarks>
public static int UgcTextureDownloadRequest(string p0, int p1, int p2, int p3, string p4, bool p5)
{
return Function.Call<int>((Hash)0x308F96458B7087CC, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x487EB90B98E9FB19<br />
/// </para>
/// </remarks>
public static void TextureDownloadRelease(int p0)
{
Function.Call((Hash)0x487EB90B98E9FB19, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5776ED562C134687<br />
/// </para>
/// </remarks>
public static bool TextureDownloadHasFailed(int p0)
{
return Function.Call<bool>((Hash)0x5776ED562C134687, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3448505B6E35262D<br />
/// </para>
/// </remarks>
public static string TextureDownloadGetName(int p0)
{
return Function.Call<string>((Hash)0x3448505B6E35262D, p0);
}

/// <summary>
/// 0 = succeeded<br />1 = pending<br />2 = failed
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BD6C6DEA20E82C6<br />
/// </para>
/// </remarks>
public static int GetStatusOfTextureDownload(int p0)
{
return Function.Call<int>((Hash)0x8BD6C6DEA20E82C6, p0);
}

/// <summary>
/// Returns true if profile setting 901 is set to true and sets it to false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60EDD13EB3AC1FF3<br />
/// </para>
/// </remarks>
public static bool NetworkCheckRosLinkWentdownNotNet()
{
return Function.Call<bool>((Hash)0x60EDD13EB3AC1FF3);
}

/// <summary>
/// Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x82A2B386716608F1<br />
/// </para>
/// </remarks>
public static bool NetworkShouldShowStrictNatWarning()
{
return Function.Call<bool>((Hash)0x82A2B386716608F1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFFB25453D8600F9<br />
/// </para>
/// </remarks>
public static bool NetworkIsCableConnected()
{
return Function.Call<bool>((Hash)0xEFFB25453D8600F9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66B59CFFD78467AF<br />
/// </para>
/// </remarks>
public static bool NetworkHaveScsPrivateMsgPriv()
{
return Function.Call<bool>((Hash)0x66B59CFFD78467AF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x606E4D3E3CCCF3EB<br />
/// </para>
/// </remarks>
public static bool NetworkHaveRosSocialClubPriv()
{
return Function.Call<bool>((Hash)0x606E4D3E3CCCF3EB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8020A73847E0CA7D<br />
/// </para>
/// </remarks>
public static bool NetworkHaveRosBannedPriv()
{
return Function.Call<bool>((Hash)0x8020A73847E0CA7D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0AD7E2AF5349F61<br />
/// </para>
/// </remarks>
public static bool NetworkHaveRosCreateTicketPriv()
{
return Function.Call<bool>((Hash)0xA0AD7E2AF5349F61);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F91D5D0B36AA310<br />
/// </para>
/// </remarks>
public static bool NetworkHaveRosMultiplayerPriv()
{
return Function.Call<bool>((Hash)0x5F91D5D0B36AA310);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x422D396F80A96547<br />
/// </para>
/// </remarks>
public static bool NetworkHaveRosLeaderboardWritePriv()
{
return Function.Call<bool>((Hash)0x422D396F80A96547);
}

/// <summary>
/// index is always 18 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA699957E60D80214<br />
/// </para>
/// </remarks>
public static bool NetworkHasRosPrivilege(int index)
{
return Function.Call<bool>((Hash)0xA699957E60D80214, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC22912B1D85F26B1<br />
/// </para>
/// </remarks>
public static bool NetworkHasRosPrivilegeEndDate(int privilege, ref int banType, int /* bug: structure */ timeData)
{
var nativeAssistPointerVar0 = banType;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC22912B1D85F26B1, privilege, &nativeAssistPointerVar0, timeData);
}
banType = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x593570C289A77688<br />
/// </para>
/// </remarks>
public static bool NetworkHasRosPrivilegePlayedLastGen()
{
return Function.Call<bool>((Hash)0x593570C289A77688);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91B87C55093DE351<br />
/// </para>
/// </remarks>
public static bool NetworkHasRosPrivilegeSpecialEditionContent()
{
return Function.Call<bool>((Hash)0x91B87C55093DE351);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36391F397731595D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int NetworkStartCommunicationPermissionsCheck(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x36391F397731595D, p0);
}

/// <summary>
/// Always returns -1. Seems to be XB1 specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEB2B99A1AF1A2A6<br />
/// </para>
/// </remarks>
public static int NetworkStartUserContentPermissionsCheck(int /* bug: structure */ netHandle)
{
return Function.Call<int>((Hash)0xDEB2B99A1AF1A2A6, netHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9465E683B12D3F6B<br />
/// </para>
/// </remarks>
public static void NetworkSkipRadioResetNextClose()
{
Function.Call((Hash)0x9465E683B12D3F6B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xCA59CCAE5D01E4CE<br />
/// </para>
/// </remarks>
public static void NetworkSkipRadioResetNextOpen()
{
Function.Call((Hash)0xCA59CCAE5D01E4CE);
}

/// <summary>
/// Returns true if dinput8.dll is present in the game directory.<br />You will get following error message if that is true: &quot;You are attempting to access GTA Online servers with an altered version of the game.&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x659CF2EF7F550C4F<br />
/// </para>
/// </remarks>
public static bool NetworkSkipRadioWarning()
{
return Function.Call<bool>((Hash)0x659CF2EF7F550C4F);
}

/// <summary>
/// NETWORK_F[I-O]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB7C7F6AD6424304B<br />
/// </para>
/// </remarks>
public static void NetworkForceLocalPlayerScarSync()
{
Function.Call((Hash)0xB7C7F6AD6424304B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC505036A35AFD01B<br />
/// </para>
/// </remarks>
public static void NetworkDisableLeaveRemotePedBehind(bool toggle)
{
Function.Call((Hash)0xC505036A35AFD01B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x267C78C60E806B9A<br />
/// </para>
/// </remarks>
public static void NetworkAllowRemoteAttachmentModification(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x267C78C60E806B9A, entity, toggle);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6BFF5F84102DF80A<br />
/// </para>
/// </remarks>
public static void NetworkShowChatRestrictionMsc(int /* Player */ player)
{
Function.Call((Hash)0x6BFF5F84102DF80A, player);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C497525F803486B<br />
/// </para>
/// </remarks>
public static void NetworkShowPsnUgcRestriction()
{
Function.Call((Hash)0x5C497525F803486B);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FB7BB3607D27FA2<br />
/// </para>
/// </remarks>
public static bool NetworkIsTitleUpdateRequired()
{
return Function.Call<bool>((Hash)0x6FB7BB3607D27FA2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45A83257ED02D9BC<br />
/// </para>
/// </remarks>
public static void NetworkQuitMpToDesktop()
{
Function.Call((Hash)0x45A83257ED02D9BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16D3D49902F697BB<br />
/// </para>
/// </remarks>
public static bool NetworkIsConnectedViaRelay(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x16D3D49902F697BB, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD414BE129BB81B32<br />
/// </para>
/// </remarks>
public static float NetworkGetAverageLatency(int /* Player */ player)
{
return Function.Call<float>((Hash)0xD414BE129BB81B32, player);
}

/// <summary>
/// Same as NETWORK_GET_AVERAGE_LATENCY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E3A041ED6AC2B45<br />
/// </para>
/// </remarks>
public static float NetworkGetAveragePing(int /* Player */ player)
{
return Function.Call<float>((Hash)0x0E3A041ED6AC2B45, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x350C23949E43686C<br />
/// </para>
/// </remarks>
public static float NetworkGetAveragePacketLoss(int /* Player */ player)
{
return Function.Call<float>((Hash)0x350C23949E43686C, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF8FCF9FFC458A1C<br />
/// </para>
/// </remarks>
public static int NetworkGetNumUnackedReliables(int /* Player */ player)
{
return Function.Call<int>((Hash)0xFF8FCF9FFC458A1C, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3765C3A3E8192E10<br />
/// </para>
/// </remarks>
public static int NetworkGetUnreliableResendCount(int /* Player */ player)
{
return Function.Call<int>((Hash)0x3765C3A3E8192E10, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52C1EADAF7B10302<br />
/// </para>
/// </remarks>
public static int NetworkGetHighestReliableResendCount(int /* Player */ player)
{
return Function.Call<int>((Hash)0x52C1EADAF7B10302, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 350<br />
/// <b>Native ID:</b> 0x5626D9D6810730D5<br />
/// </para>
/// </remarks>
public static void NetworkReportCodeTamper()
{
Function.Call((Hash)0x5626D9D6810730D5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x64D779659BC37B19<br />
/// </para>
/// </remarks>
public static Vector3 NetworkGetLastEntityPosReceivedOverNetwork(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x64D779659BC37B19, entity);
}

/// <summary>
/// Returns the coordinates of another player.<br />Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x125E6D638B8605D4<br />
/// </para>
/// </remarks>
public static Vector3 NetworkGetLastPlayerPosReceivedOverNetwork(int /* Player */ player)
{
return Function.Call<Vector3>((Hash)0x125E6D638B8605D4, player);
}

/// <summary>
/// Used by NetBlender
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x33DE49EDF4DDE77A<br />
/// </para>
/// </remarks>
public static Vector3 NetworkGetLastVelReceivedOverNetwork(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x33DE49EDF4DDE77A, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xAA5FAFCD2C5F5E47<br />
/// </para>
/// </remarks>
public static Vector3 NetworkGetPredictedVelocity(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0xAA5FAFCD2C5F5E47, entity);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEDF1BC1C133D6E3<br />
/// </para>
/// </remarks>
public static void NetworkDumpNetIfConfig()
{
Function.Call((Hash)0xAEDF1BC1C133D6E3);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2555CF7DA5473794<br />
/// </para>
/// </remarks>
public static void NetworkGetSignallingInfo(int /* bug: structure */ p0)
{
Function.Call((Hash)0x2555CF7DA5473794, p0);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FD992C4A1C1B986<br />
/// </para>
/// </remarks>
public static void NetworkGetNetStatisticsInfo(int /* bug: structure */ p0)
{
Function.Call((Hash)0x6FD992C4A1C1B986, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xDB663CC9FF3407A9<br />
/// </para>
/// </remarks>
public static int NetworkGetPlayerAccountId(int /* Player */ player)
{
return Function.Call<int>((Hash)0xDB663CC9FF3407A9, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xC1447451DDB512F0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void NetworkUgcNav(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xC1447451DDB512F0, p0, p1);
}

#endregion
#region OBJECT
/// <summary>
/// List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x509D5878EB39E842<br />
/// </para>
/// </remarks>
public static int CreateObject(uint modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic)
{
return Function.Call<int>((Hash)0x509D5878EB39E842, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);
}

/// <summary>
/// List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A294B2138ABB884<br />
/// </para>
/// </remarks>
public static int CreateObjectNoOffset(uint modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic)
{
return Function.Call<int>((Hash)0x9A294B2138ABB884, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);
}

/// <summary>
/// Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x539E0AE3E6634B9F<br />
/// </para>
/// </remarks>
public static void DeleteObject(ref int /* Object* */ @object)
{
var nativeAssistPointerVar0 = @object;
unsafe {
Function.Call((Hash)0x539E0AE3E6634B9F, &nativeAssistPointerVar0);
}
@object = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58A850EAEE20FAA3<br />
/// </para>
/// </remarks>
public static bool PlaceObjectOnGroundProperly(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x58A850EAEE20FAA3, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xD76EEEF746057FD6<br />
/// </para>
/// </remarks>
public static bool PlaceObjectOnGroundOrObjectProperly(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0xD76EEEF746057FD6, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xAFE24E4D29249E4A<br />
/// </para>
/// </remarks>
public static bool RotateObject(int /* Object */ @object, float p1, float p2, bool p3)
{
return Function.Call<bool>((Hash)0xAFE24E4D29249E4A, @object, p1, p2, p3);
}

/// <summary>
/// Returns true if the object has finished moving.<br /><br />If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.<br /><br />See also: https://gtagmodding.com/opcode-database/opcode/034E/<br />Has to be looped until it returns true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FDFF4107B8C1147<br />
/// </para>
/// </remarks>
public static bool SlideObject(int /* Object */ @object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collision)
{
return Function.Call<bool>((Hash)0x2FDFF4107B8C1147, @object, toX, toY, toZ, speedX, speedY, speedZ, collision);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A7391690F5AFD81<br />
/// </para>
/// </remarks>
public static void SetObjectTargettable(int /* Object */ @object, bool targettable)
{
Function.Call((Hash)0x8A7391690F5AFD81, @object, targettable);
}

/// <summary>
/// Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77F33F2CCF64B3AA<br />
/// </para>
/// </remarks>
public static void SetObjectForceVehiclesToAvoid(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x77F33F2CCF64B3AA, @object, toggle);
}

/// <summary>
/// Has 8 params in the latest patches.<br /><br />isMission - if true doesn&apos;t return mission objects
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE143FA2249364369<br />
/// </para>
/// </remarks>
public static int GetClosestObjectOfType(float x, float y, float z, float radius, uint modelHash, bool isMission, bool p6, bool p7)
{
return Function.Call<int>((Hash)0xE143FA2249364369, x, y, z, radius, modelHash, isMission, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8ABFB70C49CC43E2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HasObjectBeenBroken(int /* Object */ @object, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x8ABFB70C49CC43E2, @object, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x761B0E69AC4D007E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HasClosestObjectOfTypeBeenBroken(float p0, float p1, float p2, float p3, uint modelHash, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x761B0E69AC4D007E, p0, p1, p2, p3, modelHash, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46494A2475701343<br />
/// </para>
/// </remarks>
public static bool HasClosestObjectOfTypeBeenCompletelyDestroyed(float x, float y, float z, float radius, uint modelHash, bool p5)
{
return Function.Call<bool>((Hash)0x46494A2475701343, x, y, z, radius, modelHash, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x2542269291C6AC84<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetHasObjectBeenCompletelyDestroyed(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x2542269291C6AC84, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x163E252DE035A133<br />
/// </para>
/// </remarks>
public static Vector3 GetOffsetFromCoordAndHeadingInWorldCoords(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset)
{
return Function.Call<Vector3>((Hash)0x163E252DE035A133, xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x163F8B586BC95F2A<br />
/// </para>
/// </remarks>
public static bool GetCoordsAndRotationOfClosestObjectOfType(float x, float y, float z, float radius, uint modelHash, ref Vector3 outPosition, ref Vector3 outRotation, int rotationOrder)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = outRotation;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x163F8B586BC95F2A, x, y, z, radius, modelHash, &nativeAssistPointerVar0, &nativeAssistPointerVar1, rotationOrder);
}
outPosition = nativeAssistPointerVar0;
outRotation = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Hardcoded to not work in multiplayer.<br /><br /><br />Used to lock/unlock doors to interior areas of the game.<br /><br />(Possible) Door Types:<br /><br />https://pastebin.com/9S2m3qA4<br /><br />Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.<br />Locked means that the heading is locked.  <br />p6 is always 0. <br /><br />225 door types, model names and coords found in stripclub.c4:<br />https://pastebin.com/gywnbzsH<br /><br />get door info: https://pastebin.com/i14rbekD
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF82D8F1926A02C3D<br />
/// </para>
/// </remarks>
public static void SetStateOfClosestDoorOfType(uint type, float x, float y, float z, bool locked, float heading, bool p6)
{
Function.Call((Hash)0xF82D8F1926A02C3D, type, x, y, z, locked, heading, p6);
}

/// <summary>
/// locked is 0 if no door is found<br />locked is 0 if door is unlocked<br />locked is 1 if door is found and unlocked.<br /><br />-------------<br />the locked bool is either 0(unlocked)(false) or 1(locked)(true)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDC1A5B84AEF33FF<br />
/// </para>
/// </remarks>
public static void GetStateOfClosestDoorOfType(uint type, float x, float y, float z, ref bool locked, ref float heading)
{
var nativeAssistPointerVar0 = locked;
var nativeAssistPointerVar1 = heading;
unsafe {
Function.Call((Hash)0xEDC1A5B84AEF33FF, type, x, y, z, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
locked = nativeAssistPointerVar0;
heading = nativeAssistPointerVar1;
}

/// <summary>
/// Hardcoded not to work in multiplayer environments.<br />When you set locked to 0 the door open and to 1 the door close<br />OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open<br /><br />OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B12F9A24FABEDB0<br />
/// </para>
/// </remarks>
public static void SetLockedUnstreamedInDoorOfType(uint modelHash, float x, float y, float z, bool locked, float xRotMult, float yRotMult, float zRotMult)
{
Function.Call((Hash)0x9B12F9A24FABEDB0, modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x006E4B040ED37EC3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlayObjectAutoStartAnim(int /* bug: Any */ p0)
{
Function.Call((Hash)0x006E4B040ED37EC3, p0);
}

/// <summary>
/// doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent&apos;s in DOOR_SYSTEM_SET_DOOR_STATE.<br />p5 only set to true in single player native scripts.<br />If scriptDoor is true, register the door on the script handler host (note: there&apos;s a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a &quot;Persists w/o netobj&quot; state.<br /><br />door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want<br />All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.<br /><br />Example: AddDoorToSystem(&quot;PROP_43_DOOR_0&quot;, &quot;hei_v_ilev_fh_heistdoor2&quot;, -1456.818, -520.5037, 69.67043, 0, 0, 0)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F8838D03D1DC226<br />
/// </para>
/// </remarks>
public static void AddDoorToSystem(uint doorHash, uint modelHash, float x, float y, float z, bool p5, bool scriptDoor, bool isLocal)
{
Function.Call((Hash)0x6F8838D03D1DC226, doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal);
}

/// <summary>
/// CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).<br />Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x464D8E1427156FE4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RemoveDoorFromSystem(uint doorHash, int /* bug: Any */ p1)
{
Function.Call((Hash)0x464D8E1427156FE4, doorHash, p1);
}

/// <summary>
/// Lockstates not applied and CNetObjDoor&apos;s not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.<br />`requestDoor` on true, and when door system is configured to, i.e., &quot;persists w/o netobj&quot;, generate a CRequestDoorEvent.<br />`forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)<br />Door lock states:<br />0: UNLOCKED<br />1: LOCKED<br />2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA<br />3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME<br />4: DOORSTATE_FORCE_LOCKED_THIS_FRAME<br />5: DOORSTATE_FORCE_OPEN_THIS_FRAME<br />6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6BAB9442830C7F53<br />
/// </para>
/// </remarks>
public static void DoorSystemSetDoorState(uint doorHash, int state, bool requestDoor, bool forceUpdate)
{
Function.Call((Hash)0x6BAB9442830C7F53, doorHash, state, requestDoor, forceUpdate);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x160AA1B32F6139B8<br />
/// </para>
/// </remarks>
public static int DoorSystemGetDoorState(uint doorHash)
{
return Function.Call<int>((Hash)0x160AA1B32F6139B8, doorHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4BC2854478F3A749<br />
/// </para>
/// </remarks>
public static int DoorSystemGetDoorPendingState(uint doorHash)
{
return Function.Call<int>((Hash)0x4BC2854478F3A749, doorHash);
}

/// <summary>
/// Includes networking check: ownership vs. or the door itself **isn&apos;t** networked.<br />`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03C27E13B42A0E82<br />
/// </para>
/// </remarks>
public static void DoorSystemSetAutomaticRate(uint doorHash, float rate, bool requestDoor, bool forceUpdate)
{
Function.Call((Hash)0x03C27E13B42A0E82, doorHash, rate, requestDoor, forceUpdate);
}

/// <summary>
/// `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BA001CB45CBF627<br />
/// </para>
/// </remarks>
public static void DoorSystemSetAutomaticDistance(uint doorHash, float distance, bool requestDoor, bool forceUpdate)
{
Function.Call((Hash)0x9BA001CB45CBF627, doorHash, distance, requestDoor, forceUpdate);
}

/// <summary>
/// Sets the ajar angle of a door.<br />Ranges from -1.0 to 1.0, and 0.0 is closed / default.<br />`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6E6FBA95C7324AC<br />
/// </para>
/// </remarks>
public static void DoorSystemSetOpenRatio(uint doorHash, float ajar, bool requestDoor, bool forceUpdate)
{
Function.Call((Hash)0xB6E6FBA95C7324AC, doorHash, ajar, requestDoor, forceUpdate);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xE851471AEFC3374F<br />
/// </para>
/// </remarks>
public static float DoorSystemGetAutomaticDistance(uint doorHash)
{
return Function.Call<float>((Hash)0xE851471AEFC3374F, doorHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65499865FCA6E5EC<br />
/// </para>
/// </remarks>
public static float DoorSystemGetOpenRatio(uint doorHash)
{
return Function.Call<float>((Hash)0x65499865FCA6E5EC, doorHash);
}

/// <summary>
/// Includes networking check: ownership vs. or the door itself **isn&apos;t** networked.<br />`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC485E07E4F0B7958<br />
/// </para>
/// </remarks>
public static void DoorSystemSetSpringRemoved(uint doorHash, bool removed, bool requestDoor, bool forceUpdate)
{
Function.Call((Hash)0xC485E07E4F0B7958, doorHash, removed, requestDoor, forceUpdate);
}

/// <summary>
/// Includes networking check: ownership vs. or the door itself **isn&apos;t** networked.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9B71952F78A2640<br />
/// </para>
/// </remarks>
public static void DoorSystemSetHoldOpen(uint doorHash, bool toggle)
{
Function.Call((Hash)0xD9B71952F78A2640, doorHash, toggle);
}

/// <summary>
/// Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA85A21582451E951<br />
/// </para>
/// </remarks>
public static void DoorSystemSetDoorOpenForRaces(uint doorHash, bool p1)
{
Function.Call((Hash)0xA85A21582451E951, doorHash, p1);
}

/// <summary>
/// if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) <br />{<br />    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC153C43EA202C8C1<br />
/// </para>
/// </remarks>
public static bool IsDoorRegisteredWithSystem(uint doorHash)
{
return Function.Call<bool>((Hash)0xC153C43EA202C8C1, doorHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC531EE8A1145A149<br />
/// </para>
/// </remarks>
public static bool IsDoorClosed(uint doorHash)
{
return Function.Call<bool>((Hash)0xC531EE8A1145A149, doorHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7F29CA00F46350E<br />
/// </para>
/// </remarks>
public static void OpenAllBarriersForRace(bool p0)
{
Function.Call((Hash)0xC7F29CA00F46350E, p0);
}

/// <summary>
/// Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor&apos;s bucket-list.<br />Related to its &quot;Pre-networked state&quot;?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x701FDA1E82076BA4<br />
/// </para>
/// </remarks>
public static void CloseAllBarriersForRace()
{
Function.Call((Hash)0x701FDA1E82076BA4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF97CDD4FC08FD34<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DoorSystemGetIsPhysicsLoaded(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xDF97CDD4FC08FD34, p0);
}

/// <summary>
/// Search radius: 0.5
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x589F80B325CC82C5<br />
/// </para>
/// </remarks>
public static bool DoorSystemFindExistingDoor(float x, float y, float z, uint modelHash, ref uint outDoorHash)
{
var nativeAssistPointerVar0 = outDoorHash;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x589F80B325CC82C5, x, y, z, modelHash, &nativeAssistPointerVar0);
}
outDoorHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90E47239EA1980B8<br />
/// </para>
/// </remarks>
public static bool IsGarageEmpty(uint garageHash, bool p1, int p2)
{
return Function.Call<bool>((Hash)0x90E47239EA1980B8, garageHash, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x024A60DEB0EA69F0<br />
/// </para>
/// </remarks>
public static bool IsPlayerEntirelyInsideGarage(uint garageHash, int /* Player */ player, float p2, int p3)
{
return Function.Call<bool>((Hash)0x024A60DEB0EA69F0, garageHash, player, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1761DC5D8471CBAA<br />
/// </para>
/// </remarks>
public static bool IsPlayerPartiallyInsideGarage(uint garageHash, int /* Player */ player, int p2)
{
return Function.Call<bool>((Hash)0x1761DC5D8471CBAA, garageHash, player, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85B6C850546FDDE2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool AreEntitiesEntirelyInsideGarage(uint garageHash, bool p1, bool p2, bool p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0x85B6C850546FDDE2, garageHash, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x673ED815D6E323B7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsAnyEntityEntirelyInsideGarage(uint garageHash, bool p1, bool p2, bool p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0x673ED815D6E323B7, garageHash, p1, p2, p3, p4);
}

/// <summary>
/// Despite the name, it does work for any entity type.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x372EF6699146A1E4<br />
/// </para>
/// </remarks>
public static bool IsObjectEntirelyInsideGarage(uint garageHash, int /* Entity */ entity, float p2, int p3)
{
return Function.Call<bool>((Hash)0x372EF6699146A1E4, garageHash, entity, p2, p3);
}

/// <summary>
/// Despite the name, it does work for any entity type.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0EED5A6BC7B237A<br />
/// </para>
/// </remarks>
public static bool IsObjectPartiallyInsideGarage(uint garageHash, int /* Entity */ entity, int p2)
{
return Function.Call<bool>((Hash)0xF0EED5A6BC7B237A, garageHash, entity, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xDA05194260CDCDF9<br />
/// </para>
/// </remarks>
public static void ClearGarage(uint garageHash, bool isNetwork)
{
Function.Call((Hash)0xDA05194260CDCDF9, garageHash, isNetwork);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x190428512B240692<br />
/// </para>
/// </remarks>
public static void ClearObjectsInsideGarage(uint garageHash, bool vehicles, bool peds, bool objects, bool isNetwork)
{
Function.Call((Hash)0x190428512B240692, garageHash, vehicles, peds, objects, isNetwork);
}

/// <summary>
/// Sets a flag. A valid id is 0x157DC10D
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x659F9D71F52843F8<br />
/// </para>
/// </remarks>
public static void DisableTidyingUpInGarage(int id, bool toggle)
{
Function.Call((Hash)0x659F9D71F52843F8, id, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2E1A7133DD356A6<br />
/// </para>
/// </remarks>
public static void EnableSavingInGarage(uint garageHash, bool toggle)
{
Function.Call((Hash)0xF2E1A7133DD356A6, garageHash, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66A49D021870FE88<br />
/// </para>
/// </remarks>
public static void CloseSafehouseGarages()
{
Function.Call((Hash)0x66A49D021870FE88);
}

/// <summary>
/// p5 is usually 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFA48E2FF417213F<br />
/// </para>
/// </remarks>
public static bool DoesObjectOfTypeExistAtCoords(float x, float y, float z, float radius, uint hash, bool p5)
{
return Function.Call<bool>((Hash)0xBFA48E2FF417213F, x, y, z, radius, hash, p5);
}

/// <summary>
/// An angled area is an X-Z oriented rectangle with three parameters:<br />1. origin: the mid-point along a base edge of the rectangle;<br />2. extent: the mid-point of opposite base edge on the other Z;<br />3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).<br /><br />The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:<br />1. golf_mp https://i.imgur.com/JhsQAK9.png<br />2. am_taxi https://i.imgur.com/TJWCZaT.jpg
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A70BAE8883E4C81<br />
/// </para>
/// </remarks>
public static bool IsPointInAngledArea(float xPos, float yPos, float zPos, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ)
{
return Function.Call<bool>((Hash)0x2A70BAE8883E4C81, xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ);
}

/// <summary>
/// Overrides the climbing/blocking flags of the object, used in the native scripts mostly for &quot;prop_dock_bouy_*&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D89D607CB3DD1D2<br />
/// </para>
/// </remarks>
public static void SetObjectAllowLowLodBuoyancy(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x4D89D607CB3DD1D2, @object, toggle);
}

/// <summary>
/// Adjust the physics parameters of a prop, or otherwise known as &quot;object&quot;. This is useful for simulated gravity.<br /><br />Other parameters seem to be unknown.<br /><br />p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?<br />p3: seems similar to p2<br />p4: makes obj fall slower the higher the value<br />p5: similar to p4
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6DF6E90DE7DF90F<br />
/// </para>
/// </remarks>
public static void SetObjectPhysicsParams(int /* Object */ @object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy)
{
Function.Call((Hash)0xF6DF6E90DE7DF90F, @object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6FBFD079B8D0596<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static float GetObjectFragmentDamageHealth(int /* bug: Any */ p0, bool p1)
{
return Function.Call<float>((Hash)0xB6FBFD079B8D0596, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x406137F8EF90EAF5<br />
/// </para>
/// </remarks>
public static void SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x406137F8EF90EAF5, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x397DC58FF00298D1<br />
/// </para>
/// </remarks>
public static bool IsAnyObjectNearPoint(float x, float y, float z, float range, bool p4)
{
return Function.Call<bool>((Hash)0x397DC58FF00298D1, x, y, z, range, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C90FE4B381BA60A<br />
/// </para>
/// </remarks>
public static bool IsObjectNearPoint(uint objectHash, float x, float y, float z, float range)
{
return Function.Call<bool>((Hash)0x8C90FE4B381BA60A, objectHash, x, y, z, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A39DB43E47CF3AA<br />
/// </para>
/// </remarks>
public static void RemoveObjectHighDetailModel(int /* Object */ @object)
{
Function.Call((Hash)0x4A39DB43E47CF3AA, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7E4C198B0185900<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void BreakObjectFragmentChild(int /* Object */ p0, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0xE7E4C198B0185900, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xE05F6AEEFEB0BB02<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void DamageObjectFragmentChild(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xE05F6AEEFEB0BB02, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9C1681347C8BD15<br />
/// </para>
/// </remarks>
public static void FixObjectFragment(int /* Object */ @object)
{
Function.Call((Hash)0xF9C1681347C8BD15, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB252BC036B525623<br />
/// </para>
/// </remarks>
public static void TrackObjectVisibility(int /* Object */ @object)
{
Function.Call((Hash)0xB252BC036B525623, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B32ACE6326A7546<br />
/// </para>
/// </remarks>
public static bool IsObjectVisible(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x8B32ACE6326A7546, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6033D32241F6FB5<br />
/// </para>
/// </remarks>
public static void SetObjectIsSpecialGolfball(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0xC6033D32241F6FB5, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB6F1A9B5510A5D2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetObjectTakesDamageFromCollidingWithBuildings(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0xEB6F1A9B5510A5D2, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xABDABF4E1EDECBFA<br />
/// </para>
/// </remarks>
public static void AllowDamageEventsForNonNetworkedObjects(bool value)
{
Function.Call((Hash)0xABDABF4E1EDECBFA, value);
}

/// <summary>
/// Requires a component_at_*_flsh to be attached to the weapon object
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCE595371A5FBAAF<br />
/// </para>
/// </remarks>
public static void SetCutscenesWeaponFlashlightOnThisFrame(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0xBCE595371A5FBAAF, @object, toggle);
}

/// <summary>
/// Example:<br />OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, &quot;des_tvsmash&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB48FCED898292E52<br />
/// </para>
/// </remarks>
public static int GetRayfireMapObject(float x, float y, float z, float radius, string name)
{
return Function.Call<int>((Hash)0xB48FCED898292E52, x, y, z, radius, name);
}

/// <summary>
/// Defines the state of a destructible object.<br />Use the GET_RAYFIRE_MAP_OBJECT native to find an object&apos;s handle with its name / coords.<br />State 2 == object just spawned<br />State 4 == Beginning of the animation<br />State 6 == Start animation<br />State 9 == End of the animation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C29F698D404C5E1<br />
/// </para>
/// </remarks>
public static void SetStateOfRayfireMapObject(int /* Object */ @object, int state)
{
Function.Call((Hash)0x5C29F698D404C5E1, @object, state);
}

/// <summary>
/// Get a destructible object&apos;s state.<br />Substract 1 to get the real state.<br />See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states<br />For example, if the object just spawned (state 2), the native will return 3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x899BA936634A322E<br />
/// </para>
/// </remarks>
public static int GetStateOfRayfireMapObject(int /* Object */ @object)
{
return Function.Call<int>((Hash)0x899BA936634A322E, @object);
}

/// <summary>
/// Returns true if a destructible object with this handle exists, false otherwise.  
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52AF537A0C5B8AAD<br />
/// </para>
/// </remarks>
public static bool DoesRayfireMapObjectExist(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x52AF537A0C5B8AAD, @object);
}

/// <summary>
/// `object`: The des-object handle to get the animation progress from.<br />Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x260EE4FDBDF4DB01<br />
/// </para>
/// </remarks>
public static float GetRayfireMapObjectAnimPhase(int /* Object */ @object)
{
return Function.Call<float>((Hash)0x260EE4FDBDF4DB01, @object);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBA08C503DD5FA58<br />
/// </para>
/// </remarks>
public static Pickup CreatePickup(uint pickupHash, float posX, float posY, float posZ, int p4, int value, bool p6, uint modelHash)
{
return Function.Call<Pickup>((Hash)0xFBA08C503DD5FA58, pickupHash, posX, posY, posZ, p4, value, p6, modelHash);
}

/// <summary>
/// flags:<br />8 (1 &lt;&lt; 3): place on ground<br />512 (1 &lt;&lt; 9): spin around<br /><br />Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x891804727E0A98B7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static Pickup CreatePickupRotate(uint pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flag, int amount, int /* bug: Any */ p9, bool p10, uint modelHash)
{
return Function.Call<Pickup>((Hash)0x891804727E0A98B7, pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x394CD08E31313C28<br />
/// </para>
/// </remarks>
public static void ForcePickupRotateFaceUp()
{
Function.Call((Hash)0x394CD08E31313C28);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x826D1EE4D1CAFC78<br />
/// </para>
/// </remarks>
public static void SetCustomPickupWeaponHash(uint pickupHash, Pickup pickup)
{
Function.Call((Hash)0x826D1EE4D1CAFC78, pickupHash, pickup);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x673966A0C0FD7171<br />
/// </para>
/// </remarks>
public static int CreateAmbientPickup(uint pickupHash, float posX, float posY, float posZ, int flags, int value, uint modelHash, bool p7, bool p8)
{
return Function.Call<int>((Hash)0x673966A0C0FD7171, pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x9C93764223E29C50<br />
/// </para>
/// </remarks>
public static int CreateNonNetworkedAmbientPickup(uint pickupHash, float posX, float posY, float posZ, int flags, int value, uint modelHash, bool p7, bool p8)
{
return Function.Call<int>((Hash)0x9C93764223E29C50, pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x1E3F1B1B891A2AAA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void BlockPlayersForAmbientPickup(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x1E3F1B1B891A2AAA, p0, p1);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2EAF1FDB2FB55698<br />
/// </para>
/// </remarks>
public static int CreatePortablePickup(uint pickupHash, float x, float y, float z, bool placeOnGround, uint modelHash)
{
return Function.Call<int>((Hash)0x2EAF1FDB2FB55698, pickupHash, x, y, z, placeOnGround, modelHash);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x125494B98A21AAF7<br />
/// </para>
/// </remarks>
public static int CreateNonNetworkedPortablePickup(uint pickupHash, float x, float y, float z, bool placeOnGround, uint modelHash)
{
return Function.Call<int>((Hash)0x125494B98A21AAF7, pickupHash, x, y, z, placeOnGround, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DC39368BDD57755<br />
/// </para>
/// </remarks>
public static void AttachPortablePickupToPed(int /* Object */ pickupObject, int /* Ped */ ped)
{
Function.Call((Hash)0x8DC39368BDD57755, pickupObject, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF463D1E9A0AECB1<br />
/// </para>
/// </remarks>
public static void DetachPortablePickupFromPed(int /* Object */ pickupObject)
{
Function.Call((Hash)0xCF463D1E9A0AECB1, pickupObject);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x5CE2E45A5CE2E45A<br />
/// </para>
/// </remarks>
public static void ForcePortablePickupLastAccessiblePositionSetting(int /* Object */ @object)
{
Function.Call((Hash)0x5CE2E45A5CE2E45A, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x867458251D47CCB2<br />
/// </para>
/// </remarks>
public static void HidePortablePickupWhenDetached(int /* Object */ pickupObject, bool toggle)
{
Function.Call((Hash)0x867458251D47CCB2, pickupObject, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BF3B3BD47D79C08<br />
/// </para>
/// </remarks>
public static void SetMaxNumPortablePickupsCarriedByPlayer(uint modelHash, int number)
{
Function.Call((Hash)0x0BF3B3BD47D79C08, modelHash, number);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78857FC65CADB909<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerCanCollectPortablePickups(bool toggle)
{
Function.Call((Hash)0x78857FC65CADB909, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E16BC2503FF1FF0<br />
/// </para>
/// </remarks>
public static Vector3 GetSafePickupCoords(float x, float y, float z, float p3, float p4)
{
return Function.Call<Vector3>((Hash)0x6E16BC2503FF1FF0, x, y, z, p3, p4);
}

/// <summary>
/// Adds an area that seems to be related to pickup physics behavior.<br />Max amount of areas is 10. Only works in multiplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xD4A7A435B3710D05<br />
/// </para>
/// </remarks>
public static void AddExtendedPickupProbeArea(float x, float y, float z, float radius)
{
Function.Call((Hash)0xD4A7A435B3710D05, x, y, z, radius);
}

/// <summary>
/// Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xB7C6D80FB371659A<br />
/// </para>
/// </remarks>
public static void ClearExtendedPickupProbeAreas()
{
Function.Call((Hash)0xB7C6D80FB371659A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x225B8B35C88029B3<br />
/// </para>
/// </remarks>
public static Vector3 GetPickupCoords(Pickup pickup)
{
return Function.Call<Vector3>((Hash)0x225B8B35C88029B3, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x8DCA505A5C196F05<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SuppressPickupSoundForPickup(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x8DCA505A5C196F05, p0, p1);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27F9D613092159CF<br />
/// </para>
/// </remarks>
public static void RemoveAllPickupsOfType(uint pickupHash)
{
Function.Call((Hash)0x27F9D613092159CF, pickupHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80EC48E6679313F9<br />
/// </para>
/// </remarks>
public static bool HasPickupBeenCollected(Pickup pickup)
{
return Function.Call<bool>((Hash)0x80EC48E6679313F9, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3288D8ACAECD2AB2<br />
/// </para>
/// </remarks>
public static void RemovePickup(Pickup pickup)
{
Function.Call((Hash)0x3288D8ACAECD2AB2, pickup);
}

/// <summary>
/// Spawns one or more money pickups.<br /><br />x: The X-component of the world position to spawn the money pickups at.<br />y: The Y-component of the world position to spawn the money pickups at.<br />z: The Z-component of the world position to spawn the money pickups at.<br />value: The combined value of the pickups (in dollars).<br />amount: The number of pickups to spawn.<br />model: The model to use, or 0 for default money model.<br /><br />Example:<br />CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);<br /><br />Spawns 3 spray cans that&apos;ll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).<br /><br />==============================================<br /><br />Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0589B5E791CE9B2B<br />
/// </para>
/// </remarks>
public static void CreateMoneyPickups(float x, float y, float z, int value, int amount, uint model)
{
Function.Call((Hash)0x0589B5E791CE9B2B, x, y, z, value, amount, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFC1CA75AD4074D1<br />
/// </para>
/// </remarks>
public static bool DoesPickupExist(Pickup pickup)
{
return Function.Call<bool>((Hash)0xAFC1CA75AD4074D1, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9EFB6DBF7DAAEA3<br />
/// </para>
/// </remarks>
public static bool DoesPickupObjectExist(int /* Object */ pickupObject)
{
return Function.Call<bool>((Hash)0xD9EFB6DBF7DAAEA3, pickupObject);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5099BC55630B25AE<br />
/// </para>
/// </remarks>
public static int GetPickupObject(Pickup pickup)
{
return Function.Call<int>((Hash)0x5099BC55630B25AE, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xFC481C641EBBD27D<br />
/// </para>
/// </remarks>
public static bool IsObjectAPickup(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0xFC481C641EBBD27D, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0378C08504160D0D<br />
/// </para>
/// </remarks>
public static bool IsObjectAPortablePickup(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x0378C08504160D0D, @object);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9C36251F6E48E33<br />
/// </para>
/// </remarks>
public static bool DoesPickupOfTypeExistInArea(uint pickupHash, float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0xF9C36251F6E48E33, pickupHash, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78015C9B4B3ECC9D<br />
/// </para>
/// </remarks>
public static void SetPickupRegenerationTime(Pickup pickup, int duration)
{
Function.Call((Hash)0x78015C9B4B3ECC9D, pickup, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x758A5C1B3B1E1990<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForcePickupRegenerate(int /* bug: Any */ p0)
{
Function.Call((Hash)0x758A5C1B3B1E1990, p0);
}

/// <summary>
/// Disabling/enabling a player from getting pickups. From the scripts:<br /><br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);<br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);<br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);<br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);<br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);<br />OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);<br /><br />Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x616093EC6B139DD9<br />
/// </para>
/// </remarks>
public static void SetPlayerPermittedToCollectPickupsOfType(int /* Player */ player, uint pickupHash, bool toggle)
{
Function.Call((Hash)0x616093EC6B139DD9, player, pickupHash, toggle);
}

/// <summary>
/// Maximum amount of pickup models that can be disallowed is 30.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88EAEC617CD26926<br />
/// </para>
/// </remarks>
public static void SetLocalPlayerPermittedToCollectPickupsWithModel(uint modelHash, bool toggle)
{
Function.Call((Hash)0x88EAEC617CD26926, modelHash, toggle);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xFDC07C58E8AAB715<br />
/// </para>
/// </remarks>
public static void AllowAllPlayersToCollectPickupsOfType(uint pickupHash)
{
Function.Call((Hash)0xFDC07C58E8AAB715, pickupHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53E0DF1A2A3CF0CA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetTeamPickupObject(int /* Object */ @object, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0x53E0DF1A2A3CF0CA, @object, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92AEFB5F6E294023<br />
/// </para>
/// </remarks>
public static void PreventCollectionOfPortablePickup(int /* Object */ @object, bool p1, bool p2)
{
Function.Call((Hash)0x92AEFB5F6E294023, @object, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x27F248C3FEBFAAD3<br />
/// </para>
/// </remarks>
public static void SetPickupObjectGlowWhenUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x27F248C3FEBFAAD3, pickup, toggle);
}

/// <summary>
/// p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x0596843B34B95CE5<br />
/// </para>
/// </remarks>
public static void SetPickupGlowOffset(Pickup pickup, float p1)
{
Function.Call((Hash)0x0596843B34B95CE5, pickup, p1);
}

/// <summary>
/// p1 is always -0.2 in scripts and p2 is always true in scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA08FE5E49BDC39DD<br />
/// </para>
/// </remarks>
public static void SetPickupObjectGlowOffset(Pickup pickup, float p1, bool p2)
{
Function.Call((Hash)0xA08FE5E49BDC39DD, pickup, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x62454A641B41F3C5<br />
/// </para>
/// </remarks>
public static void SetObjectGlowInSameTeam(Pickup pickup)
{
Function.Call((Hash)0x62454A641B41F3C5, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x39A5FB7EAF150840<br />
/// </para>
/// </remarks>
public static void SetPickupObjectArrowMarker(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x39A5FB7EAF150840, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x834344A414C7C85D<br />
/// </para>
/// </remarks>
public static void AllowPickupArrowMarkerWhenUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x834344A414C7C85D, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB41D07A45A6D4B7<br />
/// </para>
/// </remarks>
public static int GetDefaultAmmoForWeaponPickup(uint pickupHash)
{
return Function.Call<int>((Hash)0xDB41D07A45A6D4B7, pickupHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x318516E02DE3ECE2<br />
/// </para>
/// </remarks>
public static void SetPickupGenerationRangeMultiplier(float multiplier)
{
Function.Call((Hash)0x318516E02DE3ECE2, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xB3ECA65C7317F174<br />
/// </para>
/// </remarks>
public static float GetPickupGenerationRangeMultiplier()
{
return Function.Call<float>((Hash)0xB3ECA65C7317F174);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31F924B53EADDF65<br />
/// </para>
/// </remarks>
public static void SetOnlyAllowAmmoCollectionWhenLow(bool p0)
{
Function.Call((Hash)0x31F924B53EADDF65, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x1C1B69FAE509BA97<br />
/// </para>
/// </remarks>
public static void SetPickupUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x1C1B69FAE509BA97, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x858EC9FD25DE04AA<br />
/// </para>
/// </remarks>
public static void SetPickupTransparentWhenUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x858EC9FD25DE04AA, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x3ED2B83AB2E82799<br />
/// </para>
/// </remarks>
public static void SetPickupHiddenWhenUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x3ED2B83AB2E82799, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x8881C98A31117998<br />
/// </para>
/// </remarks>
public static void SetPickupObjectTransparentWhenUncollectable(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x8881C98A31117998, pickup, toggle);
}

/// <summary>
/// p0 is either 0 or 50 in scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x8CFF648FBD7330F1<br />
/// </para>
/// </remarks>
public static void SetPickupObjectAlphaWhenTransparent(int p0)
{
Function.Call((Hash)0x8CFF648FBD7330F1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x46F3ADD1E2D5BAF2<br />
/// </para>
/// </remarks>
public static void SetPortablePickupPersist(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x46F3ADD1E2D5BAF2, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x641F272B52E2F0F8<br />
/// </para>
/// </remarks>
public static void AllowPortablePickupToMigrateToNonParticipants(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x641F272B52E2F0F8, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x4C134B4DF76025D0<br />
/// </para>
/// </remarks>
public static void ForceActivatePhysicsOnUnfixedPickup(Pickup pickup, bool toggle)
{
Function.Call((Hash)0x4C134B4DF76025D0, pickup, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xAA059C615DE9DD03<br />
/// </para>
/// </remarks>
public static void AllowPickupByNoneParticipant(Pickup pickup, bool toggle)
{
Function.Call((Hash)0xAA059C615DE9DD03, pickup, toggle);
}

/// <summary>
/// enum ePickupRewardType<br />{<br />    PICKUP_REWARD_TYPE_AMMO = (1 &lt;&lt; 0),<br />    PICKUP_REWARD_TYPE_BULLET_MP = (1 &lt;&lt; 1),<br />    PICKUP_REWARD_TYPE_MISSILE_MP = (1 &lt;&lt; 2),<br />    PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 &lt;&lt; 3),<br />    PICKUP_REWARD_TYPE_ARMOUR = (1 &lt;&lt; 4),<br />    PICKUP_REWARD_TYPE_HEALTH = (1 &lt;&lt; 5),<br />    PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,<br />    PICKUP_REWARD_TYPE_MONEY_FIXED = (1 &lt;&lt; 6),<br />    PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,<br />    PICKUP_REWARD_TYPE_WEAPON = (1 &lt;&lt; 7),<br />    PICKUP_REWARD_TYPE_STAT = (1 &lt;&lt; 8),<br />    PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,<br />    PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 &lt;&lt; 9),<br />    PICKUP_REWARD_TYPE_FIREWORK_MP = (1 &lt;&lt; 10),<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF92099527DB8E2A7<br />
/// </para>
/// </remarks>
public static void SuppressPickupRewardType(int rewardType, bool suppress)
{
Function.Call((Hash)0xF92099527DB8E2A7, rewardType, suppress);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2C1F5E92AFE49ED<br />
/// </para>
/// </remarks>
public static void ClearAllPickupRewardTypeSuppression()
{
Function.Call((Hash)0xA2C1F5E92AFE49ED);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x762DB2D380B48D04<br />
/// </para>
/// </remarks>
public static void ClearPickupRewardTypeSuppression(int rewardType)
{
Function.Call((Hash)0x762DB2D380B48D04, rewardType);
}

/// <summary>
/// draws circular marker at pos<br />-1 = none<br />0 = red<br />1 = green<br />2 = blue<br />3 = green larger<br />4 = nothing<br />5 = green small
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3430676B11CDF21D<br />
/// </para>
/// </remarks>
public static void RenderFakePickupGlow(float x, float y, float z, int colorIndex)
{
Function.Call((Hash)0x3430676B11CDF21D, x, y, z, colorIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x7813E8B8C4AE4799<br />
/// </para>
/// </remarks>
public static void SetPickupObjectCollectableInVehicle(Pickup pickup)
{
Function.Call((Hash)0x7813E8B8C4AE4799, pickup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xBFFE53AE7E67FCDC<br />
/// </para>
/// </remarks>
public static void SetPickupTrackDamageEvents(Pickup pickup, bool toggle)
{
Function.Call((Hash)0xBFFE53AE7E67FCDC, pickup, toggle);
}

/// <summary>
/// Sets entity+38 to C (when false) or 0xFF3f (when true)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xD05A3241B9A86F19<br />
/// </para>
/// </remarks>
public static void SetEntityFlagSuppressShadow(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0xD05A3241B9A86F19, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2D0BDE54F0E8E5A<br />
/// </para>
/// </remarks>
public static void SetEntityFlagRenderSmallShadow(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0xB2D0BDE54F0E8E5A, @object, toggle);
}

/// <summary>
/// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x08F96CA6C551AD51<br />
/// </para>
/// </remarks>
public static uint GetWeaponTypeFromPickupType(uint pickupHash)
{
return Function.Call<uint>((Hash)0x08F96CA6C551AD51, pickupHash);
}

/// <summary>
/// Returns the pickup hash for the given weapon hash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xD6429A016084F1A5<br />
/// </para>
/// </remarks>
public static uint GetPickupTypeFromWeaponHash(uint weaponHash)
{
return Function.Call<uint>((Hash)0xD6429A016084F1A5, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11D1E53A726891FE<br />
/// </para>
/// </remarks>
public static bool IsPickupWeaponObjectValid(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x11D1E53A726891FE, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xE84EB93729C5F36A<br />
/// </para>
/// </remarks>
public static int GetObjectTintIndex(int /* Object */ @object)
{
return Function.Call<int>((Hash)0xE84EB93729C5F36A, @object);
}

/// <summary>
/// enum ObjectPaintVariants<br />{<br /> Pacific = 0,<br />  Azure = 1,<br />    Nautical = 2,<br /> Continental = 3,<br />  Battleship = 4,<br />   Intrepid = 5,<br /> Uniform = 6,<br />  Classico = 7,<br /> Mediterranean = 8,<br />    Command = 9,<br />  Mariner = 10,<br /> Ruby = 11,<br />    Vintage = 12,<br /> Pristine = 13,<br />    Merchant = 14,<br />    Voyager = 15<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x971DA0055324D033<br />
/// </para>
/// </remarks>
public static void SetObjectTintIndex(int /* Object */ @object, int textureVariation)
{
Function.Call((Hash)0x971DA0055324D033, @object, textureVariation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF12E33034D887F66<br />
/// </para>
/// </remarks>
public static bool SetTintIndexClosestBuildingOfType(float x, float y, float z, float radius, uint modelHash, int textureVariation)
{
return Function.Call<bool>((Hash)0xF12E33034D887F66, x, y, z, radius, modelHash, textureVariation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x31574B1B41268673<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPropTintIndex(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x31574B1B41268673, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x5F048334B4A4E774<br />
/// </para>
/// </remarks>
public static bool SetPropLightColor(int /* Object */ @object, bool p1, int r, int g, int b)
{
return Function.Call<bool>((Hash)0x5F048334B4A4E774, @object, p1, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xADF084FB8F075D06<br />
/// </para>
/// </remarks>
public static bool IsPropLightOverriden(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0xADF084FB8F075D06, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x3B2FD68DB5F8331C<br />
/// </para>
/// </remarks>
public static void SetObjectIsVisibleInMirrors(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x3B2FD68DB5F8331C, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x96EE0EBA0163DF80<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetObjectSpeedBoostAmount(int /* Object */ @object, int /* bug: Any */ p1)
{
Function.Call((Hash)0x96EE0EBA0163DF80, @object, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xDF6CA0330F2E737B<br />
/// </para>
/// </remarks>
public static void SetObjectSpeedBoostDuration(int /* Object */ @object, float duration)
{
Function.Call((Hash)0xDF6CA0330F2E737B, @object, duration);
}

/// <summary>
/// returns pickup hash.<br /><br />Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EAAD83F8CFB4575<br />
/// </para>
/// </remarks>
public static uint ConvertOldPickupTypeToNew(uint pickupHash)
{
return Function.Call<uint>((Hash)0x5EAAD83F8CFB4575, pickupHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF538081986E49E9D<br />
/// </para>
/// </remarks>
public static void SetForceObjectThisFrame(float x, float y, float z, float p3)
{
Function.Call((Hash)0xF538081986E49E9D, x, y, z, p3);
}

/// <summary>
/// is this like setting is as no longer needed?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADBE4809F19F927A<br />
/// </para>
/// </remarks>
public static void OnlyCleanUpObjectWhenOutOfRange(int /* Object */ @object)
{
Function.Call((Hash)0xADBE4809F19F927A, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x8CAAB2BD3EA58BD4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDisableCollisionsBetweenCarsAndCarParachute(int /* bug: Any */ p0)
{
Function.Call((Hash)0x8CAAB2BD3EA58BD4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x63ECF581BC70E363<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetProjectilesShouldExplodeOnContact(int /* Entity */ entity, int /* bug: Any */ p1)
{
Function.Call((Hash)0x63ECF581BC70E363, entity, p1);
}

/// <summary>
/// Activate the physics to: &quot;xs_prop_arena_{flipper,wall,bollard,turntable,pit}&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x911024442F4898F0<br />
/// </para>
/// </remarks>
public static void SetDriveArticulatedJoint(int /* Object */ @object, bool toggle, int p2)
{
Function.Call((Hash)0x911024442F4898F0, @object, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xB20834A7DD3D8896<br />
/// </para>
/// </remarks>
public static void SetDriveArticulatedJointWithInflictor(int /* Object */ @object, bool toggle, int p2, int /* Ped */ ped)
{
Function.Call((Hash)0xB20834A7DD3D8896, @object, toggle, p2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x734E1714D077DA9A<br />
/// </para>
/// </remarks>
public static void SetObjectIsAPressurePlate(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x734E1714D077DA9A, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x1A6CBB06E2D0D79D<br />
/// </para>
/// </remarks>
public static void SetWeaponImpactsApplyGreaterForce(int /* Object */ @object, bool p1)
{
Function.Call((Hash)0x1A6CBB06E2D0D79D, @object, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x43C677F1E1158005<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetIsArticulatedJointAtMinAngle(int /* Object */ @object, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x43C677F1E1158005, @object, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x3BD770D281982DB5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetIsArticulatedJointAtMaxAngle(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x3BD770D281982DB5, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x1C57C94A6446492A<br />
/// </para>
/// </remarks>
public static void SetIsObjectArticulated(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x1C57C94A6446492A, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xB5B7742424BD4445<br />
/// </para>
/// </remarks>
public static void SetIsObjectBall(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0xB5B7742424BD4445, @object, toggle);
}

#endregion
#region PAD
/// <summary>
/// control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL<br />For more info, see https://docs.fivem.net/docs/game-references/controls/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CEA6BFDF248E5D9<br />
/// </para>
/// </remarks>
public static bool IsControlEnabled(int control, int action)
{
return Function.Call<bool>((Hash)0x1CEA6BFDF248E5D9, control, action);
}

/// <summary>
/// Returns whether a control is currently pressed.<br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3A21BCD95725A4A<br />
/// </para>
/// </remarks>
public static bool IsControlPressed(int control, int action)
{
return Function.Call<bool>((Hash)0xF3A21BCD95725A4A, control, action);
}

/// <summary>
/// Returns whether a control is currently _not_ pressed.<br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x648EE3E7F38877DD<br />
/// </para>
/// </remarks>
public static bool IsControlReleased(int control, int action)
{
return Function.Call<bool>((Hash)0x648EE3E7F38877DD, control, action);
}

/// <summary>
/// Returns whether a control was newly pressed since the last check.<br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x580417101DDB492F<br />
/// </para>
/// </remarks>
public static bool IsControlJustPressed(int control, int action)
{
return Function.Call<bool>((Hash)0x580417101DDB492F, control, action);
}

/// <summary>
/// Returns whether a control was newly released since the last check.<br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50F940259D3841E6<br />
/// </para>
/// </remarks>
public static bool IsControlJustReleased(int control, int action)
{
return Function.Call<bool>((Hash)0x50F940259D3841E6, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD95E79E8686D2C27<br />
/// </para>
/// </remarks>
public static int GetControlValue(int control, int action)
{
return Function.Call<int>((Hash)0xD95E79E8686D2C27, control, action);
}

/// <summary>
/// Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)<br /><br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC3C9B8D5327B563<br />
/// </para>
/// </remarks>
public static float GetControlNormal(int control, int action)
{
return Function.Call<float>((Hash)0xEC3C9B8D5327B563, control, action);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B73C77D9EB66E24<br />
/// </para>
/// </remarks>
public static void SetUseAdjustedMouseCoords(bool toggle)
{
Function.Call((Hash)0x5B73C77D9EB66E24, toggle);
}

/// <summary>
/// Seems to return values between -1 and 1 for controls like gas and steering.<br /><br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B84D09CEC5209C5<br />
/// </para>
/// </remarks>
public static float GetControlUnboundNormal(int control, int action)
{
return Function.Call<float>((Hash)0x5B84D09CEC5209C5, control, action);
}

/// <summary>
/// This is for simulating player input.<br />value is a float value from 0 - 1<br /><br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8A25867FBA3B05E<br />
/// </para>
/// </remarks>
public static bool SetControlValueNextFrame(int control, int action, float value)
{
return Function.Call<bool>((Hash)0xE8A25867FBA3B05E, control, action, value);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2587F8CBBD87B1D<br />
/// </para>
/// </remarks>
public static bool IsDisabledControlPressed(int control, int action)
{
return Function.Call<bool>((Hash)0xE2587F8CBBD87B1D, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xFB6C4072E9A32E92<br />
/// </para>
/// </remarks>
public static bool IsDisabledControlReleased(int control, int action)
{
return Function.Call<bool>((Hash)0xFB6C4072E9A32E92, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91AEF906BCA88877<br />
/// </para>
/// </remarks>
public static bool IsDisabledControlJustPressed(int control, int action)
{
return Function.Call<bool>((Hash)0x91AEF906BCA88877, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x305C8DCD79DA8B0F<br />
/// </para>
/// </remarks>
public static bool IsDisabledControlJustReleased(int control, int action)
{
return Function.Call<bool>((Hash)0x305C8DCD79DA8B0F, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11E65974A982637C<br />
/// </para>
/// </remarks>
public static float GetDisabledControlNormal(int control, int action)
{
return Function.Call<float>((Hash)0x11E65974A982637C, control, action);
}

/// <summary>
/// The &quot;disabled&quot; variant of GET_CONTROL_UNBOUND_NORMAL.<br /><br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F8A26A890FD62FB<br />
/// </para>
/// </remarks>
public static float GetDisabledControlUnboundNormal(int control, int action)
{
return Function.Call<float>((Hash)0x4F8A26A890FD62FB, control, action);
}

/// <summary>
/// Returns time in ms since last input.<br /><br />control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7D22F5592AED8BA<br />
/// </para>
/// </remarks>
public static int GetControlHowLongAgo(int control)
{
return Function.Call<int>((Hash)0xD7D22F5592AED8BA, control);
}

/// <summary>
/// control: unused parameter
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA571D46727E2B718<br />
/// </para>
/// </remarks>
public static bool IsUsingKeyboardAndMouse(int control)
{
return Function.Call<bool>((Hash)0xA571D46727E2B718, control);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13337B38DB572509<br />
/// </para>
/// </remarks>
public static bool IsUsingCursor(int control)
{
return Function.Call<bool>((Hash)0x13337B38DB572509, control);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC695459D4D0E219<br />
/// </para>
/// </remarks>
public static bool SetCursorPosition(float x, float y)
{
return Function.Call<bool>((Hash)0xFC695459D4D0E219, x, y);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED<br /><br />Hardcoded to return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23F09EADC01449D6<br />
/// </para>
/// </remarks>
public static bool IsUsingRemotePlay(int control)
{
return Function.Call<bool>((Hash)0x23F09EADC01449D6, control);
}

/// <summary>
/// control: unused parameter
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CD79468A1E595C6<br />
/// </para>
/// </remarks>
public static bool HaveControlsChanged(int control)
{
return Function.Call<bool>((Hash)0x6CD79468A1E595C6, control);
}

/// <summary>
/// allowXOSwap appears to always be true.<br /><br />EG:<br />GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/<br />GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/<br />GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/<br /><br />gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378<br /><br />control: unused parameter
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0499D7B09FC9B407<br />
/// </para>
/// </remarks>
public static string GetControlInstructionalButtonsString(int control, int action, bool allowXOSwap)
{
return Function.Call<string>((Hash)0x0499D7B09FC9B407, control, action, allowXOSwap);
}

/// <summary>
/// control: unused parameter
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80C2FD58D720C801<br />
/// </para>
/// </remarks>
public static string GetControlGroupInstructionalButtonsString(int control, int controlGroup, bool allowXOSwap)
{
return Function.Call<string>((Hash)0x80C2FD58D720C801, control, controlGroup, allowXOSwap);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8290252FFF36ACB5<br />
/// </para>
/// </remarks>
public static void SetControlLightEffectColor(int control, int red, int green, int blue)
{
Function.Call((Hash)0x8290252FFF36ACB5, control, red, green, blue);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB0360EFEFB2580D<br />
/// </para>
/// </remarks>
public static void ClearControlLightEffect(int control)
{
Function.Call((Hash)0xCB0360EFEFB2580D, control);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED<br />duration in milliseconds <br />frequency should range from about 10 (slow vibration) to 255 (very fast)<br /><br />example:<br />SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48B3886C1358D0D5<br />
/// </para>
/// </remarks>
public static void SetControlShake(int control, int duration, int frequency)
{
Function.Call((Hash)0x48B3886C1358D0D5, control, duration, frequency);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14D29BB12D47F68C<br />
/// </para>
/// </remarks>
public static void SetControlTriggerShake(int control, int leftDuration, int leftFrequency, int rightDuration, int rightFrequency)
{
Function.Call((Hash)0x14D29BB12D47F68C, control, leftDuration, leftFrequency, rightDuration, rightFrequency);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38C16A305E8CDC8D<br />
/// </para>
/// </remarks>
public static void StopControlShake(int control)
{
Function.Call((Hash)0x38C16A305E8CDC8D, control);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF239400E16C23E08<br />
/// </para>
/// </remarks>
public static void SetControlShakeSuppressedId(int control, int uniqueId)
{
Function.Call((Hash)0xF239400E16C23E08, control, uniqueId);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0CEFCEA390AAB9B<br />
/// </para>
/// </remarks>
public static void ClearControlShakeSuppressedId(int control)
{
Function.Call((Hash)0xA0CEFCEA390AAB9B, control);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77B612531280010D<br />
/// </para>
/// </remarks>
public static bool IsLookInverted()
{
return Function.Call<bool>((Hash)0x77B612531280010D);
}

/// <summary>
/// Used with IS_LOOK_INVERTED() and negates its affect.<br /><br />--<br /><br />Not sure how the person above got that description, but here&apos;s an actual example:<br /><br />if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {<br />    if (a_5) {<br />        if (PAD::IS_LOOK_INVERTED()) {<br />            a_3 *= -1;<br />        }<br />        if (PAD::IS_MOUSE_LOOK_INVERTED()) {<br />            a_3 *= -1;<br />        }<br />    }<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1615EC03B3BB4FD<br />
/// </para>
/// </remarks>
public static bool IsMouseLookInverted()
{
return Function.Call<bool>((Hash)0xE1615EC03B3BB4FD);
}

/// <summary>
/// Returns the local player&apos;s targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB41AFBBBC0A0287<br />
/// </para>
/// </remarks>
public static int GetLocalPlayerAimState()
{
return Function.Call<int>((Hash)0xBB41AFBBBC0A0287);
}

/// <summary>
/// Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59B9A7AF4C95133C<br />
/// </para>
/// </remarks>
public static int GetLocalPlayerGamepadAimState()
{
return Function.Call<int>((Hash)0x59B9A7AF4C95133C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x25AAA32BDC98F2A3<br />
/// </para>
/// </remarks>
public static bool GetIsUsingAlternateHandbrake()
{
return Function.Call<bool>((Hash)0x25AAA32BDC98F2A3);
}

/// <summary>
/// Returns profile setting 225.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F70731BACCFBB96<br />
/// </para>
/// </remarks>
public static bool GetIsUsingAlternateDriveby()
{
return Function.Call<bool>((Hash)0x0F70731BACCFBB96);
}

/// <summary>
/// Returns profile setting 17.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC859E2374407556<br />
/// </para>
/// </remarks>
public static bool GetAllowMovementWhileZoomed()
{
return Function.Call<bool>((Hash)0xFC859E2374407556);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x798FDEB5B1575088<br />
/// </para>
/// </remarks>
public static void SetPlayerpadShakesWhenControllerDisabled(bool toggle)
{
Function.Call((Hash)0x798FDEB5B1575088, toggle);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDE476E5EE29EDB1<br />
/// </para>
/// </remarks>
public static void SetInputExclusive(int control, int action)
{
Function.Call((Hash)0xEDE476E5EE29EDB1, control, action);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE99B66D079CF6BC<br />
/// </para>
/// </remarks>
public static void DisableControlAction(int control, int action, bool disableRelatedActions)
{
Function.Call((Hash)0xFE99B66D079CF6BC, control, action, disableRelatedActions);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x351220255D64C155<br />
/// </para>
/// </remarks>
public static void EnableControlAction(int control, int action, bool enableRelatedActions)
{
Function.Call((Hash)0x351220255D64C155, control, action, enableRelatedActions);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F4B6931816E599B<br />
/// </para>
/// </remarks>
public static void DisableAllControlActions(int control)
{
Function.Call((Hash)0x5F4B6931816E599B, control);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5FFE9B05F199DE7<br />
/// </para>
/// </remarks>
public static void EnableAllControlActions(int control)
{
Function.Call((Hash)0xA5FFE9B05F199DE7, control);
}

/// <summary>
/// Used in carsteal3 script with schemeName = &quot;Carsteal4_spycar&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D42B92563939375<br />
/// </para>
/// </remarks>
public static bool InitPcScriptedControls(string schemeName)
{
return Function.Call<bool>((Hash)0x3D42B92563939375, schemeName);
}

/// <summary>
/// Same as INIT_PC_SCRIPTED_CONTROLS
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4683149ED1DDE7A1<br />
/// </para>
/// </remarks>
public static bool SwitchPcScriptedControls(string schemeName)
{
return Function.Call<bool>((Hash)0x4683149ED1DDE7A1, schemeName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x643ED62D5EA3BEBD<br />
/// </para>
/// </remarks>
public static void ShutdownPcScriptedControls()
{
Function.Call((Hash)0x643ED62D5EA3BEBD);
}

/// <summary>
/// control: see IS_CONTROL_ENABLED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F4724035FDCA1DD<br />
/// </para>
/// </remarks>
public static void AllowAlternativeScriptControlsLayout(int control)
{
Function.Call((Hash)0x7F4724035FDCA1DD, control);
}

#endregion
#region PATHFIND
/// <summary>
/// When nodeEnabled is set to false, all nodes in the area get disabled.<br />`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.<br />If it&apos;s true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF1A602B5BA52FEE<br />
/// </para>
/// </remarks>
public static void SetRoadsInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool nodeEnabled, bool unknown2)
{
Function.Call((Hash)0xBF1A602B5BA52FEE, x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
}

/// <summary>
/// unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT &gt; CNetworkRoadNodeWorldStateData` in networked environments.<br />See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A5AA1208AF5DB59<br />
/// </para>
/// </remarks>
public static void SetRoadsInAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool unknown1, bool unknown2, bool unknown3)
{
Function.Call((Hash)0x1A5AA1208AF5DB59, x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34F060F4BF92E018<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedPathsInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool unknown, int /* bug: Any */ p7)
{
Function.Call((Hash)0x34F060F4BF92E018, x1, y1, z1, x2, y2, z2, unknown, p7);
}

/// <summary>
/// Flags are:<br />1 = 1 = B02_IsFootpath<br />2 = 4 = !B15_InteractionUnk<br />4 = 0x20 = !B14_IsInterior<br />8 = 0x40 = !B07_IsWater<br />16 = 0x200 = B17_IsFlatGround<br />When onGround == true outPosition is a position located on the nearest pavement.<br /><br />When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.<br /><br />In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. <br /><br />16 works for me, 0 crashed the script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB61C8E878A4199CA<br />
/// </para>
/// </remarks>
public static bool GetSafeCoordForPed(float x, float y, float z, bool onGround, ref Vector3 outPosition, int flags)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xB61C8E878A4199CA, x, y, z, onGround, &nativeAssistPointerVar0, flags);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// https://gtaforums.com/topic/843561-pathfind-node-types
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x240A18690AE96513<br />
/// </para>
/// </remarks>
public static bool GetClosestVehicleNode(float x, float y, float z, ref Vector3 outPosition, int nodeFlags, float p5, float p6)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x240A18690AE96513, x, y, z, &nativeAssistPointerVar0, nodeFlags, p5, p6);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Get the closest vehicle node to a given position.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2EABE3B06F58C1BE<br />
/// </para>
/// </remarks>
public static bool GetClosestMajorVehicleNode(float x, float y, float z, ref Vector3 outPosition, float unknown1, float unknown2)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2EABE3B06F58C1BE, x, y, z, &nativeAssistPointerVar0, unknown1, unknown2);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.<br /><br />nodeType: 0 = main roads, 1 = any dry path, 3 = water<br />p6 is always 3.0<br />p7 is always 0<br /><br />gtaforums.com/topic/843561-pathfind-node-types<br /><br />Example of usage, moving vehicle to closest path/road:<br />Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);<br />Vector3 closestVehicleNodeCoords; <br />float roadHeading; <br />PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &amp;closestVehicleNodeCoords, &amp;roadHeading, 1, 3, 0); <br />ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);<br />ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);<br />VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);<br /><br />------------------------------------------------------------------<br />C# Example (ins1de) : https://pastebin.com/fxtMWAHD
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF071FB798B803B0<br />
/// </para>
/// </remarks>
public static bool GetClosestVehicleNodeWithHeading(float x, float y, float z, ref Vector3 outPosition, ref float outHeading, int nodeType, float p6, float p7)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = outHeading;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xFF071FB798B803B0, x, y, z, &nativeAssistPointerVar0, &nativeAssistPointerVar1, nodeType, p6, p7);
}
outPosition = nativeAssistPointerVar0;
outHeading = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE50E52416CCF948B<br />
/// </para>
/// </remarks>
public static bool GetNthClosestVehicleNode(float x, float y, float z, int nthClosest, ref Vector3 outPosition, int nodeFlags, float unknown1, float unknown2)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xE50E52416CCF948B, x, y, z, nthClosest, &nativeAssistPointerVar0, nodeFlags, unknown1, unknown2);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Returns the id.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22D7275A79FE8215<br />
/// </para>
/// </remarks>
public static int GetNthClosestVehicleNodeId(float x, float y, float z, int nth, int nodeFlags, float p5, float p6)
{
return Function.Call<int>((Hash)0x22D7275A79FE8215, x, y, z, nth, nodeFlags, p5, p6);
}

/// <summary>
/// Get the nth closest vehicle node and its heading.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80CA6A8B6C094CC4<br />
/// </para>
/// </remarks>
public static bool GetNthClosestVehicleNodeWithHeading(float x, float y, float z, int nthClosest, ref Vector3 outPosition, ref float outHeading, ref int outNumLanes, int nodeFlags, float unknown3, float unknown4)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = outHeading;
var nativeAssistPointerVar2 = outNumLanes;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x80CA6A8B6C094CC4, x, y, z, nthClosest, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, nodeFlags, unknown3, unknown4);
}
outPosition = nativeAssistPointerVar0;
outHeading = nativeAssistPointerVar1;
outNumLanes = nativeAssistPointerVar2;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6448050E9C2A7207<br />
/// </para>
/// </remarks>
public static int GetNthClosestVehicleNodeIdWithHeading(float x, float y, float z, int nthClosest, ref Vector3 outPosition, ref float outHeading, int nodeFlags, float p7, float p8)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = outHeading;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x6448050E9C2A7207, x, y, z, nthClosest, &nativeAssistPointerVar0, &nativeAssistPointerVar1, nodeFlags, p7, p8);
}
outPosition = nativeAssistPointerVar0;
outHeading = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water<br /><br />p10 always equals 3.0<br />p11 always equals 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45905BE8654AE067<br />
/// </para>
/// </remarks>
public static bool GetNthClosestVehicleNodeFavourDirection(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, ref Vector3 outPosition, ref float outHeading, int nodeFlags, float p10, float p11)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = outHeading;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x45905BE8654AE067, x, y, z, desiredX, desiredY, desiredZ, nthClosest, &nativeAssistPointerVar0, &nativeAssistPointerVar1, nodeFlags, p10, p11);
}
outPosition = nativeAssistPointerVar0;
outHeading = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Gets the density and flags of the closest node to the specified position.<br />Density is a value between 0 and 15, indicating how busy the road is.<br />Flags is a bit field.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0568566ACBB5DEDC<br />
/// </para>
/// </remarks>
public static bool GetVehicleNodeProperties(float x, float y, float z, ref int density, ref int flags)
{
var nativeAssistPointerVar0 = density;
var nativeAssistPointerVar1 = flags;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x0568566ACBB5DEDC, x, y, z, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
density = nativeAssistPointerVar0;
flags = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Returns true if the id is non zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EAF30FCFBF5AF74<br />
/// </para>
/// </remarks>
public static bool IsVehicleNodeIdValid(int vehicleNodeId)
{
return Function.Call<bool>((Hash)0x1EAF30FCFBF5AF74, vehicleNodeId);
}

/// <summary>
/// Calling this with an invalid node id, will crash the game.<br />Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.<br />Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x703123E5E7D429C2<br />
/// </para>
/// </remarks>
public static void GetVehicleNodePosition(int nodeId, ref Vector3 outPosition)
{
var nativeAssistPointerVar0 = outPosition;
unsafe {
Function.Call((Hash)0x703123E5E7D429C2, nodeId, &nativeAssistPointerVar0);
}
outPosition = nativeAssistPointerVar0;
}

/// <summary>
/// Returns false for nodes that aren&apos;t used for GPS routes.<br />Example:<br />Nodes in Fort Zancudo and LSIA are false
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2AE5C478B96E3B6<br />
/// </para>
/// </remarks>
public static bool GetVehicleNodeIsGpsAllowed(int nodeID)
{
return Function.Call<bool>((Hash)0xA2AE5C478B96E3B6, nodeID);
}

/// <summary>
/// Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.<br />Normal roads where plenty of Peds spawn will return false
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F5070AA58F69279<br />
/// </para>
/// </remarks>
public static bool GetVehicleNodeIsSwitchedOff(int nodeID)
{
return Function.Call<bool>((Hash)0x4F5070AA58F69279, nodeID);
}

/// <summary>
/// p1 seems to be always 1.0f in the scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x132F52BBA570FE92<br />
/// </para>
/// </remarks>
public static bool GetClosestRoad(float x, float y, float z, float p3, int p4, ref Vector3 p5, ref Vector3 p6, int /* bug: structure */ p7, int /* bug: structure */ p8, ref float p9, bool p10)
{
var nativeAssistPointerVar0 = p5;
var nativeAssistPointerVar1 = p6;
var nativeAssistPointerVar2 = p9;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x132F52BBA570FE92, x, y, z, p3, p4, &nativeAssistPointerVar0, &nativeAssistPointerVar1, p7, p8, &nativeAssistPointerVar2, p10);
}
p5 = nativeAssistPointerVar0;
p6 = nativeAssistPointerVar1;
p9 = nativeAssistPointerVar2;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x228E5C6AD4D74BFD<br />
/// </para>
/// </remarks>
public static void SetAllowStreamPrologueNodes(bool toggle)
{
Function.Call((Hash)0x228E5C6AD4D74BFD, toggle);
}

/// <summary>
/// Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xF74B1FFA4A15FBEA<br />
/// </para>
/// </remarks>
public static void SetAllowStreamHeistIslandNodes(int type)
{
Function.Call((Hash)0xF74B1FFA4A15FBEA, type);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7B79A50B905A30D<br />
/// </para>
/// </remarks>
public static bool AreNodesLoadedForArea(float x1, float y1, float x2, float y2)
{
return Function.Call<bool>((Hash)0xF7B79A50B905A30D, x1, y1, x2, y2);
}

/// <summary>
/// Used internally for long range tasks
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07FB139B592FA687<br />
/// </para>
/// </remarks>
public static bool RequestPathNodesInAreaThisFrame(float x1, float y1, float x2, float y2)
{
return Function.Call<bool>((Hash)0x07FB139B592FA687, x1, y1, x2, y2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EE7063B80FFC77C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetRoadsBackToOriginal(float p0, float p1, float p2, float p3, float p4, float p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x1EE7063B80FFC77C, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.<br />bool p7 - always 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0027501B9F3B407E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetRoadsBackToOriginalInAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width, int /* bug: Any */ p7)
{
Function.Call((Hash)0x0027501B9F3B407E, x1, y1, z1, x2, y2, z2, width, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0B919E1FB47CC4E0<br />
/// </para>
/// </remarks>
public static void SetAmbientPedRangeMultiplierThisFrame(float multiplier)
{
Function.Call((Hash)0x0B919E1FB47CC4E0, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA76052DDA9BFC3E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AdjustAmbientPedSpawnDensitiesThisFrame(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0xAA76052DDA9BFC3E, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// p6 is always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE04B48F2CC926253<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedPathsBackToOriginal(float x1, float y1, float z1, float x2, float y2, float z2, int /* bug: Any */ p6)
{
Function.Call((Hash)0xE04B48F2CC926253, x1, y1, z1, x2, y2, z2, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93E0DB8440B73A7D<br />
/// </para>
/// </remarks>
public static bool GetRandomVehicleNode(float x, float y, float z, float radius, bool p4, bool p5, bool p6, ref Vector3 outPosition, ref int nodeId)
{
var nativeAssistPointerVar0 = outPosition;
var nativeAssistPointerVar1 = nodeId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x93E0DB8440B73A7D, x, y, z, radius, p4, p5, p6, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
outPosition = nativeAssistPointerVar0;
nodeId = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Determines the name of the street which is the closest to the given coordinates.<br /><br />x,y,z - the coordinates of the street<br />streetName - returns a hash to the name of the street the coords are on<br />crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road<br /><br />Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2EB41072B4C1E4C0<br />
/// </para>
/// </remarks>
public static void GetStreetNameAtCoord(float x, float y, float z, ref uint streetName, ref uint crossingRoad)
{
var nativeAssistPointerVar0 = streetName;
var nativeAssistPointerVar1 = crossingRoad;
unsafe {
Function.Call((Hash)0x2EB41072B4C1E4C0, x, y, z, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
streetName = nativeAssistPointerVar0;
crossingRoad = nativeAssistPointerVar1;
}

/// <summary>
/// p3 is 0 in the only game script occurrence (trevor3) but 1 doesn&apos;t seem to make a difference<br /><br />distToNxJunction seems to be the distance in metres * 10.0f<br /><br />direction:<br />0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean &quot;Next frame, stop whatever&apos;s being said and tell the player the direction.&quot;<br />1 = Route is being calculated or the player is going in the wrong direction<br />2 = Please Proceed the Highlighted Route<br />3 = In (distToNxJunction) Turn Left<br />4 = In (distToNxJunction) Turn Right<br />5 = In (distToNxJunction) Keep Straight<br />6 = In (distToNxJunction) Turn Sharply To The Left<br />7 = In (distToNxJunction) Turn Sharply To The Right<br />8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of &quot;right.&quot; Either way, this seems to be the engine saying &quot;I don&apos;t know the route right now.&quot;<br /><br />return value set to 0 always
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF90125F1F79ECDF8<br />
/// </para>
/// </remarks>
public static int GenerateDirectionsToCoord(float x, float y, float z, bool p3, ref int direction, ref float p5, ref float distToNxJunction)
{
var nativeAssistPointerVar0 = direction;
var nativeAssistPointerVar1 = p5;
var nativeAssistPointerVar2 = distToNxJunction;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xF90125F1F79ECDF8, x, y, z, p3, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
direction = nativeAssistPointerVar0;
p5 = nativeAssistPointerVar1;
distToNxJunction = nativeAssistPointerVar2;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72751156E7678833<br />
/// </para>
/// </remarks>
public static void SetIgnoreNoGpsFlag(bool toggle)
{
Function.Call((Hash)0x72751156E7678833, toggle);
}

/// <summary>
/// See: SET_BLIP_ROUTE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1FC289A0C3FF470F<br />
/// </para>
/// </remarks>
public static void SetIgnoreNoGpsFlagUntilFirstNormalNode(bool toggle)
{
Function.Call((Hash)0x1FC289A0C3FF470F, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC20483CD3DD5201<br />
/// </para>
/// </remarks>
public static void SetGpsDisabledZone(float x1, float y1, float z1, float x2, float y2, float z3)
{
Function.Call((Hash)0xDC20483CD3DD5201, x1, y1, z1, x2, y2, z3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBB45C3CF5C8AA85<br />
/// </para>
/// </remarks>
public static int GetGpsBlipRouteLength()
{
return Function.Call<int>((Hash)0xBBB45C3CF5C8AA85);
}

/// <summary>
/// p3 can be 0, 1 or 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xF3162836C28F9DA5<br />
/// </para>
/// </remarks>
public static bool GetPosAlongGpsTypeRoute(ref Vector3 result, bool p1, float p2, int p3)
{
var nativeAssistPointerVar0 = result;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF3162836C28F9DA5, &nativeAssistPointerVar0, p1, p2, p3);
}
result = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x869DAACBBE9FA006<br />
/// </para>
/// </remarks>
public static bool GetGpsBlipRouteFound()
{
return Function.Call<bool>((Hash)0x869DAACBBE9FA006);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xA0F8A7517A273C05<br />
/// </para>
/// </remarks>
public static bool GetRoadBoundaryUsingHeading(float x, float y, float z, float heading, ref Vector3 outPosition)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA0F8A7517A273C05, x, y, z, heading, &nativeAssistPointerVar0);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16F46FB18C8009E4<br />
/// </para>
/// </remarks>
public static bool GetPositionBySideOfRoad(float x, float y, float z, int p3, ref Vector3 outPosition)
{
var nativeAssistPointerVar0 = outPosition;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x16F46FB18C8009E4, x, y, z, p3, &nativeAssistPointerVar0);
}
outPosition = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Gets a value indicating whether the specified position is on a road.<br />The vehicle parameter is not implemented (ignored).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x125BF4ABFC536B09<br />
/// </para>
/// </remarks>
public static bool IsPointOnRoad(float x, float y, float z, int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x125BF4ABFC536B09, x, y, z, vehicle);
}

/// <summary>
/// Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3A6A0EF48823A8C<br />
/// </para>
/// </remarks>
public static int GetNextGpsDisabledZoneIndex()
{
return Function.Call<int>((Hash)0xD3A6A0EF48823A8C);
}

/// <summary>
/// Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.<br />You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.<br /><br />**Setting a waypoint at the same coordinate:**<br />Disabled Zone: https://i.imgur.com/P9VUuxM.png<br />Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0BC1C6FB18EE154<br />
/// </para>
/// </remarks>
public static void SetGpsDisabledZoneAtIndex(float x1, float y1, float z1, float x2, float y2, float z2, int index)
{
Function.Call((Hash)0xD0BC1C6FB18EE154, x1, y1, z1, x2, y2, z2, index);
}

/// <summary>
/// Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2801D0012266DF07<br />
/// </para>
/// </remarks>
public static void ClearGpsDisabledZoneAtIndex(int index)
{
Function.Call((Hash)0x2801D0012266DF07, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x387EAD7EE42F6685<br />
/// </para>
/// </remarks>
public static void AddNavmeshRequiredRegion(float x, float y, float radius)
{
Function.Call((Hash)0x387EAD7EE42F6685, x, y, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x916F0A3CDEC3445E<br />
/// </para>
/// </remarks>
public static void RemoveNavmeshRequiredRegions()
{
Function.Call((Hash)0x916F0A3CDEC3445E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x705A844002B39DC0<br />
/// </para>
/// </remarks>
public static bool IsNavmeshRequiredRegionInUse()
{
return Function.Call<bool>((Hash)0x705A844002B39DC0);
}

/// <summary>
/// Set toggle true to disable navmesh.<br />Set toggle false to enable navmesh.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C8872D8CDBE1B8B<br />
/// </para>
/// </remarks>
public static void DisableNavmeshInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool toggle)
{
Function.Call((Hash)0x4C8872D8CDBE1B8B, x1, y1, z1, x2, y2, z2, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8415D95B194A3AEA<br />
/// </para>
/// </remarks>
public static bool AreAllNavmeshRegionsLoaded()
{
return Function.Call<bool>((Hash)0x8415D95B194A3AEA);
}

/// <summary>
/// Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it&apos;s top left deepest corner to it&apos;s bottom right shallowest corner.<br /><br />If you can re-word this so it makes more sense, please do. I&apos;m horrible with words sometimes...
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF813C7E63F9062A5<br />
/// </para>
/// </remarks>
public static bool IsNavmeshLoadedInArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0xF813C7E63F9062A5, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01708E8DD3FF8C65<br />
/// </para>
/// </remarks>
public static int GetNumNavmeshesExistingInArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<int>((Hash)0x01708E8DD3FF8C65, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCD5C8E06E502F5A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int AddNavmeshBlockingObject(float p0, float p1, float p2, float p3, float p4, float p5, float p6, bool p7, int /* bug: Any */ p8)
{
return Function.Call<int>((Hash)0xFCD5C8E06E502F5A, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x109E99373F290687<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UpdateNavmeshBlockingObject(int /* bug: Any */ p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, int /* bug: Any */ p8)
{
Function.Call((Hash)0x109E99373F290687, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46399A7895957C0E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RemoveNavmeshBlockingObject(int /* bug: Any */ p0)
{
Function.Call((Hash)0x46399A7895957C0E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EAEB0DB4B132399<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool DoesNavmeshBlockingObjectExist(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x0EAEB0DB4B132399, p0);
}

/// <summary>
/// Returns CGameWorldHeightMap&apos;s maximum Z value at specified point (grid node).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29C24BFBED8AB8FB<br />
/// </para>
/// </remarks>
public static float GetApproxHeightForPoint(float x, float y)
{
return Function.Call<float>((Hash)0x29C24BFBED8AB8FB, x, y);
}

/// <summary>
/// Returns CGameWorldHeightMap&apos;s maximum Z among all grid nodes that intersect with the specified rectangle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8ABE8608576D9CE3<br />
/// </para>
/// </remarks>
public static float GetApproxHeightForArea(float x1, float y1, float x2, float y2)
{
return Function.Call<float>((Hash)0x8ABE8608576D9CE3, x1, y1, x2, y2);
}

/// <summary>
/// Returns CGameWorldHeightMap&apos;s minimum Z value at specified point (grid node).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x336511A34F2E5185<br />
/// </para>
/// </remarks>
public static float GetApproxFloorForPoint(float x, float y)
{
return Function.Call<float>((Hash)0x336511A34F2E5185, x, y);
}

/// <summary>
/// Returns CGameWorldHeightMap&apos;s minimum Z among all grid nodes that intersect with the specified rectangle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3599D741C9AC6310<br />
/// </para>
/// </remarks>
public static float GetApproxFloorForArea(float x1, float y1, float x2, float y2)
{
return Function.Call<float>((Hash)0x3599D741C9AC6310, x1, y1, x2, y2);
}

/// <summary>
/// Calculates the travel distance between a set of points.<br /><br />Doesn&apos;t seem to correlate with distance on gps sometimes.<br />This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADD95C7005C4A197<br />
/// </para>
/// </remarks>
public static float CalculateTravelDistanceBetweenPoints(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<float>((Hash)0xADD95C7005C4A197, x1, y1, z1, x2, y2, z2);
}

#endregion
#region PED
/// <summary>
/// https://alloc8or.re/gta5/doc/enums/ePedType.txt<br /><br />Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD49F9B0955C367DE<br />
/// </para>
/// </remarks>
public static int CreatePed(int pedType, uint modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed)
{
return Function.Call<int>((Hash)0xD49F9B0955C367DE, pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed);
}

/// <summary>
/// Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9614299DCB53E54B<br />
/// </para>
/// </remarks>
public static void DeletePed(ref int /* Ped* */ ped)
{
var nativeAssistPointerVar0 = ped;
unsafe {
Function.Call((Hash)0x9614299DCB53E54B, &nativeAssistPointerVar0);
}
ped = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF29A16337FACADB<br />
/// </para>
/// </remarks>
public static int ClonePed(int /* Ped */ ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag)
{
return Function.Call<int>((Hash)0xEF29A16337FACADB, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x668FD40BCBA5DE48<br />
/// </para>
/// </remarks>
public static int ClonePedAlt(int /* Ped */ ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag, bool p4)
{
return Function.Call<int>((Hash)0x668FD40BCBA5DE48, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4);
}

/// <summary>
/// Copies ped&apos;s components and props to targetPed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE952D6431689AD9A<br />
/// </para>
/// </remarks>
public static void ClonePedToTarget(int /* Ped */ ped, int /* Ped */ targetPed)
{
Function.Call((Hash)0xE952D6431689AD9A, ped, targetPed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x148B08C2D2ACB884<br />
/// </para>
/// </remarks>
public static void ClonePedToTargetAlt(int /* Ped */ ped, int /* Ped */ targetPed, bool p2)
{
Function.Call((Hash)0x148B08C2D2ACB884, ped, targetPed, p2);
}

/// <summary>
/// Gets a value indicating whether the specified ped is in the specified vehicle.<br /><br />If &apos;atGetIn&apos; is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it&apos;s true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it&apos;s true, it&apos;ll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3EE4A07279BB9DB<br />
/// </para>
/// </remarks>
public static bool IsPedInVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, bool atGetIn)
{
return Function.Call<bool>((Hash)0xA3EE4A07279BB9DB, ped, vehicle, atGetIn);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x796D90EFB19AA332<br />
/// </para>
/// </remarks>
public static bool IsPedInModel(int /* Ped */ ped, uint modelHash)
{
return Function.Call<bool>((Hash)0x796D90EFB19AA332, ped, modelHash);
}

/// <summary>
/// Gets a value indicating whether the specified ped is in any vehicle.<br /><br />If &apos;atGetIn&apos; is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it&apos;s true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it&apos;s true, it&apos;ll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x997ABD671D25CA0B<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyVehicle(int /* Ped */ ped, bool atGetIn)
{
return Function.Call<bool>((Hash)0x997ABD671D25CA0B, ped, atGetIn);
}

/// <summary>
/// xyz - relative to the world origin.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16EC4839969F9F5E<br />
/// </para>
/// </remarks>
public static bool IsCopPedInArea3d(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0x16EC4839969F9F5E, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// Gets a value indicating whether this ped&apos;s health is below its injured threshold.<br /><br />The default threshold is 100.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84A2DD9AC37C35C1<br />
/// </para>
/// </remarks>
public static bool IsPedInjured(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x84A2DD9AC37C35C1, ped);
}

/// <summary>
/// Returns whether the specified ped is hurt.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5983BB449D7FDB12<br />
/// </para>
/// </remarks>
public static bool IsPedHurt(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x5983BB449D7FDB12, ped);
}

/// <summary>
/// Gets a value indicating whether this ped&apos;s health is below its fatally injured threshold. The default threshold is 100.<br />If the handle is invalid, the function returns true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD839450756ED5A80<br />
/// </para>
/// </remarks>
public static bool IsPedFatallyInjured(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xD839450756ED5A80, ped);
}

/// <summary>
/// Seems to consistently return true if the ped is dead.<br /><br />p1 is always passed 1 in the scripts.<br /><br />I suggest to remove &quot;OR_DYING&quot; part, because it does not detect dying phase.<br /><br />That&apos;s what the devs call it, cry about it.<br /><br />lol
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3317DEDB88C95038<br />
/// </para>
/// </remarks>
public static bool IsPedDeadOrDying(int /* Ped */ ped, bool p1)
{
return Function.Call<bool>((Hash)0x3317DEDB88C95038, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0A0AEC214B1FABA<br />
/// </para>
/// </remarks>
public static bool IsConversationPedDead(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xE0A0AEC214B1FABA, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3998B1276A3300E5<br />
/// </para>
/// </remarks>
public static bool IsPedAimingFromCover(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x3998B1276A3300E5, ped);
}

/// <summary>
/// Returns whether the specified ped is reloading.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24B100C68C645951<br />
/// </para>
/// </remarks>
public static bool IsPedReloading(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x24B100C68C645951, ped);
}

/// <summary>
/// Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That&apos;s all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x12534C348C6CB68B<br />
/// </para>
/// </remarks>
public static bool IsPedAPlayer(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x12534C348C6CB68B, ped);
}

/// <summary>
/// pedType: see CREATE_PED<br /><br />Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DD959874C1FD534<br />
/// </para>
/// </remarks>
public static int CreatePedInsideVehicle(int /* Vehicle */ vehicle, int pedType, uint modelHash, int seat, bool isNetwork, bool bScriptHostPed)
{
return Function.Call<int>((Hash)0x7DD959874C1FD534, vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA5A7ECE2AA8FE70<br />
/// </para>
/// </remarks>
public static void SetPedDesiredHeading(int /* Ped */ ped, float heading)
{
Function.Call((Hash)0xAA5A7ECE2AA8FE70, ped, heading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF287323B0E2C69A<br />
/// </para>
/// </remarks>
public static void ForceAllHeadingValuesToAlign(int /* Ped */ ped)
{
Function.Call((Hash)0xFF287323B0E2C69A, ped);
}

/// <summary>
/// angle is ped&apos;s view cone
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD71649DB0A545AA3<br />
/// </para>
/// </remarks>
public static bool IsPedFacingPed(int /* Ped */ ped, int /* Ped */ otherPed, float angle)
{
return Function.Call<bool>((Hash)0xD71649DB0A545AA3, ped, otherPed, angle);
}

/// <summary>
/// Notes: The function only returns true while the ped is: <br />A.) Swinging a random melee attack (including pistol-whipping)<br /><br />B.) Reacting to being hit by a melee attack (including pistol-whipping)<br /><br />C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). <br /><br />You don&apos;t have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you&apos;ve punched and made-angry many peds
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E209B2C1EAD5159<br />
/// </para>
/// </remarks>
public static bool IsPedInMeleeCombat(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x4E209B2C1EAD5159, ped);
}

/// <summary>
/// Returns true if the ped doesn&apos;t do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x530944F6F4B8A214<br />
/// </para>
/// </remarks>
public static bool IsPedStopped(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x530944F6F4B8A214, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E9DFE24AC1E58EF<br />
/// </para>
/// </remarks>
public static bool IsPedShootingInArea(int /* Ped */ ped, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8)
{
return Function.Call<bool>((Hash)0x7E9DFE24AC1E58EF, ped, x1, y1, z1, x2, y2, z2, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0D3D71EA1086C55<br />
/// </para>
/// </remarks>
public static bool IsAnyPedShootingInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7)
{
return Function.Call<bool>((Hash)0xA0D3D71EA1086C55, x1, y1, z1, x2, y2, z2, p6, p7);
}

/// <summary>
/// Returns whether the specified ped is shooting.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34616828CD07F1A1<br />
/// </para>
/// </remarks>
public static bool IsPedShooting(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x34616828CD07F1A1, ped);
}

/// <summary>
/// accuracy = 0-100, 100 being perfectly accurate
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AEFB85C1D49DEB6<br />
/// </para>
/// </remarks>
public static void SetPedAccuracy(int /* Ped */ ped, int accuracy)
{
Function.Call((Hash)0x7AEFB85C1D49DEB6, ped, accuracy);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37F4AD56ECBC0CD6<br />
/// </para>
/// </remarks>
public static int GetPedAccuracy(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x37F4AD56ECBC0CD6, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x87DDEB611B329A9C<br />
/// </para>
/// </remarks>
public static void SetAmbientLawPedAccuracyModifier(float multiplier)
{
Function.Call((Hash)0x87DDEB611B329A9C, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9D55B1A358A5BF7<br />
/// </para>
/// </remarks>
public static bool IsPedModel(int /* Ped */ ped, uint modelHash)
{
return Function.Call<bool>((Hash)0xC9D55B1A358A5BF7, ped, modelHash);
}

/// <summary>
/// Forces the ped to fall back and kills it.<br /><br />It doesn&apos;t really explode the ped&apos;s head but it kills the ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D05CED3A38D0F3A<br />
/// </para>
/// </remarks>
public static void ExplodePedHead(int /* Ped */ ped, uint weaponHash)
{
Function.Call((Hash)0x2D05CED3A38D0F3A, ped, weaponHash);
}

/// <summary>
/// Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it&apos;ll be marked as no longer needed. - very elegant..
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC6D445B994DF95E<br />
/// </para>
/// </remarks>
public static void RemovePedElegantly(ref int /* Ped* */ ped)
{
var nativeAssistPointerVar0 = ped;
unsafe {
Function.Call((Hash)0xAC6D445B994DF95E, &nativeAssistPointerVar0);
}
ped = nativeAssistPointerVar0;
}

/// <summary>
/// Same as SET_PED_ARMOUR, but ADDS &apos;amount&apos; to the armor the Ped already has.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BA652A0CD14DF2F<br />
/// </para>
/// </remarks>
public static void AddArmourToPed(int /* Ped */ ped, int amount)
{
Function.Call((Hash)0x5BA652A0CD14DF2F, ped, amount);
}

/// <summary>
/// Sets the armor of the specified ped.<br /><br />ped: The Ped to set the armor of.<br />amount: A value between 0 and 100 indicating the value to set the Ped&apos;s armor to.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEA04D83135264CC<br />
/// </para>
/// </remarks>
public static void SetPedArmour(int /* Ped */ ped, int amount)
{
Function.Call((Hash)0xCEA04D83135264CC, ped, amount);
}

/// <summary>
/// Ped: The ped to warp.<br />vehicle: The vehicle to warp the ped into.<br />Seat_Index: [-1 is driver seat, -2 first free passenger seat]<br /><br />Moreinfo of Seat Index<br />DriverSeat = -1<br />Passenger = 0<br />Left Rear = 1<br />RightRear = 2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF75B0D629E1C063D<br />
/// </para>
/// </remarks>
public static void SetPedIntoVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, int seatIndex)
{
Function.Call((Hash)0xF75B0D629E1C063D, ped, vehicle, seatIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C028C636A414ED9<br />
/// </para>
/// </remarks>
public static void SetPedAllowVehiclesOverride(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x3C028C636A414ED9, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E8349C08E4B82E4<br />
/// </para>
/// </remarks>
public static bool CanCreateRandomPed(bool unk)
{
return Function.Call<bool>((Hash)0x3E8349C08E4B82E4, unk);
}

/// <summary>
/// vb.net<br />Dim ped_handle As Integer<br />                    With Game.Player.Character<br />                        Dim pos As Vector3 = .Position + .ForwardVector * 3<br />                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)<br />                    End With<br /><br />Creates a Ped at the specified location, returns the Ped Handle.  <br />Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4AC7D0CF06BFE8F<br />
/// </para>
/// </remarks>
public static int CreateRandomPed(float posX, float posY, float posZ)
{
return Function.Call<int>((Hash)0xB4AC7D0CF06BFE8F, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B62392B474F44A0<br />
/// </para>
/// </remarks>
public static int CreateRandomPedAsDriver(int /* Vehicle */ vehicle, bool returnHandle)
{
return Function.Call<int>((Hash)0x9B62392B474F44A0, vehicle, returnHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8EB95E5B4E56978<br />
/// </para>
/// </remarks>
public static bool CanCreateRandomDriver()
{
return Function.Call<bool>((Hash)0xB8EB95E5B4E56978);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEACEEDA81751915C<br />
/// </para>
/// </remarks>
public static bool CanCreateRandomBikeRider()
{
return Function.Call<bool>((Hash)0xEACEEDA81751915C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E8C908F41584ECD<br />
/// </para>
/// </remarks>
public static void SetPedMoveAnimsBlendOut(int /* Ped */ ped)
{
Function.Call((Hash)0x9E8C908F41584ECD, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1670E958EEE24E5<br />
/// </para>
/// </remarks>
public static void SetPedCanBeDraggedOut(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xC1670E958EEE24E5, ped, toggle);
}

/// <summary>
/// ntoggle was always false except in one instance (b678).<br /><br />The one time this is set to true seems to do with when you fail the mission.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2BEBCDFAFDAA19E<br />
/// </para>
/// </remarks>
public static void SetPedAllowHurtCombatForAllMissionPeds(bool toggle)
{
Function.Call((Hash)0xF2BEBCDFAFDAA19E, toggle);
}

/// <summary>
/// Returns true/false if the ped is/isn&apos;t male.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D9F5FAA7488BA46<br />
/// </para>
/// </remarks>
public static bool IsPedMale(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x6D9F5FAA7488BA46, ped);
}

/// <summary>
/// Returns true/false if the ped is/isn&apos;t humanoid.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB980061DA992779D<br />
/// </para>
/// </remarks>
public static bool IsPedHuman(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB980061DA992779D, ped);
}

/// <summary>
/// Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.<br />If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A9112A0FE9A4713<br />
/// </para>
/// </remarks>
public static int GetVehiclePedIsIn(int /* Ped */ ped, bool includeLastVehicle)
{
return Function.Call<int>((Hash)0x9A9112A0FE9A4713, ped, includeLastVehicle);
}

/// <summary>
/// Resets the value for the last vehicle driven by the Ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB8DE8CF6A8DD8BB<br />
/// </para>
/// </remarks>
public static void ResetPedLastVehicle(int /* Ped */ ped)
{
Function.Call((Hash)0xBB8DE8CF6A8DD8BB, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95E3D6257B166CF2<br />
/// </para>
/// </remarks>
public static void SetPedDensityMultiplierThisFrame(float multiplier)
{
Function.Call((Hash)0x95E3D6257B166CF2, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A556143A1C03898<br />
/// </para>
/// </remarks>
public static void SetScenarioPedDensityMultiplierThisFrame(float p0, float p1)
{
Function.Call((Hash)0x7A556143A1C03898, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A7F62FDA59759BD<br />
/// </para>
/// </remarks>
public static void SuppressAmbientPedAggressiveCleanupThisFrame()
{
Function.Call((Hash)0x5A7F62FDA59759BD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5086C7843552CF85<br />
/// </para>
/// </remarks>
public static void SetScriptedConversionCoordThisFrame(float x, float y, float z)
{
Function.Call((Hash)0x5086C7843552CF85, x, y, z);
}

/// <summary>
/// The distance between these points, is the diagonal of a box (remember it&apos;s 3D).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE01041D559983EA<br />
/// </para>
/// </remarks>
public static void SetPedNonCreationArea(float x1, float y1, float z1, float x2, float y2, float z2)
{
Function.Call((Hash)0xEE01041D559983EA, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E05208086BA0651<br />
/// </para>
/// </remarks>
public static void ClearPedNonCreationArea()
{
Function.Call((Hash)0x2E05208086BA0651);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4759CC730F947C81<br />
/// </para>
/// </remarks>
public static void InstantlyFillPedPopulation()
{
Function.Call((Hash)0x4759CC730F947C81);
}

/// <summary>
/// Same function call as PED::GET_MOUNT, aka just returns 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x460BC76A0E10655E<br />
/// </para>
/// </remarks>
public static bool IsPedOnMount(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x460BC76A0E10655E, ped);
}

/// <summary>
/// <br />Function just returns 0<br />void __fastcall ped__get_mount(NativeContext *a1)<br />{<br />  NativeContext *v1; // rbx@1<br /><br />  v1 = a1;<br />  GetAddressOfPedFromScriptHandle(a1-&gt;Args-&gt;Arg1);<br />  v1-&gt;Returns-&gt;Item1= 0;<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7E11B8DCBED1058<br />
/// </para>
/// </remarks>
public static int GetMount(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xE7E11B8DCBED1058, ped);
}

/// <summary>
/// Gets a value indicating whether the specified ped is on top of any vehicle.<br /><br />Return 1 when ped is on vehicle.<br />Return 0 when ped is not on a vehicle.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67722AEB798E5FAB<br />
/// </para>
/// </remarks>
public static bool IsPedOnVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x67722AEB798E5FAB, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC5F66E459AF3BB2<br />
/// </para>
/// </remarks>
public static bool IsPedOnSpecificVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xEC5F66E459AF3BB2, ped, vehicle);
}

/// <summary>
/// Maximum possible amount of money on MP is 2000. ~JX<br /><br />-----------------------------------------------------------------------------<br /><br />Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9C8960E8684C1B5<br />
/// </para>
/// </remarks>
public static void SetPedMoney(int /* Ped */ ped, int amount)
{
Function.Call((Hash)0xA9C8960E8684C1B5, ped, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F69145BBA87BAE7<br />
/// </para>
/// </remarks>
public static int GetPedMoney(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x3F69145BBA87BAE7, ped);
}

/// <summary>
/// Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF4803BC019852D9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetHealthSnacksCarriedByAllNewPeds(float p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xFF4803BC019852D9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B0E6172C9A4D902<br />
/// </para>
/// </remarks>
public static void SetAmbientPedsDropMoney(bool p0)
{
Function.Call((Hash)0x6B0E6172C9A4D902, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9911F4A24485F653<br />
/// </para>
/// </remarks>
public static void SetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(bool p0)
{
Function.Call((Hash)0x9911F4A24485F653, p0);
}

/// <summary>
/// Ped no longer takes critical damage modifiers if set to FALSE.<br />Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBD76F2359F190AC<br />
/// </para>
/// </remarks>
public static void SetPedSuffersCriticalHits(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEBD76F2359F190AC, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFC976FD0580C7B3<br />
/// </para>
/// </remarks>
public static void SetPedUpperBodyDamageOnly(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xAFC976FD0580C7B3, ped, toggle);
}

/// <summary>
/// Detect if ped is sitting in the specified vehicle<br />[True/False]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA808AA1D79230FC2<br />
/// </para>
/// </remarks>
public static bool IsPedSittingInVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xA808AA1D79230FC2, ped, vehicle);
}

/// <summary>
/// Detect if ped is in any vehicle<br />[True/False]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x826AA586EDB9FEF8<br />
/// </para>
/// </remarks>
public static bool IsPedSittingInAnyVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x826AA586EDB9FEF8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01FEE67DB37F59B2<br />
/// </para>
/// </remarks>
public static bool IsPedOnFoot(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x01FEE67DB37F59B2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94495889E22C6479<br />
/// </para>
/// </remarks>
public static bool IsPedOnAnyBike(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x94495889E22C6479, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC70B5FAE151982D8<br />
/// </para>
/// </remarks>
public static bool IsPedPlantingBomb(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xC70B5FAE151982D8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD5003B097200F36<br />
/// </para>
/// </remarks>
public static Vector3 GetDeadPedPickupCoords(int /* Ped */ ped, float p1, float p2)
{
return Function.Call<Vector3>((Hash)0xCD5003B097200F36, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E0E1C2B4F6CB339<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyBoat(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x2E0E1C2B4F6CB339, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBFC01CCFB35D99E<br />
/// </para>
/// </remarks>
public static bool IsPedInAnySub(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xFBFC01CCFB35D99E, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x298B91AE825E5705<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyHeli(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x298B91AE825E5705, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FFF4CFC74D8FB80<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyPlane(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x5FFF4CFC74D8FB80, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9134873537FA419C<br />
/// </para>
/// </remarks>
public static bool IsPedInFlyingVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x9134873537FA419C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56CEF0AC79073BDE<br />
/// </para>
/// </remarks>
public static void SetPedDiesInWater(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x56CEF0AC79073BDE, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x65671A4FB8218930<br />
/// </para>
/// </remarks>
public static bool GetPedDiesInWater(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x65671A4FB8218930, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD718A22995E2B4BC<br />
/// </para>
/// </remarks>
public static void SetPedDiesInSinkingVehicle(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xD718A22995E2B4BC, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9483AF821605B1D8<br />
/// </para>
/// </remarks>
public static int GetPedArmour(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x9483AF821605B1D8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEDF4079F9D54C9A1<br />
/// </para>
/// </remarks>
public static void SetPedStayInVehicleWhenJacked(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEDF4079F9D54C9A1, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7EF1BA83230BA07<br />
/// </para>
/// </remarks>
public static void SetPedCanBeShotInVehicle(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xC7EF1BA83230BA07, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD75960F6BD9EA49C<br />
/// </para>
/// </remarks>
public static bool GetPedLastDamageBone(int /* Ped */ ped, ref int outBone)
{
var nativeAssistPointerVar0 = outBone;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xD75960F6BD9EA49C, ped, &nativeAssistPointerVar0);
}
outBone = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EF6B7AC68E2F01B<br />
/// </para>
/// </remarks>
public static void ClearPedLastDamageBone(int /* Ped */ ped)
{
Function.Call((Hash)0x8EF6B7AC68E2F01B, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B1E2A40A65B8521<br />
/// </para>
/// </remarks>
public static void SetAiWeaponDamageModifier(float value)
{
Function.Call((Hash)0x1B1E2A40A65B8521, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA16670E7BA4743C<br />
/// </para>
/// </remarks>
public static void ResetAiWeaponDamageModifier()
{
Function.Call((Hash)0xEA16670E7BA4743C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66460DEDDD417254<br />
/// </para>
/// </remarks>
public static void SetAiMeleeWeaponDamageModifier(float modifier)
{
Function.Call((Hash)0x66460DEDDD417254, modifier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46E56A7CD1D63C3F<br />
/// </para>
/// </remarks>
public static void ResetAiMeleeWeaponDamageModifier()
{
Function.Call((Hash)0x46E56A7CD1D63C3F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F3C3D9F50681DE4<br />
/// </para>
/// </remarks>
public static void SetTreatAsAmbientPedForDriverLockon(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x2F3C3D9F50681DE4, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63F58F7C80513AAD<br />
/// </para>
/// </remarks>
public static void SetPedCanBeTargetted(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x63F58F7C80513AAD, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF1CA77833E58F2C<br />
/// </para>
/// </remarks>
public static void SetPedCanBeTargettedByTeam(int /* Ped */ ped, int team, bool toggle)
{
Function.Call((Hash)0xBF1CA77833E58F2C, ped, team, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66B57B72E0836A76<br />
/// </para>
/// </remarks>
public static void SetPedCanBeTargettedByPlayer(int /* Ped */ ped, int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x66B57B72E0836A76, ped, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x061CB768363D6424<br />
/// </para>
/// </remarks>
public static void SetAllowLockonToPedIfFriendly(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x061CB768363D6424, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD325494792302D7<br />
/// </para>
/// </remarks>
public static void SetUseCameraHeadingForDesiredDirectionLockOnTest(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xFD325494792302D7, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BD04E29640C9C12<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyPoliceVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x0BD04E29640C9C12, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16E42E800B472221<br />
/// </para>
/// </remarks>
public static void ForcePedToOpenParachute(int /* Ped */ ped)
{
Function.Call((Hash)0x16E42E800B472221, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DCE8BDA0F1C1200<br />
/// </para>
/// </remarks>
public static bool IsPedInParachuteFreeFall(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x7DCE8BDA0F1C1200, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB92A102F1C4DFA3<br />
/// </para>
/// </remarks>
public static bool IsPedFalling(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xFB92A102F1C4DFA3, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEDABC5900A0BF97<br />
/// </para>
/// </remarks>
public static bool IsPedJumping(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xCEDABC5900A0BF97, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x412F1364FA066CFB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPedLanding(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x412F1364FA066CFB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x451D05012CCEC234<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPedDoingABeastJump(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x451D05012CCEC234, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53E8CB4F48BFE623<br />
/// </para>
/// </remarks>
public static bool IsPedClimbing(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x53E8CB4F48BFE623, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x117C70D1F5730B5E<br />
/// </para>
/// </remarks>
public static bool IsPedVaulting(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x117C70D1F5730B5E, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5527B8246FEF9B11<br />
/// </para>
/// </remarks>
public static bool IsPedDiving(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x5527B8246FEF9B11, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x433DDFFE2044B636<br />
/// </para>
/// </remarks>
public static bool IsPedJumpingOutOfVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x433DDFFE2044B636, ped);
}

/// <summary>
/// Returns true if the ped is currently opening a door (CTaskOpenDoor).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26AF0E8E30BD2A2C<br />
/// </para>
/// </remarks>
public static bool IsPedOpeningDoor(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x26AF0E8E30BD2A2C, ped);
}

/// <summary>
/// Returns:<br /><br />-1: Normal<br />0: Wearing parachute on back<br />1: Parachute opening<br />2: Parachute open<br />3: Falling to doom (e.g. after exiting parachute)<br /><br />Normal means no parachute?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79CFD9827CC979B6<br />
/// </para>
/// </remarks>
public static int GetPedParachuteState(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x79CFD9827CC979B6, ped);
}

/// <summary>
/// -1: no landing<br />0: landing on both feet<br />1: stumbling<br />2: rolling<br />3: ragdoll
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B9F1FC6AE8166C0<br />
/// </para>
/// </remarks>
public static int GetPedParachuteLandingType(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x8B9F1FC6AE8166C0, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x333FC8DB079B7186<br />
/// </para>
/// </remarks>
public static void SetPedParachuteTintIndex(int /* Ped */ ped, int tintIndex)
{
Function.Call((Hash)0x333FC8DB079B7186, ped, tintIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAF5F7E5AE7C6C9D<br />
/// </para>
/// </remarks>
public static void GetPedParachuteTintIndex(int /* Ped */ ped, ref int outTintIndex)
{
var nativeAssistPointerVar0 = outTintIndex;
unsafe {
Function.Call((Hash)0xEAF5F7E5AE7C6C9D, ped, &nativeAssistPointerVar0);
}
outTintIndex = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE88DA0751C22A2AD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedReserveParachuteTintIndex(int /* Ped */ ped, int /* bug: Any */ p1)
{
Function.Call((Hash)0xE88DA0751C22A2AD, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C4F3BF23B6237DB<br />
/// </para>
/// </remarks>
public static int CreateParachuteBagObject(int /* Ped */ ped, bool p1, bool p2)
{
return Function.Call<int>((Hash)0x8C4F3BF23B6237DB, ped, p1, p2);
}

/// <summary>
/// This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x030983CA930B692D<br />
/// </para>
/// </remarks>
public static void SetPedDucking(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x030983CA930B692D, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD125AE748725C6BC<br />
/// </para>
/// </remarks>
public static bool IsPedDucking(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xD125AE748725C6BC, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E575D6A898AB852<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyTaxi(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x6E575D6A898AB852, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF107E836A70DCE05<br />
/// </para>
/// </remarks>
public static void SetPedIdRange(int /* Ped */ ped, float value)
{
Function.Call((Hash)0xF107E836A70DCE05, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52D59AB61DDC05DD<br />
/// </para>
/// </remarks>
public static void SetPedHighlyPerceptive(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x52D59AB61DDC05DD, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x2F074C904D85129E<br />
/// </para>
/// </remarks>
public static void SetCopPerceptionOverrides(float seeingRange, float seeingRangePeripheral, float hearingRange, float visualFieldMinAzimuthAngle, float visualFieldMaxAzimuthAngle, float fieldOfGazeMaxAngle, float p6)
{
Function.Call((Hash)0x2F074C904D85129E, seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC4B4B3B9908052A<br />
/// </para>
/// </remarks>
public static void SetPedInjuredOnGroundBehaviour(int /* Ped */ ped, float unk)
{
Function.Call((Hash)0xEC4B4B3B9908052A, ped, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x733C87D4CE22BEA2<br />
/// </para>
/// </remarks>
public static void DisablePedInjuredOnGroundBehaviour(int /* Ped */ ped)
{
Function.Call((Hash)0x733C87D4CE22BEA2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF29CF591C4BF6CEE<br />
/// </para>
/// </remarks>
public static void SetPedSeeingRange(int /* Ped */ ped, float value)
{
Function.Call((Hash)0xF29CF591C4BF6CEE, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33A8F7F7D5F7F33C<br />
/// </para>
/// </remarks>
public static void SetPedHearingRange(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x33A8F7F7D5F7F33C, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DB492222FB21E26<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldMinAngle(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x2DB492222FB21E26, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70793BDCA1E854D4<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldMaxAngle(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x70793BDCA1E854D4, ped, value);
}

/// <summary>
/// This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.<br />-90f should let the ped see 90 degrees below them, for example.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A276EB2C224D70F<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldMinElevationAngle(int /* Ped */ ped, float angle)
{
Function.Call((Hash)0x7A276EB2C224D70F, ped, angle);
}

/// <summary>
/// This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78D0B67629D75856<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldMaxElevationAngle(int /* Ped */ ped, float angle)
{
Function.Call((Hash)0x78D0B67629D75856, ped, angle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C74B0BC831B753A<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldPeripheralRange(int /* Ped */ ped, float range)
{
Function.Call((Hash)0x9C74B0BC831B753A, ped, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B6405E8AB34A907<br />
/// </para>
/// </remarks>
public static void SetPedVisualFieldCenterAngle(int /* Ped */ ped, float angle)
{
Function.Call((Hash)0x3B6405E8AB34A907, ped, angle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xEF2C71A32CAD5FBD<br />
/// </para>
/// </remarks>
public static float GetPedVisualFieldCenterAngle(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0xEF2C71A32CAD5FBD, ped);
}

/// <summary>
/// p1 is usually 0 in the scripts. action is either 0 or a pointer to &quot;DEFAULT_ACTION&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88CBB5CEB96B7BD2<br />
/// </para>
/// </remarks>
public static void SetPedStealthMovement(int /* Ped */ ped, bool p1, string action)
{
Function.Call((Hash)0x88CBB5CEB96B7BD2, ped, p1, action);
}

/// <summary>
/// Returns whether the entity is in stealth mode
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C2AC9CA66575FBF<br />
/// </para>
/// </remarks>
public static bool GetPedStealthMovement(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x7C2AC9CA66575FBF, ped);
}

/// <summary>
/// Creates a new ped group.<br />Groups can contain up to 8 peds.<br /><br />The parameter is unused.<br /><br />Returns a handle to the created group, or 0 if a group couldn&apos;t be created.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90370EBE0FEE1A3D<br />
/// </para>
/// </remarks>
public static int CreateGroup(int unused)
{
return Function.Call<int>((Hash)0x90370EBE0FEE1A3D, unused);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A7819605465FBCE<br />
/// </para>
/// </remarks>
public static void SetPedAsGroupLeader(int /* Ped */ ped, int groupId)
{
Function.Call((Hash)0x2A7819605465FBCE, ped, groupId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F3480FE65DB31B5<br />
/// </para>
/// </remarks>
public static void SetPedAsGroupMember(int /* Ped */ ped, int groupId)
{
Function.Call((Hash)0x9F3480FE65DB31B5, ped, groupId);
}

/// <summary>
/// This only will teleport the ped to the group leader if the group leader teleports (sets coords).<br /><br />Only works in singleplayer
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E2F4240B3F24647<br />
/// </para>
/// </remarks>
public static void SetPedCanTeleportToGroupLeader(int /* Ped */ pedHandle, int groupHandle, bool toggle)
{
Function.Call((Hash)0x2E2F4240B3F24647, pedHandle, groupHandle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EB2F69076AF7053<br />
/// </para>
/// </remarks>
public static void RemoveGroup(int groupId)
{
Function.Call((Hash)0x8EB2F69076AF7053, groupId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED74007FFB146BC2<br />
/// </para>
/// </remarks>
public static void RemovePedFromGroup(int /* Ped */ ped)
{
Function.Call((Hash)0xED74007FFB146BC2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BB01E3834671191<br />
/// </para>
/// </remarks>
public static bool IsPedGroupMember(int /* Ped */ ped, int groupId)
{
return Function.Call<bool>((Hash)0x9BB01E3834671191, ped, groupId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C86D8AEF8254B78<br />
/// </para>
/// </remarks>
public static bool IsPedHangingOnToVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x1C86D8AEF8254B78, ped);
}

/// <summary>
/// Sets the range at which members will automatically leave the group.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4102C7858CFEE4E4<br />
/// </para>
/// </remarks>
public static void SetGroupSeparationRange(int groupHandle, float separationRange)
{
Function.Call((Hash)0x4102C7858CFEE4E4, groupHandle, separationRange);
}

/// <summary>
/// Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA0675AB151073FA<br />
/// </para>
/// </remarks>
public static void SetPedMinGroundTimeForStungun(int /* Ped */ ped, int ms)
{
Function.Call((Hash)0xFA0675AB151073FA, ped, ms);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD6A86331A537A7B9<br />
/// </para>
/// </remarks>
public static bool IsPedProne(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xD6A86331A537A7B9, ped);
}

/// <summary>
/// Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.<br /><br />p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4859F1FC66A6278E<br />
/// </para>
/// </remarks>
public static bool IsPedInCombat(int /* Ped */ ped, int /* Ped */ target)
{
return Function.Call<bool>((Hash)0x4859F1FC66A6278E, ped, target);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x32C27A11307B01CC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetPedTargetFromCombatPed(int /* Ped */ ped, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x32C27A11307B01CC, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAD42DE3610D0721<br />
/// </para>
/// </remarks>
public static bool CanPedInCombatSeeTarget(int /* Ped */ ped, int /* Ped */ target)
{
return Function.Call<bool>((Hash)0xEAD42DE3610D0721, ped, target);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2C086CC1BF8F2BF<br />
/// </para>
/// </remarks>
public static bool IsPedDoingDriveby(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB2C086CC1BF8F2BF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4AE4FF911DFB61DA<br />
/// </para>
/// </remarks>
public static bool IsPedJacking(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x4AE4FF911DFB61DA, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A497FE2DF198913<br />
/// </para>
/// </remarks>
public static bool IsPedBeingJacked(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x9A497FE2DF198913, ped);
}

/// <summary>
/// p1 is always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4FBACCE3B4138EE8<br />
/// </para>
/// </remarks>
public static bool IsPedBeingStunned(int /* Ped */ ped, int p1)
{
return Function.Call<bool>((Hash)0x4FBACCE3B4138EE8, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B128DC36C1E04CF<br />
/// </para>
/// </remarks>
public static int GetPedsJacker(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x9B128DC36C1E04CF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5486A79D9FBD342D<br />
/// </para>
/// </remarks>
public static int GetJackTarget(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x5486A79D9FBD342D, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBCCE00B381F8482<br />
/// </para>
/// </remarks>
public static bool IsPedFleeing(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xBBCCE00B381F8482, ped);
}

/// <summary>
/// p1 is nearly always 0 in the scripts. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60DFD0691A170B88<br />
/// </para>
/// </remarks>
public static bool IsPedInCover(int /* Ped */ ped, bool exceptUseWeapon)
{
return Function.Call<bool>((Hash)0x60DFD0691A170B88, ped, exceptUseWeapon);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x845333B3150583AB<br />
/// </para>
/// </remarks>
public static bool IsPedInCoverFacingLeft(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x845333B3150583AB, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A03BF943D767C93<br />
/// </para>
/// </remarks>
public static bool IsPedInHighCover(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x6A03BF943D767C93, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F65DBC537E59AD5<br />
/// </para>
/// </remarks>
public static bool IsPedGoingIntoCover(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x9F65DBC537E59AD5, ped);
}

/// <summary>
/// i could be time. Only example in the decompiled scripts uses it as -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAD6D1ACF08F4612<br />
/// </para>
/// </remarks>
public static bool SetPedPinnedDown(int /* Ped */ ped, bool pinned, int i)
{
return Function.Call<bool>((Hash)0xAAD6D1ACF08F4612, ped, pinned, i);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F4C85ACD641BCD2<br />
/// </para>
/// </remarks>
public static int GetSeatPedIsTryingToEnter(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x6F4C85ACD641BCD2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x814FA8BE5449445D<br />
/// </para>
/// </remarks>
public static int GetVehiclePedIsTryingToEnter(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x814FA8BE5449445D, ped);
}

/// <summary>
/// Returns the Entity (Ped, Vehicle, or ?Object?) that killed the &apos;ped&apos;<br /><br />Is best to check if the Ped is dead before asking for its killer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93C8B64DEB84728C<br />
/// </para>
/// </remarks>
public static int GetPedSourceOfDeath(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x93C8B64DEB84728C, ped);
}

/// <summary>
/// Returns the hash of the weapon/model/object that killed the ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16FFE42AB2D2DC59<br />
/// </para>
/// </remarks>
public static uint GetPedCauseOfDeath(int /* Ped */ ped)
{
return Function.Call<uint>((Hash)0x16FFE42AB2D2DC59, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E98817B311AE98A<br />
/// </para>
/// </remarks>
public static int GetPedTimeOfDeath(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x1E98817B311AE98A, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5407B7288D0478B7<br />
/// </para>
/// </remarks>
public static int CountPedsInCombatWithTarget(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x5407B7288D0478B7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x336B3D200AB007CB<br />
/// </para>
/// </remarks>
public static int CountPedsInCombatWithTargetWithinRadius(int /* Ped */ ped, float x, float y, float z, float radius)
{
return Function.Call<int>((Hash)0x336B3D200AB007CB, ped, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADB3F206518799E8<br />
/// </para>
/// </remarks>
public static void SetPedRelationshipGroupDefaultHash(int /* Ped */ ped, uint hash)
{
Function.Call((Hash)0xADB3F206518799E8, ped, hash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC80A74AC829DDD92<br />
/// </para>
/// </remarks>
public static void SetPedRelationshipGroupHash(int /* Ped */ ped, uint hash)
{
Function.Call((Hash)0xC80A74AC829DDD92, ped, hash);
}

/// <summary>
/// Sets the relationship between two groups. This should be called twice (once for each group).<br /><br />Relationship types:<br />0 = Companion<br />1 = Respect<br />2 = Like<br />3 = Neutral<br />4 = Dislike<br />5 = Hate<br />255 = Pedestrians<br /><br />Example:<br />PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);<br />PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF25EB89375A37AD<br />
/// </para>
/// </remarks>
public static void SetRelationshipBetweenGroups(int relationship, uint group1, uint group2)
{
Function.Call((Hash)0xBF25EB89375A37AD, relationship, group1, group2);
}

/// <summary>
/// Clears the relationship between two groups. This should be called twice (once for each group).<br /><br />Relationship types:<br />0 = Companion<br />1 = Respect<br />2 = Like<br />3 = Neutral<br />4 = Dislike<br />5 = Hate<br />255 = Pedestrians<br />(Credits: Inco)<br /><br />Example:<br />PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);<br />PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E29243FB56FC6D4<br />
/// </para>
/// </remarks>
public static void ClearRelationshipBetweenGroups(int relationship, uint group1, uint group2)
{
Function.Call((Hash)0x5E29243FB56FC6D4, relationship, group1, group2);
}

/// <summary>
/// Can&apos;t select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF372BC22FCB88606<br />
/// </para>
/// </remarks>
public static bool AddRelationshipGroup(string name, ref uint groupHash)
{
var nativeAssistPointerVar0 = groupHash;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF372BC22FCB88606, name, &nativeAssistPointerVar0);
}
groupHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6BA2444AB393DA2<br />
/// </para>
/// </remarks>
public static void RemoveRelationshipGroup(uint groupHash)
{
Function.Call((Hash)0xB6BA2444AB393DA2, groupHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xCC6E3B6BB69501F1<br />
/// </para>
/// </remarks>
public static bool DoesRelationshipGroupExist(uint groupHash)
{
return Function.Call<bool>((Hash)0xCC6E3B6BB69501F1, groupHash);
}

/// <summary>
/// Gets the relationship between two peds. This should be called twice (once for each ped).<br /><br />Relationship types:<br />0 = Companion<br />1 = Respect<br />2 = Like<br />3 = Neutral<br />4 = Dislike<br />5 = Hate<br />255 = Pedestrians<br />(Credits: Inco)<br /><br />Example:<br />PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);<br />PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBA5AD3A0EAF7121<br />
/// </para>
/// </remarks>
public static int GetRelationshipBetweenPeds(int /* Ped */ ped1, int /* Ped */ ped2)
{
return Function.Call<int>((Hash)0xEBA5AD3A0EAF7121, ped1, ped2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42FDD0F017B1E38E<br />
/// </para>
/// </remarks>
public static uint GetPedRelationshipGroupDefaultHash(int /* Ped */ ped)
{
return Function.Call<uint>((Hash)0x42FDD0F017B1E38E, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DBDD04862D95F04<br />
/// </para>
/// </remarks>
public static uint GetPedRelationshipGroupHash(int /* Ped */ ped)
{
return Function.Call<uint>((Hash)0x7DBDD04862D95F04, ped);
}

/// <summary>
/// Gets the relationship between two groups. This should be called twice (once for each group).<br /><br />Relationship types:<br />0 = Companion<br />1 = Respect<br />2 = Like<br />3 = Neutral<br />4 = Dislike<br />5 = Hate<br />255 = Pedestrians<br /><br />Example:<br />PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);<br />PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E6B70061662AE5C<br />
/// </para>
/// </remarks>
public static int GetRelationshipBetweenGroups(uint group1, uint group2)
{
return Function.Call<int>((Hash)0x9E6B70061662AE5C, group1, group2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x5615E0C5EB2BC6E2<br />
/// </para>
/// </remarks>
public static void SetRelationshipGroupAffectsWantedLevel(uint group, bool p1)
{
Function.Call((Hash)0x5615E0C5EB2BC6E2, group, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xAD27D957598E49E9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TellGroupPedsInAreaToAttack(int /* Ped */ ped, int /* bug: Any */ p1, float p2, uint hash, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0xAD27D957598E49E9, ped, p1, p2, hash, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4328652AE5769C71<br />
/// </para>
/// </remarks>
public static void SetPedCanBeTargetedWithoutLos(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x4328652AE5769C71, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x112942C6E708F70B<br />
/// </para>
/// </remarks>
public static void SetPedToInformRespectedFriends(int /* Ped */ ped, float radius, int maxFriends)
{
Function.Call((Hash)0x112942C6E708F70B, ped, radius, maxFriends);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x625B774D75C87068<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPedRespondingToEvent(int /* Ped */ ped, int /* bug: Any */ @event)
{
return Function.Call<bool>((Hash)0x625B774D75C87068, ped, @event);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xBA656A3BB01BDEA3<br />
/// </para>
/// </remarks>
public static bool GetPosFromFiredEvent(int /* Ped */ ped, int eventType, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0xBA656A3BB01BDEA3, ped, eventType, outData);
}

/// <summary>
/// FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )<br />FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )<br />FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )<br />FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )<br />FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )<br />FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )<br />FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )<br />FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )<br />FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )<br />FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )<br />FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )<br />FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )<br />FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )<br />FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )<br />FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )<br />FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )<br /><br />Firing pattern info: https://pastebin.com/Px036isB
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AC577F5A12AD8A9<br />
/// </para>
/// </remarks>
public static void SetPedFiringPattern(int /* Ped */ ped, uint patternHash)
{
Function.Call((Hash)0x9AC577F5A12AD8A9, ped, patternHash);
}

/// <summary>
/// shootRate 0-1000
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x614DA022990752DC<br />
/// </para>
/// </remarks>
public static void SetPedShootRate(int /* Ped */ ped, int shootRate)
{
Function.Call((Hash)0x614DA022990752DC, ped, shootRate);
}

/// <summary>
/// combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF41B4B141ED981C<br />
/// </para>
/// </remarks>
public static void SetCombatFloat(int /* Ped */ ped, int combatType, float p2)
{
Function.Call((Hash)0xFF41B4B141ED981C, ped, combatType, p2);
}

/// <summary>
/// p0: Ped Handle<br />p1: int i | 0 &lt;= i &lt;= 27<br /><br />p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:<br /><br />&lt;BlindFireChance value=&quot;0.1&quot;/&gt;<br />&lt;WeaponShootRateModifier value=&quot;1.0&quot;/&gt;<br />&lt;TimeBetweenBurstsInCover value=&quot;1.25&quot;/&gt;<br />&lt;BurstDurationInCover value=&quot;2.0&quot;/&gt;<br />&lt;TimeBetweenPeeks value=&quot;10.0&quot;/&gt;<br />&lt;WeaponAccuracy value=&quot;0.18&quot;/&gt;<br />&lt;FightProficiency value=&quot;0.8&quot;/&gt;<br />&lt;StrafeWhenMovingChance value=&quot;1.0&quot;/&gt;<br />&lt;WalkWhenStrafingChance value=&quot;0.0&quot;/&gt;<br />&lt;AttackWindowDistanceForCover value=&quot;55.0&quot;/&gt;<br />&lt;TimeToInvalidateInjuredTarget value=&quot;9.0&quot;/&gt;<br />&lt;TriggerChargeTime_Near value=&quot;4.0&quot;/&gt;<br />&lt;TriggerChargeTime_Far value=&quot;10.0&quot;/&gt;<br /><br />-------------Confirmed by editing combatbehavior.meta:<br />p1:<br />0=BlindFireChance<br />1=BurstDurationInCover<br />3=TimeBetweenBurstsInCover<br />4=TimeBetweenPeeks<br />5=StrafeWhenMovingChance<br />8=WalkWhenStrafingChance<br />11=AttackWindowDistanceForCover<br />12=TimeToInvalidateInjuredTarget<br />16=OptimalCoverDistance<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52DFF8A10508090A<br />
/// </para>
/// </remarks>
public static float GetCombatFloat(int /* Ped */ ped, int p1)
{
return Function.Call<float>((Hash)0x52DFF8A10508090A, ped, p1);
}

/// <summary>
/// p1 may be a BOOL representing whether or not the group even exists
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DE69FE35CA09A45<br />
/// </para>
/// </remarks>
public static void GetGroupSize(int groupID, int /* bug: structure */ unknown, ref int sizeInMembers)
{
var nativeAssistPointerVar0 = sizeInMembers;
unsafe {
Function.Call((Hash)0x8DE69FE35CA09A45, groupID, unknown, &nativeAssistPointerVar0);
}
sizeInMembers = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C6B0C22F9F40BBE<br />
/// </para>
/// </remarks>
public static bool DoesGroupExist(int groupId)
{
return Function.Call<bool>((Hash)0x7C6B0C22F9F40BBE, groupId);
}

/// <summary>
/// Returns the group id of which the specified ped is a member of.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF162E133B4E7A675<br />
/// </para>
/// </remarks>
public static int GetPedGroupIndex(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xF162E133B4E7A675, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5891CAC5D4ACFF74<br />
/// </para>
/// </remarks>
public static bool IsPedInGroup(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x5891CAC5D4ACFF74, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A3975DEA89F9A17<br />
/// </para>
/// </remarks>
public static Player GetPlayerPedIsFollowing(int /* Ped */ ped)
{
return Function.Call<Player>((Hash)0x6A3975DEA89F9A17, ped);
}

/// <summary>
/// 0: Default<br />1: Circle Around Leader<br />2: Alternative Circle Around Leader<br />3: Line, with Leader at center
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE2F5FC3AF7E8C1E<br />
/// </para>
/// </remarks>
public static void SetGroupFormation(int groupId, int formationType)
{
Function.Call((Hash)0xCE2F5FC3AF7E8C1E, groupId, formationType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D9D45004C28C916<br />
/// </para>
/// </remarks>
public static void SetGroupFormationSpacing(int groupId, float x, float y, float z)
{
Function.Call((Hash)0x1D9D45004C28C916, groupId, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63DAB4CCB3273205<br />
/// </para>
/// </remarks>
public static void ResetGroupFormationDefaultSpacing(int groupHandle)
{
Function.Call((Hash)0x63DAB4CCB3273205, groupHandle);
}

/// <summary>
/// Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6094AD011A2EA87D<br />
/// </para>
/// </remarks>
public static int GetVehiclePedIsUsing(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x6094AD011A2EA87D, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF92691AED837A5FC<br />
/// </para>
/// </remarks>
public static int GetVehiclePedIsEntering(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xF92691AED837A5FC, ped);
}

/// <summary>
/// enable or disable the gravity of a ped<br /><br />Examples:<br />PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);<br />PED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FF447B6B6AD960A<br />
/// </para>
/// </remarks>
public static void SetPedGravity(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x9FF447B6B6AD960A, ped, toggle);
}

/// <summary>
/// damages a ped with the given amount
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x697157CED63F18D4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ApplyDamageToPed(int /* Ped */ ped, int damageAmount, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x697157CED63F18D4, ped, damageAmount, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36B77BB84687C318<br />
/// </para>
/// </remarks>
public static int GetTimePedDamagedByWeapon(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<int>((Hash)0x36B77BB84687C318, ped, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA1F1B7BE1A8766F<br />
/// </para>
/// </remarks>
public static void SetPedAllowedToDuck(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xDA1F1B7BE1A8766F, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DBFC55D5C9BB447<br />
/// </para>
/// </remarks>
public static void SetPedNeverLeavesGroup(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x3DBFC55D5C9BB447, ped, toggle);
}

/// <summary>
/// https://alloc8or.re/gta5/doc/enums/ePedType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF059E1E4C01E63C<br />
/// </para>
/// </remarks>
public static int GetPedType(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xFF059E1E4C01E63C, ped);
}

/// <summary>
/// Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as &quot;false&quot; has no effect; you must change p0&apos;s ped model to disable the effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB03C38DD3FB7FFD<br />
/// </para>
/// </remarks>
public static void SetPedAsCop(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xBB03C38DD3FB7FFD, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0xB3352E018D6F89DF<br />
/// </para>
/// </remarks>
public static void SetPedHealthPendingLastDamageEventOverrideFlag(bool toggle)
{
Function.Call((Hash)0xB3352E018D6F89DF, toggle);
}

/// <summary>
/// Sets the maximum health of a ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5F6378C4F3419D3<br />
/// </para>
/// </remarks>
public static void SetPedMaxHealth(int /* Ped */ ped, int value)
{
Function.Call((Hash)0xF5F6378C4F3419D3, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4700A416E8324EF3<br />
/// </para>
/// </remarks>
public static int GetPedMaxHealth(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x4700A416E8324EF3, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43C851690662113D<br />
/// </para>
/// </remarks>
public static void SetPedMaxTimeInWater(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x43C851690662113D, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6BA428C528D9E522<br />
/// </para>
/// </remarks>
public static void SetPedMaxTimeUnderwater(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x6BA428C528D9E522, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2735233A786B1BEF<br />
/// </para>
/// </remarks>
public static void SetCorpseRagdollFriction(int /* Ped */ ped, float p1)
{
Function.Call((Hash)0x2735233A786B1BEF, ped, p1);
}

/// <summary>
/// seatIndex must be &lt;= 2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x952F06BEECD775CC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedVehicleForcedSeatUsage(int /* Ped */ ped, int /* Vehicle */ vehicle, int seatIndex, int flags, int /* bug: Any */ p4)
{
Function.Call((Hash)0x952F06BEECD775CC, ped, vehicle, seatIndex, flags, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6CA85E7259CE16B<br />
/// </para>
/// </remarks>
public static void ClearAllPedVehicleForcedSeatUsage(int /* Ped */ ped)
{
Function.Call((Hash)0xE6CA85E7259CE16B, ped);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xB282749D5E028163<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedCanBeKnockedOffBike(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xB282749D5E028163, p0, p1);
}

/// <summary>
/// state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A6535691B477C48<br />
/// </para>
/// </remarks>
public static void SetPedCanBeKnockedOffVehicle(int /* Ped */ ped, int state)
{
Function.Call((Hash)0x7A6535691B477C48, ped, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51AC07A44D4F5B8A<br />
/// </para>
/// </remarks>
public static bool CanKnockPedOffVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x51AC07A44D4F5B8A, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45BBCBA77C29A841<br />
/// </para>
/// </remarks>
public static void KnockPedOffVehicle(int /* Ped */ ped)
{
Function.Call((Hash)0x45BBCBA77C29A841, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87052FE446E07247<br />
/// </para>
/// </remarks>
public static void SetPedCoordsNoGang(int /* Ped */ ped, float posX, float posY, float posZ)
{
Function.Call((Hash)0x87052FE446E07247, ped, posX, posY, posZ);
}

/// <summary>
/// from fm_mission_controller.c4 (variable names changed for clarity):<br /><br />int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());<br />PED::GET_GROUP_SIZE(group, &amp;unused, &amp;groupSize);<br />if (groupSize &gt;= 1) {<br />. . . . for (int memberNumber = 0; memberNumber &lt; groupSize; memberNumber++) {<br />. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);<br />. . . . . . . . //and so on
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51455483CF23ED97<br />
/// </para>
/// </remarks>
public static int GetPedAsGroupMember(int groupID, int memberNumber)
{
return Function.Call<int>((Hash)0x51455483CF23ED97, groupID, memberNumber);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CCE68DBD5FE93EC<br />
/// </para>
/// </remarks>
public static int GetPedAsGroupLeader(int groupID)
{
return Function.Call<int>((Hash)0x5CCE68DBD5FE93EC, groupID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x971D38760FBC02EF<br />
/// </para>
/// </remarks>
public static void SetPedKeepTask(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x971D38760FBC02EF, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49E50BDB8BA4DAB2<br />
/// </para>
/// </remarks>
public static void SetPedAllowMinorReactionsAsMissionPed(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x49E50BDB8BA4DAB2, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DE327631295B4C2<br />
/// </para>
/// </remarks>
public static bool IsPedSwimming(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x9DE327631295B4C2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC024869A53992F34<br />
/// </para>
/// </remarks>
public static bool IsPedSwimmingUnderWater(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xC024869A53992F34, ped);
}

/// <summary>
/// teleports ped to coords along with the vehicle ped is in
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AFEFF481A85AB2E<br />
/// </para>
/// </remarks>
public static void SetPedCoordsKeepVehicle(int /* Ped */ ped, float posX, float posY, float posZ)
{
Function.Call((Hash)0x9AFEFF481A85AB2E, ped, posX, posY, posZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A30922C90C9B42C<br />
/// </para>
/// </remarks>
public static void SetPedDiesInVehicle(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x2A30922C90C9B42C, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x102E68B2024D536D<br />
/// </para>
/// </remarks>
public static void SetCreateRandomCops(bool toggle)
{
Function.Call((Hash)0x102E68B2024D536D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A4986851C4EF6E7<br />
/// </para>
/// </remarks>
public static void SetCreateRandomCopsNotOnScenarios(bool toggle)
{
Function.Call((Hash)0x8A4986851C4EF6E7, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x444CB7D7DBE6973D<br />
/// </para>
/// </remarks>
public static void SetCreateRandomCopsOnScenarios(bool toggle)
{
Function.Call((Hash)0x444CB7D7DBE6973D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EE2CAFF7F17770D<br />
/// </para>
/// </remarks>
public static bool CanCreateRandomCops()
{
return Function.Call<bool>((Hash)0x5EE2CAFF7F17770D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02A0C9720B854BFA<br />
/// </para>
/// </remarks>
public static void SetPedAsEnemy(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x02A0C9720B854BFA, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CCE141467FF42A2<br />
/// </para>
/// </remarks>
public static void SetPedCanSmashGlass(int /* Ped */ ped, bool p1, bool p2)
{
Function.Call((Hash)0x1CCE141467FF42A2, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F972C1AB75A1ED0<br />
/// </para>
/// </remarks>
public static bool IsPedInAnyTrain(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x6F972C1AB75A1ED0, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB062B2B5722478E<br />
/// </para>
/// </remarks>
public static bool IsPedGettingIntoAVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xBB062B2B5722478E, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44D28D5DDFE5F68C<br />
/// </para>
/// </remarks>
public static bool IsPedTryingToEnterALockedVehicle(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x44D28D5DDFE5F68C, ped);
}

/// <summary>
/// ped can not pull out a weapon when true
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF1AF8B5D56542FA<br />
/// </para>
/// </remarks>
public static void SetEnableHandcuffs(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xDF1AF8B5D56542FA, ped, toggle);
}

/// <summary>
/// Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC52E0F855C58FC2E<br />
/// </para>
/// </remarks>
public static void SetEnableBoundAnkles(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xC52E0F855C58FC2E, ped, toggle);
}

/// <summary>
/// Enables diving motion when underwater.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF99F62004024D506<br />
/// </para>
/// </remarks>
public static void SetEnableScuba(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xF99F62004024D506, ped, toggle);
}

/// <summary>
/// Setting ped to true allows the ped to shoot &quot;friendlies&quot;.<br /><br />p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.<br /><br />p1 = false &amp; p2 = false for unable to aim at.<br />p1 = true &amp; p2 = false for able to aim at. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3B1CB349FF9C75D<br />
/// </para>
/// </remarks>
public static void SetCanAttackFriendly(int /* Ped */ ped, bool toggle, bool p2)
{
Function.Call((Hash)0xB3B1CB349FF9C75D, ped, toggle, p2);
}

/// <summary>
/// Returns the ped&apos;s alertness (0-3).<br /><br />Values : <br /><br />0 : Neutral<br />1 : Heard something (gun shot, hit, etc)<br />2 : Knows (the origin of the event)<br />3 : Fully alerted (is facing the event?)<br /><br />If the Ped does not exist, returns -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6AA118530443FD2<br />
/// </para>
/// </remarks>
public static int GetPedAlertness(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xF6AA118530443FD2, ped);
}

/// <summary>
/// value ranges from 0 to 3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBA71115ED9941A6<br />
/// </para>
/// </remarks>
public static void SetPedAlertness(int /* Ped */ ped, int value)
{
Function.Call((Hash)0xDBA71115ED9941A6, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC0ED94165A48BC2<br />
/// </para>
/// </remarks>
public static void SetPedGetOutUpsideDownVehicle(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xBC0ED94165A48BC2, ped, toggle);
}

/// <summary>
/// transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f<br /><br />List of movement clipsets:<br />Thanks to elsewhat for list.<br /><br /> &quot;ANIM_GROUP_MOVE_BALLISTIC&quot;<br /> &quot;ANIM_GROUP_MOVE_LEMAR_ALLEY&quot;<br /> &quot;clipset@move@trash_fast_turn&quot;<br /> &quot;FEMALE_FAST_RUNNER&quot;<br /> &quot;missfbi4prepp1_garbageman&quot;<br /> &quot;move_characters@franklin@fire&quot;<br /> &quot;move_characters@Jimmy@slow@&quot;<br /> &quot;move_characters@michael@fire&quot;<br /> &quot;move_f@flee@a&quot;<br /> &quot;move_f@scared&quot;<br /> &quot;move_f@sexy@a&quot;<br /> &quot;move_heist_lester&quot;<br /> &quot;move_injured_generic&quot;<br /> &quot;move_lester_CaneUp&quot;<br /> &quot;move_m@bag&quot;<br /> &quot;MOVE_M@BAIL_BOND_NOT_TAZERED&quot;<br /> &quot;MOVE_M@BAIL_BOND_TAZERED&quot;<br /> &quot;move_m@brave&quot;<br /> &quot;move_m@casual@d&quot;<br /> &quot;move_m@drunk@moderatedrunk&quot;<br /> &quot;MOVE_M@DRUNK@MODERATEDRUNK&quot;<br /> &quot;MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP&quot;<br /> &quot;MOVE_M@DRUNK@SLIGHTLYDRUNK&quot;<br /> &quot;MOVE_M@DRUNK@VERYDRUNK&quot;<br /> &quot;move_m@fire&quot;<br /> &quot;move_m@gangster@var_e&quot;<br /> &quot;move_m@gangster@var_f&quot;<br /> &quot;move_m@gangster@var_i&quot;<br /> &quot;move_m@JOG@&quot;<br /> &quot;MOVE_M@PRISON_GAURD&quot;<br /> &quot;MOVE_P_M_ONE&quot;<br /> &quot;MOVE_P_M_ONE_BRIEFCASE&quot;<br /> &quot;move_p_m_zero_janitor&quot;<br /> &quot;move_p_m_zero_slow&quot;<br /> &quot;move_ped_bucket&quot;<br /> &quot;move_ped_crouched&quot;<br /> &quot;move_ped_mop&quot;<br /> &quot;MOVE_M@FEMME@&quot;<br /> &quot;MOVE_F@FEMME@&quot;<br /> &quot;MOVE_M@GANGSTER@NG&quot;<br /> &quot;MOVE_F@GANGSTER@NG&quot;<br /> &quot;MOVE_M@POSH@&quot;<br /> &quot;MOVE_F@POSH@&quot;<br /> &quot;MOVE_M@TOUGH_GUY@&quot;<br /> &quot;MOVE_F@TOUGH_GUY@&quot;<br /><br />~ NotCrunchyTaco<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF8A94EDE7712BEF<br />
/// </para>
/// </remarks>
public static void SetPedMovementClipset(int /* Ped */ ped, string clipSet, float transitionSpeed)
{
Function.Call((Hash)0xAF8A94EDE7712BEF, ped, clipSet, transitionSpeed);
}

/// <summary>
/// If p1 is 0.0, I believe you are back to normal. <br />If p1 is 1.0, it looks like you can only rotate the ped, not walk.<br /><br />Using the following code to reset back to normal<br />PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA74EC0CB0AAEA2C<br />
/// </para>
/// </remarks>
public static void ResetPedMovementClipset(int /* Ped */ ped, float p1)
{
Function.Call((Hash)0xAA74EC0CB0AAEA2C, ped, p1);
}

/// <summary>
/// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29A28F3F8CF6D854<br />
/// </para>
/// </remarks>
public static void SetPedStrafeClipset(int /* Ped */ ped, string clipSet)
{
Function.Call((Hash)0x29A28F3F8CF6D854, ped, clipSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20510814175EA477<br />
/// </para>
/// </remarks>
public static void ResetPedStrafeClipset(int /* Ped */ ped)
{
Function.Call((Hash)0x20510814175EA477, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2622E35B77D3ACA2<br />
/// </para>
/// </remarks>
public static void SetPedWeaponMovementClipset(int /* Ped */ ped, string clipSet)
{
Function.Call((Hash)0x2622E35B77D3ACA2, ped, clipSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97B0DB5B4AA74E77<br />
/// </para>
/// </remarks>
public static void ResetPedWeaponMovementClipset(int /* Ped */ ped)
{
Function.Call((Hash)0x97B0DB5B4AA74E77, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED34AB6C5CB36520<br />
/// </para>
/// </remarks>
public static void SetPedDriveByClipsetOverride(int /* Ped */ ped, string clipset)
{
Function.Call((Hash)0xED34AB6C5CB36520, ped, clipset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4AFE3690D7E0B5AC<br />
/// </para>
/// </remarks>
public static void ClearPedDriveByClipsetOverride(int /* Ped */ ped)
{
Function.Call((Hash)0x4AFE3690D7E0B5AC, ped);
}

/// <summary>
/// Found in the b617d scripts:<br />PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, &quot;trevor_heist_cover_2h&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DBA107B4937F809<br />
/// </para>
/// </remarks>
public static void SetPedMotionInCoverClipsetOverride(int /* Ped */ ped, string p1)
{
Function.Call((Hash)0x9DBA107B4937F809, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC79196DCB36F6121<br />
/// </para>
/// </remarks>
public static void ClearPedMotionInCoverClipsetOverride(int /* Ped */ ped)
{
Function.Call((Hash)0xC79196DCB36F6121, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80054D7FCC70EEC6<br />
/// </para>
/// </remarks>
public static void ClearPedFallUpperBodyClipsetOverride(int /* Ped */ ped)
{
Function.Call((Hash)0x80054D7FCC70EEC6, ped);
}

/// <summary>
/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(&quot;MINI_PROSTITUTE_LOW_PASSENGER&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY(&quot;MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(&quot;MISS_FAMILY1_JIMMY_SIT&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY(&quot;MISS_FAMILY1_JIMMY_SIT_REAR&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY(&quot;MISS_FAMILY2_JIMMY_BICYCLE&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY(&quot;MISSFBI2_MICHAEL_DRIVEBY&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;MISS_ARMENIAN3_FRANKLIN_TENSE&quot;));<br />PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;MISSFBI5_TREVOR_DRIVING&quot;));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x530071295899A8C6<br />
/// </para>
/// </remarks>
public static void SetPedInVehicleContext(int /* Ped */ ped, uint context)
{
Function.Call((Hash)0x530071295899A8C6, ped, context);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22EF8FF8778030EB<br />
/// </para>
/// </remarks>
public static void ResetPedInVehicleContext(int /* Ped */ ped)
{
Function.Call((Hash)0x22EF8FF8778030EB, ped);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EC47A344923E1ED<br />
/// </para>
/// </remarks>
public static bool IsScriptedScenarioPedUsingConditionalAnim(int /* Ped */ ped, string animDict, string anim)
{
return Function.Call<bool>((Hash)0x6EC47A344923E1ED, ped, animDict, anim);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C60394CB4F75E9A<br />
/// </para>
/// </remarks>
public static void SetPedAlternateWalkAnim(int /* Ped */ ped, string animDict, string animName, float p3, bool p4)
{
Function.Call((Hash)0x6C60394CB4F75E9A, ped, animDict, animName, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8844BBFCE30AA9E9<br />
/// </para>
/// </remarks>
public static void ClearPedAlternateWalkAnim(int /* Ped */ ped, float p1)
{
Function.Call((Hash)0x8844BBFCE30AA9E9, ped, p1);
}

/// <summary>
/// stance:<br />0 = idle<br />1 = walk<br />2 = running<br /><br />p5 = usually set to true<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90A43CC281FFAB46<br />
/// </para>
/// </remarks>
public static void SetPedAlternateMovementAnim(int /* Ped */ ped, int stance, string animDictionary, string animationName, float p4, bool p5)
{
Function.Call((Hash)0x90A43CC281FFAB46, ped, stance, animDictionary, animationName, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8D19675ED5FBDCE<br />
/// </para>
/// </remarks>
public static void ClearPedAlternateMovementAnim(int /* Ped */ ped, int stance, float p2)
{
Function.Call((Hash)0xD8D19675ED5FBDCE, ped, stance, p2);
}

/// <summary>
/// From the scripts:<br />PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),<br />&quot;ANIM_GROUP_GESTURE_MISS_FRA0&quot;);<br />PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),<br />&quot;ANIM_GROUP_GESTURE_MISS_DocksSetup1&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDF803377F94AAA8<br />
/// </para>
/// </remarks>
public static void SetPedGestureGroup(int /* Ped */ ped, string animGroupGesture)
{
Function.Call((Hash)0xDDF803377F94AAA8, ped, animGroupGesture);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE22B26DD764C040<br />
/// </para>
/// </remarks>
public static Vector3 GetAnimInitialOffsetPosition(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
{
return Function.Call<Vector3>((Hash)0xBE22B26DD764C040, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B805E6046EE9E47<br />
/// </para>
/// </remarks>
public static Vector3 GetAnimInitialOffsetRotation(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
{
return Function.Call<Vector3>((Hash)0x4B805E6046EE9E47, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
}

/// <summary>
/// Ids<br />0 - Head<br />1 - Beard<br />2 - Hair<br />3 - Torso<br />4 - Legs<br />5 - Hands<br />6 - Foot<br />7 - ------<br />8 - Accessories 1<br />9 - Accessories 2<br />10- Decals<br />11 - Auxiliary parts for torso
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67F3780DD425D4FC<br />
/// </para>
/// </remarks>
public static int GetPedDrawableVariation(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0x67F3780DD425D4FC, ped, componentId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27561561732A7842<br />
/// </para>
/// </remarks>
public static int GetNumberOfPedDrawableVariations(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0x27561561732A7842, ped, componentId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04A355E041E004E6<br />
/// </para>
/// </remarks>
public static int GetPedTextureVariation(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0x04A355E041E004E6, ped, componentId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F7156A3142A6BAD<br />
/// </para>
/// </remarks>
public static int GetNumberOfPedTextureVariations(int /* Ped */ ped, int componentId, int drawableId)
{
return Function.Call<int>((Hash)0x8F7156A3142A6BAD, ped, componentId, drawableId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FAF9754E789FB47<br />
/// </para>
/// </remarks>
public static int GetNumberOfPedPropDrawableVariations(int /* Ped */ ped, int propId)
{
return Function.Call<int>((Hash)0x5FAF9754E789FB47, ped, propId);
}

/// <summary>
/// Need to check behavior when drawableId = -1<br /><br />- Doofy.Ass<br />Why this function doesn&apos;t work and return nill value?<br />GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)<br /><br />tick: scripts/addins/menu_execute.lua:51: attempt to call field &apos;GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS&apos; (a nil value)<br /><br /><br />List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6E7F1CEB523E171<br />
/// </para>
/// </remarks>
public static int GetNumberOfPedPropTextureVariations(int /* Ped */ ped, int propId, int drawableId)
{
return Function.Call<int>((Hash)0xA6E7F1CEB523E171, ped, propId, drawableId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3DD5F2A84B42281<br />
/// </para>
/// </remarks>
public static int GetPedPaletteVariation(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0xE3DD5F2A84B42281, ped, componentId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E30E91FB03A2CAF<br />
/// </para>
/// </remarks>
public static bool GetMpOutfitDataFromMetadata(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x9E30E91FB03A2CAF, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E77FA7A62EE6C4C<br />
/// </para>
/// </remarks>
public static int GetFmMaleShopPedApparelItemIndex(int p0)
{
return Function.Call<int>((Hash)0x1E77FA7A62EE6C4C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF033419D1B81FAE8<br />
/// </para>
/// </remarks>
public static int GetFmFemaleShopPedApparelItemIndex(int p0)
{
return Function.Call<int>((Hash)0xF033419D1B81FAE8, p0);
}

/// <summary>
/// Checks if the component variation is valid, this works great for randomizing components using loops.<br /><br />List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html<br /><br />Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE825F6B6CEA7671D<br />
/// </para>
/// </remarks>
public static bool IsPedComponentVariationValid(int /* Ped */ ped, int componentId, int drawableId, int textureId)
{
return Function.Call<bool>((Hash)0xE825F6B6CEA7671D, ped, componentId, drawableId, textureId);
}

/// <summary>
/// paletteId: 0 to 3.<br /><br />componentId:<br />enum ePedVarComp<br />{<br />	PV_COMP_INVALID = -1,<br />	PV_COMP_HEAD,<br />	PV_COMP_BERD,<br />	PV_COMP_HAIR,<br />	PV_COMP_UPPR,<br />	PV_COMP_LOWR,<br />	PV_COMP_HAND,<br />	PV_COMP_FEET,<br />	PV_COMP_TEEF,<br />	PV_COMP_ACCS,<br />	PV_COMP_TASK,<br />	PV_COMP_DECL,<br />	PV_COMP_JBIB,<br />	PV_COMP_MAX<br />};<br /><br />Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html<br /><br />Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x262B14F48D29DE80<br />
/// </para>
/// </remarks>
public static void SetPedComponentVariation(int /* Ped */ ped, int componentId, int drawableId, int textureId, int paletteId)
{
Function.Call((Hash)0x262B14F48D29DE80, ped, componentId, drawableId, textureId, paletteId);
}

/// <summary>
/// p1 is always 0 in R* scripts.<br /><br />List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8A9481A01E63C28<br />
/// </para>
/// </remarks>
public static void SetPedRandomComponentVariation(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0xC8A9481A01E63C28, ped, p1);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC44AA05345C992C6<br />
/// </para>
/// </remarks>
public static void SetPedRandomProps(int /* Ped */ ped)
{
Function.Call((Hash)0xC44AA05345C992C6, ped);
}

/// <summary>
/// Sets Ped Default Clothes
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45EEE61580806D63<br />
/// </para>
/// </remarks>
public static void SetPedDefaultComponentVariation(int /* Ped */ ped)
{
Function.Call((Hash)0x45EEE61580806D63, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x137BBD05230DB22D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedBlendFromParents(int /* Ped */ ped, int /* bug: Any */ p1, int /* bug: Any */ p2, float p3, float p4)
{
Function.Call((Hash)0x137BBD05230DB22D, ped, p1, p2, p3, p4);
}

/// <summary>
/// The &quot;shape&quot; parameters control the shape of the ped&apos;s face. The &quot;skin&quot; parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for &quot;children&quot; of the player character&apos;s grandparents during old-gen character creation. It has unknown effect otherwise.<br /><br />The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.<br /><br />!!!Can someone add working example for this???<br /><br />try this:<br />       headBlendData headData;<br />       GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &amp;headData);<br /><br />       SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond<br />          , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);<br /><br /><br />For more info please refer to this topic. <br />gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9414E18B9434C2FE<br />
/// </para>
/// </remarks>
public static void SetPedHeadBlendData(int /* Ped */ ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, bool isParent)
{
Function.Call((Hash)0x9414E18B9434C2FE, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
}

/// <summary>
/// The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.<br />pass this struct in the second parameter <br />struct headBlendData<br />{<br />    int shapeFirst;<br />    int padding1;<br />    int shapeSecond;<br />    int padding2;<br />    int shapeThird;<br />    int padding3;<br />    int skinFirst;<br />    int padding4;<br />    int skinSecond;<br />    int padding5;<br />    int skinThird;<br />    int padding6;<br />    float shapeMix;<br />    int padding7;<br />    float skinMix;<br />    int padding8;<br />    float thirdMix;<br />    int padding9;<br />    bool isParent;<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2746BD9D88C5C5D0<br />
/// </para>
/// </remarks>
public static bool GetPedHeadBlendData(int /* Ped */ ped, int /* bug: structure */ headBlendData)
{
return Function.Call<bool>((Hash)0x2746BD9D88C5C5D0, ped, headBlendData);
}

/// <summary>
/// See SET_PED_HEAD_BLEND_DATA().
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x723538F61C647C5A<br />
/// </para>
/// </remarks>
public static void UpdatePedHeadBlendData(int /* Ped */ ped, float shapeMix, float skinMix, float thirdMix)
{
Function.Call((Hash)0x723538F61C647C5A, ped, shapeMix, skinMix, thirdMix);
}

/// <summary>
/// Used for freemode (online) characters.<br /><br />For some reason, the scripts use a rounded float for the index.<br />Indexes:<br />1. black<br />2. very light blue/green<br />3. dark blue<br />4. brown<br />5. darker brown<br />6. light brown<br />7. blue<br />8. light blue<br />9. pink<br />10. yellow<br />11. purple<br />12. black<br />13. dark green<br />14. light brown<br />15. yellow/black pattern<br />16. light colored spiral pattern<br />17. shiny red<br />18. shiny half blue/half red<br />19. half black/half light blue<br />20. white/red perimter<br />21. green snake<br />22. red snake<br />23. dark blue snake<br />24. dark yellow<br />25. bright yellow<br />26. all black<br />28. red small pupil<br />29. devil blue/black<br />30. white small pupil<br />31. glossed over
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50B56988B170AFDF<br />
/// </para>
/// </remarks>
public static void SetHeadBlendEyeColor(int /* Ped */ ped, int index)
{
Function.Call((Hash)0x50B56988B170AFDF, ped, index);
}

/// <summary>
/// A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x76BBA2CEE66D47E9<br />
/// </para>
/// </remarks>
public static int GetHeadBlendEyeColor(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x76BBA2CEE66D47E9, ped);
}

/// <summary>
/// OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. <br /><br />overlayID       Part                  Index, to disable<br />0               Blemishes             0 - 23, 255<br />1               Facial Hair           0 - 28, 255<br />2               Eyebrows              0 - 33, 255<br />3               Ageing                0 - 14, 255<br />4               Makeup                0 - 74, 255<br />5               Blush                 0 - 6, 255<br />6               Complexion            0 - 11, 255<br />7               Sun Damage            0 - 10, 255<br />8               Lipstick              0 - 9, 255<br />9               Moles/Freckles        0 - 17, 255<br />10              Chest Hair            0 - 16, 255<br />11              Body Blemishes        0 - 11, 255<br />12              Add Body Blemishes    0 - 1, 255
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48F44967FA05CC1E<br />
/// </para>
/// </remarks>
public static void SetPedHeadOverlay(int /* Ped */ ped, int overlayID, int index, float opacity)
{
Function.Call((Hash)0x48F44967FA05CC1E, ped, overlayID, index, opacity);
}

/// <summary>
/// Likely a char, if that overlay is not set, e.i. &quot;None&quot; option, returns 255;<br /><br />This might be the once removed native GET_PED_HEAD_OVERLAY.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA60EF3B6461A4D43<br />
/// </para>
/// </remarks>
public static int GetPedHeadOverlay(int /* Ped */ ped, int overlayID)
{
return Function.Call<int>((Hash)0xA60EF3B6461A4D43, ped, overlayID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF1CE768BB43480E<br />
/// </para>
/// </remarks>
public static int GetPedHeadOverlayNum(int overlayID)
{
return Function.Call<int>((Hash)0xCF1CE768BB43480E, overlayID);
}

/// <summary>
/// <br /><br />ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.<br /><br />Called after SET_PED_HEAD_OVERLAY().
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x497BF74A7B9CB952<br />
/// </para>
/// </remarks>
public static void SetPedHeadOverlayTint(int /* Ped */ ped, int overlayID, int colorType, int colorID, int secondColorID)
{
Function.Call((Hash)0x497BF74A7B9CB952, ped, overlayID, colorType, colorID, secondColorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CFFC65454C93A49<br />
/// </para>
/// </remarks>
public static void SetPedHairTint(int /* Ped */ ped, int colorID, int highlightColorID)
{
Function.Call((Hash)0x4CFFC65454C93A49, ped, colorID, highlightColorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5C0CF872C2AD150<br />
/// </para>
/// </remarks>
public static int GetNumPedHairTints()
{
return Function.Call<int>((Hash)0xE5C0CF872C2AD150);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1F7CA1535D22818<br />
/// </para>
/// </remarks>
public static int GetNumPedMakeupTints()
{
return Function.Call<int>((Hash)0xD1F7CA1535D22818);
}

/// <summary>
/// Input: Haircolor index, value between 0 and 63 (inclusive).<br />Output: RGB values for the haircolor specified in the input.<br /><br />This is used with the hair color swatches scaleform.<br />Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4852FC386E2E1BB5<br />
/// </para>
/// </remarks>
public static void GetPedHairTintColor(int hairColorIndex, ref int outR, ref int outG, ref int outB)
{
var nativeAssistPointerVar0 = outR;
var nativeAssistPointerVar1 = outG;
var nativeAssistPointerVar2 = outB;
unsafe {
Function.Call((Hash)0x4852FC386E2E1BB5, hairColorIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
outR = nativeAssistPointerVar0;
outG = nativeAssistPointerVar1;
outB = nativeAssistPointerVar2;
}

/// <summary>
/// Input: Makeup color index, value between 0 and 63 (inclusive).<br />Output: RGB values for the makeup color specified in the input.<br /><br />This is used with the makeup color swatches scaleform.<br />Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x013E5CFC38CD5387<br />
/// </para>
/// </remarks>
public static void GetPedMakeupTintColor(int makeupColorIndex, ref int outR, ref int outG, ref int outB)
{
var nativeAssistPointerVar0 = outR;
var nativeAssistPointerVar1 = outG;
var nativeAssistPointerVar2 = outB;
unsafe {
Function.Call((Hash)0x013E5CFC38CD5387, makeupColorIndex, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
outR = nativeAssistPointerVar0;
outG = nativeAssistPointerVar1;
outB = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED6D8E27A43B8CDE<br />
/// </para>
/// </remarks>
public static bool IsPedHairTintForCreator(int colorId)
{
return Function.Call<bool>((Hash)0xED6D8E27A43B8CDE, colorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA9960D07DADCF10<br />
/// </para>
/// </remarks>
public static int GetDefaultSecondaryTintForCreator(int colorId)
{
return Function.Call<int>((Hash)0xEA9960D07DADCF10, colorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E802F11FBE27674<br />
/// </para>
/// </remarks>
public static bool IsPedLipstickTintForCreator(int colorId)
{
return Function.Call<bool>((Hash)0x3E802F11FBE27674, colorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF41B5D290C99A3D6<br />
/// </para>
/// </remarks>
public static bool IsPedBlushTintForCreator(int colorId)
{
return Function.Call<bool>((Hash)0xF41B5D290C99A3D6, colorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0D36E5D9E99CC21<br />
/// </para>
/// </remarks>
public static bool IsPedHairTintForBarber(int colorID)
{
return Function.Call<bool>((Hash)0xE0D36E5D9E99CC21, colorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAA6A3698A69E048<br />
/// </para>
/// </remarks>
public static int GetDefaultSecondaryTintForBarber(int colorID)
{
return Function.Call<int>((Hash)0xAAA6A3698A69E048, colorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0525A2C2562F3CD4<br />
/// </para>
/// </remarks>
public static bool IsPedLipstickTintForBarber(int colorID)
{
return Function.Call<bool>((Hash)0x0525A2C2562F3CD4, colorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x604E810189EE3A59<br />
/// </para>
/// </remarks>
public static bool IsPedBlushTintForBarber(int colorID)
{
return Function.Call<bool>((Hash)0x604E810189EE3A59, colorID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x09E7ECA981D9B210<br />
/// </para>
/// </remarks>
public static bool IsPedBlushFacepaintTintForBarber(int colorId)
{
return Function.Call<bool>((Hash)0x09E7ECA981D9B210, colorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC56FBF2F228E1DAC<br />
/// </para>
/// </remarks>
public static int GetTintIndexForLastGenHairTexture(uint modelHash, int drawableId, int textureId)
{
return Function.Call<int>((Hash)0xC56FBF2F228E1DAC, modelHash, drawableId, textureId);
}

/// <summary>
/// Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.<br /><br /><br /><br />0 - Nose Width (Thin/Wide)<br /><br />1 - Nose Peak (Up/Down)<br /><br />2 - Nose Length (Long/Short)<br /><br />3 - Nose Bone Curveness (Crooked/Curved)<br /><br />4 - Nose Tip (Up/Down)<br /><br />5 - Nose Bone Twist (Left/Right)<br /><br />6 - Eyebrow (Up/Down)<br /><br />7 - Eyebrow (In/Out)<br /><br />8 - Cheek Bones (Up/Down)<br /><br />9 - Cheek Sideways Bone Size (In/Out)<br /><br />10 - Cheek Bones Width (Puffed/Gaunt)<br /><br />11 - Eye Opening (Both) (Wide/Squinted)<br /><br />12 - Lip Thickness (Both) (Fat/Thin)<br /><br />13 - Jaw Bone Width (Narrow/Wide)<br /><br />14 - Jaw Bone Shape (Round/Square)<br /><br />15 - Chin Bone (Up/Down)<br /><br />16 - Chin Bone Length (In/Out or Backward/Forward)<br /><br />17 - Chin Bone Shape (Pointed/Square)<br /><br />18 - Chin Hole (Chin Bum)<br /><br />19 - Neck Thickness (Thin/Thick)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71A5C1DBA060049E<br />
/// </para>
/// </remarks>
public static void SetPedMicroMorph(int /* Ped */ ped, int index, float scale)
{
Function.Call((Hash)0x71A5C1DBA060049E, ped, index, scale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x654CD0A825161131<br />
/// </para>
/// </remarks>
public static bool HasPedHeadBlendFinished(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x654CD0A825161131, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4668D80430D6C299<br />
/// </para>
/// </remarks>
public static void FinalizeHeadBlend(int /* Ped */ ped)
{
Function.Call((Hash)0x4668D80430D6C299, ped);
}

/// <summary>
/// p4 seems to vary from 0 to 3.<br />Preview: https://gfycat.com/MaleRareAmazonparrot
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC9682B8951C5229<br />
/// </para>
/// </remarks>
public static void SetHeadBlendPaletteColor(int /* Ped */ ped, int r, int g, int b, int id)
{
Function.Call((Hash)0xCC9682B8951C5229, ped, r, g, b, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA21C118553BBDF02<br />
/// </para>
/// </remarks>
public static void DisableHeadBlendPaletteColor(int /* Ped */ ped)
{
Function.Call((Hash)0xA21C118553BBDF02, ped);
}

/// <summary>
/// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.<br /><br />Used when calling SET_PED_HEAD_BLEND_DATA.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68D353AB88B97E0C<br />
/// </para>
/// </remarks>
public static int GetPedHeadBlendFirstIndex(int type)
{
return Function.Call<int>((Hash)0x68D353AB88B97E0C, type);
}

/// <summary>
/// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EF37013A6539C9D<br />
/// </para>
/// </remarks>
public static int GetPedHeadBlendNumHeads(int type)
{
return Function.Call<int>((Hash)0x5EF37013A6539C9D, type);
}

/// <summary>
/// from extreme3.c4<br />PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));<br /><br />p1 is probably componentId
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39D55A620FCB6A3A<br />
/// </para>
/// </remarks>
public static int SetPedPreloadVariationData(int /* Ped */ ped, int slot, int drawableId, int textureId)
{
return Function.Call<int>((Hash)0x39D55A620FCB6A3A, ped, slot, drawableId, textureId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66680A92700F43DF<br />
/// </para>
/// </remarks>
public static bool HasPedPreloadVariationDataFinished(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x66680A92700F43DF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AAB586FFEC0FD96<br />
/// </para>
/// </remarks>
public static void ReleasePedPreloadVariationData(int /* Ped */ ped)
{
Function.Call((Hash)0x5AAB586FFEC0FD96, ped);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B16A3BFF1FBCE49<br />
/// </para>
/// </remarks>
public static int SetPedPreloadPropData(int /* Ped */ ped, int componentId, int drawableId, int TextureId)
{
return Function.Call<int>((Hash)0x2B16A3BFF1FBCE49, ped, componentId, drawableId, TextureId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x784002A632822099<br />
/// </para>
/// </remarks>
public static bool HasPedPreloadPropDataFinished(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x784002A632822099, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF79F9DEF0AADE61A<br />
/// </para>
/// </remarks>
public static void ReleasePedPreloadPropData(int /* Ped */ ped)
{
Function.Call((Hash)0xF79F9DEF0AADE61A, ped);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x898CC20EA75BACD8<br />
/// </para>
/// </remarks>
public static int GetPedPropIndex(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0x898CC20EA75BACD8, ped, componentId);
}

/// <summary>
/// ComponentId can be set to various things based on what category you&apos;re wanting to set<br />enum PedPropsData<br />{<br />    PED_PROP_HATS = 0,<br />    PED_PROP_GLASSES = 1,<br /> PED_PROP_EARS = 2,<br />    PED_PROP_WATCHES = 3,<br />};<br />Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);<br /><br />List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93376B65A266EB5F<br />
/// </para>
/// </remarks>
public static void SetPedPropIndex(int /* Ped */ ped, int componentId, int drawableId, int TextureId, bool attach)
{
Function.Call((Hash)0x93376B65A266EB5F, ped, componentId, drawableId, TextureId, attach);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FD7816A36615F48<br />
/// </para>
/// </remarks>
public static void KnockOffPedProp(int /* Ped */ ped, bool p1, bool p2, bool p3, bool p4)
{
Function.Call((Hash)0x6FD7816A36615F48, ped, p1, p2, p3, p4);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0943E5B8E078E76E<br />
/// </para>
/// </remarks>
public static void ClearPedProp(int /* Ped */ ped, int propId)
{
Function.Call((Hash)0x0943E5B8E078E76E, ped, propId);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD8A7537A9B52F06<br />
/// </para>
/// </remarks>
public static void ClearAllPedProps(int /* Ped */ ped)
{
Function.Call((Hash)0xCD8A7537A9B52F06, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFF4710E2A0A6C12<br />
/// </para>
/// </remarks>
public static void DropAmbientProp(int /* Ped */ ped)
{
Function.Call((Hash)0xAFF4710E2A0A6C12, ped);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE131A28626F81AB2<br />
/// </para>
/// </remarks>
public static int GetPedPropTextureIndex(int /* Ped */ ped, int componentId)
{
return Function.Call<int>((Hash)0xE131A28626F81AB2, ped, componentId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1280804F7CFD2D6C<br />
/// </para>
/// </remarks>
public static void ClearPedParachutePackVariation(int /* Ped */ ped)
{
Function.Call((Hash)0x1280804F7CFD2D6C, ped);
}

/// <summary>
/// This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36C6984C3ED0C911<br />
/// </para>
/// </remarks>
public static void SetPedScubaGearVariation(int /* Ped */ ped)
{
Function.Call((Hash)0x36C6984C3ED0C911, ped);
}

/// <summary>
/// Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the &apos;remove scuba gear&apos; animation, but instantly removes it.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB50EB4CCB29704AC<br />
/// </para>
/// </remarks>
public static void ClearPedScubaGearVariation(int /* Ped */ ped)
{
Function.Call((Hash)0xB50EB4CCB29704AC, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEC9A3B1820F3331<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsUsingPedScubaGearVariation(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xFEC9A3B1820F3331, p0);
}

/// <summary>
/// works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F8AA94D6D97DBF4<br />
/// </para>
/// </remarks>
public static void SetBlockingOfNonTemporaryEvents(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x9F8AA94D6D97DBF4, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F5F651ACCC9C4CF<br />
/// </para>
/// </remarks>
public static void SetPedBoundsOrientation(int /* Ped */ ped, float p1, float p2, float x, float y, float z)
{
Function.Call((Hash)0x4F5F651ACCC9C4CF, ped, p1, p2, x, y, z);
}

/// <summary>
/// PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.<br /><br />l_216 = RECSBRobber1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F25D9AEFA34FBA2<br />
/// </para>
/// </remarks>
public static void RegisterTarget(int /* Ped */ ped, int /* Ped */ target)
{
Function.Call((Hash)0x2F25D9AEFA34FBA2, ped, target);
}

/// <summary>
/// Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9222F300BF8354FE<br />
/// </para>
/// </remarks>
public static void RegisterHatedTargetsAroundPed(int /* Ped */ ped, float radius)
{
Function.Call((Hash)0x9222F300BF8354FE, ped, radius);
}

/// <summary>
/// Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. <br /><br />Ped Types:<br />Any = -1<br />Player = 1<br />Male = 4 <br />Female = 5 <br />Cop = 6<br />Human = 26<br />SWAT = 27 <br />Animal = 28<br />Army = 29
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x876046A8E3A4B71C<br />
/// </para>
/// </remarks>
public static int GetRandomPedAtCoord(float x, float y, float z, float xRadius, float yRadius, float zRadius, int pedType)
{
return Function.Call<int>((Hash)0x876046A8E3A4B71C, x, y, z, xRadius, yRadius, zRadius, pedType);
}

/// <summary>
/// Gets the closest ped in a radius.<br /><br />Ped Types:<br />Any ped = -1<br />Player = 1<br />Male = 4 <br />Female = 5 <br />Cop = 6<br />Human = 26<br />SWAT = 27 <br />Animal = 28<br />Army = 29<br /><br />------------------<br />P4 P5 P7 P8<br />1  0  x  x  = return nearest walking Ped<br />1  x  0  x  = return nearest walking Ped<br />x  1  1  x  = return Ped you are using<br />0  0  x  x  = no effect<br />0  x  0  x  = no effect<br /><br />x = can be 1 or 0. Does not have any obvious changes.<br /><br />This function does not return ped who is:<br />1. Standing still<br />2. Driving<br />3. Fleeing<br />4. Attacking<br /><br />This function only work if the ped is:<br />1. walking normally.<br />2. waiting to cross a road.<br /><br />Note: PED::GET_PED_NEARBY_PEDS works for more peds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC33AB876A77F8164<br />
/// </para>
/// </remarks>
public static bool GetClosestPed(float x, float y, float z, float radius, bool p4, bool p5, ref int /* Ped* */ outPed, bool p7, bool p8, int pedType)
{
var nativeAssistPointerVar0 = outPed;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC33AB876A77F8164, x, y, z, radius, p4, p5, &nativeAssistPointerVar0, p7, p8, pedType);
}
outPed = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14F19A8782C8071E<br />
/// </para>
/// </remarks>
public static void SetScenarioPedsToBeReturnedByNextCommand(bool value)
{
Function.Call((Hash)0x14F19A8782C8071E, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03EA03AF85A85CB7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetCanPedBeGrabbedByScript(int /* Ped */ ped, bool p1, bool p2, bool p3, bool p4, bool p5, bool p6, bool p7, int /* bug: Any */ p8)
{
return Function.Call<bool>((Hash)0x03EA03AF85A85CB7, ped, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// Scripts use 0.2, 0.5 and 1.0. Value must be &gt;= 0.0 &amp;&amp; &lt;= 1.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDED5AF5A0EA4B297<br />
/// </para>
/// </remarks>
public static void SetDriverRacingModifier(int /* Ped */ driver, float modifier)
{
Function.Call((Hash)0xDED5AF5A0EA4B297, driver, modifier);
}

/// <summary>
/// The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB195FFA8042FC5C3<br />
/// </para>
/// </remarks>
public static void SetDriverAbility(int /* Ped */ driver, float ability)
{
Function.Call((Hash)0xB195FFA8042FC5C3, driver, ability);
}

/// <summary>
/// range 0.0f - 1.0f
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA731F608CA104E3C<br />
/// </para>
/// </remarks>
public static void SetDriverAggressiveness(int /* Ped */ driver, float aggressiveness)
{
Function.Call((Hash)0xA731F608CA104E3C, driver, aggressiveness);
}

/// <summary>
/// Prevents the ped from going limp.<br /><br />[Example: Can prevent peds from falling when standing on moving vehicles.]
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x128F79EDCECE4FD5<br />
/// </para>
/// </remarks>
public static bool CanPedRagdoll(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x128F79EDCECE4FD5, ped);
}

/// <summary>
/// p4/p5: Unused in TU27<br />Ragdoll Types:<br />**0**: CTaskNMRelax<br />**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.<br />**Else**: CTaskNMBalance<br />time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.<br /><br />time2- Unknown time, in milliseconds<br /><br />ragdollType-<br />0 : Normal ragdoll<br />1 : Falls with stiff legs/body<br />2 : Narrow leg stumble(may not fall)<br />3 : Wide leg stumble(may not fall)<br /><br />p4, p5, p6- No idea. In R*&apos;s scripts they are usually either &quot;true, true, false&quot; or &quot;false, false, false&quot;.<br /><br /><br /><br /><br />EDIT 3/11/16: unclear what &apos;mircoseconds&apos; mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob<br /><br />Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn&apos;t correct. time2 is in milliseconds, and time1 and time2 don&apos;t seem to be connected in any way.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE99FB955581844A<br />
/// </para>
/// </remarks>
public static bool SetPedToRagdoll(int /* Ped */ ped, int time1, int time2, int ragdollType, bool p4, bool p5, bool p6)
{
return Function.Call<bool>((Hash)0xAE99FB955581844A, ped, time1, time2, ragdollType, p4, p5, p6);
}

/// <summary>
/// Return variable is never used in R*&apos;s scripts.<br /><br />Not sure what p2 does. It seems like it would be a time judging by it&apos;s usage in R*&apos;s scripts, but didn&apos;t seem to affect anything in my testings.<br /><br />enum eRagdollType<br />{<br /> RD_MALE=0,<br /> RD_FEMALE = 1,<br /> RD_MALE_LARGE = 2,<br /> RD_CUSTOM = 3,<br />}<br /><br />x, y, and z are coordinates, most likely to where the ped will fall.<br /><br />p8 to p13 are always 0f in R*&apos;s scripts.<br /><br />(Simplified) Example of the usage of the function from R*&apos;s scripts:<br />ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD76632D99E4966C8<br />
/// </para>
/// </remarks>
public static bool SetPedToRagdollWithFall(int /* Ped */ ped, int time, int p2, int ragdollType, float x, float y, float z, float velocity, float p8, float p9, float p10, float p11, float p12, float p13)
{
return Function.Call<bool>((Hash)0xD76632D99E4966C8, ped, time, p2, ragdollType, x, y, z, velocity, p8, p9, p10, p11, p12, p13);
}

/// <summary>
/// Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0A4F1BBF4FA7497<br />
/// </para>
/// </remarks>
public static void SetPedRagdollOnCollision(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xF0A4F1BBF4FA7497, ped, toggle);
}

/// <summary>
/// If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47E4E977581C5B55<br />
/// </para>
/// </remarks>
public static bool IsPedRagdoll(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x47E4E977581C5B55, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3B6097CC25AA69E<br />
/// </para>
/// </remarks>
public static bool IsPedRunningRagdollTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xE3B6097CC25AA69E, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01F6594B923B9251<br />
/// </para>
/// </remarks>
public static void SetPedRagdollForceFall(int /* Ped */ ped)
{
Function.Call((Hash)0x01F6594B923B9251, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FA4664CF62E47E8<br />
/// </para>
/// </remarks>
public static void ResetPedRagdollTimer(int /* Ped */ ped)
{
Function.Call((Hash)0x9FA4664CF62E47E8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB128377056A54E2A<br />
/// </para>
/// </remarks>
public static void SetPedCanRagdoll(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xB128377056A54E2A, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1871251F3B5ACD7<br />
/// </para>
/// </remarks>
public static bool IsPedRunningMeleeTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xD1871251F3B5ACD7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AFE52F782F25775<br />
/// </para>
/// </remarks>
public static bool IsPedRunningMobilePhoneTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x2AFE52F782F25775, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3F3564A5B3646C0<br />
/// </para>
/// </remarks>
public static bool IsMobilePhoneToPedEar(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xA3F3564A5B3646C0, ped);
}

/// <summary>
/// Works for both player and peds,<br /><br />enum eRagdollBlockingFlags<br />{<br /> RBF_BULLET_IMPACT = 0,<br /> RBF_VEHICLE_IMPACT = 1,<br /> RBF_FIRE = 2,<br /> RBF_ELECTROCUTION = 3,<br /> RBF_PLAYER_IMPACT = 4,<br /> RBF_EXPLOSION = 5,0<br /> RBF_IMPACT_OBJECT = 6,<br /> RBF_MELEE = 7,<br /> RBF_RUBBER_BULLET = 8,<br /> RBF_FALLING = 9,<br /> RBF_WATER_JET = 10,<br /> RBF_DROWNING = 11,<br /> _0x9F52E2C4 = 12,<br /> RBF_PLAYER_BUMP = 13,<br /> RBF_PLAYER_RAGDOLL_BUMP = 14,<br /> RBF_PED_RAGDOLL_BUMP = 15,<br /> RBF_VEHICLE_GRAB = 16,<br /> RBF_SMOKE_GRENADE = 17,<br />};<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26695EC767728D84<br />
/// </para>
/// </remarks>
public static void SetRagdollBlockingFlags(int /* Ped */ ped, int blockingFlag)
{
Function.Call((Hash)0x26695EC767728D84, ped, blockingFlag);
}

/// <summary>
/// See SET_RAGDOLL_BLOCKING_FLAGS for flags
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD86D101FCFD00A4B<br />
/// </para>
/// </remarks>
public static void ClearRagdollBlockingFlags(int /* Ped */ ped, int blockingFlag)
{
Function.Call((Hash)0xD86D101FCFD00A4B, ped, blockingFlag);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7F76DF27A5045A1<br />
/// </para>
/// </remarks>
public static void SetPedAngledDefensiveArea(int /* Ped */ ped, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8, bool p9)
{
Function.Call((Hash)0xC7F76DF27A5045A1, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D3151A373974804<br />
/// </para>
/// </remarks>
public static void SetPedSphereDefensiveArea(int /* Ped */ ped, float x, float y, float z, float radius, bool p5, bool p6)
{
Function.Call((Hash)0x9D3151A373974804, ped, x, y, z, radius, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9B8F91AAD3B953E<br />
/// </para>
/// </remarks>
public static void SetPedDefensiveSphereAttachedToPed(int /* Ped */ ped, int /* Ped */ target, float xOffset, float yOffset, float zOffset, float radius, bool p6)
{
Function.Call((Hash)0xF9B8F91AAD3B953E, ped, target, xOffset, yOffset, zOffset, radius, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4723DB6E736CCFF<br />
/// </para>
/// </remarks>
public static void SetPedDefensiveSphereAttachedToVehicle(int /* Ped */ ped, int /* Vehicle */ target, float xOffset, float yOffset, float zOffset, float radius, bool p6)
{
Function.Call((Hash)0xE4723DB6E736CCFF, ped, target, xOffset, yOffset, zOffset, radius, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EF47FE21698A8B6<br />
/// </para>
/// </remarks>
public static void SetPedDefensiveAreaAttachedToPed(int /* Ped */ ped, int /* Ped */ attachPed, float p2, float p3, float p4, float p5, float p6, float p7, float p8, bool p9, bool p10)
{
Function.Call((Hash)0x4EF47FE21698A8B6, ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x413C6C763A4AFFAD<br />
/// </para>
/// </remarks>
public static void SetPedDefensiveAreaDirection(int /* Ped */ ped, float p1, float p2, float p3, bool p4)
{
Function.Call((Hash)0x413C6C763A4AFFAD, ped, p1, p2, p3, p4);
}

/// <summary>
/// Ped will no longer get angry when you stay near him.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74D4E028107450A9<br />
/// </para>
/// </remarks>
public static void RemovePedDefensiveArea(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x74D4E028107450A9, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C06B8786DD94CD1<br />
/// </para>
/// </remarks>
public static Vector3 GetPedDefensiveAreaPosition(int /* Ped */ ped, bool p1)
{
return Function.Call<Vector3>((Hash)0x3C06B8786DD94CD1, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA63D9FE45412247<br />
/// </para>
/// </remarks>
public static bool IsPedDefensiveAreaActive(int /* Ped */ ped, bool p1)
{
return Function.Call<bool>((Hash)0xBA63D9FE45412247, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8421EB4DA7E391B9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedPreferredCoverSet(int /* Ped */ ped, int /* bug: Any */ itemSet)
{
Function.Call((Hash)0x8421EB4DA7E391B9, ped, itemSet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDDB234CF74073D9<br />
/// </para>
/// </remarks>
public static void RemovePedPreferredCoverSet(int /* Ped */ ped)
{
Function.Call((Hash)0xFDDB234CF74073D9, ped);
}

/// <summary>
/// It will revive/cure the injured ped. The condition is ped must not be dead.<br /><br />Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).<br /><br />This function is well suited there.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D8ACD8388CD99CE<br />
/// </para>
/// </remarks>
public static void ReviveInjuredPed(int /* Ped */ ped)
{
Function.Call((Hash)0x8D8ACD8388CD99CE, ped);
}

/// <summary>
/// This function will simply bring the dead person back to life.<br /><br />Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).<br /><br />Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player&apos;s current position.) <br /><br />Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71BC8E838B9C6035<br />
/// </para>
/// </remarks>
public static void ResurrectPed(int /* Ped */ ped)
{
Function.Call((Hash)0x71BC8E838B9C6035, ped);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.<br /><br />*untested but char *name could also be a hash for a localized string
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98EFA132A4117BE1<br />
/// </para>
/// </remarks>
public static void SetPedNameDebug(int /* Ped */ ped, string name)
{
Function.Call((Hash)0x98EFA132A4117BE1, ped, name);
}

/// <summary>
/// Gets the offset the specified ped has moved since the previous tick.<br /><br />If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it&apos;ll return 1,5,0.<br /><br />If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it&apos;ll return 1,5,0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0AF41401ADF87E3<br />
/// </para>
/// </remarks>
public static Vector3 GetPedExtractedDisplacement(int /* Ped */ ped, bool worldSpace)
{
return Function.Call<Vector3>((Hash)0xE0AF41401ADF87E3, ped, worldSpace);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BA7919BED300023<br />
/// </para>
/// </remarks>
public static void SetPedDiesWhenInjured(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x5BA7919BED300023, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97A790315D3831FD<br />
/// </para>
/// </remarks>
public static void SetPedEnableWeaponBlocking(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x97A790315D3831FD, ped, toggle);
}

/// <summary>
/// p1 was always 1 (true).<br /><br />Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you&apos;ll still be able to drive the vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9ACF4A08098EA25<br />
/// </para>
/// </remarks>
public static void SpecialFunctionDoNotUse(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0xF9ACF4A08098EA25, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3AC1F7B898F30C05<br />
/// </para>
/// </remarks>
public static void ResetPedVisibleDamage(int /* Ped */ ped)
{
Function.Call((Hash)0x3AC1F7B898F30C05, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x816F6981C60BF53B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ApplyPedBloodDamageByZone(int /* Ped */ ped, int /* bug: Any */ p1, float p2, float p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x816F6981C60BF53B, ped, p1, p2, p3, p4);
}

/// <summary>
/// woundTypes:<br />- soak_splat<br />- wound_sheet<br />- BulletSmall<br />- BulletLarge<br />- ShotgunSmall<br />- ShotgunSmallMonolithic<br />- ShotgunLarge<br />- ShotgunLargeMonolithic<br />- NonFatalHeadshot<br />- stab<br />- BasicSlash<br />- Scripted_Ped_Splash_Back<br />- BackSplash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83F7E01C7B769A26<br />
/// </para>
/// </remarks>
public static void ApplyPedBlood(int /* Ped */ ped, int boneIndex, float xRot, float yRot, float zRot, string woundType)
{
Function.Call((Hash)0x83F7E01C7B769A26, ped, boneIndex, xRot, yRot, zRot, woundType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3311E47B91EDCBBC<br />
/// </para>
/// </remarks>
public static void ApplyPedBloodByZone(int /* Ped */ ped, int p1, float p2, float p3, string p4)
{
Function.Call((Hash)0x3311E47B91EDCBBC, ped, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF0D582CBF2D9B0F<br />
/// </para>
/// </remarks>
public static void ApplyPedBloodSpecific(int /* Ped */ ped, int p1, float p2, float p3, float p4, float p5, int p6, float p7, string p8)
{
Function.Call((Hash)0xEF0D582CBF2D9B0F, ped, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// enum eDamageZone<br />{<br />	DZ_Torso = 0,<br />	DZ_Head,<br />	DZ_LeftArm,<br />	DZ_RightArm,<br />	DZ_LeftLeg,<br />	DZ_RightLeg,<br />};<br /><br />Decal Names:<br />scar<br />blushing<br />cs_flush_anger<br />cs_flush_anger_face<br />bruise<br />bruise_large<br />herpes<br />ArmorBullet<br />basic_dirt_cloth<br />basic_dirt_skin<br />cs_trev1_dirt<br /><br />APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, &quot;blushing&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x397C38AA7B4A5F83<br />
/// </para>
/// </remarks>
public static void ApplyPedDamageDecal(int /* Ped */ ped, int damageZone, float xOffset, float yOffset, float heading, float scale, float alpha, int variation, bool fadeIn, string decalName)
{
Function.Call((Hash)0x397C38AA7B4A5F83, ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
}

/// <summary>
/// Damage Packs:<br /><br />&quot;SCR_TrevorTreeBang&quot;<br />&quot;HOSPITAL_0&quot;<br />&quot;HOSPITAL_1&quot;<br />&quot;HOSPITAL_2&quot;<br />&quot;HOSPITAL_3&quot;<br />&quot;HOSPITAL_4&quot;<br />&quot;HOSPITAL_5&quot;<br />&quot;HOSPITAL_6&quot;<br />&quot;HOSPITAL_7&quot;<br />&quot;HOSPITAL_8&quot;<br />&quot;HOSPITAL_9&quot;<br />&quot;SCR_Dumpster&quot;<br />&quot;BigHitByVehicle&quot;<br />&quot;SCR_Finale_Michael_Face&quot;<br />&quot;SCR_Franklin_finb&quot;<br />&quot;SCR_Finale_Michael&quot;<br />&quot;SCR_Franklin_finb2&quot;<br />&quot;Explosion_Med&quot;<br />&quot;SCR_Torture&quot;<br />&quot;SCR_TracySplash&quot;<br />&quot;Skin_Melee_0&quot;<br /><br />Additional damage packs:<br /><br />gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227<br />Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46DF918788CB093F<br />
/// </para>
/// </remarks>
public static void ApplyPedDamagePack(int /* Ped */ ped, string damagePack, float damage, float mult)
{
Function.Call((Hash)0x46DF918788CB093F, ped, damagePack, damage, mult);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8FE22675A5A45817<br />
/// </para>
/// </remarks>
public static void ClearPedBloodDamage(int /* Ped */ ped)
{
Function.Call((Hash)0x8FE22675A5A45817, ped);
}

/// <summary>
/// Somehow related to changing ped&apos;s clothes.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56E3B78C5408D9F4<br />
/// </para>
/// </remarks>
public static void ClearPedBloodDamageByZone(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0x56E3B78C5408D9F4, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62AB793144DE75DC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void HidePedBloodDamageByZone(int /* Ped */ ped, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0x62AB793144DE75DC, ped, p1, p2);
}

/// <summary>
/// p1: from 0 to 5 in the b617d scripts.<br />p2: &quot;blushing&quot; and &quot;ALL&quot; found in the b617d scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x523C79AEEFCC4A2A<br />
/// </para>
/// </remarks>
public static void ClearPedDamageDecalByZone(int /* Ped */ ped, int p1, string p2)
{
Function.Call((Hash)0x523C79AEEFCC4A2A, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71EAB450D86954A1<br />
/// </para>
/// </remarks>
public static int GetPedDecorationsState(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x71EAB450D86954A1, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B694AFCF64E6994<br />
/// </para>
/// </remarks>
public static void MarkPedDecorationsAsClonedFromLocalPlayer(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x2B694AFCF64E6994, ped, p1);
}

/// <summary>
/// It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C720776DAA43E7E<br />
/// </para>
/// </remarks>
public static void ClearPedWetness(int /* Ped */ ped)
{
Function.Call((Hash)0x9C720776DAA43E7E, ped);
}

/// <summary>
/// It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44CB6447D2571AA0<br />
/// </para>
/// </remarks>
public static void SetPedWetnessHeight(int /* Ped */ ped, float height)
{
Function.Call((Hash)0x44CB6447D2571AA0, ped, height);
}

/// <summary>
/// combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5485E4907B53019<br />
/// </para>
/// </remarks>
public static void SetPedWetnessEnabledThisFrame(int /* Ped */ ped)
{
Function.Call((Hash)0xB5485E4907B53019, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6585D955A68452A5<br />
/// </para>
/// </remarks>
public static void ClearPedEnvDirt(int /* Ped */ ped)
{
Function.Call((Hash)0x6585D955A68452A5, ped);
}

/// <summary>
/// Sweat is set to 100.0 or 0.0 in the decompiled scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27B0405F59637D1F<br />
/// </para>
/// </remarks>
public static void SetPedSweat(int /* Ped */ ped, float sweat)
{
Function.Call((Hash)0x27B0405F59637D1F, ped, sweat);
}

/// <summary>
/// Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.<br /><br />collection - PedDecorationCollection filename hash<br />overlay - Item name hash<br /><br />Example:<br />Entry inside &quot;mpbeach_overlays.xml&quot; -<br />&lt;Item&gt;<br />  &lt;uvPos x=&quot;0.500000&quot; y=&quot;0.500000&quot; /&gt;<br />  &lt;scale x=&quot;0.600000&quot; y=&quot;0.500000&quot; /&gt;<br />  &lt;rotation value=&quot;0.000000&quot; /&gt;<br />  &lt;nameHash&gt;FM_Hair_Fuzz&lt;/nameHash&gt;<br />  &lt;txdHash&gt;mp_hair_fuzz&lt;/txdHash&gt;<br />  &lt;txtHash&gt;mp_hair_fuzz&lt;/txtHash&gt;<br />  &lt;zone&gt;ZONE_HEAD&lt;/zone&gt;<br />  &lt;type&gt;TYPE_TATTOO&lt;/type&gt;<br />  &lt;faction&gt;FM&lt;/faction&gt;<br />  &lt;garment&gt;All&lt;/garment&gt;<br />  &lt;gender&gt;GENDER_DONTCARE&lt;/gender&gt;<br />  &lt;award /&gt;<br />  &lt;awardLevel /&gt;<br />&lt;/Item&gt;<br /><br />Code:<br />PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;mpbeach_overlays&quot;), MISC::GET_HASH_KEY(&quot;fm_hair_fuzz&quot;))<br /><br />Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F5D1665E352A839<br />
/// </para>
/// </remarks>
public static void AddPedDecorationFromHashes(int /* Ped */ ped, uint collection, uint overlay)
{
Function.Call((Hash)0x5F5D1665E352A839, ped, collection, overlay);
}

/// <summary>
/// Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5619BFA07CFD7833<br />
/// </para>
/// </remarks>
public static void AddPedDecorationFromHashesInCorona(int /* Ped */ ped, uint collection, uint overlay)
{
Function.Call((Hash)0x5619BFA07CFD7833, ped, collection, overlay);
}

/// <summary>
/// Returns the zoneID for the overlay if it is a member of collection.<br />enum ePedDecorationZone<br />{<br />	ZONE_TORSO = 0,<br />	ZONE_HEAD = 1,<br />	ZONE_LEFT_ARM = 2,<br />	ZONE_RIGHT_ARM = 3,<br />	ZONE_LEFT_LEG = 4,<br />	ZONE_RIGHT_LEG = 5,<br />	ZONE_MEDALS = 6,<br />	ZONE_INVALID = 7<br />};<br /><br />Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FD452BFBE7A7A8B<br />
/// </para>
/// </remarks>
public static int GetPedDecorationZoneFromHashes(uint collection, uint overlay)
{
return Function.Call<int>((Hash)0x9FD452BFBE7A7A8B, collection, overlay);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E5173C163976E38<br />
/// </para>
/// </remarks>
public static void ClearPedDecorations(int /* Ped */ ped)
{
Function.Call((Hash)0x0E5173C163976E38, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3B27E70CEAB9F0C<br />
/// </para>
/// </remarks>
public static void ClearPedDecorationsLeaveScars(int /* Ped */ ped)
{
Function.Call((Hash)0xE3B27E70CEAB9F0C, ped);
}

/// <summary>
/// Despite this function&apos;s name, it simply returns whether the specified handle is a Ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11B499C1E0FF8559<br />
/// </para>
/// </remarks>
public static bool WasPedSkeletonUpdated(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x11B499C1E0FF8559, ped);
}

/// <summary>
/// Gets the position of the specified bone of the specified ped.<br /><br />ped: The ped to get the position of a bone from.<br />boneId: The ID of the bone to get the position from. This is NOT the index.<br />offsetX: The X-component of the offset to add to the position relative to the bone&apos;s rotation.<br />offsetY: The Y-component of the offset to add to the position relative to the bone&apos;s rotation.<br />offsetZ: The Z-component of the offset to add to the position relative to the bone&apos;s rotation.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17C07FC640E86B4E<br />
/// </para>
/// </remarks>
public static Vector3 GetPedBoneCoords(int /* Ped */ ped, int boneId, float offsetX, float offsetY, float offsetZ)
{
return Function.Call<Vector3>((Hash)0x17C07FC640E86B4E, ped, boneId, offsetX, offsetY, offsetZ);
}

/// <summary>
/// Creates a new NaturalMotion message.<br /><br />startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won&apos;t perform it yet. While it&apos;s a boolean value, if negative, the message will not be initialized.<br />messageId: The ID of the NaturalMotion message.<br /><br />If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x418EF2A1BCE56685<br />
/// </para>
/// </remarks>
public static void CreateNmMessage(bool startImmediately, int messageId)
{
Function.Call((Hash)0x418EF2A1BCE56685, startImmediately, messageId);
}

/// <summary>
/// Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.<br /><br />If a message hasn&apos;t been created already, this function does nothing.<br />If the Ped is not ragdolled with Euphoria enabled, this function does nothing.<br />The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);<br /><br />Call order:<br />SET_PED_TO_RAGDOLL<br />CREATE_NM_MESSAGE<br />GIVE_PED_NM_MESSAGE<br /><br />Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:<br />SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);<br />CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.<br />GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.<br />CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.<br />GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.<br />CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.<br />GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB158DFCCC56E5C5B<br />
/// </para>
/// </remarks>
public static void GivePedNmMessage(int /* Ped */ ped)
{
Function.Call((Hash)0xB158DFCCC56E5C5B, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1B5C85C612E5256E<br />
/// </para>
/// </remarks>
public static int AddScenarioBlockingArea(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7, bool p8, bool p9)
{
return Function.Call<int>((Hash)0x1B5C85C612E5256E, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD37401D78A929A49<br />
/// </para>
/// </remarks>
public static void RemoveScenarioBlockingAreas()
{
Function.Call((Hash)0xD37401D78A929A49);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31D16B74C6E29D66<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RemoveScenarioBlockingArea(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0x31D16B74C6E29D66, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28157D43CF600981<br />
/// </para>
/// </remarks>
public static void SetScenarioPedsSpawnInSphereArea(float x, float y, float z, float range, int p4)
{
Function.Call((Hash)0x28157D43CF600981, x, y, z, range, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x8A24B067D175A7BD<br />
/// </para>
/// </remarks>
public static bool DoesScenarioBlockingAreaExists(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<bool>((Hash)0x8A24B067D175A7BD, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1BF094736DD62C2E<br />
/// </para>
/// </remarks>
public static bool IsPedUsingScenario(int /* Ped */ ped, string scenario)
{
return Function.Call<bool>((Hash)0x1BF094736DD62C2E, ped, scenario);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57AB4A3080F85143<br />
/// </para>
/// </remarks>
public static bool IsPedUsingAnyScenario(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x57AB4A3080F85143, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE07FF6495D52E2A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetPedPanicExitScenario(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0xFE07FF6495D52E2A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A77DFD295E29B09<br />
/// </para>
/// </remarks>
public static void ToggleScenarioPedCowerInPlace(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x9A77DFD295E29B09, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25361A96E0F7E419<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool TriggerPedScenarioPanicexittoflee(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x25361A96E0F7E419, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC6935EBE0847B90<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetPedShouldPlayDirectedNormalScenarioExit(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0xEC6935EBE0847B90, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3A9299C4F2ADB98<br />
/// </para>
/// </remarks>
public static void SetPedShouldPlayNormalScenarioExit(int /* Ped */ ped)
{
Function.Call((Hash)0xA3A9299C4F2ADB98, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1C03A5352243A30<br />
/// </para>
/// </remarks>
public static void SetPedShouldPlayImmediateScenarioExit(int /* Ped */ ped)
{
Function.Call((Hash)0xF1C03A5352243A30, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEED8FAFEC331A70<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetPedShouldPlayFleeScenarioExit(int /* Ped */ ped, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0xEEED8FAFEC331A70, ped, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x425AECF167663F48<br />
/// </para>
/// </remarks>
public static void SetPedShouldIgnoreScenarioExitCollisionChecks(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x425AECF167663F48, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B6010B3CBC29095<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedShouldIgnoreScenarioNavChecks(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0x5B6010B3CBC29095, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEDA60A74219D064<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedShouldProbeForScenarioExitsInOneFrame(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0xCEDA60A74219D064, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xC30BDAEE47256C13<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPedGesturing(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xC30BDAEE47256C13, p0);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1E65CA8AC9C00ED<br />
/// </para>
/// </remarks>
public static void PlayFacialAnim(int /* Ped */ ped, string animName, string animDict)
{
Function.Call((Hash)0xE1E65CA8AC9C00ED, ped, animName, animDict);
}

/// <summary>
/// Clipsets:<br />facials@gen_female@base<br />facials@gen_male@base<br />facials@p_m_zero@base<br /><br />Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:<br />mood_drunk_1<br />mood_stressed_1<br />mood_happy_1<br />mood_talking_1<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x5687C7F05B39E401<br />
/// </para>
/// </remarks>
public static void SetFacialClipset(int /* Ped */ ped, string animDict)
{
Function.Call((Hash)0x5687C7F05B39E401, ped, animDict);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFC24B988B938B38<br />
/// </para>
/// </remarks>
public static void SetFacialIdleAnimOverride(int /* Ped */ ped, string animName, string animDict)
{
Function.Call((Hash)0xFFC24B988B938B38, ped, animName, animDict);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x726256CC1EEB182F<br />
/// </para>
/// </remarks>
public static void ClearFacialIdleAnimOverride(int /* Ped */ ped)
{
Function.Call((Hash)0x726256CC1EEB182F, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBAF20C5432058024<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayGestureAnims(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xBAF20C5432058024, ped, toggle);
}

/// <summary>
/// p2 usually 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF833DDBA3B104D43<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayVisemeAnims(int /* Ped */ ped, bool toggle, bool p2)
{
Function.Call((Hash)0xF833DDBA3B104D43, ped, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33A60D8BDD6E508C<br />
/// </para>
/// </remarks>
public static void SetPedIsIgnoredByAutoOpenDoors(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x33A60D8BDD6E508C, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6373D1349925A70E<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayAmbientAnims(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x6373D1349925A70E, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EB0585D15254740<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayAmbientBaseAnims(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x0EB0585D15254740, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2EE020F5FB4DB53<br />
/// </para>
/// </remarks>
public static void TriggerIdleAnimationOnPed(int /* Ped */ ped)
{
Function.Call((Hash)0xC2EE020F5FB4DB53, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C3B4D6D13B4C841<br />
/// </para>
/// </remarks>
public static void SetPedCanArmIk(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x6C3B4D6D13B4C841, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC11C18092C5530DC<br />
/// </para>
/// </remarks>
public static void SetPedCanHeadIk(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xC11C18092C5530DC, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73518ECE2485412B<br />
/// </para>
/// </remarks>
public static void SetPedCanLegIk(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x73518ECE2485412B, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2B7106D37947CE0<br />
/// </para>
/// </remarks>
public static void SetPedCanTorsoIk(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xF2B7106D37947CE0, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5846EDB26A98A24<br />
/// </para>
/// </remarks>
public static void SetPedCanTorsoReactIk(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0xF5846EDB26A98A24, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6647C5F6F5792496<br />
/// </para>
/// </remarks>
public static void SetPedCanTorsoVehicleIk(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x6647C5F6F5792496, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC4686EC06434678<br />
/// </para>
/// </remarks>
public static void SetPedCanUseAutoConversationLookat(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEC4686EC06434678, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CD3CB88A7F8850D<br />
/// </para>
/// </remarks>
public static bool IsPedHeadtrackingPed(int /* Ped */ ped1, int /* Ped */ ped2)
{
return Function.Call<bool>((Hash)0x5CD3CB88A7F8850D, ped1, ped2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x813A0A7C9D2E831F<br />
/// </para>
/// </remarks>
public static bool IsPedHeadtrackingEntity(int /* Ped */ ped, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x813A0A7C9D2E831F, ped, entity);
}

/// <summary>
/// This is only called once in the scripts.<br /><br />sub_1CD9(&amp;l_49, 0, getElem(3, &amp;l_34, 4), &quot;MICHAEL&quot;, 0, 1);<br />                    sub_1CA8(&quot;WORLD_HUMAN_SMOKING&quot;, 2);<br />                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &amp;l_34, 4), PLAYER::PLAYER_PED_ID());
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD17B554996A8D9E<br />
/// </para>
/// </remarks>
public static void SetPedPrimaryLookat(int /* Ped */ ped, int /* Ped */ lookAt)
{
Function.Call((Hash)0xCD17B554996A8D9E, ped, lookAt);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78C4E9961DB3EB5B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedClothPinFrames(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x78C4E9961DB3EB5B, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82A3D6D9CC2CB8E3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedClothPackageIndex(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x82A3D6D9CC2CB8E3, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA660FAF550EB37E5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedClothProne(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0xA660FAF550EB37E5, p0, p1);
}

/// <summary>
/// enum ePedConfigFlags<br />{<br />	_CPED_CONFIG_FLAG_0x67D1A445 = 0,<br />	_CPED_CONFIG_FLAG_0xC63DE95E = 1,<br />	CPED_CONFIG_FLAG_NoCriticalHits = 2,<br />	CPED_CONFIG_FLAG_DrownsInWater = 3,<br />	CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,<br />	_CPED_CONFIG_FLAG_0x37D196F4 = 5,<br />	_CPED_CONFIG_FLAG_0xE2462399 = 6,<br />	CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,<br />	_CPED_CONFIG_FLAG_0xEDDEB838 = 8,<br />	_CPED_CONFIG_FLAG_0xB398B6FD = 9,<br />	_CPED_CONFIG_FLAG_0xF6664E68 = 10,<br />	_CPED_CONFIG_FLAG_0xA05E7CA3 = 11,<br />	_CPED_CONFIG_FLAG_0xCE394045 = 12,<br />	CPED_CONFIG_FLAG_NeverLeavesGroup = 13,<br />	_CPED_CONFIG_FLAG_0xCD8D1411 = 14,<br />	_CPED_CONFIG_FLAG_0xB031F1A9 = 15,<br />	_CPED_CONFIG_FLAG_0xFE65BEE3 = 16,<br />	CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,<br />	_CPED_CONFIG_FLAG_0x380165BD = 18,<br />	_CPED_CONFIG_FLAG_0x07C045C7 = 19,<br />	_CPED_CONFIG_FLAG_0x583B5E2D = 20,<br />	_CPED_CONFIG_FLAG_0x475EDA58 = 21,<br />	_CPED_CONFIG_FLAG_0x8629D05B = 22,<br />	_CPED_CONFIG_FLAG_0x1522968B = 23,<br />	CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,<br />	_CPED_CONFIG_FLAG_0x4CC09C4B = 25,<br />	_CPED_CONFIG_FLAG_0x034F3053 = 26,<br />	_CPED_CONFIG_FLAG_0xD91BA7CC = 27,<br />	_CPED_CONFIG_FLAG_0x5C8DC66E = 28,<br />	_CPED_CONFIG_FLAG_0x8902EAA0 = 29,<br />	_CPED_CONFIG_FLAG_0x6580B9D2 = 30,<br />	_CPED_CONFIG_FLAG_0x0EF7A297 = 31,<br />	_CPED_CONFIG_FLAG_CanFlyThruWindscreen = 32, // 0x6BF86E5B<br />	CPED_CONFIG_FLAG_DieWhenRagdoll = 33,<br />	CPED_CONFIG_FLAG_HasHelmet = 34,<br />	CPED_CONFIG_FLAG_UseHelmet = 35,<br />	_CPED_CONFIG_FLAG_0xEEB3D630 = 36,<br />	_CPED_CONFIG_FLAG_0xB130D17B = 37,<br />	_CPED_CONFIG_FLAG_0x5F071200 = 38,<br />	CPED_CONFIG_FLAG_DisableEvasiveDives = 39,<br />	_CPED_CONFIG_FLAG_0xC287AAFF = 40,<br />	_CPED_CONFIG_FLAG_0x203328CC = 41,<br />	CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,<br />	CPED_CONFIG_FLAG_DisablePlayerLockon = 43,<br />	CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,<br />	_CPED_CONFIG_FLAG_0xEC4A8ACF = 45,<br />	_CPED_CONFIG_FLAG_0xDB115BFA = 46,<br />	CPED_CONFIG_FLAG_PedBeingDeleted = 47,<br />	CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,<br />	_CPED_CONFIG_FLAG_0xF8E99565 = 49,<br />	_CPED_CONFIG_FLAG_0xDD17FEE6 = 50,<br />	_CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,<br />	_CPED_CONFIG_FLAG_NoCollison = 52, // 0x655E8618<br />	_CPED_CONFIG_FLAG_0x5A6C1F6E = 53,<br />	_CPED_CONFIG_FLAG_0xD749FC41 = 54,<br />	_CPED_CONFIG_FLAG_0x357F63F3 = 55,<br />	_CPED_CONFIG_FLAG_0xC5E60961 = 56,<br />	_CPED_CONFIG_FLAG_0x29275C3E = 57,<br />	CPED_CONFIG_FLAG_IsFiring = 58,<br />	CPED_CONFIG_FLAG_WasFiring = 59,<br />	CPED_CONFIG_FLAG_IsStanding = 60,<br />	CPED_CONFIG_FLAG_WasStanding = 61,<br />	CPED_CONFIG_FLAG_InVehicle = 62,<br />	CPED_CONFIG_FLAG_OnMount = 63,<br />	CPED_CONFIG_FLAG_AttachedToVehicle = 64,<br />	CPED_CONFIG_FLAG_IsSwimming = 65,<br />	CPED_CONFIG_FLAG_WasSwimming = 66,<br />	CPED_CONFIG_FLAG_IsSkiing = 67,<br />	CPED_CONFIG_FLAG_IsSitting = 68,<br />	CPED_CONFIG_FLAG_KilledByStealth = 69,<br />	CPED_CONFIG_FLAG_KilledByTakedown = 70,<br />	CPED_CONFIG_FLAG_Knockedout = 71,<br />	_CPED_CONFIG_FLAG_0x3E3C4560 = 72,<br />	_CPED_CONFIG_FLAG_0x2994C7B7 = 73,<br />	_CPED_CONFIG_FLAG_0x6D59D275 = 74,<br />	CPED_CONFIG_FLAG_UsingCoverPoint = 75,<br />	CPED_CONFIG_FLAG_IsInTheAir = 76,<br />	_CPED_CONFIG_FLAG_0x2D493FB7 = 77,<br />	CPED_CONFIG_FLAG_IsAimingGun = 78,<br />	_CPED_CONFIG_FLAG_0x14D69875 = 79,<br />	_CPED_CONFIG_FLAG_0x40B05311 = 80,<br />	_CPED_CONFIG_FLAG_0x8B230BC5 = 81,<br />	_CPED_CONFIG_FLAG_0xC74E5842 = 82,<br />	_CPED_CONFIG_FLAG_0x9EA86147 = 83,<br />	_CPED_CONFIG_FLAG_0x674C746C = 84,<br />	_CPED_CONFIG_FLAG_0x3E56A8C2 = 85,<br />	_CPED_CONFIG_FLAG_0xC144A1EF = 86,<br />	_CPED_CONFIG_FLAG_0x0548512D = 87,<br />	_CPED_CONFIG_FLAG_0x31C93909 = 88,<br />	_CPED_CONFIG_FLAG_0xA0269315 = 89,<br />	_CPED_CONFIG_FLAG_0xD4D59D4D = 90,<br />	_CPED_CONFIG_FLAG_0x411D4420 = 91,<br />	_CPED_CONFIG_FLAG_0xDF4AEF0D = 92,<br />	CPED_CONFIG_FLAG_ForcePedLoadCover = 93,<br />	_CPED_CONFIG_FLAG_0x300E4CD3 = 94,<br />	_CPED_CONFIG_FLAG_0xF1C5BF04 = 95,<br />	_CPED_CONFIG_FLAG_0x89C2EF13 = 96,<br />	CPED_CONFIG_FLAG_VaultFromCover = 97,<br />	_CPED_CONFIG_FLAG_0x02A852C8 = 98,<br />	_CPED_CONFIG_FLAG_0x3D9407F1 = 99,<br />	_CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558<br />	CPED_CONFIG_FLAG_ForcedAim = 101,<br />	_CPED_CONFIG_FLAG_0xB942D71A = 102,<br />	_CPED_CONFIG_FLAG_0xD26C55A8 = 103,<br />	_CPED_CONFIG_FLAG_0xB89E703B = 104,<br />	CPED_CONFIG_FLAG_ForceReload = 105,<br />	_CPED_CONFIG_FLAG_0xD9E73DA2 = 106,<br />	_CPED_CONFIG_FLAG_0xFF71DC2C = 107,<br />	_CPED_CONFIG_FLAG_0x1E27E8D8 = 108,<br />	_CPED_CONFIG_FLAG_0xF2C53966 = 109,<br />	_CPED_CONFIG_FLAG_0xC4DBE247 = 110,<br />	_CPED_CONFIG_FLAG_0x83C0A4BF = 111,<br />	_CPED_CONFIG_FLAG_0x0E0FAF8C = 112,<br />	_CPED_CONFIG_FLAG_0x26616660 = 113,<br />	_CPED_CONFIG_FLAG_0x43B80B79 = 114,<br />	_CPED_CONFIG_FLAG_0x0D2A9309 = 115,<br />	_CPED_CONFIG_FLAG_0x12C1C983 = 116,<br />	CPED_CONFIG_FLAG_BumpedByPlayer = 117,<br />	_CPED_CONFIG_FLAG_0xE586D504 = 118,<br />	_CPED_CONFIG_FLAG_0x52374204 = 119,<br />	CPED_CONFIG_FLAG_IsHandCuffed = 120,<br />	CPED_CONFIG_FLAG_IsAnkleCuffed = 121,<br />	CPED_CONFIG_FLAG_DisableMelee = 122,<br />	_CPED_CONFIG_FLAG_0xFE714397 = 123,<br />	_CPED_CONFIG_FLAG_0xB3E660BD = 124,<br />	_CPED_CONFIG_FLAG_0x5FED6BFD = 125,<br />	_CPED_CONFIG_FLAG_0xC9D6F66F = 126,<br />	_CPED_CONFIG_FLAG_0x519BC986 = 127,<br />	CPED_CONFIG_FLAG_CanBeAgitated = 128,<br />	_CPED_CONFIG_FLAG_0x9A4B617C = 129,<br />	_CPED_CONFIG_FLAG_0xDAB70E9F = 130,<br />	_CPED_CONFIG_FLAG_0xE569438A = 131,<br />	_CPED_CONFIG_FLAG_0xBBC77D6D = 132,<br />	_CPED_CONFIG_FLAG_0xCB59EF0F = 133,<br />	_CPED_CONFIG_FLAG_0x8C5EA971 = 134,<br />	CPED_CONFIG_FLAG_IsScuba = 135,<br />	CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,<br />	_CPED_CONFIG_FLAG_0xDCE59B58 = 137,<br />	CPED_CONFIG_FLAG_RidingTrain = 138,<br />	CPED_CONFIG_FLAG_ArrestResult = 139,<br />	CPED_CONFIG_FLAG_CanAttackFriendly = 140,<br />	_CPED_CONFIG_FLAG_0x98A4BE43 = 141,<br />	_CPED_CONFIG_FLAG_0x6901E731 = 142,<br />	_CPED_CONFIG_FLAG_0x9EC9BF6C = 143,<br />	_CPED_CONFIG_FLAG_0x42841A8F = 144,<br />	CPED_CONFIG_FLAG_ShootingAnimFlag = 145,<br />	CPED_CONFIG_FLAG_DisableLadderClimbing = 146,<br />	CPED_CONFIG_FLAG_StairsDetected = 147,<br />	CPED_CONFIG_FLAG_SlopeDetected = 148,<br />	_CPED_CONFIG_FLAG_0x1A15670B = 149,<br />	_CPED_CONFIG_FLAG_0x61786EE5 = 150,<br />	_CPED_CONFIG_FLAG_0xCB9186BD = 151,<br />	_CPED_CONFIG_FLAG_0xF0710152 = 152,<br />	_CPED_CONFIG_FLAG_0x43DFE310 = 153,<br />	_CPED_CONFIG_FLAG_0xC43C624E = 154,<br />	CPED_CONFIG_FLAG_CanPerformArrest = 155,<br />	CPED_CONFIG_FLAG_CanPerformUncuff = 156,<br />	CPED_CONFIG_FLAG_CanBeArrested = 157,<br />	_CPED_CONFIG_FLAG_0xF7960FF5 = 158,<br />	_CPED_CONFIG_FLAG_0x59564113 = 159,<br />	_CPED_CONFIG_FLAG_0x0C6C3099 = 160,<br />	_CPED_CONFIG_FLAG_0x645F927A = 161,<br />	_CPED_CONFIG_FLAG_0xA86549B9 = 162,<br />	_CPED_CONFIG_FLAG_0x8AAF337A = 163,<br />	_CPED_CONFIG_FLAG_0x13BAA6E7 = 164,<br />	_CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,<br />	CPED_CONFIG_FLAG_IsInjured = 166,<br />	_CPED_CONFIG_FLAG_0x6398A20B = 167,<br />	_CPED_CONFIG_FLAG_0xD8072639 = 168,<br />	_CPED_CONFIG_FLAG_0xA05B1845 = 169,<br />	_CPED_CONFIG_FLAG_0x83F6D220 = 170,<br />	_CPED_CONFIG_FLAG_0xD8430331 = 171,<br />	_CPED_CONFIG_FLAG_0x4B547520 = 172,<br />	_CPED_CONFIG_FLAG_0xE66E1406 = 173,<br />	_CPED_CONFIG_FLAG_0x1C4BFE0C = 174,<br />	_CPED_CONFIG_FLAG_0x90008BFA = 175,<br />	_CPED_CONFIG_FLAG_0x07C7A910 = 176,<br />	_CPED_CONFIG_FLAG_0xF15F8191 = 177,<br />	_CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,<br />	_CPED_CONFIG_FLAG_0x1D46E4F2 = 179,<br />	CPED_CONFIG_FLAG_IsInCustody = 180,<br />	_CPED_CONFIG_FLAG_0xE4FD9B3A = 181,<br />	_CPED_CONFIG_FLAG_0x67AE0812 = 182,<br />	CPED_CONFIG_FLAG_IsAgitated = 183,<br />	CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,<br />	_CPED_CONFIG_FLAG_0x7B2D325E = 185,<br />	CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,<br />	CPED_CONFIG_FLAG_HasHurtStarted = 187,<br />	CPED_CONFIG_FLAG_DisableHurt = 188,<br />	CPED_CONFIG_FLAG_PlayerIsWeird = 189,<br />	_CPED_CONFIG_FLAG_0x32FC208B = 190,<br />	_CPED_CONFIG_FLAG_0x0C296E5A = 191,<br />	_CPED_CONFIG_FLAG_0xE63B73EC = 192,<br />	_CPED_CONFIG_FLAG_0x04E9CC80 = 193,<br />	CPED_CONFIG_FLAG_UsingScenario = 194,<br />	CPED_CONFIG_FLAG_VisibleOnScreen = 195,<br />	_CPED_CONFIG_FLAG_0xD88C58A1 = 196,<br />	_CPED_CONFIG_FLAG_0x5A3DCF43 = 197,<br />	_CPED_CONFIG_FLAG_0xEA02B420 = 198,<br />	_CPED_CONFIG_FLAG_0x3F559CFF = 199,<br />	_CPED_CONFIG_FLAG_0x8C55D029 = 200,<br />	_CPED_CONFIG_FLAG_0x5E6466F6 = 201,<br />	_CPED_CONFIG_FLAG_0xEB5AD706 = 202,<br />	_CPED_CONFIG_FLAG_0x0EDDDDE7 = 203,<br />	_CPED_CONFIG_FLAG_0xA64F7B1D = 204,<br />	_CPED_CONFIG_FLAG_0x48532CBA = 205,<br />	_CPED_CONFIG_FLAG_0xAA25A9E7 = 206,<br />	_CPED_CONFIG_FLAG_0x415B26B9 = 207,<br />	CPED_CONFIG_FLAG_DisableExplosionReactions = 208,<br />	CPED_CONFIG_FLAG_DodgedPlayer = 209,<br />	_CPED_CONFIG_FLAG_0x67405504 = 210,<br />	_CPED_CONFIG_FLAG_0x75DDD68C = 211,<br />	_CPED_CONFIG_FLAG_0x2AD879B4 = 212,<br />	_CPED_CONFIG_FLAG_0x51486F91 = 213,<br />	_CPED_CONFIG_FLAG_0x32F79E21 = 214,<br />	_CPED_CONFIG_FLAG_0xBF099213 = 215,<br />	_CPED_CONFIG_FLAG_0x054AC8E2 = 216,<br />	_CPED_CONFIG_FLAG_0x14E495CC = 217,<br />	_CPED_CONFIG_FLAG_0x3C7DF9DF = 218,<br />	_CPED_CONFIG_FLAG_0x848FFEF2 = 219,<br />	CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,<br />	_CPED_CONFIG_FLAG_0x2618E1CF = 221,<br />	_CPED_CONFIG_FLAG_0x84F722FA = 222,<br />	_CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F<br />	_CPED_CONFIG_FLAG_0x728AA918 = 224,<br />	CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,<br />	CPED_CONFIG_FLAG_DisablePedAvoidance = 226,<br />	_CPED_CONFIG_FLAG_0x59E91185 = 227,<br />	_CPED_CONFIG_FLAG_0x1EA7225F = 228,<br />	CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,<br />	_CPED_CONFIG_FLAG_0x6DCA7D88 = 230,<br />	_CPED_CONFIG_FLAG_0xFC3E572D = 231,<br />	_CPED_CONFIG_FLAG_0x08E9F9CF = 232,<br />	_CPED_CONFIG_FLAG_0x2D3BA52D = 233,<br />	_CPED_CONFIG_FLAG_0xFD2F53EA = 234,<br />	_CPED_CONFIG_FLAG_0x31A1B03B = 235,<br />	CPED_CONFIG_FLAG_IsHoldingProp = 236,<br />	CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,<br />	_CPED_CONFIG_FLAG_0xCE57C9A3 = 238,<br />	_CPED_CONFIG_FLAG_0x26149198 = 239,<br />	_CPED_CONFIG_FLAG_0x1B33B598 = 240,<br />	_CPED_CONFIG_FLAG_0x719B6E87 = 241,<br />	_CPED_CONFIG_FLAG_0x13E8E8E8 = 242,<br />	_CPED_CONFIG_FLAG_0xF29739AE = 243,<br />	_CPED_CONFIG_FLAG_0xABEA8A74 = 244,<br />	_CPED_CONFIG_FLAG_0xB60EA2BA = 245,<br />	_CPED_CONFIG_FLAG_0x536B0950 = 246,<br />	_CPED_CONFIG_FLAG_0x0C754ACA = 247,<br />	CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,<br />	_CPED_CONFIG_FLAG_0x12659168 = 249,<br />	_CPED_CONFIG_FLAG_0x1BDF2F04 = 250,<br />	_CPED_CONFIG_FLAG_0x7728FAA3 = 251,<br />	_CPED_CONFIG_FLAG_0x6A807ED8 = 252,<br />	CPED_CONFIG_FLAG_OnStairs = 253,<br />	_CPED_CONFIG_FLAG_0xE1A2F73F = 254,<br />	_CPED_CONFIG_FLAG_0x5B3697C8 = 255,<br />	_CPED_CONFIG_FLAG_0xF1EB20A9 = 256,<br />	_CPED_CONFIG_FLAG_0x8B7DF407 = 257,<br />	_CPED_CONFIG_FLAG_0x329DCF1A = 258,<br />	_CPED_CONFIG_FLAG_0x8D90DD1B = 259,<br />	_CPED_CONFIG_FLAG_0xB8A292B7 = 260,<br />	_CPED_CONFIG_FLAG_0x8374B087 = 261,<br />	_CPED_CONFIG_FLAG_0x2AF558F0 = 262,<br />	_CPED_CONFIG_FLAG_0x82251455 = 263,<br />	_CPED_CONFIG_FLAG_0x30CF498B = 264,<br />	_CPED_CONFIG_FLAG_0xE1CD50AF = 265,<br />	_CPED_CONFIG_FLAG_0x72E4AE48 = 266,<br />	_CPED_CONFIG_FLAG_0xC2657EA1 = 267,<br />	_CPED_CONFIG_FLAG_0x29FF6030 = 268,<br />	_CPED_CONFIG_FLAG_0x8248A5EC = 269,<br />	CPED_CONFIG_FLAG_OnStairSlope = 270,<br />	_CPED_CONFIG_FLAG_0xA0897933 = 271,<br />	CPED_CONFIG_FLAG_DontBlipCop = 272,<br />	CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,<br />	_CPED_CONFIG_FLAG_0xF7823618 = 274,<br />	_CPED_CONFIG_FLAG_0xDC305CCE = 275,<br />	CPED_CONFIG_FLAG_EdgeDetected = 276,<br />	_CPED_CONFIG_FLAG_0x92B67896 = 277,<br />	_CPED_CONFIG_FLAG_0xCAD677C9 = 278,<br />	CPED_CONFIG_FLAG_AvoidTearGas = 279,<br />	_CPED_CONFIG_FLAG_0x5276AC7B = 280,<br />	_CPED_CONFIG_FLAG_NoWrithe = 281, // 0x1032692A<br />	_CPED_CONFIG_FLAG_0xDA23E7F1 = 282,<br />	_CPED_CONFIG_FLAG_0x9139724D = 283,<br />	_CPED_CONFIG_FLAG_0xA1457461 = 284,<br />	_CPED_CONFIG_FLAG_0x4186E095 = 285,<br />	_CPED_CONFIG_FLAG_0xAC68E2EB = 286,<br />	CPED_CONFIG_FLAG_RagdollingOnBoat = 287,<br />	CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,<br />	_CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,<br />	_CPED_CONFIG_FLAG_0xF3F5758C = 290,<br />	_CPED_CONFIG_FLAG_0x2A9307F1 = 291,<br />	_CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216<br />	_CPED_CONFIG_FLAG_0xA06A3C6C = 293,<br />	CPED_CONFIG_FLAG_DisableShockingEvents = 294,<br />	_CPED_CONFIG_FLAG_0xF8DA25A5 = 295,<br />	_CPED_CONFIG_FLAG_0x7EF55802 = 296,<br />	_CPED_CONFIG_FLAG_0xB31F1187 = 297,<br />	_CPED_CONFIG_FLAG_0x84315402 = 298,<br />	_CPED_CONFIG_FLAG_0x0FD69867 = 299,<br />	_CPED_CONFIG_FLAG_0xC7829B67 = 300,<br />	CPED_CONFIG_FLAG_DisablePedConstraints = 301,<br />	_CPED_CONFIG_FLAG_0x6D23CF25 = 302,<br />	_CPED_CONFIG_FLAG_0x2ADA871B = 303,<br />	_CPED_CONFIG_FLAG_0x47BC8A58 = 304,<br />	_CPED_CONFIG_FLAG_0xEB692FA5 = 305,<br />	_CPED_CONFIG_FLAG_0x4A133C50 = 306,<br />	_CPED_CONFIG_FLAG_0xC58099C3 = 307,<br />	_CPED_CONFIG_FLAG_0xF3D76D41 = 308,<br />	_CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,<br />	CPED_CONFIG_FLAG_IsInCluster = 310,<br />	_CPED_CONFIG_FLAG_0x0FA153EF = 311,<br />	_CPED_CONFIG_FLAG_0xD73F5CD3 = 312,<br />	_CPED_CONFIG_FLAG_0xD4136C22 = 313,<br />	_CPED_CONFIG_FLAG_0xE404CA6B = 314,<br />	_CPED_CONFIG_FLAG_0xB9597446 = 315,<br />	_CPED_CONFIG_FLAG_0xD5C98277 = 316,<br />	_CPED_CONFIG_FLAG_0xD5060A9C = 317,<br />	_CPED_CONFIG_FLAG_0x3E5F1CBB = 318,<br />	_CPED_CONFIG_FLAG_0xD8BE1D54 = 319,<br />	_CPED_CONFIG_FLAG_0x0B1F191F = 320,<br />	_CPED_CONFIG_FLAG_0xC995167A = 321,<br />	CPED_CONFIG_FLAG_HasHighHeels = 322,<br />	_CPED_CONFIG_FLAG_0x86B01E54 = 323,<br />	_CPED_CONFIG_FLAG_0x3A56FE15 = 324,<br />	_CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?<br />	_CPED_CONFIG_FLAG_0xBBF47729 = 326,<br />	_CPED_CONFIG_FLAG_0x22B668A8 = 327,<br />	_CPED_CONFIG_FLAG_0x2624D4D4 = 328,<br />	CPED_CONFIG_FLAG_DisableTalkTo = 329,<br />	CPED_CONFIG_FLAG_DontBlip = 330,<br />	CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,<br />	_CPED_CONFIG_FLAG_0x630F55F3 = 332,<br />	_CPED_CONFIG_FLAG_0x150468FD = 333,<br />	_CPED_CONFIG_FLAG_0x914EBD6B = 334,<br />	_CPED_CONFIG_FLAG_0x79AF3B6D = 335,<br />	_CPED_CONFIG_FLAG_0x75C7A632 = 336,<br />	_CPED_CONFIG_FLAG_0x52D530E2 = 337,<br />	_CPED_CONFIG_FLAG_0xDB2A90E0 = 338,<br />	_CPED_CONFIG_FLAG_0x5922763D = 339,<br />	_CPED_CONFIG_FLAG_0x12ADB567 = 340,<br />	_CPED_CONFIG_FLAG_0x105C8518 = 341,<br />	_CPED_CONFIG_FLAG_0x106F703D = 342,<br />	_CPED_CONFIG_FLAG_0xED152C3E = 343,<br />	_CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,<br />	_CPED_CONFIG_FLAG_0xBF348C82 = 345,<br />	_CPED_CONFIG_FLAG_0xCDDFE830 = 346,<br />	_CPED_CONFIG_FLAG_0x7B59BD9B = 347,<br />	_CPED_CONFIG_FLAG_0x0124C788 = 348,<br />	CPED_CONFIG_FLAG_EquipJetpack = 349,<br />	_CPED_CONFIG_FLAG_0x08D361A5 = 350,<br />	_CPED_CONFIG_FLAG_0xE13D1F7C = 351,<br />	_CPED_CONFIG_FLAG_0x40E25FB9 = 352,<br />	_CPED_CONFIG_FLAG_0x930629D9 = 353,<br />	_CPED_CONFIG_FLAG_0xECCF0C7F = 354,<br />	_CPED_CONFIG_FLAG_0xB6E9613B = 355,<br />	_CPED_CONFIG_FLAG_0x490C0478 = 356,<br />	_CPED_CONFIG_FLAG_0xE8865BEA = 357,<br />	_CPED_CONFIG_FLAG_0xF3C34A29 = 358,<br />	CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,<br />	_CPED_CONFIG_FLAG_0xF660E115 = 360,<br />	_CPED_CONFIG_FLAG_0xAB0E6DED = 361,<br />	CPED_CONFIG_FLAG_HasReserveParachute = 362,<br />	CPED_CONFIG_FLAG_UseReserveParachute = 363,<br />	_CPED_CONFIG_FLAG_0x5C5D9CD3 = 364,<br />	_CPED_CONFIG_FLAG_0x8F7701F3 = 365,<br />	_CPED_CONFIG_FLAG_0xBC4436AD = 366,<br />	_CPED_CONFIG_FLAG_0xD7E07D37 = 367,<br />	_CPED_CONFIG_FLAG_0x03C4FD24 = 368,<br />	_CPED_CONFIG_FLAG_0x7675789A = 369,<br />	_CPED_CONFIG_FLAG_0xB7288A88 = 370,<br />	_CPED_CONFIG_FLAG_0xC06B6291 = 371,<br />	_CPED_CONFIG_FLAG_0x95A4A805 = 372,<br />	_CPED_CONFIG_FLAG_0xA8E9A042 = 373,<br />	CPED_CONFIG_FLAG_NeverLeaveTrain = 374,<br />	_CPED_CONFIG_FLAG_0xBAC674B3 = 375,<br />	_CPED_CONFIG_FLAG_0x147F1FFB = 376,<br />	_CPED_CONFIG_FLAG_0x4376DD79 = 377,<br />	_CPED_CONFIG_FLAG_0xCD3DB518 = 378,<br />	_CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,<br />	_CPED_CONFIG_FLAG_0x5DF03A55 = 380,<br />	_CPED_CONFIG_FLAG_0xBCD816CD = 381,<br />	_CPED_CONFIG_FLAG_0xCF02DD69 = 382,<br />	_CPED_CONFIG_FLAG_0xF73AFA2E = 383,<br />	_CPED_CONFIG_FLAG_0x80B9A9D0 = 384,<br />	_CPED_CONFIG_FLAG_0xF601F7EE = 385,<br />	_CPED_CONFIG_FLAG_0xA91350FC = 386,<br />	_CPED_CONFIG_FLAG_0x3AB23B96 = 387,<br />	CPED_CONFIG_FLAG_IsClimbingLadder = 388,<br />	CPED_CONFIG_FLAG_HasBareFeet = 389,<br />	_CPED_CONFIG_FLAG_0xB4B1CD4C = 390,<br />	_CPED_CONFIG_FLAG_0x5459AFB8 = 391,<br />	_CPED_CONFIG_FLAG_0x54F27667 = 392,<br />	_CPED_CONFIG_FLAG_0xC11D3E8F = 393,<br />	_CPED_CONFIG_FLAG_0x5419EB3E = 394,<br />	_CPED_CONFIG_FLAG_0x82D8DBB4 = 395,<br />	_CPED_CONFIG_FLAG_0x33B02D2F = 396,<br />	_CPED_CONFIG_FLAG_0xAE66176D = 397,<br />	_CPED_CONFIG_FLAG_0xA2692593 = 398,<br />	_CPED_CONFIG_FLAG_0x714C7E31 = 399,<br />	_CPED_CONFIG_FLAG_0xEC488AC7 = 400,<br />	_CPED_CONFIG_FLAG_0xAE398504 = 401,<br />	_CPED_CONFIG_FLAG_0xABC58D72 = 402,<br />	_CPED_CONFIG_FLAG_0x5E5B9591 = 403,<br />	_CPED_CONFIG_FLAG_0x6BA1091E = 404,<br />	_CPED_CONFIG_FLAG_0x77840177 = 405,<br />	_CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,<br />	_CPED_CONFIG_FLAG_0x124420E9 = 407,<br />	_CPED_CONFIG_FLAG_0x75A65587 = 408,<br />	_CPED_CONFIG_FLAG_0xDFD2D55B = 409,<br />	_CPED_CONFIG_FLAG_0xBDD39919 = 410,<br />	_CPED_CONFIG_FLAG_0x43DEC267 = 411,<br />	_CPED_CONFIG_FLAG_0xE42B7797 = 412,<br />	CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,<br />	_CPED_CONFIG_FLAG_0x4F8149F5 = 414,<br />	_CPED_CONFIG_FLAG_0xDD9ECA7A = 415,<br />	_CPED_CONFIG_FLAG_0x9E7EF9D2 = 416,<br />	_CPED_CONFIG_FLAG_0x2C6ED942 = 417,<br />	CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,<br />	_CPED_CONFIG_FLAG_0xA488727D = 419,<br />	_CPED_CONFIG_FLAG_0xCFF5F6DE = 420,<br />	_CPED_CONFIG_FLAG_0x6D614599 = 421,<br />	CPED_CONFIG_FLAG_DisableVehicleCombat = 422,<br />	_CPED_CONFIG_FLAG_0xFE401D26 = 423,<br />	CPED_CONFIG_FLAG_FallsLikeAircraft = 424,<br />	_CPED_CONFIG_FLAG_0x2B42AE82 = 425,<br />	_CPED_CONFIG_FLAG_0x7A95734F = 426,<br />	_CPED_CONFIG_FLAG_0xDF4D8617 = 427,<br />	_CPED_CONFIG_FLAG_0x578F1F14 = 428,<br />	CPED_CONFIG_FLAG_DisableStartEngine = 429,<br />	CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,<br />	_CPED_CONFIG_FLAG_0x153C9500 = 431,<br />	_CPED_CONFIG_FLAG_0xCB7A632E = 432,<br />	_CPED_CONFIG_FLAG_0xDE727981 = 433,<br />	CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,<br />	_CPED_CONFIG_FLAG_0x12BBB935 = 435,<br />	_CPED_CONFIG_FLAG_0xAD0A1277 = 436,<br />	_CPED_CONFIG_FLAG_0xEA6AA46A = 437,<br />	CPED_CONFIG_FLAG_DisableHelmetArmor = 438,<br />	_CPED_CONFIG_FLAG_0xCB7F3A1E = 439,<br />	_CPED_CONFIG_FLAG_0x50178878 = 440,<br />	_CPED_CONFIG_FLAG_0x051B4F0D = 441,<br />	_CPED_CONFIG_FLAG_0x2FC3DECC = 442,<br />	_CPED_CONFIG_FLAG_0xC0030B0B = 443,<br />	_CPED_CONFIG_FLAG_0xBBDAF1E9 = 444,<br />	_CPED_CONFIG_FLAG_0x944FE59C = 445,<br />	_CPED_CONFIG_FLAG_0x506FBA39 = 446,<br />	_CPED_CONFIG_FLAG_0xDD45FE84 = 447,<br />	_CPED_CONFIG_FLAG_0xE698AE75 = 448,<br />	_CPED_CONFIG_FLAG_0x199633F8 = 449,<br />	CPED_CONFIG_FLAG_PedIsArresting = 450,<br />	CPED_CONFIG_FLAG_IsDecoyPed = 451,<br />	_CPED_CONFIG_FLAG_0x3A251D83 = 452,<br />	_CPED_CONFIG_FLAG_0xA56F6986 = 453,<br />	_CPED_CONFIG_FLAG_0x1D19C622 = 454,<br />	_CPED_CONFIG_FLAG_0xB68D3EAB = 455,<br />	CPED_CONFIG_FLAG_CanBeIncapacitated = 456,<br />	_CPED_CONFIG_FLAG_0x4BD5EBAD = 457,<br />	_CPED_CONFIG_FLAG_0xFCC5EBC5 = 458<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1913FE4CBF41C463<br />
/// </para>
/// </remarks>
public static void SetPedConfigFlag(int /* Ped */ ped, int flagId, bool value)
{
Function.Call((Hash)0x1913FE4CBF41C463, ped, flagId, value);
}

/// <summary>
/// PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);<br />Known values:<br />PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1E8A365BF3B29F2<br />
/// </para>
/// </remarks>
public static void SetPedResetFlag(int /* Ped */ ped, int flagId, bool doReset)
{
Function.Call((Hash)0xC1E8A365BF3B29F2, ped, flagId, doReset);
}

/// <summary>
/// See SET_PED_CONFIG_FLAG
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EE53118C892B513<br />
/// </para>
/// </remarks>
public static bool GetPedConfigFlag(int /* Ped */ ped, int flagId, bool p2)
{
return Function.Call<bool>((Hash)0x7EE53118C892B513, ped, flagId, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF9E59B1B1FBF2A0<br />
/// </para>
/// </remarks>
public static bool GetPedResetFlag(int /* Ped */ ped, int flagId)
{
return Function.Call<bool>((Hash)0xAF9E59B1B1FBF2A0, ped, flagId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BDDB8D9EC6BCF3C<br />
/// </para>
/// </remarks>
public static void SetPedGroupMemberPassengerIndex(int /* Ped */ ped, int index)
{
Function.Call((Hash)0x0BDDB8D9EC6BCF3C, ped, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B7A646C242A7059<br />
/// </para>
/// </remarks>
public static void SetPedCanEvasiveDive(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x6B7A646C242A7059, ped, toggle);
}

/// <summary>
/// Presumably returns the Entity that the Ped is currently diving out of the way of.<br /><br />var num3;<br />    if (PED::IS_PED_EVASIVE_DIVING(A_0, &amp;num3) != 0)<br />        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x414641C26E105898<br />
/// </para>
/// </remarks>
public static bool IsPedEvasiveDiving(int /* Ped */ ped, ref int /* Entity* */ evadingEntity)
{
var nativeAssistPointerVar0 = evadingEntity;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x414641C26E105898, ped, &nativeAssistPointerVar0);
}
evadingEntity = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x96A05E4FB321B1BA<br />
/// </para>
/// </remarks>
public static void SetPedShootsAtCoord(int /* Ped */ ped, float x, float y, float z, bool toggle)
{
Function.Call((Hash)0x96A05E4FB321B1BA, ped, x, y, z, toggle);
}

/// <summary>
/// Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE163A4BCE4DE6F11<br />
/// </para>
/// </remarks>
public static void SetPedModelIsSuppressed(uint modelHash, bool toggle)
{
Function.Call((Hash)0xE163A4BCE4DE6F11, modelHash, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB47BD05FA66B40CF<br />
/// </para>
/// </remarks>
public static void StopAnyPedModelBeingSuppressed()
{
Function.Call((Hash)0xB47BD05FA66B40CF);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x638C03B0F9878F57<br />
/// </para>
/// </remarks>
public static void SetPedCanBeTargetedWhenInjured(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x638C03B0F9878F57, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FB17BA2E7DECA5B<br />
/// </para>
/// </remarks>
public static void SetPedGeneratesDeadBodyEvents(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x7FB17BA2E7DECA5B, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE43A13C9E4CCCBCF<br />
/// </para>
/// </remarks>
public static void BlockPedFromGeneratingDeadBodyEventsWhenDead(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xE43A13C9E4CCCBCF, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x3E9679C1DFCF422C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedWillOnlyAttackWantedPlayer(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x3E9679C1DFCF422C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF993EE5E90ABA25<br />
/// </para>
/// </remarks>
public static void SetPedCanRagdollFromPlayerImpact(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xDF993EE5E90ABA25, ped, toggle);
}

/// <summary>
/// PoliceMotorcycleHelmet   1024    <br />RegularMotorcycleHelmet   4096    <br />FiremanHelmet 16384   <br />PilotHeadset  32768   <br />PilotHelmet   65536<br />--<br />p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54C7C4A94367717E<br />
/// </para>
/// </remarks>
public static void GivePedHelmet(int /* Ped */ ped, bool cannotRemove, int helmetFlag, int textureIndex)
{
Function.Call((Hash)0x54C7C4A94367717E, ped, cannotRemove, helmetFlag, textureIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7B2458D0AD6DED8<br />
/// </para>
/// </remarks>
public static void RemovePedHelmet(int /* Ped */ ped, bool instantly)
{
Function.Call((Hash)0xA7B2458D0AD6DED8, ped, instantly);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14590DDBEDB1EC85<br />
/// </para>
/// </remarks>
public static bool IsPedTakingOffHelmet(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x14590DDBEDB1EC85, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x560A43136EB58105<br />
/// </para>
/// </remarks>
public static void SetPedHelmet(int /* Ped */ ped, bool canWearHelmet)
{
Function.Call((Hash)0x560A43136EB58105, ped, canWearHelmet);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0E78D5C2CE3EB25<br />
/// </para>
/// </remarks>
public static void SetPedHelmetFlag(int /* Ped */ ped, int helmetFlag)
{
Function.Call((Hash)0xC0E78D5C2CE3EB25, ped, helmetFlag);
}

/// <summary>
/// List of component/props ID<br />gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26D83693ED99291C<br />
/// </para>
/// </remarks>
public static void SetPedHelmetPropIndex(int /* Ped */ ped, int propIndex, bool p2)
{
Function.Call((Hash)0x26D83693ED99291C, ped, propIndex, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x3F7325574E41B44D<br />
/// </para>
/// </remarks>
public static void SetPedHelmetVisorPropIndices(int /* Ped */ ped, bool p1, int p2, int p3)
{
Function.Call((Hash)0x3F7325574E41B44D, ped, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xB9496CE47546DB2C<br />
/// </para>
/// </remarks>
public static bool IsPedHelmetVisorUp(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB9496CE47546DB2C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1550C4BD22582E2<br />
/// </para>
/// </remarks>
public static void SetPedHelmetTextureIndex(int /* Ped */ ped, int textureIndex)
{
Function.Call((Hash)0xF1550C4BD22582E2, ped, textureIndex);
}

/// <summary>
/// Returns true if the ped passed through the parenthesis is wearing a helmet.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF33BDFE19B309B19<br />
/// </para>
/// </remarks>
public static bool IsPedWearingHelmet(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xF33BDFE19B309B19, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x687C0B594907D2E8<br />
/// </para>
/// </remarks>
public static void ClearPedStoredHatProp(int /* Ped */ ped)
{
Function.Call((Hash)0x687C0B594907D2E8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x451294E859ECC018<br />
/// </para>
/// </remarks>
public static int GetPedHelmetStoredHatPropIndex(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x451294E859ECC018, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D728C1E12BF5518<br />
/// </para>
/// </remarks>
public static int GetPedHelmetStoredHatTexIndex(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x9D728C1E12BF5518, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2385935BFFD4D92<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsCurrentHeadPropAHelmet(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xF2385935BFFD4D92, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x332B562EEDA62399<br />
/// </para>
/// </remarks>
public static void SetPedToLoadCover(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x332B562EEDA62399, ped, toggle);
}

/// <summary>
/// It simply makes the said ped to cower behind cover object(wall, desk, car)<br /><br />Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB7553CDCEF4A735<br />
/// </para>
/// </remarks>
public static void SetPedCanCowerInCover(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xCB7553CDCEF4A735, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC514825C507E3736<br />
/// </para>
/// </remarks>
public static void SetPedCanPeekInCover(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xC514825C507E3736, ped, toggle);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94D94BF1A75AED3D<br />
/// </para>
/// </remarks>
public static void SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x94D94BF1A75AED3D, ped, toggle);
}

/// <summary>
/// &quot;IK&quot; stands for &quot;Inverse kinematics.&quot; I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC396F5B86FF9FEBD<br />
/// </para>
/// </remarks>
public static void SetPedLegIkMode(int /* Ped */ ped, int mode)
{
Function.Call((Hash)0xC396F5B86FF9FEBD, ped, mode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A986918B102B448<br />
/// </para>
/// </remarks>
public static void SetPedMotionBlur(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x0A986918B102B448, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED7F7EFE9FABF340<br />
/// </para>
/// </remarks>
public static void SetPedCanSwitchWeapon(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xED7F7EFE9FABF340, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEB64139BA29A7CF<br />
/// </para>
/// </remarks>
public static void SetPedDiesInstantlyInWater(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEEB64139BA29A7CF, ped, toggle);
}

/// <summary>
/// Only appears in lamar1 script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A330D297AAC6BC1<br />
/// </para>
/// </remarks>
public static void SetLadderClimbInputState(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0x1A330D297AAC6BC1, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC158D28142A34608<br />
/// </para>
/// </remarks>
public static void StopPedWeaponFiringWhenDropped(int /* Ped */ ped)
{
Function.Call((Hash)0xC158D28142A34608, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5917BBA32D06C230<br />
/// </para>
/// </remarks>
public static void SetScriptedAnimSeatOffset(int /* Ped */ ped, float p1)
{
Function.Call((Hash)0x5917BBA32D06C230, ped, p1);
}

/// <summary>
/// enum eCombatMovement // 0x4F456B61<br />{<br />	CM_Stationary,<br />	CM_Defensive,<br />	CM_WillAdvance,<br />	CM_WillRetreat<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D9CA1009AFBD057<br />
/// </para>
/// </remarks>
public static void SetPedCombatMovement(int /* Ped */ ped, int combatMovement)
{
Function.Call((Hash)0x4D9CA1009AFBD057, ped, combatMovement);
}

/// <summary>
/// See SET_PED_COMBAT_MOVEMENT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEA92412FCAEB3F5<br />
/// </para>
/// </remarks>
public static int GetPedCombatMovement(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xDEA92412FCAEB3F5, ped);
}

/// <summary>
/// enum eCombatAbility // 0xE793438C<br />{<br />	CA_Poor,<br />	CA_Average,<br />	CA_Professional,<br />	CA_NumTypes<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7622C0D36B2FDA8<br />
/// </para>
/// </remarks>
public static void SetPedCombatAbility(int /* Ped */ ped, int abilityLevel)
{
Function.Call((Hash)0xC7622C0D36B2FDA8, ped, abilityLevel);
}

/// <summary>
/// enum eCombatRange // 0xB69160F5<br />{<br />	CR_Near,<br />	CR_Medium,<br />	CR_Far,<br />	CR_VeryFar,<br />	CR_NumRanges<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C606747B23E497B<br />
/// </para>
/// </remarks>
public static void SetPedCombatRange(int /* Ped */ ped, int combatRange)
{
Function.Call((Hash)0x3C606747B23E497B, ped, combatRange);
}

/// <summary>
/// See SET_PED_COMBAT_RANGE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9D9F7F2DB8E2FA0<br />
/// </para>
/// </remarks>
public static int GetPedCombatRange(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xF9D9F7F2DB8E2FA0, ped);
}

/// <summary>
/// enum eCombatAttributes // 0x0E8E7201<br />{<br />	BF_CanUseCover = 0,<br />	BF_CanUseVehicles = 1,<br />	BF_CanDoDrivebys = 2,<br />	BF_CanLeaveVehicle = 3,<br />	BF_CanUseDynamicStrafeDecisions = 4,<br />	BF_AlwaysFight = 5,<br />	BF_0x66BB9FCC = 6,<br />	BF_0x6837DA41 = 7,<br />	BF_0xB4A13A5A = 8,<br />	BF_0xEE326AAD = 9,<br />	BF_0x7DF2CCFA = 10,<br />	BF_0x0036D422 = 11,<br />	BF_BlindFireWhenInCover = 12,<br />	BF_Aggressive = 13,<br />	BF_CanInvestigate = 14,<br />	BF_HasRadio = 15,<br />	BF_0x6BDE28D1 = 16,<br />	BF_AlwaysFlee = 17,<br />	BF_0x7852797D = 18,<br />	BF_0x33497B95 = 19,<br />	BF_CanTauntInVehicle = 20,<br />	BF_CanChaseTargetOnFoot = 21,<br />	BF_WillDragInjuredPedsToSafety = 22,<br />	BF_0xCD7168B8 = 23,<br />	BF_UseProximityFiringRate = 24,<br />	BF_0x48F914F8 = 25,<br />	BF_0x2EA543D0 = 26,<br />	BF_PerfectAccuracy = 27,<br />	BF_CanUseFrustratedAdvance = 28,<br />	BF_0x3D131AC1 = 29,<br />	BF_0x3AD95F27 = 30,<br />	BF_MaintainMinDistanceToTarget = 31,<br />	BF_0xEAD68AD2 = 32,<br />	BF_0xA206C2E0 = 33,<br />	BF_CanUsePeekingVariations = 34,<br />	BF_0xA5715184 = 35,<br />	BF_0xD5265533 = 36,<br />	BF_0x2B84C2BF = 37,<br />	BF_DisableBulletReactions = 38,<br />	BF_CanBust = 39,<br />	BF_0xAA525726 = 40,<br />	BF_CanCommandeerVehicles = 41,<br />	BF_CanFlank = 42,<br />	BF_SwitchToAdvanceIfCantFindCover = 43,<br />	BF_SwitchToDefensiveIfInCover = 44,<br />	BF_0xEB4786A0 = 45,<br />	BF_CanFightArmedPedsWhenNotArmed = 46,<br />	BF_0xA08E9402 = 47,<br />	BF_0x952EAD7D = 48,<br />	BF_UseEnemyAccuracyScaling = 49,<br />	BF_CanCharge = 50,<br />	BF_0xDA8C2BD3 = 51,<br />	BF_0x6562F017 = 52,<br />	BF_0xA2C3D53B = 53,<br />	BF_AlwaysEquipBestWeapon = 54,<br />	BF_CanSeeUnderwaterPeds = 55,<br />	BF_0xF619486B = 56,<br />	BF_0x61EB63A3 = 57,<br />	BF_DisableFleeFromCombat = 58,<br />	BF_0x8976D12B = 59,<br />	BF_CanThrowSmokeGrenade = 60,<br />	BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,<br />	BF_0x5452A10C = 62,<br />	BF_FleesFromInvincibleOpponents = 63,<br />	BF_DisableBlockFromPursueDuringVehicleChase = 64,<br />	BF_DisableSpinOutDuringVehicleChase = 65,<br />	BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,<br />	BF_0x0B404731 = 67,<br />	BF_DisableReactToBuddyShot = 68,<br />	BF_0x7FFD6AEB = 69,<br />	BF_0x51F4AEF8 = 70,<br />	BF_PermitChargeBeyondDefensiveArea = 71,<br />	BF_0x63E0A8E2 = 72,<br />	BF_0xDF974436 = 73,<br />	BF_0x556C080B = 74,<br />	BF_0xA4D50035 = 75,<br />	BF_SetDisableShoutTargetPositionOnCombatStart = 76,<br />	BF_DisableRespondedToThreatBroadcast = 77,<br />	BF_0xCBB01765 = 78,<br />	BF_0x4F862ED4 = 79,<br />	BF_0xEF9C7C40 = 80,<br />	BF_0xE51B494F = 81,<br />	BF_0x054D0199 = 82,<br />	BF_0xD36BCE94 = 83,<br />	BF_0xFB11F690 = 84,<br />	BF_0xD208A9AD = 85,<br />	BF_AllowDogFighting = 86,<br />	BF_0x07A6E531 = 87,<br />	BF_0x34F9317B = 88,<br />	BF_0x4240F5A9 = 89,<br />	BF_0xEE129DBD = 90,<br />	BF_0x053AEAD9 = 91<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F7794730795E019<br />
/// </para>
/// </remarks>
public static void SetPedCombatAttributes(int /* Ped */ ped, int attributeId, bool enabled)
{
Function.Call((Hash)0x9F7794730795E019, ped, attributeId, enabled);
}

/// <summary>
/// enum eTargetLossResponseType<br />{<br />	TLR_ExitTask,<br />	TLR_NeverLoseTarget,<br />	TLR_SearchForTarget<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0703B9079823DA4A<br />
/// </para>
/// </remarks>
public static void SetPedTargetLossResponse(int /* Ped */ ped, int responseType)
{
Function.Call((Hash)0x0703B9079823DA4A, ped, responseType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCCA191DF9980FD7<br />
/// </para>
/// </remarks>
public static bool IsPedPerformingMeleeAction(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xDCCA191DF9980FD7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD4CCDBCC59941B7<br />
/// </para>
/// </remarks>
public static bool IsPedPerformingStealthKill(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xFD4CCDBCC59941B7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBD0EDBA5BE957CF<br />
/// </para>
/// </remarks>
public static bool IsPedPerformingACounterAttack(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xEBD0EDBA5BE957CF, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x863B23EFDE9C5DF2<br />
/// </para>
/// </remarks>
public static bool IsPedBeingStealthKilled(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x863B23EFDE9C5DF2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18A3E9EE1297FD39<br />
/// </para>
/// </remarks>
public static int GetMeleeTargetForPed(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x18A3E9EE1297FD39, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9800AA1A771B000<br />
/// </para>
/// </remarks>
public static bool WasPedKilledByStealth(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xF9800AA1A771B000, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F08E26039C7347C<br />
/// </para>
/// </remarks>
public static bool WasPedKilledByTakedown(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x7F08E26039C7347C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61767F73EACEED21<br />
/// </para>
/// </remarks>
public static bool WasPedKnockedOut(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x61767F73EACEED21, ped);
}

/// <summary>
/// bit 1 (0x2) = use vehicle<br />bit 15 (0x8000) = force cower
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70A2D1137C8ED7C9<br />
/// </para>
/// </remarks>
public static void SetPedFleeAttributes(int /* Ped */ ped, int attributeFlags, bool enable)
{
Function.Call((Hash)0x70A2D1137C8ED7C9, ped, attributeFlags, enable);
}

/// <summary>
/// p1: Only &quot;CODE_HUMAN_STAND_COWER&quot; found in the b617d scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA549131166868ED3<br />
/// </para>
/// </remarks>
public static void SetPedCowerHash(int /* Ped */ ped, string p1)
{
Function.Call((Hash)0xA549131166868ED3, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2016C603D6B8987C<br />
/// </para>
/// </remarks>
public static void SetPedSteersAroundDeadBodies(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x2016C603D6B8987C, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46F2193B3AD1D891<br />
/// </para>
/// </remarks>
public static void SetPedSteersAroundPeds(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x46F2193B3AD1D891, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1509C089ADC208BF<br />
/// </para>
/// </remarks>
public static void SetPedSteersAroundObjects(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x1509C089ADC208BF, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB6FB9D48DDE23EC<br />
/// </para>
/// </remarks>
public static void SetPedSteersAroundVehicles(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEB6FB9D48DDE23EC, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9B61A329BFDCBEA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedIsAvoidedByOthers(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0xA9B61A329BFDCBEA, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x570389D1C3DE3C6B<br />
/// </para>
/// </remarks>
public static void SetPedIncreasedAvoidanceRadius(int /* Ped */ ped)
{
Function.Call((Hash)0x570389D1C3DE3C6B, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x576594E8D64375E2<br />
/// </para>
/// </remarks>
public static void SetPedBlocksPathingWhenDead(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x576594E8D64375E2, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA52D5247A4227E14<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedNoTimeDelayBeforeShot(int /* bug: Any */ p0)
{
Function.Call((Hash)0xA52D5247A4227E14, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x083961498679DC9F<br />
/// </para>
/// </remarks>
public static bool IsAnyPedNearPoint(float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0x083961498679DC9F, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2208438012482A1A<br />
/// </para>
/// </remarks>
public static void ForcePedAiAndAnimationUpdate(int /* Ped */ ped, bool p1, bool p2)
{
Function.Call((Hash)0x2208438012482A1A, ped, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFCF37A457CB96DC0<br />
/// </para>
/// </remarks>
public static bool IsPedHeadingTowardsPosition(int /* Ped */ ped, float x, float y, float z, float p4)
{
return Function.Call<bool>((Hash)0xFCF37A457CB96DC0, ped, x, y, z, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D7A2E43E74E2EB8<br />
/// </para>
/// </remarks>
public static void RequestPedVisibilityTracking(int /* Ped */ ped)
{
Function.Call((Hash)0x7D7A2E43E74E2EB8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BC338A7B21F4608<br />
/// </para>
/// </remarks>
public static void RequestPedVehicleVisibilityTracking(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x2BC338A7B21F4608, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD018C591F94CB43<br />
/// </para>
/// </remarks>
public static void RequestPedRestrictedVehicleVisibilityTracking(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0xCD018C591F94CB43, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75BA1CB3B7D40CAF<br />
/// </para>
/// </remarks>
public static void RequestPedUseSmallBboxVisibilityTracking(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0x75BA1CB3B7D40CAF, ped, p1);
}

/// <summary>
/// returns whether or not a ped is visible within your FOV, not this check auto&apos;s to false after a certain distance.<br /><br /><br />Target needs to be tracked.. won&apos;t work otherwise.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91C8E617F64188AC<br />
/// </para>
/// </remarks>
public static bool IsTrackedPedVisible(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x91C8E617F64188AC, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x511F1A683387C7E2<br />
/// </para>
/// </remarks>
public static int GetTrackedPedPixelcount(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x511F1A683387C7E2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C5E1F087CD10BB7<br />
/// </para>
/// </remarks>
public static bool IsPedTracked(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x4C5E1F087CD10BB7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8507BCB710FA6DC0<br />
/// </para>
/// </remarks>
public static bool HasPedReceivedEvent(int /* Ped */ ped, int eventId)
{
return Function.Call<bool>((Hash)0x8507BCB710FA6DC0, ped, eventId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CD5A433374D4CFB<br />
/// </para>
/// </remarks>
public static bool CanPedSeeHatedPed(int /* Ped */ ped1, int /* Ped */ ped2)
{
return Function.Call<bool>((Hash)0x6CD5A433374D4CFB, ped1, ped2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C6A6C19B6C0C496<br />
/// </para>
/// </remarks>
public static bool CanPedShuffleToOrFromTurretSeat(int /* Ped */ ped, ref int p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x9C6A6C19B6C0C496, ped, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x2DFC81C9B9608549<br />
/// </para>
/// </remarks>
public static bool CanPedShuffleToOrFromExtraSeat(int /* Ped */ ped, ref int p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2DFC81C9B9608549, ped, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// no bone= -1<br /><br />boneIds:<br />        SKEL_ROOT = 0x0,<br />   SKEL_Pelvis = 0x2e28,<br /> SKEL_L_Thigh = 0xe39f,<br />    SKEL_L_Calf = 0xf9bb,<br /> SKEL_L_Foot = 0x3779,<br /> SKEL_L_Toe0 = 0x83c,<br />  IK_L_Foot = 0xfedd,<br />   PH_L_Foot = 0xe175,<br />   MH_L_Knee = 0xb3fe,<br />   SKEL_R_Thigh = 0xca72,<br />    SKEL_R_Calf = 0x9000,<br /> SKEL_R_Foot = 0xcc4d,<br /> SKEL_R_Toe0 = 0x512d,<br /> IK_R_Foot = 0x8aae,<br />   PH_R_Foot = 0x60e6,<br />   MH_R_Knee = 0x3fcf,<br />   RB_L_ThighRoll = 0x5c57,<br />  RB_R_ThighRoll = 0x192a,<br />  SKEL_Spine_Root = 0xe0fd,<br /> SKEL_Spine0 = 0x5c01,<br /> SKEL_Spine1 = 0x60f0,<br /> SKEL_Spine2 = 0x60f1,<br /> SKEL_Spine3 = 0x60f2,<br /> SKEL_L_Clavicle = 0xfcd9,<br /> SKEL_L_UpperArm = 0xb1c5,<br /> SKEL_L_Forearm = 0xeeeb,<br />  SKEL_L_Hand = 0x49d9,<br /> SKEL_L_Finger00 = 0x67f2,<br /> SKEL_L_Finger01 = 0xff9,<br />  SKEL_L_Finger02 = 0xffa,<br />  SKEL_L_Finger10 = 0x67f3,<br /> SKEL_L_Finger11 = 0x1049,<br /> SKEL_L_Finger12 = 0x104a,<br /> SKEL_L_Finger20 = 0x67f4,<br /> SKEL_L_Finger21 = 0x1059,<br /> SKEL_L_Finger22 = 0x105a,<br /> SKEL_L_Finger30 = 0x67f5,<br /> SKEL_L_Finger31 = 0x1029,<br /> SKEL_L_Finger32 = 0x102a,<br /> SKEL_L_Finger40 = 0x67f6,<br /> SKEL_L_Finger41 = 0x1039,<br /> SKEL_L_Finger42 = 0x103a,<br /> PH_L_Hand = 0xeb95,<br />   IK_L_Hand = 0x8cbd,<br />   RB_L_ForeArmRoll = 0xee4f,<br />    RB_L_ArmRoll = 0x1470,<br />    MH_L_Elbow = 0x58b7,<br />  SKEL_R_Clavicle = 0x29d2,<br /> SKEL_R_UpperArm = 0x9d4d,<br /> SKEL_R_Forearm = 0x6e5c,<br />  SKEL_R_Hand = 0xdead,<br /> SKEL_R_Finger00 = 0xe5f2,<br /> SKEL_R_Finger01 = 0xfa10,<br /> SKEL_R_Finger02 = 0xfa11,<br /> SKEL_R_Finger10 = 0xe5f3,<br /> SKEL_R_Finger11 = 0xfa60,<br /> SKEL_R_Finger12 = 0xfa61,<br /> SKEL_R_Finger20 = 0xe5f4,<br /> SKEL_R_Finger21 = 0xfa70,<br /> SKEL_R_Finger22 = 0xfa71,<br /> SKEL_R_Finger30 = 0xe5f5,<br /> SKEL_R_Finger31 = 0xfa40,<br /> SKEL_R_Finger32 = 0xfa41,<br /> SKEL_R_Finger40 = 0xe5f6,<br /> SKEL_R_Finger41 = 0xfa50,<br /> SKEL_R_Finger42 = 0xfa51,<br /> PH_R_Hand = 0x6f06,<br />   IK_R_Hand = 0x188e,<br />   RB_R_ForeArmRoll = 0xab22,<br />    RB_R_ArmRoll = 0x90ff,<br />    MH_R_Elbow = 0xbb0,<br />   SKEL_Neck_1 = 0x9995,<br /> SKEL_Head = 0x796e,<br />   IK_Head = 0x322c,<br /> FACIAL_facialRoot = 0xfe2c,<br />   FB_L_Brow_Out_000 = 0xe3db,<br />   FB_L_Lid_Upper_000 = 0xb2b6,<br />  FB_L_Eye_000 = 0x62ac,<br />    FB_L_CheekBone_000 = 0x542e,<br />  FB_L_Lip_Corner_000 = 0x74ac,<br /> FB_R_Lid_Upper_000 = 0xaa10,<br />  FB_R_Eye_000 = 0x6b52,<br />    FB_R_CheekBone_000 = 0x4b88,<br />  FB_R_Brow_Out_000 = 0x54c,<br />    FB_R_Lip_Corner_000 = 0x2ba6,<br /> FB_Brow_Centre_000 = 0x9149,<br />  FB_UpperLipRoot_000 = 0x4ed2,<br /> FB_UpperLip_000 = 0xf18f,<br /> FB_L_Lip_Top_000 = 0x4f37,<br />    FB_R_Lip_Top_000 = 0x4537,<br />    FB_Jaw_000 = 0xb4a0,<br />  FB_LowerLipRoot_000 = 0x4324,<br /> FB_LowerLip_000 = 0x508f,<br /> FB_L_Lip_Bot_000 = 0xb93b,<br />    FB_R_Lip_Bot_000 = 0xc33b,<br />    FB_Tongue_000 = 0xb987,<br />   RB_Neck_1 = 0x8b93,<br />   IK_Root = 0xdd1c
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F428D08BE5AAE31<br />
/// </para>
/// </remarks>
public static int GetPedBoneIndex(int /* Ped */ ped, int boneId)
{
return Function.Call<int>((Hash)0x3F428D08BE5AAE31, ped, boneId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2057EF813397A772<br />
/// </para>
/// </remarks>
public static int GetPedRagdollBoneIndex(int /* Ped */ ped, int bone)
{
return Function.Call<int>((Hash)0x2057EF813397A772, ped, bone);
}

/// <summary>
/// Values look to be between 0.0 and 1.0<br />From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0<br /><br />You are correct, just looked in IDA it breaks from the function if it&apos;s less than 0.0f or greater than 1.0f.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF29516833893561<br />
/// </para>
/// </remarks>
public static void SetPedEnveffScale(int /* Ped */ ped, float value)
{
Function.Call((Hash)0xBF29516833893561, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C14D30395A51A3C<br />
/// </para>
/// </remarks>
public static float GetPedEnveffScale(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x9C14D30395A51A3C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2C5AA0C0E8D0F1E<br />
/// </para>
/// </remarks>
public static void SetEnablePedEnveffScale(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xD2C5AA0C0E8D0F1E, ped, toggle);
}

/// <summary>
/// In agency_heist3b.c4, its like this 90% of the time:<br /><br />PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);<br />PED::SET_PED_ENVEFF_SCALE(ped, 1.0);<br />PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);<br />PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);<br /><br />and its like this 10% of the time:<br /><br />PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);<br />PED::SET_PED_ENVEFF_SCALE(ped, 0.65);<br />PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);<br />PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x110F526AB784111F<br />
/// </para>
/// </remarks>
public static void SetPedEnveffCpvAdd(int /* Ped */ ped, float p1)
{
Function.Call((Hash)0x110F526AB784111F, ped, p1);
}

/// <summary>
/// Something related to the environmental effects natives.<br />In the &quot;agency_heist3b&quot; script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD69411AA0CEBF9E9<br />
/// </para>
/// </remarks>
public static void SetPedEnveffColorModulator(int /* Ped */ ped, int p1, int p2, int p3)
{
Function.Call((Hash)0xD69411AA0CEBF9E9, ped, p1, p2, p3);
}

/// <summary>
/// intensity: 0.0f - 1.0f<br /><br />This native sets the emissive intensity for the given ped. It is used for different &apos;glow&apos; levels on illuminated clothing.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x4E90D746056E273D<br />
/// </para>
/// </remarks>
public static void SetPedEmissiveScale(int /* Ped */ ped, float intensity)
{
Function.Call((Hash)0x4E90D746056E273D, ped, intensity);
}

/// <summary>
/// Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.<br />Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x1461B28A06717D68<br />
/// </para>
/// </remarks>
public static float GetPedEmissiveScale(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x1461B28A06717D68, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x81AA517FBBA05D39<br />
/// </para>
/// </remarks>
public static bool IsPedShaderReady(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x81AA517FBBA05D39, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0xE906EC930F5FE7C8<br />
/// </para>
/// </remarks>
public static void SetPedEnableCrewEmblem(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xE906EC930F5FE7C8, ped, toggle);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1216E0BFA72CC703<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RequestRagdollBoundsUpdate(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x1216E0BFA72CC703, p0, p1);
}

/// <summary>
/// Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B5AA717A181FB4C<br />
/// </para>
/// </remarks>
public static void SetPedAoBlobRendering(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x2B5AA717A181FB4C, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8B52E498014F5B0<br />
/// </para>
/// </remarks>
public static bool IsPedSheltered(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB8B52E498014F5B0, ped);
}

/// <summary>
/// p6 always 2 (but it doesnt seem to matter...)<br /><br />roll and pitch 0<br />yaw to Ped.rotation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C18E0F9080ADD73<br />
/// </para>
/// </remarks>
public static int CreateSynchronizedScene(float x, float y, float z, float roll, float pitch, float yaw, int p6)
{
return Function.Call<int>((Hash)0x8C18E0F9080ADD73, x, y, z, roll, pitch, yaw, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62EC273D00187DCA<br />
/// </para>
/// </remarks>
public static int CreateSynchronizedSceneAtMapObject(float x, float y, float z, float radius, uint @object)
{
return Function.Call<int>((Hash)0x62EC273D00187DCA, x, y, z, radius, @object);
}

/// <summary>
/// Returns true if a synchronized scene is running
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25D39B935A038A26<br />
/// </para>
/// </remarks>
public static bool IsSynchronizedSceneRunning(int sceneId)
{
return Function.Call<bool>((Hash)0x25D39B935A038A26, sceneId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6ACF6B7225801CD7<br />
/// </para>
/// </remarks>
public static void SetSynchronizedSceneOrigin(int sceneID, float x, float y, float z, float roll, float pitch, float yaw, bool p7)
{
Function.Call((Hash)0x6ACF6B7225801CD7, sceneID, x, y, z, roll, pitch, yaw, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x734292F4F0ABF6D0<br />
/// </para>
/// </remarks>
public static void SetSynchronizedScenePhase(int sceneID, float phase)
{
Function.Call((Hash)0x734292F4F0ABF6D0, sceneID, phase);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4A310B1D7FA73CC<br />
/// </para>
/// </remarks>
public static float GetSynchronizedScenePhase(int sceneID)
{
return Function.Call<float>((Hash)0xE4A310B1D7FA73CC, sceneID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6C49F8A5E295A5D<br />
/// </para>
/// </remarks>
public static void SetSynchronizedSceneRate(int sceneID, float rate)
{
Function.Call((Hash)0xB6C49F8A5E295A5D, sceneID, rate);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD80932D577274D40<br />
/// </para>
/// </remarks>
public static float GetSynchronizedSceneRate(int sceneID)
{
return Function.Call<float>((Hash)0xD80932D577274D40, sceneID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9A897A4C6C2974F<br />
/// </para>
/// </remarks>
public static void SetSynchronizedSceneLooped(int sceneID, bool toggle)
{
Function.Call((Hash)0xD9A897A4C6C2974F, sceneID, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62522002E0C391BA<br />
/// </para>
/// </remarks>
public static bool IsSynchronizedSceneLooped(int sceneID)
{
return Function.Call<bool>((Hash)0x62522002E0C391BA, sceneID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x394B9CD12435C981<br />
/// </para>
/// </remarks>
public static void SetSynchronizedSceneHoldLastFrame(int sceneID, bool toggle)
{
Function.Call((Hash)0x394B9CD12435C981, sceneID, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F2F4F13AC5257EF<br />
/// </para>
/// </remarks>
public static bool IsSynchronizedSceneHoldLastFrame(int sceneID)
{
return Function.Call<bool>((Hash)0x7F2F4F13AC5257EF, sceneID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x272E4723B56A3B96<br />
/// </para>
/// </remarks>
public static void AttachSynchronizedSceneToEntity(int sceneID, int /* Entity */ entity, int boneIndex)
{
Function.Call((Hash)0x272E4723B56A3B96, sceneID, entity, boneIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D38F1F04CBB37EA<br />
/// </para>
/// </remarks>
public static void DetachSynchronizedScene(int sceneID)
{
Function.Call((Hash)0x6D38F1F04CBB37EA, sceneID);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD9CC7E200A52A6F<br />
/// </para>
/// </remarks>
public static void TakeOwnershipOfSynchronizedScene(int scene)
{
Function.Call((Hash)0xCD9CC7E200A52A6F, scene);
}

/// <summary>
/// Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.<br /><br />enum eMotionState // 0x92A659FE<br />{<br />	MotionState_None = 0xEE717723,<br />	MotionState_Idle = 0x9072A713,<br />	MotionState_Walk = 0xD827C3DB,<br />	MotionState_Run = 0xFFF7E7A4,<br />	MotionState_Sprint = 0xBD8817DB,<br />	MotionState_Crouch_Idle = 0x43FB099E,<br />	MotionState_Crouch_Walk = 0x08C31A98,<br />	MotionState_Crouch_Run = 0x3593CF09,<br />	MotionState_DoNothing = 0x0EC17E58,<br />	MotionState_AnimatedVelocity = 0x551AAC43,<br />	MotionState_InVehicle = 0x94D9D58D,<br />	MotionState_Aiming = 0x3F67C6AF,<br />	MotionState_Diving_Idle = 0x4848CDED,<br />	MotionState_Diving_Swim = 0x916E828C,<br />	MotionState_Swimming_TreadWater = 0xD1BF11C7,<br />	MotionState_Dead = 0x0DBB071C,<br />	MotionState_Stealth_Idle = 0x422D7A25,<br />	MotionState_Stealth_Walk = 0x042AB6A2,<br />	MotionState_Stealth_Run = 0xFB0B79E1,<br />	MotionState_Parachuting = 0xBAC0F10B,<br />	MotionState_ActionMode_Idle = 0xDA40A0DC,<br />	MotionState_ActionMode_Walk = 0xD2905EA7,<br />	MotionState_ActionMode_Run = 0x31BADE14,<br />	MotionState_Jetpack = 0x535E6A5E<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF28965D04F570DCA<br />
/// </para>
/// </remarks>
public static bool ForcePedMotionState(int /* Ped */ ped, uint motionStateHash, bool p2, int p3, bool p4)
{
return Function.Call<bool>((Hash)0xF28965D04F570DCA, ped, motionStateHash, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF60165E1D2C5370B<br />
/// </para>
/// </remarks>
public static bool GetPedCurrentMoveBlendRatio(int /* Ped */ ped, ref float speedX, ref float speedY)
{
var nativeAssistPointerVar0 = speedX;
var nativeAssistPointerVar1 = speedY;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF60165E1D2C5370B, ped, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
speedX = nativeAssistPointerVar0;
speedY = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x433083750C5E064A<br />
/// </para>
/// </remarks>
public static void SetPedMaxMoveBlendRatio(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x433083750C5E064A, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01A898D26E2333DD<br />
/// </para>
/// </remarks>
public static void SetPedMinMoveBlendRatio(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x01A898D26E2333DD, ped, value);
}

/// <summary>
/// Min: 0.00<br />Max: 10.00<br /><br />Can be used in combo with fast run cheat.<br /><br />When value is set to 10.00:<br />Sprinting without fast run cheat: 66 m/s<br />Sprinting with fast run cheat: 77 m/s<br /><br />Needs to be looped!<br /><br />Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x085BF80FA50A39D1<br />
/// </para>
/// </remarks>
public static void SetPedMoveRateOverride(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x085BF80FA50A39D1, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x0B3E35AC043707D9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedMoveRateInWaterOverride(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x0B3E35AC043707D9, p0, p1);
}

/// <summary>
/// Checks if the specified sexiness flag is set<br /><br />enum eSexinessFlags<br />{<br /> SF_JEER_AT_HOT_PED = 0,<br /> SF_HURRIEDFEMALES_SEXY = 1,<br /> SF_HOT_PERSON = 2,<br /> };
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46B05BCAE43856B0<br />
/// </para>
/// </remarks>
public static bool PedHasSexinessFlagSet(int /* Ped */ ped, int sexinessFlag)
{
return Function.Call<bool>((Hash)0x46B05BCAE43856B0, ped, sexinessFlag);
}

/// <summary>
/// Returns size of array, passed into the second variable.<br /><br />See below for usage information.<br /><br />This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.<br /><br />//Setup the array<br /> const int numElements = 10;<br />   const int arrSize = numElements * 2 + 2;<br />  Any veh[arrSize];<br /> //0 index is the size of the array<br />    veh[0] = numElements;<br /><br />   int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);<br /><br /> if (veh != NULL)<br />  {<br />     //Simple loop to go through results<br />       for (int i = 0; i &lt; count; i++)<br />        {<br />         int offsettedID = i * 2 + 2;<br />          //Make sure it exists<br />         if (veh[offsettedID] != NULL &amp;&amp; ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))<br />          {<br />             //Do something<br />            }<br />     }<br /> }  
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFF869CBFA210D82<br />
/// </para>
/// </remarks>
public static int GetPedNearbyVehicles(int /* Ped */ ped, int /* bug: structure */ sizeAndVehs)
{
return Function.Call<int>((Hash)0xCFF869CBFA210D82, ped, sizeAndVehs);
}

/// <summary>
/// sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.<br />ignore - ped type to ignore<br /><br />Return value is the number of peds found and added to the array passed.<br /><br />-----------------------------------<br /><br />To make this work in most menu bases at least in C++ do it like so,<br /><br /> Formatted Example: https://pastebin.com/D8an9wwp<br /><br />-----------------------------------<br /><br />Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23F8F5FC7E8C4A6B<br />
/// </para>
/// </remarks>
public static int GetPedNearbyPeds(int /* Ped */ ped, int /* bug: structure */ sizeAndPeds, int ignore)
{
return Function.Call<int>((Hash)0x23F8F5FC7E8C4A6B, ped, sizeAndPeds, ignore);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7350823473013C02<br />
/// </para>
/// </remarks>
public static bool HaveAllStreamingRequestsCompleted(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x7350823473013C02, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00E73468D085F745<br />
/// </para>
/// </remarks>
public static bool IsPedUsingActionMode(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x00E73468D085F745, ped);
}

/// <summary>
/// p2 is usually -1 in the scripts. action is either 0 or &quot;DEFAULT_ACTION&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD75ACCF5E0FB5367<br />
/// </para>
/// </remarks>
public static void SetPedUsingActionMode(int /* Ped */ ped, bool p1, int p2, string action)
{
Function.Call((Hash)0xD75ACCF5E0FB5367, ped, p1, p2, action);
}

/// <summary>
/// name: &quot;MP_FEMALE_ACTION&quot; found multiple times in the b617d scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x781DE8FA214E87D2<br />
/// </para>
/// </remarks>
public static void SetMovementModeOverride(int /* Ped */ ped, string name)
{
Function.Call((Hash)0x781DE8FA214E87D2, ped, name);
}

/// <summary>
/// Overrides the ped&apos;s collision capsule radius for the current tick.<br />Must be called every tick to be effective.<br /><br />Setting this to 0.001 will allow warping through some objects.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x364DF566EC833DE2<br />
/// </para>
/// </remarks>
public static void SetPedCapsule(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x364DF566EC833DE2, ped, value);
}

/// <summary>
/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4462658788425076<br />
/// </para>
/// </remarks>
public static int RegisterPedheadshot(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x4462658788425076, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xBA8805A1108A2515<br />
/// </para>
/// </remarks>
public static int RegisterPedheadshotHires(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0xBA8805A1108A2515, ped);
}

/// <summary>
/// Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x953563CE563143AF<br />
/// </para>
/// </remarks>
public static int RegisterPedheadshotTransparent(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x953563CE563143AF, ped);
}

/// <summary>
/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x96B1361D9B24C2FF<br />
/// </para>
/// </remarks>
public static void UnregisterPedheadshot(int id)
{
Function.Call((Hash)0x96B1361D9B24C2FF, id);
}

/// <summary>
/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0A9668F158129A2<br />
/// </para>
/// </remarks>
public static bool IsPedheadshotValid(int id)
{
return Function.Call<bool>((Hash)0xA0A9668F158129A2, id);
}

/// <summary>
/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7085228842B13A67<br />
/// </para>
/// </remarks>
public static bool IsPedheadshotReady(int id)
{
return Function.Call<bool>((Hash)0x7085228842B13A67, id);
}

/// <summary>
/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB4EACD4AD0A5D6B<br />
/// </para>
/// </remarks>
public static string GetPedheadshotTxdString(int id)
{
return Function.Call<string>((Hash)0xDB4EACD4AD0A5D6B, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0DAEF2F545BEE25<br />
/// </para>
/// </remarks>
public static bool RequestPedheadshotImgUpload(int id)
{
return Function.Call<bool>((Hash)0xF0DAEF2F545BEE25, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D517B27CF6ECD04<br />
/// </para>
/// </remarks>
public static void ReleasePedheadshotImgUpload(int id)
{
Function.Call((Hash)0x5D517B27CF6ECD04, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEBB376779A760AA8<br />
/// </para>
/// </remarks>
public static bool IsPedheadshotImgUploadAvailable()
{
return Function.Call<bool>((Hash)0xEBB376779A760AA8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x876928DDDFCCC9CD<br />
/// </para>
/// </remarks>
public static bool HasPedheadshotImgUploadFailed()
{
return Function.Call<bool>((Hash)0x876928DDDFCCC9CD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8A169E666CBC541<br />
/// </para>
/// </remarks>
public static bool HasPedheadshotImgUploadSucceeded()
{
return Function.Call<bool>((Hash)0xE8A169E666CBC541);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1F6EBF9A3D55538<br />
/// </para>
/// </remarks>
public static void SetPedHeatscaleOverride(int /* Ped */ ped, float heatScale)
{
Function.Call((Hash)0xC1F6EBF9A3D55538, ped, heatScale);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x600048C60D5C2C51<br />
/// </para>
/// </remarks>
public static void DisablePedHeatscaleOverride(int /* Ped */ ped)
{
Function.Call((Hash)0x600048C60D5C2C51, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DF9038C90AD5264<br />
/// </para>
/// </remarks>
public static void SpawnpointsStartSearch(float p0, float p1, float p2, float p3, float p4, int interiorFlags, float scale, int duration)
{
Function.Call((Hash)0x2DF9038C90AD5264, p0, p1, p2, p3, p4, interiorFlags, scale, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2AFF10216DEFA2F<br />
/// </para>
/// </remarks>
public static void SpawnpointsStartSearchInAngledArea(float x1, float y1, float z1, float x2, float y2, float z2, float width, int interiorFlags, float scale, int duration)
{
Function.Call((Hash)0xB2AFF10216DEFA2F, x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFEE4A5459472A9F8<br />
/// </para>
/// </remarks>
public static void SpawnpointsCancelSearch()
{
Function.Call((Hash)0xFEE4A5459472A9F8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C67506996001F5E<br />
/// </para>
/// </remarks>
public static bool SpawnpointsIsSearchActive()
{
return Function.Call<bool>((Hash)0x3C67506996001F5E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA586FBEB32A53DBB<br />
/// </para>
/// </remarks>
public static bool SpawnpointsIsSearchComplete()
{
return Function.Call<bool>((Hash)0xA586FBEB32A53DBB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF445DE8DA80A1792<br />
/// </para>
/// </remarks>
public static bool SpawnpointsIsSearchFailed()
{
return Function.Call<bool>((Hash)0xF445DE8DA80A1792);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA635C11B8C44AFC2<br />
/// </para>
/// </remarks>
public static int SpawnpointsGetNumSearchResults()
{
return Function.Call<int>((Hash)0xA635C11B8C44AFC2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x280C7E3AC7F56E90<br />
/// </para>
/// </remarks>
public static void SpawnpointsGetSearchResult(int randomInt, ref float x, ref float y, ref float z)
{
var nativeAssistPointerVar0 = x;
var nativeAssistPointerVar1 = y;
var nativeAssistPointerVar2 = z;
unsafe {
Function.Call((Hash)0x280C7E3AC7F56E90, randomInt, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
x = nativeAssistPointerVar0;
y = nativeAssistPointerVar1;
z = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB782F8238512BAD5<br />
/// </para>
/// </remarks>
public static void SpawnpointsGetSearchResultFlags(int p0, ref int p1)
{
var nativeAssistPointerVar0 = p1;
unsafe {
Function.Call((Hash)0xB782F8238512BAD5, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC32779C16FCEECD9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetIkTarget(int /* Ped */ ped, int ikIndex, int /* Entity */ entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, int /* bug: Any */ p7, int blendInDuration, int blendOutDuration)
{
Function.Call((Hash)0xC32779C16FCEECD9, ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED3C76ADFA6D07C4<br />
/// </para>
/// </remarks>
public static void ForceInstantLegIkSetup(int /* Ped */ ped)
{
Function.Call((Hash)0xED3C76ADFA6D07C4, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x290E2780BB7AA598<br />
/// </para>
/// </remarks>
public static void RequestActionModeAsset(string asset)
{
Function.Call((Hash)0x290E2780BB7AA598, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4B5F4BF2CB24E65<br />
/// </para>
/// </remarks>
public static bool HasActionModeAssetLoaded(string asset)
{
return Function.Call<bool>((Hash)0xE4B5F4BF2CB24E65, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13E940F88470FA51<br />
/// </para>
/// </remarks>
public static void RemoveActionModeAsset(string asset)
{
Function.Call((Hash)0x13E940F88470FA51, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A0A62FCDEE16D4F<br />
/// </para>
/// </remarks>
public static void RequestStealthModeAsset(string asset)
{
Function.Call((Hash)0x2A0A62FCDEE16D4F, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE977FC5B08AF3441<br />
/// </para>
/// </remarks>
public static bool HasStealthModeAssetLoaded(string asset)
{
return Function.Call<bool>((Hash)0xE977FC5B08AF3441, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9219857D21F0E842<br />
/// </para>
/// </remarks>
public static void RemoveStealthModeAsset(string asset)
{
Function.Call((Hash)0x9219857D21F0E842, asset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC2C5C242AAC342B<br />
/// </para>
/// </remarks>
public static void SetPedLodMultiplier(int /* Ped */ ped, float multiplier)
{
Function.Call((Hash)0xDC2C5C242AAC342B, ped, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE861D0B05C7662B8<br />
/// </para>
/// </remarks>
public static void SetPedCanLosePropsOnDamage(int /* Ped */ ped, bool toggle, int p2)
{
Function.Call((Hash)0xE861D0B05C7662B8, ped, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x129466ED55140F8D<br />
/// </para>
/// </remarks>
public static void SetForceFootstepUpdate(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x129466ED55140F8D, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB968B53FC7F916D<br />
/// </para>
/// </remarks>
public static void SetForceStepType(int /* Ped */ ped, bool p1, int type, int p3)
{
Function.Call((Hash)0xCB968B53FC7F916D, ped, p1, type, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68772DB2B2526F9F<br />
/// </para>
/// </remarks>
public static bool IsAnyHostilePedNearPoint(int /* Ped */ ped, float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0x68772DB2B2526F9F, ped, x, y, z, radius);
}

/// <summary>
/// Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x820E9892A77E97CD<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayInCarIdles(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x820E9892A77E97CD, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06087579E7AA85A9<br />
/// </para>
/// </remarks>
public static bool IsTargetPedInPerceptionArea(int /* Ped */ ped, int /* Ped */ targetPed, float p2, float p3, float p4, float p5)
{
return Function.Call<bool>((Hash)0x06087579E7AA85A9, ped, targetPed, p2, p3, p4, p5);
}

/// <summary>
/// Min and max are usually 100.0 and 200.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8C3BE3EE94CAF2D<br />
/// </para>
/// </remarks>
public static void SetPopControlSphereThisFrame(float x, float y, float z, float min, float max)
{
Function.Call((Hash)0xD8C3BE3EE94CAF2D, x, y, z, min, max);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD33DAA36272177C4<br />
/// </para>
/// </remarks>
public static void ForceZeroMassInCollisions(int /* Ped */ ped)
{
Function.Call((Hash)0xD33DAA36272177C4, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x711794453CFD692B<br />
/// </para>
/// </remarks>
public static void SetDisableHighFallDeath(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x711794453CFD692B, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83A169EABCDB10A2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedPhonePaletteIdx(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x83A169EABCDB10A2, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x288DF530C92DAD6F<br />
/// </para>
/// </remarks>
public static void SetPedSteerBias(int /* Ped */ ped, float value)
{
Function.Call((Hash)0x288DF530C92DAD6F, ped, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x3795688A307E1EB6<br />
/// </para>
/// </remarks>
public static bool IsPedSwitchingWeapon(int /* Ped */ Ped)
{
return Function.Call<bool>((Hash)0x3795688A307E1EB6, Ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x0F62619393661D6E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedTreatedAsFriendly(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x0F62619393661D6E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xDFE68C4B787E1BFB<br />
/// </para>
/// </remarks>
public static void SetDisablePedMapCollision(int /* Ped */ ped)
{
Function.Call((Hash)0xDFE68C4B787E1BFB, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xEE2476B9EE4A094F<br />
/// </para>
/// </remarks>
public static void EnableMpLight(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEE2476B9EE4A094F, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x88274C11CF0D866D<br />
/// </para>
/// </remarks>
public static bool GetMpLightEnabled(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x88274C11CF0D866D, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x637822DC2AFEEBF8<br />
/// </para>
/// </remarks>
public static void ClearCoverPointForPed(int /* Ped */ ped)
{
Function.Call((Hash)0x637822DC2AFEEBF8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xFAB944D4D481ACCB<br />
/// </para>
/// </remarks>
public static void SetAllowStuntJumpCamera(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xFAB944D4D481ACCB, ped, toggle);
}

#endregion
#region PHYSICS
/// <summary>
/// Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.<br />__<br /><br />Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)<br /><br />When attached, Position&lt;vector&gt; does not matter<br />When attached, Angle&lt;vector&gt; does not matter<br /><br />Rope Type:<br />4 and bellow is a thick rope<br />5 and up are small metal wires<br />0 crashes the game<br /><br />Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.<br /><br />windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.<br /><br />Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).<br /><br />breakable - Whether or not shooting the rope will break it.<br /><br />unkPtr - unknown ptr, always 0 in orig scripts<br />__<br /><br />Lengths can be calculated like so:<br /><br />float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length<br /><br /><br />NOTES:<br /><br />Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).<br /><br />Rope will sometimes contract and fall to the ground like you&apos;d expect it to, but since it doesn&apos;t interact with the world the effect is just jaring.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE832D760399EB220<br />
/// </para>
/// </remarks>
public static int AddRope(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float windingSpeed, bool p11, bool p12, bool rigid, float p14, bool breakWhenShot, int /* bug: structure */ unkPtr)
{
return Function.Call<int>((Hash)0xE832D760399EB220, x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, unkPtr);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52B4829281364649<br />
/// </para>
/// </remarks>
public static void DeleteRope(ref int ropeId)
{
var nativeAssistPointerVar0 = ropeId;
unsafe {
Function.Call((Hash)0x52B4829281364649, &nativeAssistPointerVar0);
}
ropeId = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA5D6B1888E4DB20<br />
/// </para>
/// </remarks>
public static void DeleteChildRope(int ropeId)
{
Function.Call((Hash)0xAA5D6B1888E4DB20, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD5448BE3111ED96<br />
/// </para>
/// </remarks>
public static bool DoesRopeExist(ref int ropeId)
{
var nativeAssistPointerVar0 = ropeId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xFD5448BE3111ED96, &nativeAssistPointerVar0);
}
ropeId = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xA1AE736541B0FCA3<br />
/// </para>
/// </remarks>
public static void RopeDrawEnabled(ref int ropeId, bool p1)
{
var nativeAssistPointerVar0 = ropeId;
unsafe {
Function.Call((Hash)0xA1AE736541B0FCA3, &nativeAssistPointerVar0, p1);
}
ropeId = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF159A63806BB5BA8<br />
/// </para>
/// </remarks>
public static void RopeDrawShadowEnabled(ref int ropeId, bool toggle)
{
var nativeAssistPointerVar0 = ropeId;
unsafe {
Function.Call((Hash)0xF159A63806BB5BA8, &nativeAssistPointerVar0, toggle);
}
ropeId = nativeAssistPointerVar0;
}

/// <summary>
/// Rope presets can be found in the gamefiles. One example is &quot;ropeFamily3&quot;, it is NOT a hash but rather a string.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBB203C04D1ABD27<br />
/// </para>
/// </remarks>
public static void LoadRopeData(int ropeId, string rope_preset)
{
Function.Call((Hash)0xCBB203C04D1ABD27, ropeId, rope_preset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B320CF14146B69A<br />
/// </para>
/// </remarks>
public static void PinRopeVertex(int ropeId, int vertex, float x, float y, float z)
{
Function.Call((Hash)0x2B320CF14146B69A, ropeId, vertex, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B5AE2EEE4A8F180<br />
/// </para>
/// </remarks>
public static void UnpinRopeVertex(int ropeId, int vertex)
{
Function.Call((Hash)0x4B5AE2EEE4A8F180, ropeId, vertex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3655F544CD30F0B5<br />
/// </para>
/// </remarks>
public static int GetRopeVertexCount(int ropeId)
{
return Function.Call<int>((Hash)0x3655F544CD30F0B5, ropeId);
}

/// <summary>
/// Attaches entity 1 to entity 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D95EC8B6D940AC3<br />
/// </para>
/// </remarks>
public static void AttachEntitiesToRope(int ropeId, int /* Entity */ ent1, int /* Entity */ ent2, float ent1_x, float ent1_y, float ent1_z, float ent2_x, float ent2_y, float ent2_z, float length, bool p10, bool p11, int /* bug: structure */ p12, int /* bug: structure */ p13)
{
Function.Call((Hash)0x3D95EC8B6D940AC3, ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, p12, p13);
}

/// <summary>
/// The position supplied can be anywhere, and the entity should anchor relative to that point from it&apos;s origin.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B490A6832559A65<br />
/// </para>
/// </remarks>
public static void AttachRopeToEntity(int ropeId, int /* Entity */ entity, float x, float y, float z, bool p5)
{
Function.Call((Hash)0x4B490A6832559A65, ropeId, entity, x, y, z, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCF3026912A8647D<br />
/// </para>
/// </remarks>
public static void DetachRopeFromEntity(int ropeId, int /* Entity */ entity)
{
Function.Call((Hash)0xBCF3026912A8647D, ropeId, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8D667EE52114ABA<br />
/// </para>
/// </remarks>
public static void RopeSetUpdatePinverts(int ropeId)
{
Function.Call((Hash)0xC8D667EE52114ABA, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC57A637A20006ED<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RopeSetUpdateOrder(int ropeId, int /* bug: Any */ p1)
{
Function.Call((Hash)0xDC57A637A20006ED, ropeId, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36CCB9BE67B970FD<br />
/// </para>
/// </remarks>
public static void RopeSetSmoothReelin(int ropeId, bool p1)
{
Function.Call((Hash)0x36CCB9BE67B970FD, ropeId, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84DE3B5FB3E666F0<br />
/// </para>
/// </remarks>
public static bool IsRopeAttachedAtBothEnds(ref int ropeId)
{
var nativeAssistPointerVar0 = ropeId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x84DE3B5FB3E666F0, &nativeAssistPointerVar0);
}
ropeId = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21BB0FBD3E217C2D<br />
/// </para>
/// </remarks>
public static Vector3 GetRopeLastVertexCoord(int ropeId)
{
return Function.Call<Vector3>((Hash)0x21BB0FBD3E217C2D, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA61CA8E80F09E4D<br />
/// </para>
/// </remarks>
public static Vector3 GetRopeVertexCoord(int ropeId, int vertex)
{
return Function.Call<Vector3>((Hash)0xEA61CA8E80F09E4D, ropeId, vertex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1461C72C889E343E<br />
/// </para>
/// </remarks>
public static void StartRopeWinding(int ropeId)
{
Function.Call((Hash)0x1461C72C889E343E, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB2D4AB84A19AA7C<br />
/// </para>
/// </remarks>
public static void StopRopeWinding(int ropeId)
{
Function.Call((Hash)0xCB2D4AB84A19AA7C, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x538D1179EC1AA9A9<br />
/// </para>
/// </remarks>
public static void StartRopeUnwindingFront(int ropeId)
{
Function.Call((Hash)0x538D1179EC1AA9A9, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFF3A50779EFBBB3<br />
/// </para>
/// </remarks>
public static void StopRopeUnwindingFront(int ropeId)
{
Function.Call((Hash)0xFFF3A50779EFBBB3, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5389D48EFA2F079A<br />
/// </para>
/// </remarks>
public static void RopeConvertToSimple(int ropeId)
{
Function.Call((Hash)0x5389D48EFA2F079A, ropeId);
}

/// <summary>
/// Loads rope textures for all ropes in the current scene.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B9039DBF2D258C1<br />
/// </para>
/// </remarks>
public static void RopeLoadTextures()
{
Function.Call((Hash)0x9B9039DBF2D258C1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2D0E6A75CC05597<br />
/// </para>
/// </remarks>
public static bool RopeAreTexturesLoaded()
{
return Function.Call<bool>((Hash)0xF2D0E6A75CC05597);
}

/// <summary>
/// Unloads rope textures for all ropes in the current scene.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6CE36C35C1AC8163<br />
/// </para>
/// </remarks>
public static void RopeUnloadTextures()
{
Function.Call((Hash)0x6CE36C35C1AC8163);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x271C9D3ACA5D6409<br />
/// </para>
/// </remarks>
public static bool DoesScriptOwnRope(int ropeId)
{
return Function.Call<bool>((Hash)0x271C9D3ACA5D6409, ropeId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC0CE682D4D05650<br />
/// </para>
/// </remarks>
public static void RopeAttachVirtualBoundGeom(int ropeId, int p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13)
{
Function.Call((Hash)0xBC0CE682D4D05650, ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1B6216CA2E7B55E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RopeChangeScriptOwner(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0xB1B6216CA2E7B55E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB743F735C03D7810<br />
/// </para>
/// </remarks>
public static void RopeSetRefframevelocityColliderorder(int ropeId, int p1)
{
Function.Call((Hash)0xB743F735C03D7810, ropeId, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x73040398DFF9A4A6<br />
/// </para>
/// </remarks>
public static float RopeGetDistanceBetweenEnds(int ropeId)
{
return Function.Call<float>((Hash)0x73040398DFF9A4A6, ropeId);
}

/// <summary>
/// Forces a rope to a certain length.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD009F759A723DB1B<br />
/// </para>
/// </remarks>
public static void RopeForceLength(int ropeId, float length)
{
Function.Call((Hash)0xD009F759A723DB1B, ropeId, length);
}

/// <summary>
/// Reset a rope to a certain length.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC16DE94D9BEA14A0<br />
/// </para>
/// </remarks>
public static void RopeResetLength(int ropeId, float length)
{
Function.Call((Hash)0xC16DE94D9BEA14A0, ropeId, length);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE37F721824571784<br />
/// </para>
/// </remarks>
public static void ApplyImpulseToCloth(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, float impulse)
{
Function.Call((Hash)0xE37F721824571784, posX, posY, posZ, vecX, vecY, vecZ, impulse);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEA3B200A6FEB65B<br />
/// </para>
/// </remarks>
public static void SetDamping(int /* Entity */ entity, int vertex, float value)
{
Function.Call((Hash)0xEEA3B200A6FEB65B, entity, vertex, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x710311ADF0E20730<br />
/// </para>
/// </remarks>
public static void ActivatePhysics(int /* Entity */ entity)
{
Function.Call((Hash)0x710311ADF0E20730, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8FA3908D7B86904<br />
/// </para>
/// </remarks>
public static void SetCgoffset(int /* Entity */ entity, float x, float y, float z)
{
Function.Call((Hash)0xD8FA3908D7B86904, entity, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8214A4B5A7A33612<br />
/// </para>
/// </remarks>
public static Vector3 GetCgoffset(int /* Entity */ entity)
{
return Function.Call<Vector3>((Hash)0x8214A4B5A7A33612, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE520D9761FF811F<br />
/// </para>
/// </remarks>
public static void SetCgAtBoundcenter(int /* Entity */ entity)
{
Function.Call((Hash)0xBE520D9761FF811F, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E648D16F6E308F3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void BreakEntityGlass(int /* Entity */ entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, int /* bug: Any */ p9, bool p10)
{
Function.Call((Hash)0x2E648D16F6E308F3, entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x0C112765300C7E1E<br />
/// </para>
/// </remarks>
public static bool GetIsEntityAFrag(int /* Object */ @object)
{
return Function.Call<bool>((Hash)0x0C112765300C7E1E, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CEC1A84620E7D5B<br />
/// </para>
/// </remarks>
public static void SetDisableBreaking(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x5CEC1A84620E7D5B, @object, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC6E963682533882<br />
/// </para>
/// </remarks>
public static void ResetDisableBreaking(int /* Object */ @object)
{
Function.Call((Hash)0xCC6E963682533882, @object);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01BA3AED21C16CFB<br />
/// </para>
/// </remarks>
public static void SetDisableFragDamage(int /* Object */ @object, bool toggle)
{
Function.Call((Hash)0x01BA3AED21C16CFB, @object, toggle);
}

/// <summary>
/// PED_RAGDOLL_BUMP Proof?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x15F944730C832252<br />
/// </para>
/// </remarks>
public static void SetUseKinematicPhysics(int /* Entity */ entity, bool toggle)
{
Function.Call((Hash)0x15F944730C832252, entity, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x9EBD751E5787BAF2<br />
/// </para>
/// </remarks>
public static void SetInStuntMode(bool p0)
{
Function.Call((Hash)0x9EBD751E5787BAF2, p0);
}

/// <summary>
/// Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xAA6A6098851C396F<br />
/// </para>
/// </remarks>
public static void SetInArenaMode(bool toggle)
{
Function.Call((Hash)0xAA6A6098851C396F, toggle);
}

#endregion
#region PLAYER
/// <summary>
/// Gets the ped for a specified player index.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43A66C31C68491C0<br />
/// </para>
/// </remarks>
public static int GetPlayerPed(int /* Player */ player)
{
return Function.Call<int>((Hash)0x43A66C31C68491C0, player);
}

/// <summary>
/// Does the same like PLAYER::GET_PLAYER_PED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50FAC3A3E030A6E1<br />
/// </para>
/// </remarks>
public static int GetPlayerPedScriptIndex(int /* Player */ player)
{
return Function.Call<int>((Hash)0x50FAC3A3E030A6E1, player);
}

/// <summary>
/// Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset<br />Make sure to request the model first and wait until it has loaded.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00A1CADD00108836<br />
/// </para>
/// </remarks>
public static void SetPlayerModel(int /* Player */ player, uint model)
{
Function.Call((Hash)0x00A1CADD00108836, player, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x048189FAC643DEEE<br />
/// </para>
/// </remarks>
public static void ChangePlayerPed(int /* Player */ player, int /* Ped */ ped, bool p2, bool resetDamage)
{
Function.Call((Hash)0x048189FAC643DEEE, player, ped, p2, resetDamage);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE902EF951DCE178F<br />
/// </para>
/// </remarks>
public static void GetPlayerRgbColour(int /* Player */ player, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0xE902EF951DCE178F, player, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// Gets the number of players in the current session.<br />If not multiplayer, always returns 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x407C7F91DDB46C16<br />
/// </para>
/// </remarks>
public static int GetNumberOfPlayers()
{
return Function.Call<int>((Hash)0x407C7F91DDB46C16);
}

/// <summary>
/// Gets the player&apos;s team.<br />Does nothing in singleplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37039302F4E0A008<br />
/// </para>
/// </remarks>
public static int GetPlayerTeam(int /* Player */ player)
{
return Function.Call<int>((Hash)0x37039302F4E0A008, player);
}

/// <summary>
/// Set player team on deathmatch and last team standing..
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0299FA38396A4940<br />
/// </para>
/// </remarks>
public static void SetPlayerTeam(int /* Player */ player, int team)
{
Function.Call((Hash)0x0299FA38396A4940, player, team);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x1FC200409F10E6F1<br />
/// </para>
/// </remarks>
public static int GetNumberOfPlayersInTeam(int team)
{
return Function.Call<int>((Hash)0x1FC200409F10E6F1, team);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D0DE6A7B5DA71F8<br />
/// </para>
/// </remarks>
public static string GetPlayerName(int /* Player */ player)
{
return Function.Call<string>((Hash)0x6D0DE6A7B5DA71F8, player);
}

/// <summary>
/// Remnant from GTA IV. Does nothing in GTA V.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x085DEB493BE80812<br />
/// </para>
/// </remarks>
public static float GetWantedLevelRadius(int /* Player */ player)
{
return Function.Call<float>((Hash)0x085DEB493BE80812, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C92BA89F1AF26F8<br />
/// </para>
/// </remarks>
public static Vector3 GetPlayerWantedCentrePosition(int /* Player */ player)
{
return Function.Call<Vector3>((Hash)0x0C92BA89F1AF26F8, player);
}

/// <summary>
/// # Predominant call signatures<br />PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));<br /><br /># Parameter value ranges<br />P0: PLAYER::PLAYER_ID()<br />P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)<br />P2: Not set by any call
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x520E541A97A13354<br />
/// </para>
/// </remarks>
public static void SetPlayerWantedCentrePosition(int /* Player */ player, ref Vector3 position, bool p2, bool p3)
{
var nativeAssistPointerVar0 = position;
unsafe {
Function.Call((Hash)0x520E541A97A13354, player, &nativeAssistPointerVar0, p2, p3);
}
position = nativeAssistPointerVar0;
}

/// <summary>
/// Drft
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDD179EAF45B556C<br />
/// </para>
/// </remarks>
public static int GetWantedLevelThreshold(int wantedLevel)
{
return Function.Call<int>((Hash)0xFDD179EAF45B556C, wantedLevel);
}

/// <summary>
/// Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect<br /><br />wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files<br /><br />disableNoMission-  Disables When Off Mission- appears to always be false<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39FF19C64EF7DA5B<br />
/// </para>
/// </remarks>
public static void SetPlayerWantedLevel(int /* Player */ player, int wantedLevel, bool disableNoMission)
{
Function.Call((Hash)0x39FF19C64EF7DA5B, player, wantedLevel, disableNoMission);
}

/// <summary>
/// p2 is always false in R* scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x340E61DE7F471565<br />
/// </para>
/// </remarks>
public static void SetPlayerWantedLevelNoDrop(int /* Player */ player, int wantedLevel, bool p2)
{
Function.Call((Hash)0x340E61DE7F471565, player, wantedLevel, p2);
}

/// <summary>
/// Forces any pending wanted level to be applied to the specified player immediately.<br /><br />Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.<br /><br />Second parameter is unknown (always false).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0A7D1E497FFCD6F<br />
/// </para>
/// </remarks>
public static void SetPlayerWantedLevelNow(int /* Player */ player, bool p1)
{
Function.Call((Hash)0xE0A7D1E497FFCD6F, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFAF86043E5874E9<br />
/// </para>
/// </remarks>
public static bool ArePlayerFlashingStarsAboutToDrop(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xAFAF86043E5874E9, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A6EB355EE14A2DB<br />
/// </para>
/// </remarks>
public static bool ArePlayerStarsGreyedOut(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x0A6EB355EE14A2DB, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x7E07C78925D5FD96<br />
/// </para>
/// </remarks>
public static bool IsWantedAndHasBeenSeenByCops(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x7E07C78925D5FD96, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB172424876553F4<br />
/// </para>
/// </remarks>
public static void SetDispatchCopsForPlayer(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xDB172424876553F4, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x238DB2A2C23EE9EF<br />
/// </para>
/// </remarks>
public static bool IsPlayerWantedLevelGreater(int /* Player */ player, int wantedLevel)
{
return Function.Call<bool>((Hash)0x238DB2A2C23EE9EF, player, wantedLevel);
}

/// <summary>
/// This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);<br /><br />PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it&apos;s worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB302540597885499<br />
/// </para>
/// </remarks>
public static void ClearPlayerWantedLevel(int /* Player */ player)
{
Function.Call((Hash)0xB302540597885499, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x424D4687FA1E5652<br />
/// </para>
/// </remarks>
public static bool IsPlayerDead(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x424D4687FA1E5652, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA1E2BF8B10598F9<br />
/// </para>
/// </remarks>
public static bool IsPlayerPressingHorn(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xFA1E2BF8B10598F9, player);
}

/// <summary>
/// Flags:<br />SPC_AMBIENT_SCRIPT = (1 &lt;&lt; 1),<br />SPC_CLEAR_TASKS = (1 &lt;&lt; 2),<br />SPC_REMOVE_FIRES = (1 &lt;&lt; 3),<br />SPC_REMOVE_EXPLOSIONS = (1 &lt;&lt; 4),<br />SPC_REMOVE_PROJECTILES = (1 &lt;&lt; 5),<br />SPC_DEACTIVATE_GADGETS = (1 &lt;&lt; 6),<br />SPC_REENABLE_CONTROL_ON_DEATH = (1 &lt;&lt; 7),<br />SPC_LEAVE_CAMERA_CONTROL_ON = (1 &lt;&lt; 8),<br />SPC_ALLOW_PLAYER_DAMAGE = (1 &lt;&lt; 9),<br />SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 &lt;&lt; 10),<br />SPC_PREVENT_EVERYBODY_BACKOFF = (1 &lt;&lt; 11),<br />SPC_ALLOW_PAD_SHAKE = (1 &lt;&lt; 12)<br /><br />See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D32347D6D4C40A2<br />
/// </para>
/// </remarks>
public static void SetPlayerControl(int /* Player */ player, bool bHasControl, int flags)
{
Function.Call((Hash)0x8D32347D6D4C40A2, player, bHasControl, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE28E54788CE8F12D<br />
/// </para>
/// </remarks>
public static int GetPlayerWantedLevel(int /* Player */ player)
{
return Function.Call<int>((Hash)0xE28E54788CE8F12D, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA5F02DB48D704B9<br />
/// </para>
/// </remarks>
public static void SetMaxWantedLevel(int maxWantedLevel)
{
Function.Call((Hash)0xAA5F02DB48D704B9, maxWantedLevel);
}

/// <summary>
/// If toggle is set to false:<br /> The police won&apos;t be shown on the (mini)map<br /><br />If toggle is set to true:<br /> The police will be shown on the (mini)map
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43286D561B72B8BF<br />
/// </para>
/// </remarks>
public static void SetPoliceRadarBlips(bool toggle)
{
Function.Call((Hash)0x43286D561B72B8BF, toggle);
}

/// <summary>
/// The player will be ignored by the police if toggle is set to true
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x32C62AA929C2DA6A<br />
/// </para>
/// </remarks>
public static void SetPoliceIgnorePlayer(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x32C62AA929C2DA6A, player, toggle);
}

/// <summary>
/// Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E9564D8246B909A<br />
/// </para>
/// </remarks>
public static bool IsPlayerPlaying(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x5E9564D8246B909A, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EEDA153AD141BA4<br />
/// </para>
/// </remarks>
public static void SetEveryoneIgnorePlayer(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x8EEDA153AD141BA4, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x056E0FE8534C2949<br />
/// </para>
/// </remarks>
public static void SetAllRandomPedsFlee(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x056E0FE8534C2949, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x471D2FF42A94B4F2<br />
/// </para>
/// </remarks>
public static void SetAllRandomPedsFleeThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x471D2FF42A94B4F2, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE45D1A1EF45EE61<br />
/// </para>
/// </remarks>
public static void SetAllNeutralRandomPedsFlee(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xDE45D1A1EF45EE61, player, toggle);
}

/// <summary>
/// - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3376F42B1FACCC6<br />
/// </para>
/// </remarks>
public static void SetAllNeutralRandomPedsFleeThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xC3376F42B1FACCC6, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xFAC75988A7D078D3<br />
/// </para>
/// </remarks>
public static void SetLawPedsCanAttackNonWantedPlayerThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xFAC75988A7D078D3, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x596976B02B6B5700<br />
/// </para>
/// </remarks>
public static void SetIgnoreLowPriorityShockingEvents(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x596976B02B6B5700, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x020E5F00CDA207BA<br />
/// </para>
/// </remarks>
public static void SetWantedLevelMultiplier(float multiplier)
{
Function.Call((Hash)0x020E5F00CDA207BA, multiplier);
}

/// <summary>
/// Max value is 1.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B0BB33B04405E7A<br />
/// </para>
/// </remarks>
public static void SetWantedLevelDifficulty(int /* Player */ player, float difficulty)
{
Function.Call((Hash)0x9B0BB33B04405E7A, player, difficulty);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9D0DD990DC141DD<br />
/// </para>
/// </remarks>
public static void ResetWantedLevelDifficulty(int /* Player */ player)
{
Function.Call((Hash)0xB9D0DD990DC141DD, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xA72200F51875FEA4<br />
/// </para>
/// </remarks>
public static int GetWantedLevelTimeToEscape()
{
return Function.Call<int>((Hash)0xA72200F51875FEA4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x49B856B1360C47C7<br />
/// </para>
/// </remarks>
public static void SetWantedLevelHiddenEscapeTime(int /* Player */ player, int wantedLevel, int lossTime)
{
Function.Call((Hash)0x49B856B1360C47C7, player, wantedLevel, lossTime);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x823EC8E82BA45986<br />
/// </para>
/// </remarks>
public static void ResetWantedLevelHiddenEscapeTime(int /* Player */ player)
{
Function.Call((Hash)0x823EC8E82BA45986, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF9BD71691857E48<br />
/// </para>
/// </remarks>
public static void StartFiringAmnesty(int duration)
{
Function.Call((Hash)0xBF9BD71691857E48, duration);
}

/// <summary>
/// PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));<br /><br />From am_armybase.ysc.c4:<br /><br />PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));<br /><br />-----<br /><br />This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7 <br /><br />-----<br />crimeType:<br />1: Firearms possession<br />2: Person running a red light (&quot;5-0-5&quot;)<br />3: Reckless driver<br />4: Speeding vehicle (a &quot;5-10&quot;)<br />5: Traffic violation (a &quot;5-0-5&quot;)<br />6: Motorcycle rider without a helmet<br />7: Vehicle theft (a &quot;5-0-3&quot;)<br />8: Grand Theft Auto<br />9: ???<br />10: ???<br />11: Assault on a civilian (a &quot;2-40&quot;)<br />12: Assault on an officer<br />13: Assault with a deadly weapon (a &quot;2-45&quot;)<br />14: Officer shot (a &quot;2-45&quot;)<br />15: Pedestrian struck by a vehicle<br />16: Officer struck by a vehicle<br />17: Helicopter down (an &quot;AC&quot;?)<br />18: Civilian on fire (a &quot;2-40&quot;)<br />19: Officer set on fire (a &quot;10-99&quot;)<br />20: Car on fire<br />21: Air unit down (an &quot;AC&quot;?)<br />22: An explosion (a &quot;9-96&quot;)<br />23: A stabbing (a &quot;2-45&quot;) (also something else I couldn&apos;t understand)<br />24: Officer stabbed (also something else I couldn&apos;t understand)<br />25: Attack on a vehicle (&quot;MDV&quot;?)<br />26: Damage to property<br />27: Suspect threatening officer with a firearm<br />28: Shots fired<br />29: ???<br />30: ???<br />31: ???<br />32: ???<br />33: ???<br />34: A &quot;2-45&quot;<br />35: ???<br />36: A &quot;9-25&quot;<br />37: ???<br />38: ???<br />39: ???<br />40: ???<br />41: ???<br />42: ???<br />43: Possible disturbance<br />44: Civilian in need of assistance<br />45: ???<br />46: ???
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE9B09589827545E7<br />
/// </para>
/// </remarks>
public static void ReportCrime(int /* Player */ player, int crimeType, int wantedLvlThresh)
{
Function.Call((Hash)0xE9B09589827545E7, player, crimeType, wantedLvlThresh);
}

/// <summary>
/// crimeType: see REPORT_CRIME
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A987297ED8BD838<br />
/// </para>
/// </remarks>
public static void SuppressCrimeThisFrame(int /* Player */ player, int crimeType)
{
Function.Call((Hash)0x9A987297ED8BD838, player, crimeType);
}

/// <summary>
/// This native is used in both singleplayer and multiplayer scripts.<br /><br />Always used like this in scripts<br />PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC9490CA15AEA8FB<br />
/// </para>
/// </remarks>
public static void UpdateWantedPositionThisFrame(int /* Player */ player)
{
Function.Call((Hash)0xBC9490CA15AEA8FB, player);
}

/// <summary>
/// This has been found in use in the decompiled files.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4669B3ED80F24B4E<br />
/// </para>
/// </remarks>
public static void SuppressLosingWantedLevelIfHiddenThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x4669B3ED80F24B4E, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x2F41A3BAE005E5FA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AllowEvasionHudIfDisablingHiddenEvasionThisFrame(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0x2F41A3BAE005E5FA, player, p1);
}

/// <summary>
/// This has been found in use in the decompiled files.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD73CE5A09E42D12<br />
/// </para>
/// </remarks>
public static void ForceStartHiddenEvasion(int /* Player */ player)
{
Function.Call((Hash)0xAD73CE5A09E42D12, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36F1B38855F2A8DF<br />
/// </para>
/// </remarks>
public static void SuppressWitnessesCallingPoliceThisFrame(int /* Player */ player)
{
Function.Call((Hash)0x36F1B38855F2A8DF, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC64D2C53493ED12<br />
/// </para>
/// </remarks>
public static void ReportPoliceSpottedPlayer(int /* Player */ player)
{
Function.Call((Hash)0xDC64D2C53493ED12, player);
}

/// <summary>
/// PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&amp;l_122) + 71)); // Found in decompilation<br /><br />***<br /><br />In &quot;am_hold_up.ysc&quot; used once:<br /><br />l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);<br />PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB45EFF719D8427A6<br />
/// </para>
/// </remarks>
public static void SetLawResponseDelayOverride(float p0)
{
Function.Call((Hash)0xB45EFF719D8427A6, p0);
}

/// <summary>
/// 2 matches in 1 script - am_hold_up<br /><br />Used in multiplayer scripts?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0032A6DBA562C518<br />
/// </para>
/// </remarks>
public static void ResetLawResponseDelayOverride()
{
Function.Call((Hash)0x0032A6DBA562C518);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE7465A27D403C06<br />
/// </para>
/// </remarks>
public static bool CanPlayerStartMission(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xDE7465A27D403C06, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x908CBECC2CAA3690<br />
/// </para>
/// </remarks>
public static bool IsPlayerReadyForCutscene(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x908CBECC2CAA3690, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7912F7FC4F6264B6<br />
/// </para>
/// </remarks>
public static bool IsPlayerTargettingEntity(int /* Player */ player, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x7912F7FC4F6264B6, player, entity);
}

/// <summary>
/// Assigns the handle of locked-on melee target to *entity that you pass it.<br />Returns false if no entity found.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13EDE1A5DBF797C9<br />
/// </para>
/// </remarks>
public static bool GetPlayerTargetEntity(int /* Player */ player, ref int /* Entity* */ entity)
{
var nativeAssistPointerVar0 = entity;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x13EDE1A5DBF797C9, player, &nativeAssistPointerVar0);
}
entity = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Gets a value indicating whether the specified player is currently aiming freely.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E397FD2ECD37C87<br />
/// </para>
/// </remarks>
public static bool IsPlayerFreeAiming(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x2E397FD2ECD37C87, player);
}

/// <summary>
/// Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C06B5C839B38F7B<br />
/// </para>
/// </remarks>
public static bool IsPlayerFreeAimingAtEntity(int /* Player */ player, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x3C06B5C839B38F7B, player, entity);
}

/// <summary>
/// Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.<br />Returns false if no entity found.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2975C866E6713290<br />
/// </para>
/// </remarks>
public static bool GetEntityPlayerIsFreeAimingAt(int /* Player */ player, ref int /* Entity* */ entity)
{
var nativeAssistPointerVar0 = entity;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2975C866E6713290, player, &nativeAssistPointerVar0);
}
entity = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Affects the range of auto aim target.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29961D490E5814FD<br />
/// </para>
/// </remarks>
public static void SetPlayerLockonRangeOverride(int /* Player */ player, float range)
{
Function.Call((Hash)0x29961D490E5814FD, player, range);
}

/// <summary>
/// Set whether this player should be able to do drive-bys.<br /><br />&quot;A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick.&quot;<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E8834B52EC20C77<br />
/// </para>
/// </remarks>
public static void SetPlayerCanDoDriveBy(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x6E8834B52EC20C77, player, toggle);
}

/// <summary>
/// Sets whether this player can be hassled by gangs.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5E460AD7020A246<br />
/// </para>
/// </remarks>
public static void SetPlayerCanBeHassledByGangs(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xD5E460AD7020A246, player, toggle);
}

/// <summary>
/// Sets whether this player can take cover.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD465A8599DFF6814<br />
/// </para>
/// </remarks>
public static void SetPlayerCanUseCover(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xD465A8599DFF6814, player, toggle);
}

/// <summary>
/// Gets the maximum wanted level the player can get.<br />Ranges from 0 to 5.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x462E0DB9B137DC5F<br />
/// </para>
/// </remarks>
public static int GetMaxWantedLevel()
{
return Function.Call<int>((Hash)0x462E0DB9B137DC5F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78CFE51896B6B8A4<br />
/// </para>
/// </remarks>
public static bool IsPlayerTargettingAnything(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x78CFE51896B6B8A4, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA01B8075D8B92DF4<br />
/// </para>
/// </remarks>
public static void SetPlayerSprint(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xA01B8075D8B92DF4, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6F312FCCE9C1DFE<br />
/// </para>
/// </remarks>
public static void ResetPlayerStamina(int /* Player */ player)
{
Function.Call((Hash)0xA6F312FCCE9C1DFE, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA352C1B864CAFD33<br />
/// </para>
/// </remarks>
public static void RestorePlayerStamina(int /* Player */ player, float p1)
{
Function.Call((Hash)0xA352C1B864CAFD33, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F9F16F8E65A7ED7<br />
/// </para>
/// </remarks>
public static float GetPlayerSprintStaminaRemaining(int /* Player */ player)
{
return Function.Call<float>((Hash)0x3F9F16F8E65A7ED7, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1885BC9B108B4C99<br />
/// </para>
/// </remarks>
public static float GetPlayerSprintTimeRemaining(int /* Player */ player)
{
return Function.Call<float>((Hash)0x1885BC9B108B4C99, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1FCF8E6AF40B731<br />
/// </para>
/// </remarks>
public static float GetPlayerUnderwaterTimeRemaining(int /* Player */ player)
{
return Function.Call<float>((Hash)0xA1FCF8E6AF40B731, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xA0D3E4F7AAFB7E78<br />
/// </para>
/// </remarks>
public static float SetPlayerUnderwaterBreathPercentRemaining(int /* Player */ player, float time)
{
return Function.Call<float>((Hash)0xA0D3E4F7AAFB7E78, player, time);
}

/// <summary>
/// Returns the group ID the player is member of.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D127585F77030AF<br />
/// </para>
/// </remarks>
public static int GetPlayerGroup(int /* Player */ player)
{
return Function.Call<int>((Hash)0x0D127585F77030AF, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92659B4CE1863CB3<br />
/// </para>
/// </remarks>
public static int GetPlayerMaxArmour(int /* Player */ player)
{
return Function.Call<int>((Hash)0x92659B4CE1863CB3, player);
}

/// <summary>
/// Can the player control himself, used to disable controls for player for things like a cutscene.<br /><br />---<br /><br />You can&apos;t disable controls with this, use SET_PLAYER_CONTROL(...) for this. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49C32D60007AFA47<br />
/// </para>
/// </remarks>
public static bool IsPlayerControlOn(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x49C32D60007AFA47, player);
}

/// <summary>
/// Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.<br /><br />Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C814D2FB49F40C0<br />
/// </para>
/// </remarks>
public static bool GetAreCameraControlsDisabled()
{
return Function.Call<bool>((Hash)0x7C814D2FB49F40C0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A876A65283DD7D7<br />
/// </para>
/// </remarks>
public static bool IsPlayerScriptControlOn(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x8A876A65283DD7D7, player);
}

/// <summary>
/// Returns TRUE if the player (&apos;s ped) is climbing at the moment.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95E8F73DC65EFB9C<br />
/// </para>
/// </remarks>
public static bool IsPlayerClimbing(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x95E8F73DC65EFB9C, player);
}

/// <summary>
/// Return true while player is being arrested / busted.<br /><br />If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)<br /><br />If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x388A47C51ABDAC8E<br />
/// </para>
/// </remarks>
public static bool IsPlayerBeingArrested(int /* Player */ player, bool atArresting)
{
return Function.Call<bool>((Hash)0x388A47C51ABDAC8E, player, atArresting);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D03E13C460760D6<br />
/// </para>
/// </remarks>
public static void ResetPlayerArrestState(int /* Player */ player)
{
Function.Call((Hash)0x2D03E13C460760D6, player);
}

/// <summary>
/// Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6997A7EB3F5C8C0<br />
/// </para>
/// </remarks>
public static int GetPlayersLastVehicle()
{
return Function.Call<int>((Hash)0xB6997A7EB3F5C8C0);
}

/// <summary>
/// Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5EDC40EF369B48D<br />
/// </para>
/// </remarks>
public static Player GetPlayerIndex()
{
return Function.Call<Player>((Hash)0xA5EDC40EF369B48D);
}

/// <summary>
/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41BD2A6B006AF756<br />
/// </para>
/// </remarks>
public static Player IntToPlayerindex(int value)
{
return Function.Call<Player>((Hash)0x41BD2A6B006AF756, value);
}

/// <summary>
/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).<br />--------------------------------------------------------<br />if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9EC6603812C24710<br />
/// </para>
/// </remarks>
public static int IntToParticipantindex(int value)
{
return Function.Call<int>((Hash)0x9EC6603812C24710, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D35ECF3A81A0EE0<br />
/// </para>
/// </remarks>
public static int GetTimeSincePlayerHitVehicle(int /* Player */ player)
{
return Function.Call<int>((Hash)0x5D35ECF3A81A0EE0, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE36A25322DC35F42<br />
/// </para>
/// </remarks>
public static int GetTimeSincePlayerHitPed(int /* Player */ player)
{
return Function.Call<int>((Hash)0xE36A25322DC35F42, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD559D2BE9E37853B<br />
/// </para>
/// </remarks>
public static int GetTimeSincePlayerDroveOnPavement(int /* Player */ player)
{
return Function.Call<int>((Hash)0xD559D2BE9E37853B, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB89591E290D9182<br />
/// </para>
/// </remarks>
public static int GetTimeSincePlayerDroveAgainstTraffic(int /* Player */ player)
{
return Function.Call<int>((Hash)0xDB89591E290D9182, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCCFD3F106C36AB4<br />
/// </para>
/// </remarks>
public static bool IsPlayerFreeForAmbientTask(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xDCCFD3F106C36AB4, player);
}

/// <summary>
/// This returns YOUR &apos;identity&apos; as a Player type.<br /><br />Always returns 0 in story mode.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F8644AF03D0E0D6<br />
/// </para>
/// </remarks>
public static Player PlayerId()
{
return Function.Call<Player>((Hash)0x4F8644AF03D0E0D6);
}

/// <summary>
/// Returns current player ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD80958FC74E988A6<br />
/// </para>
/// </remarks>
public static int PlayerPedId()
{
return Function.Call<int>((Hash)0xD80958FC74E988A6);
}

/// <summary>
/// Does exactly the same thing as PLAYER_ID()
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE68096F9F37341E<br />
/// </para>
/// </remarks>
public static int NetworkPlayerIdToInt()
{
return Function.Call<int>((Hash)0xEE68096F9F37341E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC968670BFACE42D9<br />
/// </para>
/// </remarks>
public static bool HasForceCleanupOccurred(int cleanupFlags)
{
return Function.Call<bool>((Hash)0xC968670BFACE42D9, cleanupFlags);
}

/// <summary>
/// used with 1,2,8,64,128 in the scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC8983F38F78ED51<br />
/// </para>
/// </remarks>
public static void ForceCleanup(int cleanupFlags)
{
Function.Call((Hash)0xBC8983F38F78ED51, cleanupFlags);
}

/// <summary>
/// PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(&quot;pb_prostitute&quot;, 1); // Found in decompilation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C68DDDDF0097317<br />
/// </para>
/// </remarks>
public static void ForceCleanupForAllThreadsWithThisName(string name, int cleanupFlags)
{
Function.Call((Hash)0x4C68DDDDF0097317, name, cleanupFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF745B37630DF176B<br />
/// </para>
/// </remarks>
public static void ForceCleanupForThreadWithThisId(int id, int cleanupFlags)
{
Function.Call((Hash)0xF745B37630DF176B, id, cleanupFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A41CF4674A12272<br />
/// </para>
/// </remarks>
public static int GetCauseOfMostRecentForceCleanup()
{
return Function.Call<int>((Hash)0x9A41CF4674A12272);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8026FF78F208978A<br />
/// </para>
/// </remarks>
public static void SetPlayerMayOnlyEnterThisVehicle(int /* Player */ player, int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x8026FF78F208978A, player, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DE37BBF9E9CC14A<br />
/// </para>
/// </remarks>
public static void SetPlayerMayNotEnterAnyVehicle(int /* Player */ player)
{
Function.Call((Hash)0x1DE37BBF9E9CC14A, player);
}

/// <summary>
/// 1 - Welcome to Los Santos<br />2 - A Friendship Resurrected<br />3 - A Fair Day&apos;s Pay<br />4 - The Moment of Truth<br />5 - To Live or Die in Los Santos<br />6 - Diamond Hard<br />7 - Subversive<br />8 - Blitzed<br />9 - Small Town, Big Job<br />10 - The Government Gimps<br />11 - The Big One!<br />12 - Solid Gold, Baby!<br />13 - Career Criminal<br />14 - San Andreas Sightseer<br />15 - All&apos;s Fare in Love and War<br />16 - TP Industries Arms Race<br />17 - Multi-Disciplined<br />18 - From Beyond the Stars<br />19 - A Mystery, Solved<br />20 - Waste Management<br />21 - Red Mist<br />22 - Show Off<br />23 - Kifflom!<br />24 - Three Man Army<br />25 - Out of Your Depth<br />26 - Altruist Acolyte<br />27 - A Lot of Cheddar<br />28 - Trading Pure Alpha<br />29 - Pimp My Sidearm<br />30 - Wanted: Alive Or Alive<br />31 - Los Santos Customs<br />32 - Close Shave<br />33 - Off the Plane<br />34 - Three-Bit Gangster<br />35 - Making Moves<br />36 - Above the Law<br />37 - Numero Uno<br />38 - The Midnight Club<br />39 - Unnatural Selection<br />40 - Backseat Driver<br />41 - Run Like The Wind<br />42 - Clean Sweep<br />43 - Decorated<br />44 - Stick Up Kid<br />45 - Enjoy Your Stay<br />46 - Crew Cut<br />47 - Full Refund<br />48 - Dialling Digits<br />49 - American Dream<br />50 - A New Perspective<br />51 - Be Prepared<br />52 - In the Name of Science<br />53 - Dead Presidents<br />54 - Parole Day<br />55 - Shot Caller<br />56 - Four Way<br />57 - Live a Little<br />58 - Can&apos;t Touch This<br />59 - Mastermind<br />60 - Vinewood Visionary<br />61 - Majestic<br />62 - Humans of Los Santos<br />63 - First Time Director<br />64 - Animal Lover<br />65 - Ensemble Piece<br />66 - Cult Movie<br />67 - Location Scout<br />68 - Method Actor<br />69 - Cryptozoologist<br />70 - Getting Started<br />71 - The Data Breaches<br />72 - The Bogdan Problem<br />73 - The Doomsday Scenario<br />74 - A World Worth Saving<br />75 - Orbital Obliteration<br />76 - Elitist<br />77 - Masterminds
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBEC7076D64130195<br />
/// </para>
/// </remarks>
public static bool GiveAchievementToPlayer(int achievementId)
{
return Function.Call<bool>((Hash)0xBEC7076D64130195, achievementId);
}

/// <summary>
/// For Steam.<br />Does nothing and always returns false in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2AFFFDABBDC2C5C<br />
/// </para>
/// </remarks>
public static bool SetAchievementProgress(int achievementId, int progress)
{
return Function.Call<bool>((Hash)0xC2AFFFDABBDC2C5C, achievementId, progress);
}

/// <summary>
/// For Steam.<br />Always returns 0 in retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C186837D0619335<br />
/// </para>
/// </remarks>
public static int GetAchievementProgress(int achievementId)
{
return Function.Call<int>((Hash)0x1C186837D0619335, achievementId);
}

/// <summary>
/// See GIVE_ACHIEVEMENT_TO_PLAYER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x867365E111A3B6EB<br />
/// </para>
/// </remarks>
public static bool HasAchievementBeenPassed(int achievementId)
{
return Function.Call<bool>((Hash)0x867365E111A3B6EB, achievementId);
}

/// <summary>
/// Returns TRUE if the game is in online mode and FALSE if in offline mode.<br /><br />This is an alias for NETWORK_IS_SIGNED_ONLINE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF25D331DC2627BBC<br />
/// </para>
/// </remarks>
public static bool IsPlayerOnline()
{
return Function.Call<bool>((Hash)0xF25D331DC2627BBC);
}

/// <summary>
/// this function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74556E1420867ECA<br />
/// </para>
/// </remarks>
public static bool IsPlayerLoggingInNp()
{
return Function.Call<bool>((Hash)0x74556E1420867ECA);
}

/// <summary>
/// Purpose of the BOOL currently unknown.<br />Both, true and false, work
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94DD7888C10A979E<br />
/// </para>
/// </remarks>
public static void DisplaySystemSigninUi(bool unk)
{
Function.Call((Hash)0x94DD7888C10A979E, unk);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D511E3867C87139<br />
/// </para>
/// </remarks>
public static bool IsSystemUiBeingDisplayed()
{
return Function.Call<bool>((Hash)0x5D511E3867C87139);
}

/// <summary>
/// Simply sets you as invincible (Health will not deplete).<br /><br />Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:<br />*(DWORD *)(playerPedAddress + 0x188) |= (1 &lt;&lt; 9);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x239528EACDC3E7DE<br />
/// </para>
/// </remarks>
public static void SetPlayerInvincible(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x239528EACDC3E7DE, player, toggle);
}

/// <summary>
/// Returns the Player&apos;s Invincible status.<br /><br />This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:<br /><br /> bool IsPlayerInvincible(Player player)<br />    {<br />     auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); <br /><br />        if (addr)<br />     {<br />         DWORD flag = *(DWORD *)(addr + 0x188);<br />            return ((flag &amp; (1 &lt;&lt; 8)) != 0) || ((flag &amp; (1 &lt;&lt; 9)) != 0);<br />      }<br /><br />       return false;<br /> }<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB721981B2B939E07<br />
/// </para>
/// </remarks>
public static bool GetPlayerInvincible(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xB721981B2B939E07, player);
}

/// <summary>
/// Always returns false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xDCC07526B8EC45AF<br />
/// </para>
/// </remarks>
public static bool GetPlayerDebugInvincible(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xDCC07526B8EC45AF, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x6BC97F4F4BB3C04B<br />
/// </para>
/// </remarks>
public static void SetPlayerInvincibleButHasReactions(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x6BC97F4F4BB3C04B, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCAC57395B151135F<br />
/// </para>
/// </remarks>
public static void SetPlayerCanCollectDroppedMoney(int /* Player */ player, bool p1)
{
Function.Call((Hash)0xCAC57395B151135F, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3AC26D3CC576528<br />
/// </para>
/// </remarks>
public static void RemovePlayerHelmet(int /* Player */ player, bool p2)
{
Function.Call((Hash)0xF3AC26D3CC576528, player, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C49C870E66F0A28<br />
/// </para>
/// </remarks>
public static void GivePlayerRagdollControl(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x3C49C870E66F0A28, player, toggle);
}

/// <summary>
/// Example from fm_mission_controler.ysc.c4:<br /><br />PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);<br /><br />All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.<br /><br />No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C8B2F450EE4328E<br />
/// </para>
/// </remarks>
public static void SetPlayerLockon(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x5C8B2F450EE4328E, player, toggle);
}

/// <summary>
/// Sets your targeting mode.<br />0 = Assisted Aim - Full<br />1 = Assisted Aim - Partial<br />2 = Free Aim - Assisted<br />3 = Free Aim
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1906895227793F3<br />
/// </para>
/// </remarks>
public static void SetPlayerTargetingMode(int targetMode)
{
Function.Call((Hash)0xB1906895227793F3, targetMode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5702B917B99DB1CD<br />
/// </para>
/// </remarks>
public static void SetPlayerTargetLevel(int targetLevel)
{
Function.Call((Hash)0x5702B917B99DB1CD, targetLevel);
}

/// <summary>
/// Returns profile setting 237.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9CF1F793A9F1BF1<br />
/// </para>
/// </remarks>
public static bool GetIsUsingFpsThirdPersonCover()
{
return Function.Call<bool>((Hash)0xB9CF1F793A9F1BF1);
}

/// <summary>
/// Returns profile setting 243.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0xCB645E85E97EA48B<br />
/// </para>
/// </remarks>
public static bool GetIsUsingHoodCamera()
{
return Function.Call<bool>((Hash)0xCB645E85E97EA48B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0B67A4DE6AB5F98<br />
/// </para>
/// </remarks>
public static void ClearPlayerHasDamagedAtLeastOnePed(int /* Player */ player)
{
Function.Call((Hash)0xF0B67A4DE6AB5F98, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20CE80B0C2BF4ACC<br />
/// </para>
/// </remarks>
public static bool HasPlayerDamagedAtLeastOnePed(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x20CE80B0C2BF4ACC, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4AACB96203D11A31<br />
/// </para>
/// </remarks>
public static void ClearPlayerHasDamagedAtLeastOneNonAnimalPed(int /* Player */ player)
{
Function.Call((Hash)0x4AACB96203D11A31, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4B90F367BD81752<br />
/// </para>
/// </remarks>
public static bool HasPlayerDamagedAtLeastOneNonAnimalPed(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xE4B90F367BD81752, player);
}

/// <summary>
/// This can be between 1.0f - 14.9f <br /><br />You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it&apos;s 14.9 max default.<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA7DC8329F0A1E9E<br />
/// </para>
/// </remarks>
public static void SetAirDragMultiplierForPlayersVehicle(int /* Player */ player, float multiplier)
{
Function.Call((Hash)0xCA7DC8329F0A1E9E, player, multiplier);
}

/// <summary>
/// Swim speed multiplier.<br />Multiplier goes up to 1.49<br /><br />Just call it one time, it is not required to be called once every tick. - Note copied from below native.<br /><br />Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it&apos;s 1.49 max default.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA91C6F0FF7D16A13<br />
/// </para>
/// </remarks>
public static void SetSwimMultiplierForPlayer(int /* Player */ player, float multiplier)
{
Function.Call((Hash)0xA91C6F0FF7D16A13, player, multiplier);
}

/// <summary>
/// Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.<br /><br />Just call it one time, it is not required to be called once every tick.<br /><br />Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it&apos;s 1.49 max default.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DB47AA77FD94E09<br />
/// </para>
/// </remarks>
public static void SetRunSprintMultiplierForPlayer(int /* Player */ player, float multiplier)
{
Function.Call((Hash)0x6DB47AA77FD94E09, player, multiplier);
}

/// <summary>
/// Returns the time since the character was arrested in (ms) milliseconds.<br /><br />example<br /><br />var time = Function.call&lt;int&gt;(Hash.GET_TIME_SINCE_LAST_ARREST();<br /><br />UI.DrawSubtitle(time.ToString());<br /><br />if player has not been arrested, the int returned will be -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5063F92F07C2A316<br />
/// </para>
/// </remarks>
public static int GetTimeSinceLastArrest()
{
return Function.Call<int>((Hash)0x5063F92F07C2A316);
}

/// <summary>
/// Returns the time since the character died in (ms) milliseconds.<br /><br />example<br /><br />var time = Function.call&lt;int&gt;(Hash.GET_TIME_SINCE_LAST_DEATH();<br /><br />UI.DrawSubtitle(time.ToString());<br /><br />if player has not died, the int returned will be -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7034807558DDFCA<br />
/// </para>
/// </remarks>
public static int GetTimeSinceLastDeath()
{
return Function.Call<int>((Hash)0xC7034807558DDFCA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEBF081FFC0A0E5E<br />
/// </para>
/// </remarks>
public static void AssistedMovementCloseRoute()
{
Function.Call((Hash)0xAEBF081FFC0A0E5E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8621390F0CDCFE1F<br />
/// </para>
/// </remarks>
public static void AssistedMovementFlushRoute()
{
Function.Call((Hash)0x8621390F0CDCFE1F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FEE4F80AC44A726<br />
/// </para>
/// </remarks>
public static void SetPlayerForcedAim(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x0FEE4F80AC44A726, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75E7D505F2B15902<br />
/// </para>
/// </remarks>
public static void SetPlayerForcedZoom(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x75E7D505F2B15902, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7651BC64AE59E128<br />
/// </para>
/// </remarks>
public static void SetPlayerForceSkipAimIntro(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x7651BC64AE59E128, player, toggle);
}

/// <summary>
/// Inhibits the player from using any method of combat including melee and firearms.<br /><br />NOTE: Only disables the firing for one frame
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E6CC07646BBEAB8<br />
/// </para>
/// </remarks>
public static void DisablePlayerFiring(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x5E6CC07646BBEAB8, player, toggle);
}

/// <summary>
/// Used only once in R* scripts (freemode.ysc).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB885852C39CC265D<br />
/// </para>
/// </remarks>
public static void DisablePlayerThrowGrenadeWhileUsingGun()
{
Function.Call((Hash)0xB885852C39CC265D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E8AABFA40A84F8C<br />
/// </para>
/// </remarks>
public static void SetDisableAmbientMeleeMove(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x2E8AABFA40A84F8C, player, toggle);
}

/// <summary>
/// Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77DFCCF5948B8C71<br />
/// </para>
/// </remarks>
public static void SetPlayerMaxArmour(int /* Player */ player, int value)
{
Function.Call((Hash)0x77DFCCF5948B8C71, player, value);
}

/// <summary>
/// p1 is always 0 in the scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x821FDC827D6F4090<br />
/// </para>
/// </remarks>
public static void SpecialAbilityActivate(int /* Player */ player, int p1)
{
Function.Call((Hash)0x821FDC827D6F4090, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xB214D570EAD7F81A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSpecialAbilityMp(int /* Player */ player, int p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xB214D570EAD7F81A, player, p1, p2);
}

/// <summary>
/// p1 is always 0 in the scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x17F7471EACA78290<br />
/// </para>
/// </remarks>
public static void SpecialAbilityDeactivateMp(int /* Player */ player, int p1)
{
Function.Call((Hash)0x17F7471EACA78290, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD6A953C6D1492057<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityDeactivate(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0xD6A953C6D1492057, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CB5CE07A3968D5A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityDeactivateFast(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0x9CB5CE07A3968D5A, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x375F0E738F861A94<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityReset(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0x375F0E738F861A94, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9A763D8FE87436A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeOnMissionFailed(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0xC9A763D8FE87436A, player, p1);
}

/// <summary>
/// Every occurrence of p1 &amp; p2 were both true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E7B9B683481687D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeSmall(int /* Player */ player, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2E7B9B683481687D, player, p1, p2, p3);
}

/// <summary>
/// Only 1 match. Both p1 &amp; p2 were true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF113E3AA9BC54613<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeMedium(int /* Player */ player, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xF113E3AA9BC54613, player, p1, p2, p3);
}

/// <summary>
/// 2 matches. p1 was always true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF733F45FA4497D93<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeLarge(int /* Player */ player, bool p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xF733F45FA4497D93, player, p1, p2, p3);
}

/// <summary>
/// p1 appears to always be 1 (only comes up twice)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED481732DFF7E997<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeContinuous(int /* Player */ player, int /* Ped */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xED481732DFF7E997, player, p1, p2);
}

/// <summary>
/// p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB7B0870EB531D08D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeAbsolute(int /* Player */ player, int p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xB7B0870EB531D08D, player, p1, p2, p3);
}

/// <summary>
/// <br />normalizedValue is from 0.0 - 1.0<br />p2 is always 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0696A65F009EE18<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityChargeNormalized(int /* Player */ player, float normalizedValue, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xA0696A65F009EE18, player, normalizedValue, p2, p3);
}

/// <summary>
/// Also known as _RECHARGE_SPECIAL_ABILITY
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DACA8DDC6FD4980<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityFillMeter(int /* Player */ player, bool p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x3DACA8DDC6FD4980, player, p1, p2);
}

/// <summary>
/// p1 was always true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D506DBBBC51E64B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityDepleteMeter(int /* Player */ player, bool p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x1D506DBBBC51E64B, player, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A09D0D590A47D13<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityLock(uint playerModel, int /* bug: Any */ p1)
{
Function.Call((Hash)0x6A09D0D590A47D13, playerModel, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF145F3BE2EFA9A3B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SpecialAbilityUnlock(uint playerModel, int /* bug: Any */ p1)
{
Function.Call((Hash)0xF145F3BE2EFA9A3B, playerModel, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6017F6A6CDFA694<br />
/// </para>
/// </remarks>
public static bool IsSpecialAbilityUnlocked(uint playerModel)
{
return Function.Call<bool>((Hash)0xC6017F6A6CDFA694, playerModel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E5F7FC85D854E15<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsSpecialAbilityActive(int /* Player */ player, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x3E5F7FC85D854E15, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05A1FE504B7F2587<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsSpecialAbilityMeterFull(int /* Player */ player, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x05A1FE504B7F2587, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x181EC197DAEFE121<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void EnableSpecialAbility(int /* Player */ player, bool toggle, int /* bug: Any */ p2)
{
Function.Call((Hash)0x181EC197DAEFE121, player, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1D200FE26AEF3CB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsSpecialAbilityEnabled(int /* Player */ player, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xB1D200FE26AEF3CB, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA49C426ED0CA4AB7<br />
/// </para>
/// </remarks>
public static void SetSpecialAbilityMultiplier(float multiplier)
{
Function.Call((Hash)0xA49C426ED0CA4AB7, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFEE8FA29AB9A18E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void UpdateSpecialAbilityFromStat(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0xFFEE8FA29AB9A18E, player, p1);
}

/// <summary>
/// Appears once in &quot;re_dealgonewrong&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FC472C501CCADB3<br />
/// </para>
/// </remarks>
public static bool GetIsPlayerDrivingOnHighway(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x5FC472C501CCADB3, player);
}

/// <summary>
/// Only 1 occurrence. p1 was 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF10B44FD479D69F3<br />
/// </para>
/// </remarks>
public static bool GetIsPlayerDrivingWreckless(int /* Player */ player, int p1)
{
return Function.Call<bool>((Hash)0xF10B44FD479D69F3, player, p1);
}

/// <summary>
/// 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD2620B7B9D16FF1<br />
/// </para>
/// </remarks>
public static bool GetIsMoppingAreaFreeInFrontOfPlayer(int /* Player */ player, float p1)
{
return Function.Call<bool>((Hash)0xDD2620B7B9D16FF1, player, p1);
}

/// <summary>
/// `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don&apos;t fall from sky.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD15F075A4DA0FDE<br />
/// </para>
/// </remarks>
public static void StartPlayerTeleport(int /* Player */ player, float x, float y, float z, float heading, bool p5, bool findCollisionLand, bool p7)
{
Function.Call((Hash)0xAD15F075A4DA0FDE, player, x, y, z, heading, p5, findCollisionLand, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE23D5873C2394C61<br />
/// </para>
/// </remarks>
public static bool UpdatePlayerTeleport(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xE23D5873C2394C61, player);
}

/// <summary>
/// Disables the player&apos;s teleportation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC449EDED9D73009C<br />
/// </para>
/// </remarks>
public static void StopPlayerTeleport()
{
Function.Call((Hash)0xC449EDED9D73009C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02B15662D7F8886F<br />
/// </para>
/// </remarks>
public static bool IsPlayerTeleportActive()
{
return Function.Call<bool>((Hash)0x02B15662D7F8886F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F395D61F3A1F877<br />
/// </para>
/// </remarks>
public static float GetPlayerCurrentStealthNoise(int /* Player */ player)
{
return Function.Call<float>((Hash)0x2F395D61F3A1F877, player);
}

/// <summary>
/// `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.<br />Use 1.0 to reset it back to normal
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DB660B38DD98A31<br />
/// </para>
/// </remarks>
public static void SetPlayerHealthRechargeMultiplier(int /* Player */ player, float regenRate)
{
Function.Call((Hash)0x5DB660B38DD98A31, player, regenRate);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0x8BC515BAE4AAF8FF<br />
/// </para>
/// </remarks>
public static float GetPlayerHealthRechargeMaxPercent(int /* Player */ player)
{
return Function.Call<float>((Hash)0x8BC515BAE4AAF8FF, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xC388A0F065F5BC34<br />
/// </para>
/// </remarks>
public static void SetPlayerHealthRechargeMaxPercent(int /* Player */ player, float limit)
{
Function.Call((Hash)0xC388A0F065F5BC34, player, limit);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xEFD79FA81DFBA9CB<br />
/// </para>
/// </remarks>
public static void SetPlayerFallDistanceToTriggerRagdollOverride(int /* Player */ player, float p1)
{
Function.Call((Hash)0xEFD79FA81DFBA9CB, player, p1);
}

/// <summary>
/// This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown. <br /><br />Based on tests, it is unlikely to be a multiplier.<br /><br />modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE07B9F7817AADA3<br />
/// </para>
/// </remarks>
public static void SetPlayerWeaponDamageModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0xCE07B9F7817AADA3, player, modifier);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D83BC011CA14A3C<br />
/// </para>
/// </remarks>
public static void SetPlayerWeaponDefenseModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0x2D83BC011CA14A3C, player, modifier);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xBCFDE9EDE4CF27DC<br />
/// </para>
/// </remarks>
public static void SetPlayerWeaponMinigunDefenseModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0xBCFDE9EDE4CF27DC, player, modifier);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A3DC7ECCC321032<br />
/// </para>
/// </remarks>
public static void SetPlayerMeleeWeaponDamageModifier(int /* Player */ player, float modifier, bool p2)
{
Function.Call((Hash)0x4A3DC7ECCC321032, player, modifier, p2);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE540335B4ABC4E2<br />
/// </para>
/// </remarks>
public static void SetPlayerMeleeWeaponDefenseModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0xAE540335B4ABC4E2, player, modifier);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA50E117CDDF82F0C<br />
/// </para>
/// </remarks>
public static void SetPlayerVehicleDamageModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0xA50E117CDDF82F0C, player, modifier);
}

/// <summary>
/// modifier&apos;s min value is 0.1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C60E6EFDAFF2462<br />
/// </para>
/// </remarks>
public static void SetPlayerVehicleDefenseModifier(int /* Player */ player, float modifier)
{
Function.Call((Hash)0x4C60E6EFDAFF2462, player, modifier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x8D768602ADEF2245<br />
/// </para>
/// </remarks>
public static void SetPlayerMaxExplosiveDamage(int /* Player */ player, float p1)
{
Function.Call((Hash)0x8D768602ADEF2245, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0xD821056B9ACF8052<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlayerExplosiveDamageModifier(int /* Player */ player, int /* bug: Any */ p1)
{
Function.Call((Hash)0xD821056B9ACF8052, player, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 617<br />
/// <b>Native ID:</b> 0x31E90B8873A4CD3B<br />
/// </para>
/// </remarks>
public static void SetPlayerWeaponTakedownDefenseModifier(int /* Player */ player, float p1)
{
Function.Call((Hash)0x31E90B8873A4CD3B, player, p1);
}

/// <summary>
/// Tints:<br />   None = -1,<br />    Rainbow = 0,<br />  Red = 1,<br />  SeasideStripes = 2,<br />   WidowMaker = 3,<br />   Patriot = 4,<br />  Blue = 5,<br /> Black = 6,<br />    Hornet = 7,<br />   AirFocce = 8,<br /> Desert = 9,<br />   Shadow = 10,<br />  HighAltitude = 11,<br />    Airbone = 12,<br /> Sunrise = 13,<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA3D0E54541D9A5E5<br />
/// </para>
/// </remarks>
public static void SetPlayerParachuteTintIndex(int /* Player */ player, int tintIndex)
{
Function.Call((Hash)0xA3D0E54541D9A5E5, player, tintIndex);
}

/// <summary>
/// Tints:<br />  None = -1,<br />    Rainbow = 0,<br />  Red = 1,<br />  SeasideStripes = 2,<br />   WidowMaker = 3,<br />   Patriot = 4,<br />  Blue = 5,<br /> Black = 6,<br />    Hornet = 7,<br />   AirFocce = 8,<br /> Desert = 9,<br />   Shadow = 10,<br />  HighAltitude = 11,<br />    Airbone = 12,<br /> Sunrise = 13,
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75D3F7A1B0D9B145<br />
/// </para>
/// </remarks>
public static void GetPlayerParachuteTintIndex(int /* Player */ player, ref int tintIndex)
{
var nativeAssistPointerVar0 = tintIndex;
unsafe {
Function.Call((Hash)0x75D3F7A1B0D9B145, player, &nativeAssistPointerVar0);
}
tintIndex = nativeAssistPointerVar0;
}

/// <summary>
/// Tints:<br />   None = -1,<br />    Rainbow = 0,<br />  Red = 1,<br />  SeasideStripes = 2,<br />   WidowMaker = 3,<br />   Patriot = 4,<br />  Blue = 5,<br /> Black = 6,<br />    Hornet = 7,<br />   AirFocce = 8,<br /> Desert = 9,<br />   Shadow = 10,<br />  HighAltitude = 11,<br />    Airbone = 12,<br /> Sunrise = 13,
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF04C87F5DC1DF38<br />
/// </para>
/// </remarks>
public static void SetPlayerReserveParachuteTintIndex(int /* Player */ player, int index)
{
Function.Call((Hash)0xAF04C87F5DC1DF38, player, index);
}

/// <summary>
/// Tints:<br />  None = -1,<br />    Rainbow = 0,<br />  Red = 1,<br />  SeasideStripes = 2,<br />   WidowMaker = 3,<br />   Patriot = 4,<br />  Blue = 5,<br /> Black = 6,<br />    Hornet = 7,<br />   AirFocce = 8,<br /> Desert = 9,<br />   Shadow = 10,<br />  HighAltitude = 11,<br />    Airbone = 12,<br /> Sunrise = 13,
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5A016BC3C09CF40<br />
/// </para>
/// </remarks>
public static void GetPlayerReserveParachuteTintIndex(int /* Player */ player, ref int index)
{
var nativeAssistPointerVar0 = index;
unsafe {
Function.Call((Hash)0xD5A016BC3C09CF40, player, &nativeAssistPointerVar0);
}
index = nativeAssistPointerVar0;
}

/// <summary>
/// tints 0- 13<br />0 - unkown<br />1 - unkown<br />2 - unkown<br />3 - unkown<br />4 - unkown
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93B0FB27C9A04060<br />
/// </para>
/// </remarks>
public static void SetPlayerParachutePackTintIndex(int /* Player */ player, int tintIndex)
{
Function.Call((Hash)0x93B0FB27C9A04060, player, tintIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E9C742F340CE5A2<br />
/// </para>
/// </remarks>
public static void GetPlayerParachutePackTintIndex(int /* Player */ player, ref int tintIndex)
{
var nativeAssistPointerVar0 = tintIndex;
unsafe {
Function.Call((Hash)0x6E9C742F340CE5A2, player, &nativeAssistPointerVar0);
}
tintIndex = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7DDAB28D31FAC363<br />
/// </para>
/// </remarks>
public static void SetPlayerHasReserveParachute(int /* Player */ player)
{
Function.Call((Hash)0x7DDAB28D31FAC363, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DDFE2FF727F3CA3<br />
/// </para>
/// </remarks>
public static bool GetPlayerHasReserveParachute(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x5DDFE2FF727F3CA3, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF401B182DBA8AF53<br />
/// </para>
/// </remarks>
public static void SetPlayerCanLeaveParachuteSmokeTrail(int /* Player */ player, bool enabled)
{
Function.Call((Hash)0xF401B182DBA8AF53, player, enabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8217FD371A4625CF<br />
/// </para>
/// </remarks>
public static void SetPlayerParachuteSmokeTrailColor(int /* Player */ player, int r, int g, int b)
{
Function.Call((Hash)0x8217FD371A4625CF, player, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF56DBABD3CD4887<br />
/// </para>
/// </remarks>
public static void GetPlayerParachuteSmokeTrailColor(int /* Player */ player, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0xEF56DBABD3CD4887, player, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// example:<br /><br />flags: 0-6<br /><br />PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);<br /><br />wouldnt the flag be the seatIndex?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11D5F725F0E780E0<br />
/// </para>
/// </remarks>
public static void SetPlayerPhonePaletteIdx(int /* Player */ player, int flags)
{
Function.Call((Hash)0x11D5F725F0E780E0, player, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB89EF50FF25FCE9<br />
/// </para>
/// </remarks>
public static void SetPlayerNoiseMultiplier(int /* Player */ player, float multiplier)
{
Function.Call((Hash)0xDB89EF50FF25FCE9, player, multiplier);
}

/// <summary>
/// Values around 1.0f to 2.0f used in game scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2C1A29588A9F47C<br />
/// </para>
/// </remarks>
public static void SetPlayerSneakingNoiseMultiplier(int /* Player */ player, float multiplier)
{
Function.Call((Hash)0xB2C1A29588A9F47C, player, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF297383AA91DCA29<br />
/// </para>
/// </remarks>
public static bool CanPedHearPlayer(int /* Player */ player, int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xF297383AA91DCA29, player, ped);
}

/// <summary>
/// This is to make the player walk without accepting input from INPUT.<br /><br />gaitType is in increments of 100s. 2000, 500, 300, 200, etc.<br /><br />p4 is always 1 and p5 is always 0.<br /><br />C# Example :<br /><br />Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x477D5D63E63ECA5D<br />
/// </para>
/// </remarks>
public static void SimulatePlayerInputGait(int /* Player */ player, float amount, int gaitType, float speed, bool p4, bool p5)
{
Function.Call((Hash)0x477D5D63E63ECA5D, player, amount, gaitType, speed, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19531C47A2ABD691<br />
/// </para>
/// </remarks>
public static void ResetPlayerInputGait(int /* Player */ player)
{
Function.Call((Hash)0x19531C47A2ABD691, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F343285A00B4BB6<br />
/// </para>
/// </remarks>
public static void SetAutoGiveParachuteWhenEnterPlane(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x9F343285A00B4BB6, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2B315B6689D537D<br />
/// </para>
/// </remarks>
public static void SetAutoGiveScubaGearWhenExitVehicle(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xD2B315B6689D537D, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E9021C1FCDD507A<br />
/// </para>
/// </remarks>
public static void SetPlayerStealthPerceptionModifier(int /* Player */ player, float value)
{
Function.Call((Hash)0x4E9021C1FCDD507A, player, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x690A61A6D13583F6<br />
/// </para>
/// </remarks>
public static bool IsRemotePlayerInNonClonedVehicle(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x690A61A6D13583F6, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9EDD76E87D5D51BA<br />
/// </para>
/// </remarks>
public static void IncreasePlayerJumpSuppressionRange(int /* Player */ player)
{
Function.Call((Hash)0x9EDD76E87D5D51BA, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC54C95DA968EC5B5<br />
/// </para>
/// </remarks>
public static void SetPlayerSimulateAiming(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xC54C95DA968EC5B5, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x749FADDF97DFE930<br />
/// </para>
/// </remarks>
public static void SetPlayerClothPinFrames(int /* Player */ player, int p1)
{
Function.Call((Hash)0x749FADDF97DFE930, player, p1);
}

/// <summary>
/// Every occurrence was either 0 or 2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F7BBA2EA6372500<br />
/// </para>
/// </remarks>
public static void SetPlayerClothPackageIndex(int index)
{
Function.Call((Hash)0x9F7BBA2EA6372500, index);
}

/// <summary>
/// 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14D913B777DFF5DA<br />
/// </para>
/// </remarks>
public static void SetPlayerClothLockCounter(int value)
{
Function.Call((Hash)0x14D913B777DFF5DA, value);
}

/// <summary>
/// Only 1 match. ob_sofa_michael.<br /><br />PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED51733DC73AED51<br />
/// </para>
/// </remarks>
public static void PlayerAttachVirtualBound(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7)
{
Function.Call((Hash)0xED51733DC73AED51, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DD5897E2FA6E7C9<br />
/// </para>
/// </remarks>
public static void PlayerDetachVirtualBound()
{
Function.Call((Hash)0x1DD5897E2FA6E7C9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD705740BB0A1CF4C<br />
/// </para>
/// </remarks>
public static bool HasPlayerBeenSpottedInStolenVehicle(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xD705740BB0A1CF4C, player);
}

/// <summary>
/// Returns true if an unk value is greater than 0.0f
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38D28DA81E4E9BF9<br />
/// </para>
/// </remarks>
public static bool IsPlayerBattleAware(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x38D28DA81E4E9BF9, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC0753C9CA14B506<br />
/// </para>
/// </remarks>
public static bool GetPlayerReceivedBattleEventRecently(int /* Player */ player, int p1, bool p2)
{
return Function.Call<bool>((Hash)0xBC0753C9CA14B506, player, p1, p2);
}

/// <summary>
/// Appears only 3 times in the scripts, more specifically in michael1.ysc<br /><br />-<br />This can be used to prevent dying if you are &quot;out of the world&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5006D96C995A5827<br />
/// </para>
/// </remarks>
public static void ExtendWorldBoundaryForPlayer(float x, float y, float z)
{
Function.Call((Hash)0x5006D96C995A5827, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA1DF03D5A315F4E<br />
/// </para>
/// </remarks>
public static void ResetWorldBoundaryForPlayer()
{
Function.Call((Hash)0xDA1DF03D5A315F4E);
}

/// <summary>
/// Returns true if the player is riding a train.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EC12697209F2196<br />
/// </para>
/// </remarks>
public static bool IsPlayerRidingTrain(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x4EC12697209F2196, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD55DDFB47991A294<br />
/// </para>
/// </remarks>
public static bool HasPlayerLeftTheWorld(int /* Player */ player)
{
return Function.Call<bool>((Hash)0xD55DDFB47991A294, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF300C7649724A0B<br />
/// </para>
/// </remarks>
public static void SetPlayerLeavePedBehind(int /* Player */ player, bool toggle)
{
Function.Call((Hash)0xFF300C7649724A0B, player, toggle);
}

/// <summary>
/// p1 was always 5.<br />p4 was always false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9284A8C0D48352C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlayerParachuteVariationOverride(int /* Player */ player, int p1, int /* bug: Any */ p2, int /* bug: Any */ p3, bool p4)
{
Function.Call((Hash)0xD9284A8C0D48352C, player, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F4CC924CF8C7B21<br />
/// </para>
/// </remarks>
public static void ClearPlayerParachuteVariationOverride(int /* Player */ player)
{
Function.Call((Hash)0x0F4CC924CF8C7B21, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x977DB4641F6FC3DB<br />
/// </para>
/// </remarks>
public static void SetPlayerParachuteModelOverride(int /* Player */ player, uint model)
{
Function.Call((Hash)0x977DB4641F6FC3DB, player, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x0764486AEDE748DB<br />
/// </para>
/// </remarks>
public static void SetPlayerReserveParachuteModelOverride(int /* Player */ player, uint model)
{
Function.Call((Hash)0x0764486AEDE748DB, player, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xC219887CA3E65C41<br />
/// </para>
/// </remarks>
public static uint GetPlayerParachuteModelOverride(int /* Player */ player)
{
return Function.Call<uint>((Hash)0xC219887CA3E65C41, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x37FAAA68DCA9D08D<br />
/// </para>
/// </remarks>
public static uint GetPlayerReserveParachuteModelOverride(int /* Player */ player)
{
return Function.Call<uint>((Hash)0x37FAAA68DCA9D08D, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8753997EB5F6EE3F<br />
/// </para>
/// </remarks>
public static void ClearPlayerParachuteModelOverride(int /* Player */ player)
{
Function.Call((Hash)0x8753997EB5F6EE3F, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x290D248E25815AE8<br />
/// </para>
/// </remarks>
public static void ClearPlayerReserveParachuteModelOverride(int /* Player */ player)
{
Function.Call((Hash)0x290D248E25815AE8, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC80A4C2F18A2B64<br />
/// </para>
/// </remarks>
public static void SetPlayerParachutePackModelOverride(int /* Player */ player, uint model)
{
Function.Call((Hash)0xDC80A4C2F18A2B64, player, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10C54E4389C12B42<br />
/// </para>
/// </remarks>
public static void ClearPlayerParachutePackModelOverride(int /* Player */ player)
{
Function.Call((Hash)0x10C54E4389C12B42, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC142BE3BB9CE125F<br />
/// </para>
/// </remarks>
public static void DisablePlayerVehicleRewards(int /* Player */ player)
{
Function.Call((Hash)0xC142BE3BB9CE125F, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F7CEB6520288061<br />
/// </para>
/// </remarks>
public static void SetPlayerSpectatedVehicleRadioOverride(bool p0)
{
Function.Call((Hash)0x2F7CEB6520288061, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DC40A8869C22141<br />
/// </para>
/// </remarks>
public static void SetPlayerBluetoothState(int /* Player */ player, bool state)
{
Function.Call((Hash)0x5DC40A8869C22141, player, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65FAEE425DE637B0<br />
/// </para>
/// </remarks>
public static bool IsPlayerBluetoothEnable(int /* Player */ player)
{
return Function.Call<bool>((Hash)0x65FAEE425DE637B0, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5501B7A5CDB79D37<br />
/// </para>
/// </remarks>
public static void DisableCameraViewModeCycle(int /* Player */ player)
{
Function.Call((Hash)0x5501B7A5CDB79D37, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56105E599CAB0EFA<br />
/// </para>
/// </remarks>
public static int GetPlayerFakeWantedLevel(int /* Player */ player)
{
return Function.Call<int>((Hash)0x56105E599CAB0EFA, player);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x55FCC0C390620314<br />
/// </para>
/// </remarks>
public static void SetPlayerCanDamagePlayer(int /* Player */ player1, int /* Player */ player2, bool toggle)
{
Function.Call((Hash)0x55FCC0C390620314, player1, player2, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x2382AB11450AE7BA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetApplyWaypointOfPlayer(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x2382AB11450AE7BA, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x6E4361FF3E8CD7CA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsPlayerVehicleWeaponToggledToNonHoming(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x6E4361FF3E8CD7CA, p0);
}

/// <summary>
/// Unsets playerPed+330 if the current weapon has certain flags.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x237440E46D918649<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlayerVehicleWeaponToNonHoming(int /* bug: Any */ p0)
{
Function.Call((Hash)0x237440E46D918649, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xEE4EBDD2593BA844<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlayerHomingDisabledForAllVehicleWeapons(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xEE4EBDD2593BA844, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x9097EB6D4BB9A12A<br />
/// </para>
/// </remarks>
public static void AddPlayerTargetableEntity(int /* Player */ player, int /* Entity */ entity)
{
Function.Call((Hash)0x9097EB6D4BB9A12A, player, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x9F260BFB59ADBCA3<br />
/// </para>
/// </remarks>
public static void RemovePlayerTargetableEntity(int /* Player */ player, int /* Entity */ entity)
{
Function.Call((Hash)0x9F260BFB59ADBCA3, player, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x7BAE68775557AE0B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlayerPreviousVariationData(int /* Player */ player, int p1, int p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x7BAE68775557AE0B, player, p1, p2, p3, p4, p5);
}

/// <summary>
/// Resets values set by SET_SCRIPT_FIRE_POSITION
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x7148E0F43D11F0D9<br />
/// </para>
/// </remarks>
public static void RemoveScriptFirePosition()
{
Function.Call((Hash)0x7148E0F43D11F0D9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x70A382ADEC069DD3<br />
/// </para>
/// </remarks>
public static void SetScriptFirePosition(float coordX, float coordY, float coordZ)
{
Function.Call((Hash)0x70A382ADEC069DD3, coordX, coordY, coordZ);
}

#endregion
#region RECORDING
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48621C9FCA3EBD28<br />
/// </para>
/// </remarks>
public static void ReplayStartEvent(int p0)
{
Function.Call((Hash)0x48621C9FCA3EBD28, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81CBAE94390F9F89<br />
/// </para>
/// </remarks>
public static void ReplayStopEvent()
{
Function.Call((Hash)0x81CBAE94390F9F89);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13B350B8AD0EEE10<br />
/// </para>
/// </remarks>
public static void ReplayCancelEvent()
{
Function.Call((Hash)0x13B350B8AD0EEE10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x293220DA1B46CEBC<br />
/// </para>
/// </remarks>
public static void ReplayRecordBackForTime(float p0, float p1, int p2)
{
Function.Call((Hash)0x293220DA1B46CEBC, p0, p1, p2);
}

/// <summary>
/// -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -<br /><br />first one seems to be a string of a mission name, second one seems to be a bool/toggle<br /><br />p1 was always 0.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x208784099002BC30<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ReplayCheckForEventThisFrame(string missionNameLabel, int /* bug: Any */ p1)
{
Function.Call((Hash)0x208784099002BC30, missionNameLabel, p1);
}

/// <summary>
/// This disable the recording feature and has to be called every frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB2D525B57F42B40<br />
/// </para>
/// </remarks>
public static void ReplayPreventRecordingThisFrame()
{
Function.Call((Hash)0xEB2D525B57F42B40);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF854439EFBB3B583<br />
/// </para>
/// </remarks>
public static void ReplayResetEventInfo()
{
Function.Call((Hash)0xF854439EFBB3B583);
}

/// <summary>
/// This will disable the ability to make camera changes in R* Editor.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF66DCEE6609B148<br />
/// </para>
/// </remarks>
public static void ReplayDisableCameraMovementThisFrame()
{
Function.Call((Hash)0xAF66DCEE6609B148);
}

/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66972397E0757E7A<br />
/// </para>
/// </remarks>
public static void RecordGreatestMoment(int p0, int p1, int p2)
{
Function.Call((Hash)0x66972397E0757E7A, p0, p1, p2);
}

/// <summary>
/// Starts recording a replay.<br />If mode is 0, turns on action replay.<br />If mode is 1, starts recording.<br />If already recording a replay, does nothing.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3AC2FFF9612AC81<br />
/// </para>
/// </remarks>
public static void StartReplayRecording(int mode)
{
Function.Call((Hash)0xC3AC2FFF9612AC81, mode);
}

/// <summary>
/// Stops recording and saves the recorded clip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x071A5197D6AFC8B3<br />
/// </para>
/// </remarks>
public static void StopReplayRecording()
{
Function.Call((Hash)0x071A5197D6AFC8B3);
}

/// <summary>
/// Stops recording and discards the recorded clip.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88BB3507ED41A240<br />
/// </para>
/// </remarks>
public static void CancelReplayRecording()
{
Function.Call((Hash)0x88BB3507ED41A240);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x644546EC5287471B<br />
/// </para>
/// </remarks>
public static bool SaveReplayRecording()
{
return Function.Call<bool>((Hash)0x644546EC5287471B);
}

/// <summary>
/// Checks if you&apos;re recording, returns TRUE when you start recording (F1) or turn on action replay (F2)<br /><br />mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944<br />retn
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1897CA71995A90B4<br />
/// </para>
/// </remarks>
public static bool IsReplayRecording()
{
return Function.Call<bool>((Hash)0x1897CA71995A90B4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF4B952F7D381B95<br />
/// </para>
/// </remarks>
public static bool IsReplayInitialized()
{
return Function.Call<bool>((Hash)0xDF4B952F7D381B95);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4282E08174868BE3<br />
/// </para>
/// </remarks>
public static bool IsReplayAvailable()
{
return Function.Call<bool>((Hash)0x4282E08174868BE3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33D47E85B476ABCD<br />
/// </para>
/// </remarks>
public static bool IsReplayRecordSpaceAvailable(bool p0)
{
return Function.Call<bool>((Hash)0x33D47E85B476ABCD, p0);
}

#endregion
#region REPLAY
/// <summary>
/// Does nothing (it&apos;s a nullsub).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E2BD3EF6C205F09<br />
/// </para>
/// </remarks>
public static void RegisterEffectForReplayEditor(string p0, bool p1)
{
Function.Call((Hash)0x7E2BD3EF6C205F09, p0, p1);
}

/// <summary>
/// Returns a bool if interior rendering is disabled, if yes, all &quot;normal&quot; rendered interiors are invisible
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95AB8B5C992C7B58<br />
/// </para>
/// </remarks>
public static bool ReplaySystemHasRequestedAScriptCleanup()
{
return Function.Call<bool>((Hash)0x95AB8B5C992C7B58);
}

/// <summary>
/// Disables some other rendering (internal)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AD3932DAEB1E5D3<br />
/// </para>
/// </remarks>
public static void SetScriptsHaveCleanedUpForReplaySystem()
{
Function.Call((Hash)0x5AD3932DAEB1E5D3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE058175F8EAFE79A<br />
/// </para>
/// </remarks>
public static void SetReplaySystemPausedForSave(bool p0)
{
Function.Call((Hash)0xE058175F8EAFE79A, p0);
}

/// <summary>
/// Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3353D13F09307691<br />
/// </para>
/// </remarks>
public static void ReplayControlShutdown()
{
Function.Call((Hash)0x3353D13F09307691);
}

/// <summary>
/// Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49DA8145672B2725<br />
/// </para>
/// </remarks>
public static void ActivateRockstarEditor(int p0)
{
Function.Call((Hash)0x49DA8145672B2725, p0);
}

#endregion
#region SAVEMIGRATION
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x84B418E93894AC1C<br />
/// </para>
/// </remarks>
public static bool SavemigrationIsMpEnabled()
{
return Function.Call<bool>((Hash)0x84B418E93894AC1C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x85F41F9225D08C72<br />
/// </para>
/// </remarks>
public static bool SavemigrationMpRequestAccounts()
{
return Function.Call<bool>((Hash)0x85F41F9225D08C72);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xC8CB5999919EA2CA<br />
/// </para>
/// </remarks>
public static int SavemigrationMpGetAccountsStatus()
{
return Function.Call<int>((Hash)0xC8CB5999919EA2CA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0x77A16200E18E0C55<br />
/// </para>
/// </remarks>
public static int SavemigrationMpNumAccounts()
{
return Function.Call<int>((Hash)0x77A16200E18E0C55);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2612<br />
/// <b>Native ID:</b> 0xFCE2747EEF1D05FC<br />
/// </para>
/// </remarks>
public static bool SavemigrationMpGetAccount(int p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xFCE2747EEF1D05FC, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xE5E9746A66359F9D<br />
/// </para>
/// </remarks>
public static bool SavemigrationMpRequestStatus()
{
return Function.Call<bool>((Hash)0xE5E9746A66359F9D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x690B76BD2763E068<br />
/// </para>
/// </remarks>
public static int SavemigrationMpGetStatus()
{
return Function.Call<int>((Hash)0x690B76BD2763E068);
}

#endregion
#region SCRIPT
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EB5F71AA68F2E8E<br />
/// </para>
/// </remarks>
public static void RequestScript(string scriptName)
{
Function.Call((Hash)0x6EB5F71AA68F2E8E, scriptName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC90D2DCACD56184C<br />
/// </para>
/// </remarks>
public static void SetScriptAsNoLongerNeeded(string scriptName)
{
Function.Call((Hash)0xC90D2DCACD56184C, scriptName);
}

/// <summary>
/// Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6CC9F3BA0FB9EF1<br />
/// </para>
/// </remarks>
public static bool HasScriptLoaded(string scriptName)
{
return Function.Call<bool>((Hash)0xE6CC9F3BA0FB9EF1, scriptName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC04745FBE67C19A<br />
/// </para>
/// </remarks>
public static bool DoesScriptExist(string scriptName)
{
return Function.Call<bool>((Hash)0xFC04745FBE67C19A, scriptName);
}

/// <summary>
/// formerly _REQUEST_STREAMED_SCRIPT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD62A67D26D9653E6<br />
/// </para>
/// </remarks>
public static void RequestScriptWithNameHash(uint scriptHash)
{
Function.Call((Hash)0xD62A67D26D9653E6, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5BC038960E9DB27<br />
/// </para>
/// </remarks>
public static void SetScriptWithNameHashAsNoLongerNeeded(uint scriptHash)
{
Function.Call((Hash)0xC5BC038960E9DB27, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F0F0C783EB16C04<br />
/// </para>
/// </remarks>
public static bool HasScriptWithNameHashLoaded(uint scriptHash)
{
return Function.Call<bool>((Hash)0x5F0F0C783EB16C04, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF86AA3C56BA31381<br />
/// </para>
/// </remarks>
public static bool DoesScriptWithNameHashExist(uint scriptHash)
{
return Function.Call<bool>((Hash)0xF86AA3C56BA31381, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8B189ED9138BCD4<br />
/// </para>
/// </remarks>
public static void TerminateThread(int threadId)
{
Function.Call((Hash)0xC8B189ED9138BCD4, threadId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46E9AE36D8FA6417<br />
/// </para>
/// </remarks>
public static bool IsThreadActive(int threadId)
{
return Function.Call<bool>((Hash)0x46E9AE36D8FA6417, threadId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x05A42BA9FC8DA96B<br />
/// </para>
/// </remarks>
public static string GetNameOfScriptWithThisId(int threadId)
{
return Function.Call<string>((Hash)0x05A42BA9FC8DA96B, threadId);
}

/// <summary>
/// Starts a new iteration of the current threads.<br />Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDADFADA5A20143A8<br />
/// </para>
/// </remarks>
public static void ScriptThreadIteratorReset()
{
Function.Call((Hash)0xDADFADA5A20143A8);
}

/// <summary>
/// If the function returns 0, the end of the iteration has been reached.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30B4FA1C82DD4B9F<br />
/// </para>
/// </remarks>
public static int ScriptThreadIteratorGetNextThreadId()
{
return Function.Call<int>((Hash)0x30B4FA1C82DD4B9F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC30338E8088E2E21<br />
/// </para>
/// </remarks>
public static int GetIdOfThisThread()
{
return Function.Call<int>((Hash)0xC30338E8088E2E21);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1090044AD1DA76FA<br />
/// </para>
/// </remarks>
public static void TerminateThisThread()
{
Function.Call((Hash)0x1090044AD1DA76FA);
}

/// <summary>
/// Gets the number of instances of the specified script is currently running.<br /><br />Actually returns numRefs - 1.<br />if (program)<br />	v3 = rage::scrProgram::GetNumRefs(program) - 1;<br />return v3;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C83A9DA6BFFC4F9<br />
/// </para>
/// </remarks>
public static int GetNumberOfThreadsRunningTheScriptWithThisHash(uint scriptHash)
{
return Function.Call<int>((Hash)0x2C83A9DA6BFFC4F9, scriptHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x442E0A7EDE4A738A<br />
/// </para>
/// </remarks>
public static string GetThisScriptName()
{
return Function.Call<string>((Hash)0x442E0A7EDE4A738A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A1C8B1738FFE87E<br />
/// </para>
/// </remarks>
public static uint GetHashOfThisScriptName()
{
return Function.Call<uint>((Hash)0x8A1C8B1738FFE87E);
}

/// <summary>
/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F92A689A06620AA<br />
/// </para>
/// </remarks>
public static int GetNumberOfEvents(int eventGroup)
{
return Function.Call<int>((Hash)0x5F92A689A06620AA, eventGroup);
}

/// <summary>
/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x936E6168A9BCEDB5<br />
/// </para>
/// </remarks>
public static bool GetEventExists(int eventGroup, int eventIndex)
{
return Function.Call<bool>((Hash)0x936E6168A9BCEDB5, eventGroup, eventIndex);
}

/// <summary>
/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8F66A3A60C62153<br />
/// </para>
/// </remarks>
public static int GetEventAtIndex(int eventGroup, int eventIndex)
{
return Function.Call<int>((Hash)0xD8F66A3A60C62153, eventGroup, eventIndex);
}

/// <summary>
/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)<br /><br />Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2902843FCD2B2D79<br />
/// </para>
/// </remarks>
public static bool GetEventData(int eventGroup, int eventIndex, int /* bug: structure */ eventData, int eventDataSize)
{
return Function.Call<bool>((Hash)0x2902843FCD2B2D79, eventGroup, eventIndex, eventData, eventDataSize);
}

/// <summary>
/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)<br /><br />Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).<br /><br />playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 &lt;&lt; playerIndex). Set all bits if it should be broadcast to all players.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AE99C571D5BBE5D<br />
/// </para>
/// </remarks>
public static void TriggerScriptEvent(int eventGroup, int /* bug: structure */ eventData, int eventDataSize, int playerBits)
{
Function.Call((Hash)0x5AE99C571D5BBE5D, eventGroup, eventData, eventDataSize, playerBits);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x078EBE9809CCD637<br />
/// </para>
/// </remarks>
public static void ShutdownLoadingScreen()
{
Function.Call((Hash)0x078EBE9809CCD637);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5262CC1995D07E09<br />
/// </para>
/// </remarks>
public static void SetNoLoadingScreen(bool toggle)
{
Function.Call((Hash)0x5262CC1995D07E09, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x18C1270EA7F199BC<br />
/// </para>
/// </remarks>
public static bool GetNoLoadingScreen()
{
return Function.Call<bool>((Hash)0x18C1270EA7F199BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1577667C3708F9B<br />
/// </para>
/// </remarks>
public static void CommitToLoadingscreenSelction()
{
Function.Call((Hash)0xB1577667C3708F9B);
}

/// <summary>
/// Returns true if bit 0 in GtaThread+0x154 is set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x836B62713E0534CA<br />
/// </para>
/// </remarks>
public static bool BgIsExitflagSet()
{
return Function.Call<bool>((Hash)0x836B62713E0534CA);
}

/// <summary>
/// Sets bit 1 in GtaThread+0x154
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x760910B49D2B98EA<br />
/// </para>
/// </remarks>
public static void BgSetExitflagResponse()
{
Function.Call((Hash)0x760910B49D2B98EA);
}

/// <summary>
/// Hashed version of BG_START_CONTEXT.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75B18E49607874C7<br />
/// </para>
/// </remarks>
public static void BgStartContextHash(uint contextHash)
{
Function.Call((Hash)0x75B18E49607874C7, contextHash);
}

/// <summary>
/// Hashed version of BG_END_CONTEXT.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x107E5CC7CA942BC1<br />
/// </para>
/// </remarks>
public static void BgEndContextHash(uint contextHash)
{
Function.Call((Hash)0x107E5CC7CA942BC1, contextHash);
}

/// <summary>
/// Inserts the given context into the background scripts context map.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D5A25BADB742ACD<br />
/// </para>
/// </remarks>
public static void BgStartContext(string contextName)
{
Function.Call((Hash)0x9D5A25BADB742ACD, contextName);
}

/// <summary>
/// Deletes the given context from the background scripts context map.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC2BACD920D0A0DD<br />
/// </para>
/// </remarks>
public static void BgEndContext(string contextName)
{
Function.Call((Hash)0xDC2BACD920D0A0DD, contextName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F6F1EBBC4E1D5E6<br />
/// </para>
/// </remarks>
public static bool BgDoesLaunchParamExist(int scriptIndex, string p1)
{
return Function.Call<bool>((Hash)0x0F6F1EBBC4E1D5E6, scriptIndex, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22E21FBCFC88C149<br />
/// </para>
/// </remarks>
public static int BgGetLaunchParamValue(int scriptIndex, string p1)
{
return Function.Call<int>((Hash)0x22E21FBCFC88C149, scriptIndex, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x829CD22E043A2577<br />
/// </para>
/// </remarks>
public static int BgGetScriptIdFromNameHash(uint p0)
{
return Function.Call<int>((Hash)0x829CD22E043A2577, p0);
}

/// <summary>
/// See TRIGGER_SCRIPT_EVENT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xA40CC53DF8E50837<br />
/// </para>
/// </remarks>
public static void SendTuScriptEvent(int eventGroup, int /* bug: structure */ eventData, int eventDataSize, int playerBits)
{
Function.Call((Hash)0xA40CC53DF8E50837, eventGroup, eventData, eventDataSize, playerBits);
}

#endregion
#region SECURITY
/// <summary>
/// Registers a protected variable that will be checked for modifications by the anticheat
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x40EB1EFD921822BC<br />
/// </para>
/// </remarks>
public static void RegisterScriptVariable(int /* bug: structure */ variable)
{
Function.Call((Hash)0x40EB1EFD921822BC, variable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x340A36A700E99699<br />
/// </para>
/// </remarks>
public static void UnregisterScriptVariable(int /* bug: structure */ variable)
{
Function.Call((Hash)0x340A36A700E99699, variable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x8E580AB902917360<br />
/// </para>
/// </remarks>
public static void ForceCheckScriptVariables()
{
Function.Call((Hash)0x8E580AB902917360);
}

#endregion
#region SHAPETEST
/// <summary>
/// Asynchronously starts a line-of-sight (raycast) world probe shape test.<br /><br />Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.<br /><br />p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EE9F5D83DD4F90E<br />
/// </para>
/// </remarks>
public static int StartShapeTestLosProbe(float x1, float y1, float z1, float x2, float y2, float z2, int flags, int /* Entity */ entity, int p8)
{
return Function.Call<int>((Hash)0x7EE9F5D83DD4F90E, x1, y1, z1, x2, y2, z2, flags, entity, p8);
}

/// <summary>
/// Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x377906D8A31E5586<br />
/// </para>
/// </remarks>
public static int StartExpensiveSynchronousShapeTestLosProbe(float x1, float y1, float z1, float x2, float y2, float z2, int flags, int /* Entity */ entity, int p8)
{
return Function.Call<int>((Hash)0x377906D8A31E5586, x1, y1, z1, x2, y2, z2, flags, entity, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x052837721A854EC7<br />
/// </para>
/// </remarks>
public static int StartShapeTestBoundingBox(int /* Entity */ entity, int flags1, int flags2)
{
return Function.Call<int>((Hash)0x052837721A854EC7, entity, flags1, flags2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE466162C4401D18<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StartShapeTestBox(float x, float y, float z, float dimX, float dimY, float dimZ, float rotX, float rotY, float rotZ, int /* bug: Any */ p9, int flags, int /* Entity */ entity, int /* bug: Any */ p12)
{
return Function.Call<int>((Hash)0xFE466162C4401D18, x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ, p9, flags, entity, p12);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37181417CE7C8900<br />
/// </para>
/// </remarks>
public static int StartShapeTestBound(int /* Entity */ entity, int flags1, int flags2)
{
return Function.Call<int>((Hash)0x37181417CE7C8900, entity, flags1, flags2);
}

/// <summary>
/// Raycast from point to point, where the ray has a radius. <br /><br />flags:<br />vehicles=10<br />peds =12<br /><br />Iterating through flags yields many ped / vehicle/ object combinations<br /><br />p9 = 7, but no idea what it does<br /><br />Entity is an entity to ignore
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28579D1B8F8AAC80<br />
/// </para>
/// </remarks>
public static int StartShapeTestCapsule(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, int /* Entity */ entity, int p9)
{
return Function.Call<int>((Hash)0x28579D1B8F8AAC80, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6AC6C45FBE83004<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StartShapeTestSweptSphere(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, int /* Entity */ entity, int /* bug: Any */ p9)
{
return Function.Call<int>((Hash)0xE6AC6C45FBE83004, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
}

/// <summary>
/// Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.<br /><br />In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF6BE494C7987F34<br />
/// </para>
/// </remarks>
public static int StartShapeTestMouseCursorLosProbe(ref Vector3 pVec1, ref Vector3 pVec2, int flag, int /* Entity */ entity, int flag2)
{
var nativeAssistPointerVar0 = pVec1;
var nativeAssistPointerVar1 = pVec2;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xFF6BE494C7987F34, &nativeAssistPointerVar0, &nativeAssistPointerVar1, flag, entity, flag2);
}
pVec1 = nativeAssistPointerVar0;
pVec2 = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.<br /><br />When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D87450E15D98694<br />
/// </para>
/// </remarks>
public static int GetShapeTestResult(int shapeTestHandle, ref bool hit, ref Vector3 endCoords, ref Vector3 surfaceNormal, ref int /* Entity* */ entityHit)
{
var nativeAssistPointerVar0 = hit;
var nativeAssistPointerVar1 = endCoords;
var nativeAssistPointerVar2 = surfaceNormal;
var nativeAssistPointerVar3 = entityHit;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x3D87450E15D98694, shapeTestHandle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3);
}
hit = nativeAssistPointerVar0;
endCoords = nativeAssistPointerVar1;
surfaceNormal = nativeAssistPointerVar2;
entityHit = nativeAssistPointerVar3;
return retVal;
}

/// <summary>
/// Returns the result of a shape test, also returning the material of any touched surface.<br /><br />When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.<br /><br />Unless the return value is 2, the other return values are undefined.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65287525D951F6BE<br />
/// </para>
/// </remarks>
public static int GetShapeTestResultIncludingMaterial(int shapeTestHandle, ref bool hit, ref Vector3 endCoords, ref Vector3 surfaceNormal, ref uint materialHash, ref int /* Entity* */ entityHit)
{
var nativeAssistPointerVar0 = hit;
var nativeAssistPointerVar1 = endCoords;
var nativeAssistPointerVar2 = surfaceNormal;
var nativeAssistPointerVar3 = materialHash;
var nativeAssistPointerVar4 = entityHit;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x65287525D951F6BE, shapeTestHandle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, &nativeAssistPointerVar3, &nativeAssistPointerVar4);
}
hit = nativeAssistPointerVar0;
endCoords = nativeAssistPointerVar1;
surfaceNormal = nativeAssistPointerVar2;
materialHash = nativeAssistPointerVar3;
entityHit = nativeAssistPointerVar4;
return retVal;
}

/// <summary>
/// Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an &apos;irrelevant&apos; entity handle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B3334BCA57CD799<br />
/// </para>
/// </remarks>
public static void ReleaseScriptGuidFromEntity(int /* Entity */ entityHit)
{
Function.Call((Hash)0x2B3334BCA57CD799, entityHit);
}

#endregion
#region SOCIALCLUB
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03A93FF1A2CA0864<br />
/// </para>
/// </remarks>
public static int ScInboxGetTotalNumMessages()
{
return Function.Call<int>((Hash)0x03A93FF1A2CA0864);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB8EA16ECBC976C4<br />
/// </para>
/// </remarks>
public static uint ScInboxGetMessageTypeAtIndex(int msgIndex)
{
return Function.Call<uint>((Hash)0xBB8EA16ECBC976C4, msgIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93028F1DB42BFD08<br />
/// </para>
/// </remarks>
public static bool ScInboxGetMessageIsReadAtIndex(int msgIndex)
{
return Function.Call<bool>((Hash)0x93028F1DB42BFD08, msgIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C015348CF19CA1D<br />
/// </para>
/// </remarks>
public static bool ScInboxSetMessageAsReadAtIndex(int msgIndex)
{
return Function.Call<bool>((Hash)0x2C015348CF19CA1D, msgIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA00EFE4082C4056E<br />
/// </para>
/// </remarks>
public static bool ScInboxMessageGetDataInt(int p0, string context, ref int @out)
{
var nativeAssistPointerVar0 = @out;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA00EFE4082C4056E, p0, context, &nativeAssistPointerVar0);
}
@out = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFE5C16F402D851D<br />
/// </para>
/// </remarks>
public static bool ScInboxMessageGetDataBool(int p0, string p1)
{
return Function.Call<bool>((Hash)0xFFE5C16F402D851D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7572EF42FC6A9B6D<br />
/// </para>
/// </remarks>
public static bool ScInboxMessageGetDataString(int p0, string context, string @out)
{
return Function.Call<bool>((Hash)0x7572EF42FC6A9B6D, p0, context, @out);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A2C8064B6C1E41A<br />
/// </para>
/// </remarks>
public static bool ScInboxMessageDoApply(int p0)
{
return Function.Call<bool>((Hash)0x9A2C8064B6C1E41A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3E31D16CBDCB304<br />
/// </para>
/// </remarks>
public static string ScInboxMessageGetRawTypeAtIndex(int p0)
{
return Function.Call<string>((Hash)0xF3E31D16CBDCB304, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDA024BDBD600F44A<br />
/// </para>
/// </remarks>
public static void ScInboxMessagePushGamerT0RecipList(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0xDA024BDBD600F44A, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA68D3D229F4F3B06<br />
/// </para>
/// </remarks>
public static void ScInboxSendUgcstatupdateToRecipList(int /* bug: structure */ data)
{
Function.Call((Hash)0xA68D3D229F4F3B06, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69D82604A1A5A254<br />
/// </para>
/// </remarks>
public static bool ScInboxMessageGetUgcdata(int p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x69D82604A1A5A254, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6AFD2CD753FEEF83<br />
/// </para>
/// </remarks>
public static bool ScInboxSendBountyToRecipList(int /* bug: structure */ data)
{
return Function.Call<bool>((Hash)0x6AFD2CD753FEEF83, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87E0052F08BD64E6<br />
/// </para>
/// </remarks>
public static bool ScInboxGetBountyDataAtIndex(int index, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0x87E0052F08BD64E6, index, outData);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x040ADDCBAFA1018A<br />
/// </para>
/// </remarks>
public static void ScEmailRetrieveEmails(int offset, int limit)
{
Function.Call((Hash)0x040ADDCBAFA1018A, offset, limit);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16DA8172459434AA<br />
/// </para>
/// </remarks>
public static int ScEmailGetRetrievalStatus()
{
return Function.Call<int>((Hash)0x16DA8172459434AA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x7DB18CA8CAD5B098<br />
/// </para>
/// </remarks>
public static int ScEmailGetNumRetrievedEmails()
{
return Function.Call<int>((Hash)0x7DB18CA8CAD5B098);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4737980E8A283806<br />
/// </para>
/// </remarks>
public static bool ScEmailGetEmailAtIndex(int p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x4737980E8A283806, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x44ACA259D67651DB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ScEmailDeleteEmails(int /* bug: structure */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x44ACA259D67651DB, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2330C12A7A605D16<br />
/// </para>
/// </remarks>
public static void ScEmailMessagePushGamerToRecipList(int /* bug: structure */ gamerHandle)
{
Function.Call((Hash)0x2330C12A7A605D16, gamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55DF6DB45179236E<br />
/// </para>
/// </remarks>
public static void ScEmailMessageClearRecipList()
{
Function.Call((Hash)0x55DF6DB45179236E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x116FB94DC4B79F17<br />
/// </para>
/// </remarks>
public static void ScEmailSendEmail(string p0)
{
Function.Call((Hash)0x116FB94DC4B79F17, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x07DBD622D9533857<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScEmailSetCurrentEmailTag(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x07DBD622D9533857, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFA0A56A817C6C7D<br />
/// </para>
/// </remarks>
public static void ScCacheNewRockstarMsgs(bool toggle)
{
Function.Call((Hash)0xBFA0A56A817C6C7D, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC1CC91205EC8D6E<br />
/// </para>
/// </remarks>
public static bool ScHasNewRockstarMsg()
{
return Function.Call<bool>((Hash)0xBC1CC91205EC8D6E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF649C4E9AFDD788<br />
/// </para>
/// </remarks>
public static string ScGetNewRockstarMsg()
{
return Function.Call<string>((Hash)0xDF649C4E9AFDD788);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F1E9682483697C7<br />
/// </para>
/// </remarks>
public static bool ScPresenceAttrSetInt(uint attrHash, int value)
{
return Function.Call<bool>((Hash)0x1F1E9682483697C7, attrHash, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4C4575F62534A24<br />
/// </para>
/// </remarks>
public static bool ScPresenceAttrSetFloat(uint attrHash, float value)
{
return Function.Call<bool>((Hash)0xC4C4575F62534A24, attrHash, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x287F1F75D2803595<br />
/// </para>
/// </remarks>
public static bool ScPresenceAttrSetString(uint attrHash, string value)
{
return Function.Call<bool>((Hash)0x287F1F75D2803595, attrHash, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x487912FD248EFDDF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScPresenceSetActivityRating(int /* bug: Any */ p0, float p1)
{
return Function.Call<bool>((Hash)0x487912FD248EFDDF, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC85A7127E7AD02AA<br />
/// </para>
/// </remarks>
public static bool ScGamerdataGetInt(string name, ref int value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC85A7127E7AD02AA, name, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA770C8EEC6FB2AC5<br />
/// </para>
/// </remarks>
public static bool ScGamerdataGetFloat(string name, ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA770C8EEC6FB2AC5, name, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8416FE4E4629D7D7<br />
/// </para>
/// </remarks>
public static bool ScGamerdataGetBool(string name)
{
return Function.Call<bool>((Hash)0x8416FE4E4629D7D7, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FFCBFEE44ECFABF<br />
/// </para>
/// </remarks>
public static bool ScGamerdataGetString(string name, string value)
{
return Function.Call<bool>((Hash)0x7FFCBFEE44ECFABF, name, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D874D4AE612A65F<br />
/// </para>
/// </remarks>
public static bool ScGamerdataGetActiveXpBonus(ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2D874D4AE612A65F, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Starts a task to check an entered string for profanity on the ROS/Social Club services.<br /><br />See also: 1753344C770358AE, 82E4A58BABC15AE7.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75632C5ECD7ED843<br />
/// </para>
/// </remarks>
public static bool ScProfanityCheckString(string @string, ref int token)
{
var nativeAssistPointerVar0 = token;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x75632C5ECD7ED843, @string, &nativeAssistPointerVar0);
}
token = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xEB2BF817463DFA28<br />
/// </para>
/// </remarks>
public static bool ScProfanityCheckStringUgc(string @string, ref int token)
{
var nativeAssistPointerVar0 = token;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xEB2BF817463DFA28, @string, &nativeAssistPointerVar0);
}
token = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1753344C770358AE<br />
/// </para>
/// </remarks>
public static bool ScProfanityGetCheckIsValid(int token)
{
return Function.Call<bool>((Hash)0x1753344C770358AE, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x82E4A58BABC15AE7<br />
/// </para>
/// </remarks>
public static bool ScProfanityGetCheckIsPending(int token)
{
return Function.Call<bool>((Hash)0x82E4A58BABC15AE7, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85535ACF97FC0969<br />
/// </para>
/// </remarks>
public static bool ScProfanityGetStringPassed(int token)
{
return Function.Call<bool>((Hash)0x85535ACF97FC0969, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x930DE22F07B1CCE3<br />
/// </para>
/// </remarks>
public static int ScProfanityGetStringStatus(int token)
{
return Function.Call<int>((Hash)0x930DE22F07B1CCE3, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6BAAAF762E1BF40<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateCheckString(string p0, ref int p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF6BAAAF762E1BF40, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF22CA0FD74B80E7A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScLicenseplateGetCheckIsValid(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xF22CA0FD74B80E7A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9237E334F6E43156<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScLicenseplateGetCheckIsPending(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x9237E334F6E43156, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x700569DBA175A77C<br />
/// </para>
/// </remarks>
public static int ScLicenseplateGetCount(int token)
{
return Function.Call<int>((Hash)0x700569DBA175A77C, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D4446A62D35B0D0<br />
/// </para>
/// </remarks>
public static string ScLicenseplateGetPlate(int token, int plateIndex)
{
return Function.Call<string>((Hash)0x1D4446A62D35B0D0, token, plateIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E89990DDFF670C3<br />
/// </para>
/// </remarks>
public static string ScLicenseplateGetPlateData(int token, int plateIndex)
{
return Function.Call<string>((Hash)0x2E89990DDFF670C3, token, plateIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0EE05FE193646EA<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateSetPlateData(string oldPlateText, string newPlateText, int /* bug: structure */ plateData)
{
return Function.Call<bool>((Hash)0xD0EE05FE193646EA, oldPlateText, newPlateText, plateData);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1989C6E6F67E76A8<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateAdd(string plateText, int /* bug: structure */ plateData, ref int token)
{
var nativeAssistPointerVar0 = token;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x1989C6E6F67E76A8, plateText, plateData, &nativeAssistPointerVar0);
}
token = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07C61676E5BB52CD<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateGetAddIsPending(int token)
{
return Function.Call<bool>((Hash)0x07C61676E5BB52CD, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8147FFF6A718E1AD<br />
/// </para>
/// </remarks>
public static int ScLicenseplateGetAddStatus(int token)
{
return Function.Call<int>((Hash)0x8147FFF6A718E1AD, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F73393BAC7E6730<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateIsvalid(string plateText, ref int token)
{
var nativeAssistPointerVar0 = token;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x0F73393BAC7E6730, plateText, &nativeAssistPointerVar0);
}
token = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD302E99EDF0449CF<br />
/// </para>
/// </remarks>
public static bool ScLicenseplateGetIsvalidIsPending(int token)
{
return Function.Call<bool>((Hash)0xD302E99EDF0449CF, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C4EBFFA98BDB41C<br />
/// </para>
/// </remarks>
public static int ScLicenseplateGetIsvalidStatus(int token)
{
return Function.Call<int>((Hash)0x5C4EBFFA98BDB41C, token);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF8F3A92B75ED67A<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventIsActive()
{
return Function.Call<bool>((Hash)0xFF8F3A92B75ED67A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4ED9C8D6DA297639<br />
/// </para>
/// </remarks>
public static int ScCommunityEventGetEventId()
{
return Function.Call<int>((Hash)0x4ED9C8D6DA297639);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x710BCDA8071EDED1<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataInt(string p0, ref int p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x710BCDA8071EDED1, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50A8A36201DBF83E<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataFloat(string p0, ref float p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x50A8A36201DBF83E, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DE5D2F723575ED0<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataString(string p0, string p1)
{
return Function.Call<bool>((Hash)0x9DE5D2F723575ED0, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2C97EA97711D1AE<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetDisplayName(string p0)
{
return Function.Call<bool>((Hash)0xC2C97EA97711D1AE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x450819D8CF90C416<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventIsActiveForType(string p0)
{
return Function.Call<bool>((Hash)0x450819D8CF90C416, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A7D6E727F941747<br />
/// </para>
/// </remarks>
public static int ScCommunityEventGetEventIdForType(string p0)
{
return Function.Call<int>((Hash)0x4A7D6E727F941747, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE75A4A2E5E316D86<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataIntForType(string p0, ref int p1, string p2)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xE75A4A2E5E316D86, p0, &nativeAssistPointerVar0, p2);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2570E26BE63964E3<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataFloatForType(string p0, ref float p1, string p2)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2570E26BE63964E3, p0, &nativeAssistPointerVar0, p2);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D12A56FC95BE92E<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataStringForType(string p0, string p1, string p2)
{
return Function.Call<bool>((Hash)0x1D12A56FC95BE92E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33DF47CC0642061B<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetDisplayNameForType(string p0, string p1)
{
return Function.Call<bool>((Hash)0x33DF47CC0642061B, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA468E0BE12B12C70<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventIsActiveById(int p0)
{
return Function.Call<bool>((Hash)0xA468E0BE12B12C70, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8CC469AB4D349B7C<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataIntById(int p0, string p1, ref int p2)
{
var nativeAssistPointerVar0 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8CC469AB4D349B7C, p0, p1, &nativeAssistPointerVar0);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5A35C73B68F3C49<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataFloatById(int p0, string p1, ref float p2)
{
var nativeAssistPointerVar0 = p2;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xC5A35C73B68F3C49, p0, p1, &nativeAssistPointerVar0);
}
p2 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x699E4A5C8C893A18<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetExtraDataStringById(int p0, string p1, string p2)
{
return Function.Call<bool>((Hash)0x699E4A5C8C893A18, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19853B5B17D77BCA<br />
/// </para>
/// </remarks>
public static bool ScCommunityEventGetDisplayNameById(int p0, string p1)
{
return Function.Call<bool>((Hash)0x19853B5B17D77BCA, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6BFB12CE158E3DD4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScTransitionNewsShow(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x6BFB12CE158E3DD4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE4C1D0D3B9CC17E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScTransitionNewsShowTimed(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xFE4C1D0D3B9CC17E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8122C407663B995<br />
/// </para>
/// </remarks>
public static bool ScTransitionNewsShowNextItem()
{
return Function.Call<bool>((Hash)0xD8122C407663B995);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3001BEF2FECA3680<br />
/// </para>
/// </remarks>
public static bool ScTransitionNewsHasExtraDataTu()
{
return Function.Call<bool>((Hash)0x3001BEF2FECA3680);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92DA6E70EF249BD1<br />
/// </para>
/// </remarks>
public static bool ScTransitionNewsGetExtraDataIntTu(string p0, ref int p1)
{
var nativeAssistPointerVar0 = p1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x92DA6E70EF249BD1, p0, &nativeAssistPointerVar0);
}
p1 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x675721C9F644D161<br />
/// </para>
/// </remarks>
public static void ScTransitionNewsEnd()
{
Function.Call((Hash)0x675721C9F644D161);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xE4F6E8D07A2F0F51<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScPauseNewsInitStarterPack(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xE4F6E8D07A2F0F51, p0);
}

/// <summary>
/// Fills some 0x30 sized struct
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x8A4416C0DB05FA66<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool ScPauseNewsGetPendingStory(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8A4416C0DB05FA66, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xEA95C0853A27888E<br />
/// </para>
/// </remarks>
public static void ScPauseNewsShutdown()
{
Function.Call((Hash)0xEA95C0853A27888E);
}

/// <summary>
/// Returns the nickname of the logged-in Rockstar Social Club account.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x198D161F458ECC7F<br />
/// </para>
/// </remarks>
public static string ScAccountInfoGetNickname()
{
return Function.Call<string>((Hash)0x198D161F458ECC7F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x225798743970412B<br />
/// </para>
/// </remarks>
public static bool ScAchievementInfoStatus(ref int p0)
{
var nativeAssistPointerVar0 = p0;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x225798743970412B, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Same as HAS_ACHIEVEMENT_BEEN_PASSED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x418DC16FAE452C1C<br />
/// </para>
/// </remarks>
public static bool ScHasAchievementBeenPassed(int achievementId)
{
return Function.Call<bool>((Hash)0x418DC16FAE452C1C, achievementId);
}

#endregion
#region STATS
/// <summary>
/// Example:<br /><br />for (v_2 = 0; v_2 &lt;= 4; v_2 += 1) {<br />    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB0A72181D4AA4AD<br />
/// </para>
/// </remarks>
public static bool StatClearSlotForReload(int statSlot)
{
return Function.Call<bool>((Hash)0xEB0A72181D4AA4AD, statSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA651443F437B1CE6<br />
/// </para>
/// </remarks>
public static bool StatLoad(int p0)
{
return Function.Call<bool>((Hash)0xA651443F437B1CE6, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE07BCA305B82D2FD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatSave(int p0, bool p1, int p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0xE07BCA305B82D2FD, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5688585E6D563CD8<br />
/// </para>
/// </remarks>
public static void StatSetOpenSavetypeInJob(int p0)
{
Function.Call((Hash)0x5688585E6D563CD8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1750FFAFA181661<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatLoadPending(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xA1750FFAFA181661, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D3A583856F2C5AC<br />
/// </para>
/// </remarks>
public static bool StatSavePending()
{
return Function.Call<bool>((Hash)0x7D3A583856F2C5AC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBB6AD006F1BBEA3<br />
/// </para>
/// </remarks>
public static bool StatSavePendingOrRequested()
{
return Function.Call<bool>((Hash)0xBBB6AD006F1BBEA3);
}

/// <summary>
/// p0 is characterSlot? seems range from 0 to 2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49A49BED12794D70<br />
/// </para>
/// </remarks>
public static bool StatDeleteSlot(int p0)
{
return Function.Call<bool>((Hash)0x49A49BED12794D70, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D0A9F0E7BD91E3C<br />
/// </para>
/// </remarks>
public static bool StatSlotIsLoaded(int p0)
{
return Function.Call<bool>((Hash)0x0D0A9F0E7BD91E3C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F2C4CDF2E82DF4C<br />
/// </para>
/// </remarks>
public static bool StatCloudSlotLoadFailed(int p0)
{
return Function.Call<bool>((Hash)0x7F2C4CDF2E82DF4C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE496A53BA5F50A56<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StatCloudSlotLoadFailedCode(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0xE496A53BA5F50A56, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF434A10BA01C37D0<br />
/// </para>
/// </remarks>
public static void StatSetBlockSaves(bool toggle)
{
Function.Call((Hash)0xF434A10BA01C37D0, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x6A7F19756F1A9016<br />
/// </para>
/// </remarks>
public static bool StatGetBlockSaves()
{
return Function.Call<bool>((Hash)0x6A7F19756F1A9016);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7E6946F68A38B74F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatCloudSlotSaveFailed(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x7E6946F68A38B74F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA8733668D1047B51<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StatClearPendingSaves(int /* bug: Any */ p0)
{
Function.Call((Hash)0xA8733668D1047B51, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xECB41AC6AB754401<br />
/// </para>
/// </remarks>
public static bool StatLoadDirtyReadDetected()
{
return Function.Call<bool>((Hash)0xECB41AC6AB754401);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B4BD21D69B1E609<br />
/// </para>
/// </remarks>
public static void StatClearDirtyReadDetected()
{
Function.Call((Hash)0x9B4BD21D69B1E609);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0E0D686DDFC6EAE<br />
/// </para>
/// </remarks>
public static bool StatGetLoadSafeToProgressToMpFromSp()
{
return Function.Call<bool>((Hash)0xC0E0D686DDFC6EAE);
}

/// <summary>
/// Example:<br /> STATS::STAT_SET_INT(MISC::GET_HASH_KEY(&quot;MPPLY_KILLS_PLAYERS&quot;), 1337, true);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3271D7AB655B441<br />
/// </para>
/// </remarks>
public static bool StatSetInt(uint statName, int value, bool save)
{
return Function.Call<bool>((Hash)0xB3271D7AB655B441, statName, value, save);
}

/// <summary>
/// Example:<br /> STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY(&quot;MP0_WEAPON_ACCURACY&quot;), 66.6f, true);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4851997F37FE9B3C<br />
/// </para>
/// </remarks>
public static bool StatSetFloat(uint statName, float value, bool save)
{
return Function.Call<bool>((Hash)0x4851997F37FE9B3C, statName, value, save);
}

/// <summary>
/// Example:<br /> STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY(&quot;MPPLY_MELEECHLENGECOMPLETED&quot;), trur, true);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B33C4243DE0C432<br />
/// </para>
/// </remarks>
public static bool StatSetBool(uint statName, bool value, bool save)
{
return Function.Call<bool>((Hash)0x4B33C4243DE0C432, statName, value, save);
}

/// <summary>
/// The following values have been found in the decompiled scripts:<br />&quot;RC_ABI1&quot;<br />&quot;RC_ABI2&quot;<br />&quot;RC_BA1&quot;<br />&quot;RC_BA2&quot;<br />&quot;RC_BA3&quot;<br />&quot;RC_BA3A&quot;<br />&quot;RC_BA3C&quot;<br />&quot;RC_BA4&quot;<br />&quot;RC_DRE1&quot;<br />&quot;RC_EPS1&quot;<br />&quot;RC_EPS2&quot;<br />&quot;RC_EPS3&quot;<br />&quot;RC_EPS4&quot;<br />&quot;RC_EPS5&quot;<br />&quot;RC_EPS6&quot;<br />&quot;RC_EPS7&quot;<br />&quot;RC_EPS8&quot;<br />&quot;RC_EXT1&quot;<br />&quot;RC_EXT2&quot;<br />&quot;RC_EXT3&quot;<br />&quot;RC_EXT4&quot;<br />&quot;RC_FAN1&quot;<br />&quot;RC_FAN2&quot;<br />&quot;RC_FAN3&quot;<br />&quot;RC_HAO1&quot;<br />&quot;RC_HUN1&quot;<br />&quot;RC_HUN2&quot;<br />&quot;RC_JOS1&quot;<br />&quot;RC_JOS2&quot;<br />&quot;RC_JOS3&quot;<br />&quot;RC_JOS4&quot;<br />&quot;RC_MAU1&quot;<br />&quot;RC_MIN1&quot;<br />&quot;RC_MIN2&quot;<br />&quot;RC_MIN3&quot;<br />&quot;RC_MRS1&quot;<br />&quot;RC_MRS2&quot;<br />&quot;RC_NI1&quot;<br />&quot;RC_NI1A&quot;<br />&quot;RC_NI1B&quot;<br />&quot;RC_NI1C&quot;<br />&quot;RC_NI1D&quot;<br />&quot;RC_NI2&quot;<br />&quot;RC_NI3&quot;<br />&quot;RC_OME1&quot;<br />&quot;RC_OME2&quot;<br />&quot;RC_PA1&quot;<br />&quot;RC_PA2&quot;<br />&quot;RC_PA3&quot;<br />&quot;RC_PA3A&quot;<br />&quot;RC_PA3B&quot;<br />&quot;RC_PA4&quot;<br />&quot;RC_RAM1&quot;<br />&quot;RC_RAM2&quot;<br />&quot;RC_RAM3&quot;<br />&quot;RC_RAM4&quot;<br />&quot;RC_RAM5&quot;<br />&quot;RC_SAS1&quot;<br />&quot;RC_TON1&quot;<br />&quot;RC_TON2&quot;<br />&quot;RC_TON3&quot;<br />&quot;RC_TON4&quot;<br />&quot;RC_TON5&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17695002FD8B2AE0<br />
/// </para>
/// </remarks>
public static bool StatSetGxtLabel(uint statName, string value, bool save)
{
return Function.Call<bool>((Hash)0x17695002FD8B2AE0, statName, value, save);
}

/// <summary>
/// &apos;value&apos; is a structure to a structure, &apos;numFields&apos; is how many fields there are in said structure (usually 7).<br /><br />The structure looks like this:<br /><br />int year<br />int month<br />int day<br />int hour<br />int minute<br />int second<br />int millisecond<br /><br />The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C29BFB64F4FCBE4<br />
/// </para>
/// </remarks>
public static bool StatSetDate(uint statName, int /* bug: structure */ value, int numFields, bool save)
{
return Function.Call<bool>((Hash)0x2C29BFB64F4FCBE4, statName, value, numFields, save);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA87B2335D12531D7<br />
/// </para>
/// </remarks>
public static bool StatSetString(uint statName, string value, bool save)
{
return Function.Call<bool>((Hash)0xA87B2335D12531D7, statName, value, save);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB283FDE680FE72E<br />
/// </para>
/// </remarks>
public static bool StatSetPos(uint statName, float x, float y, float z, bool save)
{
return Function.Call<bool>((Hash)0xDB283FDE680FE72E, statName, x, y, z, save);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7BBB1B54583ED410<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatSetMaskedInt(uint statName, int /* bug: Any */ p1, int /* bug: Any */ p2, int p3, bool save)
{
return Function.Call<bool>((Hash)0x7BBB1B54583ED410, statName, p1, p2, p3, save);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8CDDF1E452BABE11<br />
/// </para>
/// </remarks>
public static bool StatSetUserId(uint statName, string value, bool save)
{
return Function.Call<bool>((Hash)0x8CDDF1E452BABE11, statName, value, save);
}

/// <summary>
/// p1 always true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2F84B7F9C4D0C61<br />
/// </para>
/// </remarks>
public static bool StatSetCurrentPosixTime(uint statName, bool p1)
{
return Function.Call<bool>((Hash)0xC2F84B7F9C4D0C61, statName, p1);
}

/// <summary>
/// p2 appears to always be -1<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x767FBC2AC802EF3D<br />
/// </para>
/// </remarks>
public static bool StatGetInt(uint statHash, ref int outValue, int p2)
{
var nativeAssistPointerVar0 = outValue;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x767FBC2AC802EF3D, statHash, &nativeAssistPointerVar0, p2);
}
outValue = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7AE6C9C9C6AC54C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatGetFloat(uint statHash, ref float outValue, int /* bug: Any */ p2)
{
var nativeAssistPointerVar0 = outValue;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xD7AE6C9C9C6AC54C, statHash, &nativeAssistPointerVar0, p2);
}
outValue = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11B5E6D2AE73F48E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatGetBool(uint statHash, ref bool outValue, int /* bug: Any */ p2)
{
var nativeAssistPointerVar0 = outValue;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x11B5E6D2AE73F48E, statHash, &nativeAssistPointerVar0, p2);
}
outValue = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B0FACEFC36C824B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatGetDate(uint statHash, int /* bug: structure */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x8B0FACEFC36C824B, statHash, p1, p2, p3);
}

/// <summary>
/// p1 is always -1 in the script files
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE50384ACC2C3DB74<br />
/// </para>
/// </remarks>
public static string StatGetString(uint statHash, int p1)
{
return Function.Call<string>((Hash)0xE50384ACC2C3DB74, statHash, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x350F82CCB186AA1B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatGetPos(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0x350F82CCB186AA1B, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x655185A06D9EEAAB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StatGetMaskedInt(int /* bug: Any */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0x655185A06D9EEAAB, p0, p1, p2, p3, p4);
}

/// <summary>
/// Needs more research. Seems to return &quot;STAT_UNKNOWN&quot; if no such user id exists.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2365C388E393BBE2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static string StatGetUserId(int /* bug: Any */ p0)
{
return Function.Call<string>((Hash)0x2365C388E393BBE2, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5473D4195058B2E4<br />
/// </para>
/// </remarks>
public static string StatGetLicensePlate(uint statName)
{
return Function.Call<string>((Hash)0x5473D4195058B2E4, statName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69FF13266D7296DA<br />
/// </para>
/// </remarks>
public static bool StatSetLicensePlate(uint statName, string str)
{
return Function.Call<bool>((Hash)0x69FF13266D7296DA, statName, str);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B5A68C6489E9909<br />
/// </para>
/// </remarks>
public static void StatIncrement(uint statName, float value)
{
Function.Call((Hash)0x9B5A68C6489E9909, statName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A556B229A169402<br />
/// </para>
/// </remarks>
public static bool StatCommunityStartSynch()
{
return Function.Call<bool>((Hash)0x5A556B229A169402);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1D2BB1E1631F5B1<br />
/// </para>
/// </remarks>
public static bool StatCommunitySynchIsPending()
{
return Function.Call<bool>((Hash)0xB1D2BB1E1631F5B1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBED9F5693F34ED17<br />
/// </para>
/// </remarks>
public static bool StatCommunityGetHistory(uint statName, int p1, ref float outValue)
{
var nativeAssistPointerVar0 = outValue;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xBED9F5693F34ED17, statName, p1, &nativeAssistPointerVar0);
}
outValue = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// p0 seems to range from 0 to 7
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26D7399B9587FE89<br />
/// </para>
/// </remarks>
public static void StatResetAllOnlineCharacterStats(int p0)
{
Function.Call((Hash)0x26D7399B9587FE89, p0);
}

/// <summary>
/// p0 seems to range from 0 to 7
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA78B8FA58200DA56<br />
/// </para>
/// </remarks>
public static void StatLocalResetAllOnlineCharacterStats(int p0)
{
Function.Call((Hash)0xA78B8FA58200DA56, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE0E854F5280FB769<br />
/// </para>
/// </remarks>
public static int StatGetNumberOfDays(uint statName)
{
return Function.Call<int>((Hash)0xE0E854F5280FB769, statName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2D4B2FE415AAFC3<br />
/// </para>
/// </remarks>
public static int StatGetNumberOfHours(uint statName)
{
return Function.Call<int>((Hash)0xF2D4B2FE415AAFC3, statName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7583B4BE4C5A41B5<br />
/// </para>
/// </remarks>
public static int StatGetNumberOfMinutes(uint statName)
{
return Function.Call<int>((Hash)0x7583B4BE4C5A41B5, statName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CE056FF3723F00B<br />
/// </para>
/// </remarks>
public static int StatGetNumberOfSeconds(uint statName)
{
return Function.Call<int>((Hash)0x2CE056FF3723F00B, statName);
}

/// <summary>
/// Does not take effect immediately, unfortunately.<br /><br />profileSetting seems to only be 936, 937 and 938 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x68F01422BE1D838F<br />
/// </para>
/// </remarks>
public static void StatSetProfileSettingValue(int profileSetting, int value)
{
Function.Call((Hash)0x68F01422BE1D838F, profileSetting, value);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xC01D2470F22CDE5A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StatsCompletedCharacterCreation(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC01D2470F22CDE5A, p0);
}

/// <summary>
/// Needs more research. Possibly used to calculate the &quot;mask&quot; when calling &quot;STAT_SET_MASKED_INT&quot;?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94F12ABF9C79E339<br />
/// </para>
/// </remarks>
public static int PackedStatGetIntStatIndex(int p0)
{
return Function.Call<int>((Hash)0x94F12ABF9C79E339, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61E111E323419E07<br />
/// </para>
/// </remarks>
public static uint GetPackedIntStatKey(int index, bool spStat, bool charStat, int character)
{
return Function.Call<uint>((Hash)0x61E111E323419E07, index, spStat, charStat, character);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD16C2AD6B8E32854<br />
/// </para>
/// </remarks>
public static uint GetPackedTuIntStatKey(int index, bool spStat, bool charStat, int character)
{
return Function.Call<uint>((Hash)0xD16C2AD6B8E32854, index, spStat, charStat, character);
}

/// <summary>
/// Needs more research. Gets the stat name of a masked int?<br /><br />section - values used in the decompiled scripts:<br />&quot;_NGPSTAT_INT&quot;<br />&quot;_MP_NGPSTAT_INT&quot;<br />&quot;_MP_LRPSTAT_INT&quot;<br />&quot;_MP_APAPSTAT_INT&quot;<br />&quot;_MP_LR2PSTAT_INT&quot;<br />&quot;_MP_BIKEPSTAT_INT&quot;<br />&quot;_MP_IMPEXPPSTAT_INT&quot;<br />&quot;_MP_GUNRPSTAT_INT&quot;<br />&quot;_NGDLCPSTAT_INT&quot;<br />&quot;_MP_NGDLCPSTAT_INT&quot;<br />&quot;_DLCSMUGCHARPSTAT_INT&quot;<br />&quot;_GANGOPSPSTAT_INT&quot;<br />&quot;_BUSINESSBATPSTAT_INT&quot;<br />&quot;_ARENAWARSPSTAT_INT&quot;<br />&quot;_CASINOPSTAT_INT&quot;<br />&quot;_CASINOHSTPSTAT_INT&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B4CDCA6F07FF3DA<br />
/// </para>
/// </remarks>
public static uint GetPackedNgIntStatKey(int index, bool spStat, bool charStat, int character, string section)
{
return Function.Call<uint>((Hash)0x2B4CDCA6F07FF3DA, index, spStat, charStat, character, section);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xDA7EBFC49AE3F1B0<br />
/// </para>
/// </remarks>
public static bool GetPackedStatBoolCode(int index, int characterSlot)
{
return Function.Call<bool>((Hash)0xDA7EBFC49AE3F1B0, index, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x0BC900A6FE73770C<br />
/// </para>
/// </remarks>
public static int GetPackedStatIntCode(int index, int characterSlot)
{
return Function.Call<int>((Hash)0x0BC900A6FE73770C, index, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xDB8A58AEAA67CD07<br />
/// </para>
/// </remarks>
public static void SetPackedStatBoolCode(int index, bool value, int characterSlot)
{
Function.Call((Hash)0xDB8A58AEAA67CD07, index, value, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x1581503AE529CD2E<br />
/// </para>
/// </remarks>
public static void SetPackedStatIntCode(int index, int value, int characterSlot)
{
Function.Call((Hash)0x1581503AE529CD2E, index, value, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5009DFD741329729<br />
/// </para>
/// </remarks>
public static void PlaystatsBackgroundScriptAction(string action, int value)
{
Function.Call((Hash)0x5009DFD741329729, action, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93054C88E6AA7C44<br />
/// </para>
/// </remarks>
public static void PlaystatsNpcInvite(int /* bug: structure */ p0)
{
Function.Call((Hash)0x93054C88E6AA7C44, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46F917F6B4128FE4<br />
/// </para>
/// </remarks>
public static void PlaystatsAwardXp(int amount, uint type, uint category)
{
Function.Call((Hash)0x46F917F6B4128FE4, amount, type, category);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC7F2DE41D102BFB4<br />
/// </para>
/// </remarks>
public static void PlaystatsRankUp(int rank)
{
Function.Call((Hash)0xC7F2DE41D102BFB4, rank);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x098760C7461724CD<br />
/// </para>
/// </remarks>
public static void PlaystatsStartedSessionInOfflinemode()
{
Function.Call((Hash)0x098760C7461724CD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA071E0ED98F91286<br />
/// </para>
/// </remarks>
public static void PlaystatsActivityDone(int p0, int activityId)
{
Function.Call((Hash)0xA071E0ED98F91286, p0, activityId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5BE134EC7BA96A0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsLeaveJobChain(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xC5BE134EC7BA96A0, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC19A2925C34D2231<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMissionStarted(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, bool p3)
{
Function.Call((Hash)0xC19A2925C34D2231, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C4BB33A8CED7324<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMissionOver(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, bool p3, bool p4, bool p5)
{
Function.Call((Hash)0x7C4BB33A8CED7324, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC900596A63978C1D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMissionCheckpoint(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xC900596A63978C1D, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71862B1D855F32E1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRandomMissionDone(string name, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x71862B1D855F32E1, name, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x121FB4DDDC2D5291<br />
/// </para>
/// </remarks>
public static void PlaystatsRosBet(int amount, int act, int /* Player */ player, float cm)
{
Function.Call((Hash)0x121FB4DDDC2D5291, amount, act, player, cm);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C375C315099DDE4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRaceCheckpoint(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x9C375C315099DDE4, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6DEE77AFF8C21BD1<br />
/// </para>
/// </remarks>
public static bool PlaystatsCreateMatchHistoryId2(ref int playerAccountId, ref int posixTime)
{
var nativeAssistPointerVar0 = playerAccountId;
var nativeAssistPointerVar1 = posixTime;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x6DEE77AFF8C21BD1, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
playerAccountId = nativeAssistPointerVar0;
posixTime = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC80E22DED931E3D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMatchStarted(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xBC80E22DED931E3D, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x176852ACAAC173D1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsShopItem(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x176852ACAAC173D1, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CAE5D2E3F9A07F0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCrateDropMissionDone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7)
{
Function.Call((Hash)0x1CAE5D2E3F9A07F0, p0, p1, p2, p3, p4, p5, p6, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAFC7E5E075A96F46<br />
/// </para>
/// </remarks>
public static void PlaystatsCrateCreated(float p0, float p1, float p2)
{
Function.Call((Hash)0xAFC7E5E075A96F46, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB00196B31C39EB1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHoldUpMissionDone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xCB00196B31C39EB1, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B69F5074C894811<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsImportExportMissionDone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x2B69F5074C894811, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADDD1C754E2E2914<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRaceToPointMissionDone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xADDD1C754E2E2914, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79AB33F0FBFAC40C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsAcquiredHiddenPackage(int /* bug: Any */ p0)
{
Function.Call((Hash)0x79AB33F0FBFAC40C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDDF24D535060F811<br />
/// </para>
/// </remarks>
public static void PlaystatsWebsiteVisited(uint scaleformHash, int p1)
{
Function.Call((Hash)0xDDF24D535060F811, scaleformHash, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F71DE29AB2258F1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFriendActivity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x0F71DE29AB2258F1, p0, p1);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69DEA3E9DB727B4C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsOddjobDone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x69DEA3E9DB727B4C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA739D6D5A05D6E7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsPropChange(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBA739D6D5A05D6E7, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34B973047A2268B9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsClothChange(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x34B973047A2268B9, p0, p1, p2, p3, p4);
}

/// <summary>
/// This is a typo made by R*. It&apos;s supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE95C8A1875A02CA4<br />
/// </para>
/// </remarks>
public static void PlaystatsWeaponModeChange(uint weaponHash, uint componentHashTo, uint componentHashFrom)
{
Function.Call((Hash)0xE95C8A1875A02CA4, weaponHash, componentHashTo, componentHashFrom);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6058665D72302D3F<br />
/// </para>
/// </remarks>
public static void PlaystatsCheatApplied(string cheat)
{
Function.Call((Hash)0x6058665D72302D3F, cheat);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8C54A461C3E11DC<br />
/// </para>
/// </remarks>
public static void PlaystatsJobActivityEnd(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
Function.Call((Hash)0xF8C54A461C3E11DC, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5BB8DAC426A52C0<br />
/// </para>
/// </remarks>
public static void PlaystatsJobBend(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
Function.Call((Hash)0xF5BB8DAC426A52C0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA736CF7FB7C5BFF4<br />
/// </para>
/// </remarks>
public static void PlaystatsJobLtsEnd(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
Function.Call((Hash)0xA736CF7FB7C5BFF4, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14E0B2D1AD1044E0<br />
/// </para>
/// </remarks>
public static void PlaystatsJobLtsRoundEnd(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2, int /* bug: structure */ p3)
{
Function.Call((Hash)0x14E0B2D1AD1044E0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90D0622866E80445<br />
/// </para>
/// </remarks>
public static void PlaystatsQuickfixTool(int element, string item)
{
Function.Call((Hash)0x90D0622866E80445, element, item);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DA3A8DE8CB6226F<br />
/// </para>
/// </remarks>
public static void PlaystatsIdleKick(int time)
{
Function.Call((Hash)0x5DA3A8DE8CB6226F, time);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD1032E482629049E<br />
/// </para>
/// </remarks>
public static void PlaystatsSetJoinType(int joinType)
{
Function.Call((Hash)0xD1032E482629049E, joinType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4FF020A08BC8863<br />
/// </para>
/// </remarks>
public static void PlaystatsHeistSaveCheat(uint hash, int p1)
{
Function.Call((Hash)0xF4FF020A08BC8863, hash, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46326E13DA4E0546<br />
/// </para>
/// </remarks>
public static void PlaystatsAppendDirectorMetric(int /* bug: structure */ p0)
{
Function.Call((Hash)0x46326E13DA4E0546, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x47B32F5611E6E483<br />
/// </para>
/// </remarks>
public static void PlaystatsAwardBadSport(int id)
{
Function.Call((Hash)0x47B32F5611E6E483, id);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x9572BD4DD6B72122<br />
/// </para>
/// </remarks>
public static void PlaystatsPegasusAsPersonalAircraft(uint modelHash)
{
Function.Call((Hash)0x9572BD4DD6B72122, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x6A60E43998228229<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventChallenges(int /* bug: Any */ p0)
{
Function.Call((Hash)0x6A60E43998228229, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xBFAFDB5FAAA5C5AB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventVehicletarget(int /* bug: Any */ p0)
{
Function.Call((Hash)0xBFAFDB5FAAA5C5AB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x8C9D11605E59D955<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventUrbanwarfare(int /* bug: Any */ p0)
{
Function.Call((Hash)0x8C9D11605E59D955, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x3DE3AA516FB126A4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventCheckpointcollection(int /* bug: Any */ p0)
{
Function.Call((Hash)0x3DE3AA516FB126A4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xBAA2F0490E146BE8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventAtob(int /* bug: Any */ p0)
{
Function.Call((Hash)0xBAA2F0490E146BE8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x1A7CE7CD3E653485<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventPennedin(int /* bug: Any */ p0)
{
Function.Call((Hash)0x1A7CE7CD3E653485, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x419615486BBF1956<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventPasstheparcel(int /* bug: Any */ p0)
{
Function.Call((Hash)0x419615486BBF1956, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x84DFC579C2FC214C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventHotproperty(int /* bug: Any */ p0)
{
Function.Call((Hash)0x84DFC579C2FC214C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x0A9C7F36E5D7B683<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventDeaddrop(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0A9C7F36E5D7B683, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x164C5FF663790845<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventKingofthecastle(int /* bug: Any */ p0)
{
Function.Call((Hash)0x164C5FF663790845, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xEDBF6C9B0D2C65C8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventCriminaldamage(int /* bug: Any */ p0)
{
Function.Call((Hash)0xEDBF6C9B0D2C65C8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x6551B1F7F6CD46EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventCompetitiveurbanwarfare(int /* bug: Any */ p0)
{
Function.Call((Hash)0x6551B1F7F6CD46EA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x2CD90358F67D0AA8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmEventHuntbeast(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2CD90358F67D0AA8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 393<br />
/// <b>Native ID:</b> 0x203B381133817079<br />
/// </para>
/// </remarks>
public static void PlaystatsPimenuHideOptions(int /* bug: structure */ data)
{
Function.Call((Hash)0x203B381133817079, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x117B45156D7EFF2E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsGetNumberOfColumns(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x117B45156D7EFF2E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4B5467A1886EA7E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsGetColumnId(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0xC4B5467A1886EA7E, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF4FEF46DB7894D3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsGetColumnType(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0xBF4FEF46DB7894D3, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA34CB6E6F0DF4A0B<br />
/// </para>
/// </remarks>
public static int LeaderboardsReadClearAll()
{
return Function.Call<int>((Hash)0xA34CB6E6F0DF4A0B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CCE5C737A665701<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsReadClear(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0x7CCE5C737A665701, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC392C8483342AC2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LeaderboardsReadPending(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xAC392C8483342AC2, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA31FD15197B192BD<br />
/// </para>
/// </remarks>
public static bool LeaderboardsReadAnyPending()
{
return Function.Call<bool>((Hash)0xA31FD15197B192BD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FB19228983E832C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LeaderboardsReadSuccessful(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x2FB19228983E832C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x918B101666F9CB83<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadFriendsByRow(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, bool p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<bool>((Hash)0x918B101666F9CB83, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC30713A383BFBF0E<br />
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByHandle(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xC30713A383BFBF0E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9CDB1E3F0A49883<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByRow(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: Any */ p2, int /* bug: structure */ p3, int /* bug: Any */ p4, int /* bug: structure */ p5, int /* bug: Any */ p6)
{
return Function.Call<bool>((Hash)0xA9CDB1E3F0A49883, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA2C7DB0C129449A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByRank(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xBA2C7DB0C129449A, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CE587FB5A42C8C4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByRadius(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2)
{
return Function.Call<bool>((Hash)0x5CE587FB5A42C8C4, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EEC7E4F6984A16A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByScoreInt(int /* bug: structure */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0x7EEC7E4F6984A16A, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE662C8B759D08F3C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByScoreFloat(int /* bug: structure */ p0, float p1, int /* bug: Any */ p2)
{
return Function.Call<bool>((Hash)0xE662C8B759D08F3C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC38DC1E90D22547C<br />
/// </para>
/// </remarks>
public static bool Leaderboards2ReadRankPrediction(int /* bug: structure */ p0, int /* bug: structure */ p1, int /* bug: structure */ p2)
{
return Function.Call<bool>((Hash)0xC38DC1E90D22547C, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1AE5DCDBFCA2721<br />
/// </para>
/// </remarks>
public static bool Leaderboards2ReadByPlaform(int /* bug: structure */ p0, string gamerHandleCsv, string platformName)
{
return Function.Call<bool>((Hash)0xF1AE5DCDBFCA2721, p0, gamerHandleCsv, platformName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0F93D5465B3094D<br />
/// </para>
/// </remarks>
public static bool Leaderboards2ReadGetRowDataStart(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0xA0F93D5465B3094D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71B008056E5692D6<br />
/// </para>
/// </remarks>
public static void Leaderboards2ReadGetRowDataEnd()
{
Function.Call((Hash)0x71B008056E5692D6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34770B9CE0E03B91<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool Leaderboards2ReadGetRowDataInfo(int /* bug: Any */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0x34770B9CE0E03B91, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88578F6EC36B4A3A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int Leaderboards2ReadGetRowDataInt(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x88578F6EC36B4A3A, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38491439B6BA7F7D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static float Leaderboards2ReadGetRowDataFloat(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<float>((Hash)0x38491439B6BA7F7D, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE2206545888AE49<br />
/// </para>
/// </remarks>
public static bool Leaderboards2WriteData(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0xAE2206545888AE49, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BCA1D2C47B0D269<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void LeaderboardsWriteAddColumn(int /* bug: Any */ p0, int /* bug: Any */ p1, float p2)
{
Function.Call((Hash)0x0BCA1D2C47B0D269, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E65248609523599<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void LeaderboardsWriteAddColumnLong(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x2E65248609523599, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB9BB18E2C40142ED<br />
/// </para>
/// </remarks>
public static bool LeaderboardsCacheDataRow(int /* bug: structure */ p0)
{
return Function.Call<bool>((Hash)0xB9BB18E2C40142ED, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4B02A6B476E1FDC<br />
/// </para>
/// </remarks>
public static void LeaderboardsClearCacheData()
{
Function.Call((Hash)0xD4B02A6B476E1FDC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EC74CEB042E7CFF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void LeaderboardsClearCacheDataId(int /* bug: Any */ p0)
{
Function.Call((Hash)0x8EC74CEB042E7CFF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C51349BE6CDFE2C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LeaderboardsGetCacheExists(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x9C51349BE6CDFE2C, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF04C1C27DA35F6C8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsGetCacheTime(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0xF04C1C27DA35F6C8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58A651CD201D89AD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int LeaderboardsGetCacheNumberOfRows(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x58A651CD201D89AD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9120E8DBA3D69273<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool LeaderboardsGetCacheDataRow(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: structure */ p2)
{
return Function.Call<bool>((Hash)0x9120E8DBA3D69273, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11FF1C80276097ED<br />
/// </para>
/// </remarks>
public static void PresenceEventUpdatestatInt(uint statHash, int value, int p2)
{
Function.Call((Hash)0x11FF1C80276097ED, statHash, value, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30A6614C1F7799B8<br />
/// </para>
/// </remarks>
public static void PresenceEventUpdatestatFloat(uint statHash, float value, int p2)
{
Function.Call((Hash)0x30A6614C1F7799B8, statHash, value, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6483C25849031C4F<br />
/// </para>
/// </remarks>
public static void PresenceEventUpdatestatIntWithString(uint statHash, int value, int p2, string @string)
{
Function.Call((Hash)0x6483C25849031C4F, statHash, value, p2, @string);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EAD2BF6484852E4<br />
/// </para>
/// </remarks>
public static bool GetPlayerHasDrivenAllVehicles()
{
return Function.Call<bool>((Hash)0x5EAD2BF6484852E4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC141B8917E0017EC<br />
/// </para>
/// </remarks>
public static void SetHasPostedAllVehiclesDriven()
{
Function.Call((Hash)0xC141B8917E0017EC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB475F27C6A994D65<br />
/// </para>
/// </remarks>
public static void SetProfileSettingPrologueComplete()
{
Function.Call((Hash)0xB475F27C6A994D65);
}

/// <summary>
/// Sets profile setting 939
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xC67E2DA1CBE759E2<br />
/// </para>
/// </remarks>
public static void SetProfileSettingSpChopMissionComplete()
{
Function.Call((Hash)0xC67E2DA1CBE759E2);
}

/// <summary>
/// Sets profile setting 933
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1A1803D3476F215<br />
/// </para>
/// </remarks>
public static void SetProfileSettingCreatorRacesDone(int value)
{
Function.Call((Hash)0xF1A1803D3476F215, value);
}

/// <summary>
/// Sets profile setting 934
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38BAAA5DD4C9D19F<br />
/// </para>
/// </remarks>
public static void SetProfileSettingCreatorDmDone(int value)
{
Function.Call((Hash)0x38BAAA5DD4C9D19F, value);
}

/// <summary>
/// Sets profile setting 935
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55384438FC55AD8E<br />
/// </para>
/// </remarks>
public static void SetProfileSettingCreatorCtfDone(int value)
{
Function.Call((Hash)0x55384438FC55AD8E, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x723C1CE13FBFDB67<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetJobActivityIdStarted(int /* bug: Any */ p0, int characterSlot)
{
Function.Call((Hash)0x723C1CE13FBFDB67, p0, characterSlot);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D01D20616FC73FB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetFreemodePrologueDone(int /* bug: Any */ p0, int characterSlot)
{
Function.Call((Hash)0x0D01D20616FC73FB, p0, characterSlot);
}

/// <summary>
/// Sets profile setting 940 and 941
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x79D310A861697CC9<br />
/// </para>
/// </remarks>
public static void SetFreemodeStrandProgressionStatus(int profileSetting, int settingValue)
{
Function.Call((Hash)0x79D310A861697CC9, profileSetting, settingValue);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x428EAF89E24F6C36<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StatNetworkIncrementOnSuicide(int /* bug: Any */ p0, float p1)
{
Function.Call((Hash)0x428EAF89E24F6C36, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x047CBED6F6F8B63C<br />
/// </para>
/// </remarks>
public static void StatSetCheatIsActive()
{
Function.Call((Hash)0x047CBED6F6F8B63C);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC980E62E33DF1D5C<br />
/// </para>
/// </remarks>
public static bool Leaderboards2WriteDataForEventType(int /* bug: structure */ p0, int /* bug: structure */ p1)
{
return Function.Call<bool>((Hash)0xC980E62E33DF1D5C, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F361B8889A792A3<br />
/// </para>
/// </remarks>
public static void ForceCloudMpStatsDownloadAndOverwriteLocalSave()
{
Function.Call((Hash)0x6F361B8889A792A3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC847B43F369AC0B5<br />
/// </para>
/// </remarks>
public static void StatMigrateClearForRestart()
{
Function.Call((Hash)0xC847B43F369AC0B5);
}

/// <summary>
/// platformName must be one of the following: ps3, xbox360, ps4, xboxone
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5C80D8E768A9E66<br />
/// </para>
/// </remarks>
public static bool StatMigrateSavegameStart(string platformName)
{
return Function.Call<bool>((Hash)0xA5C80D8E768A9E66, platformName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A62EC95AE10E011<br />
/// </para>
/// </remarks>
public static int StatMigrateSavegameGetStatus()
{
return Function.Call<int>((Hash)0x9A62EC95AE10E011);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C89FE2BDEB3F169<br />
/// </para>
/// </remarks>
public static bool StatMigrateCheckAlreadyDone()
{
return Function.Call<bool>((Hash)0x4C89FE2BDEB3F169);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6E0E2616A7576BB<br />
/// </para>
/// </remarks>
public static bool StatMigrateCheckStart()
{
return Function.Call<bool>((Hash)0xC6E0E2616A7576BB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BD5F255321C4AAF<br />
/// </para>
/// </remarks>
public static int StatMigrateCheckGetIsPlatformAvailable(int p0)
{
return Function.Call<int>((Hash)0x5BD5F255321C4AAF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEAAF77EB3687E97<br />
/// </para>
/// </remarks>
public static int StatMigrateCheckGetPlatformStatus(int p0, int /* bug: structure */ p1)
{
return Function.Call<int>((Hash)0xDEAAF77EB3687E97, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x886913BBEACA68C1<br />
/// </para>
/// </remarks>
public static int StatGetSaveMigrationStatus(int /* bug: structure */ data)
{
return Function.Call<int>((Hash)0x886913BBEACA68C1, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4FEF53183C3C6414<br />
/// </para>
/// </remarks>
public static bool StatSaveMigrationCancelPendingOperation()
{
return Function.Call<bool>((Hash)0x4FEF53183C3C6414);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x567384DFA67029E6<br />
/// </para>
/// </remarks>
public static int StatGetCancelSaveMigrationStatus()
{
return Function.Call<int>((Hash)0x567384DFA67029E6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3270F67EED31FBC1<br />
/// </para>
/// </remarks>
public static bool StatSaveMigrationConsumeContent(uint contentId, string srcPlatform, string srcGamerHandle)
{
return Function.Call<bool>((Hash)0x3270F67EED31FBC1, contentId, srcPlatform, srcGamerHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE5AA445ABA8DEE0<br />
/// </para>
/// </remarks>
public static int StatGetSaveMigrationConsumeContentStatus(ref int p0)
{
var nativeAssistPointerVar0 = p0;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xCE5AA445ABA8DEE0, &nativeAssistPointerVar0);
}
p0 = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98E2BC1CA26287C3<br />
/// </para>
/// </remarks>
public static void StatEnableStatsTracking()
{
Function.Call((Hash)0x98E2BC1CA26287C3);
}

/// <summary>
/// Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x629526ABA383BCAA<br />
/// </para>
/// </remarks>
public static void StatDisableStatsTracking()
{
Function.Call((Hash)0x629526ABA383BCAA);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xBE3DB208333D9844<br />
/// </para>
/// </remarks>
public static bool StatIsStatsTrackingEnabled()
{
return Function.Call<bool>((Hash)0xBE3DB208333D9844);
}

/// <summary>
/// enum StatTrackingType<br />{<br />	LongestWheelie = 1,<br />	LongestStoppie = 2,<br />	NoCrashes = 3,<br />	HighestSpeed = 4,<br />	_MostFlips = 5,<br />	_LongestSpin = 6,<br />	_HighestJumpReached = 7,<br />	LongestJump = 8,<br />	_NearMissesNoCrash = 9,<br />	LongestFallSurvived = 10,<br />	LowestParachute = 11,<br />	ReverseDriving = 12,<br />	LongestFreefall = 13,<br />	VehiclesStolen = 14,<br />	_SomeCFireEventCount = 15,<br />	_Unk16 = 16,<br />	_LowFlyingTime = 17,<br />	LowFlying = 18,<br />	_InvertedFlyingTime = 19,<br />	InvertedFlying = 20,<br />	_PlaneSpinCount = 21,<br />	MeleeKills = 22, // Players<br />	_LongestSniperKill = 23,<br />	SniperSkills = 24, // Players<br />	DrivebyKills = 25, // Players<br />	HeadshotKills = 26, // Players<br />	LongestBail = 27,<br />	_TotalRammedByCar = 28,<br />	NearMissesPrecise = 29,<br />	_FreefallTime = 30,<br />	Unk31 = 31,<br />}<br /><br />enum StatTrackingValueType<br />{<br />	Total,<br />	Max,<br />	Min<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x33D72899E24C3365<br />
/// </para>
/// </remarks>
public static bool StatStartRecordStat(int statType, int valueType)
{
return Function.Call<bool>((Hash)0x33D72899E24C3365, statType, valueType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xA761D4AC6115623D<br />
/// </para>
/// </remarks>
public static bool StatStopRecordStat()
{
return Function.Call<bool>((Hash)0xA761D4AC6115623D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xF11F01D98113536A<br />
/// </para>
/// </remarks>
public static bool StatGetRecordedValue(ref float value)
{
var nativeAssistPointerVar0 = value;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF11F01D98113536A, &nativeAssistPointerVar0);
}
value = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x8B9CDBD6C566C38C<br />
/// </para>
/// </remarks>
public static bool StatIsRecordingStat()
{
return Function.Call<bool>((Hash)0x8B9CDBD6C566C38C);
}

/// <summary>
/// Perform the most near misses with other vehicles in a land vehicle without crashing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xE8853FBCE7D8D0D6<br />
/// </para>
/// </remarks>
public static int StatGetCurrentNearMissNocrashPrecise()
{
return Function.Call<int>((Hash)0xE8853FBCE7D8D0D6);
}

/// <summary>
/// Perform the longest wheelie on a motorcycle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xA943FD1722E11EFD<br />
/// </para>
/// </remarks>
public static float StatGetCurrentRearWheelDistance()
{
return Function.Call<float>((Hash)0xA943FD1722E11EFD);
}

/// <summary>
/// Perform the longest stoppie on a motorcycle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x84A810B375E69C0E<br />
/// </para>
/// </remarks>
public static float StatGetCurrentFrontWheelDistance()
{
return Function.Call<float>((Hash)0x84A810B375E69C0E);
}

/// <summary>
/// Perform the longest jump in a land vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x9EC8858184CD253A<br />
/// </para>
/// </remarks>
public static float StatGetCurrentJumpDistance()
{
return Function.Call<float>((Hash)0x9EC8858184CD253A);
}

/// <summary>
/// Drive the furthest distance in a land vehicle without crashing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xBA9749CC94C1FD85<br />
/// </para>
/// </remarks>
public static float StatGetCurrentDriveNocrashDistance()
{
return Function.Call<float>((Hash)0xBA9749CC94C1FD85);
}

/// <summary>
/// Achieve the highest speed in a land vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x55A8BECAF28A4EB7<br />
/// </para>
/// </remarks>
public static float StatGetCurrentSpeed()
{
return Function.Call<float>((Hash)0x55A8BECAF28A4EB7);
}

/// <summary>
/// Reverse the longest distance without crashing
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x32CAC93C9DE73D32<br />
/// </para>
/// </remarks>
public static float StatGetCurrentDrivingReverseDistance()
{
return Function.Call<float>((Hash)0x32CAC93C9DE73D32);
}

/// <summary>
/// Fall the longest distance with a parachute before opening it
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xAFF47709F1D5DCCE<br />
/// </para>
/// </remarks>
public static float StatGetCurrentSkydivingDistance()
{
return Function.Call<float>((Hash)0xAFF47709F1D5DCCE);
}

/// <summary>
/// Fly low to the ground for the longest distance
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x6E0A5253375C4584<br />
/// </para>
/// </remarks>
public static float StatGetChallengeFlyingDist()
{
return Function.Call<float>((Hash)0x6E0A5253375C4584);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x1A8EA222F9C67DBB<br />
/// </para>
/// </remarks>
public static bool StatGetFlyingAltitude(ref float outValue)
{
var nativeAssistPointerVar0 = outValue;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x1A8EA222F9C67DBB, &nativeAssistPointerVar0);
}
outValue = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Or non-flyable area
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xF9F2922717B819EC<br />
/// </para>
/// </remarks>
public static bool StatIsPlayerVehicleAboveOcean()
{
return Function.Call<bool>((Hash)0xF9F2922717B819EC);
}

/// <summary>
/// Travel the furthest distance when bailing from a vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x0B8B7F74BF061C6D<br />
/// </para>
/// </remarks>
public static float StatGetVehicleBailDistance()
{
return Function.Call<float>((Hash)0x0B8B7F74BF061C6D);
}

/// <summary>
/// This function is hard-coded to always return 1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3DA2606774A8E2D<br />
/// </para>
/// </remarks>
public static bool StatRollbackSaveMigration()
{
return Function.Call<bool>((Hash)0xB3DA2606774A8E2D);
}

/// <summary>
/// Sets profile setting 866
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDAC073C7901F9E15<br />
/// </para>
/// </remarks>
public static void SetHasSpecialeditionContent(int value)
{
Function.Call((Hash)0xDAC073C7901F9E15, value);
}

/// <summary>
/// Sets profile setting 501
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6792800AC95350D<br />
/// </para>
/// </remarks>
public static void SetSaveMigrationTransactionIdWarning(int transactionId)
{
Function.Call((Hash)0xF6792800AC95350D, transactionId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x6BC0ACD0673ACEBE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void GetBossGoonUuid(int characterSlot, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x6BC0ACD0673ACEBE, characterSlot, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x8D8ADB562F09A245<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwBossonbossdeathmatch(int /* bug: Any */ p0)
{
Function.Call((Hash)0x8D8ADB562F09A245, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xD1A1EE3B4FA8E760<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwYatchattack(int /* bug: Any */ p0)
{
Function.Call((Hash)0xD1A1EE3B4FA8E760, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x88087EE1F28024AE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwHuntTheBoss(int /* bug: Any */ p0)
{
Function.Call((Hash)0x88087EE1F28024AE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xFCC228E07217FCAC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwSightseer(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFCC228E07217FCAC, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x678F86D8FC040BDB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwAssault(int /* bug: Any */ p0)
{
Function.Call((Hash)0x678F86D8FC040BDB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xA6F54BB2FFCA35EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwBellyOfTheBeast(int /* bug: Any */ p0)
{
Function.Call((Hash)0xA6F54BB2FFCA35EA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x5FF2C33B13A02A11<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwHeadHunter(int /* bug: Any */ p0)
{
Function.Call((Hash)0x5FF2C33B13A02A11, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x282B6739644F4347<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwFragileGoods(int /* bug: Any */ p0)
{
Function.Call((Hash)0x282B6739644F4347, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xF06A6F41CB445443<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBwAirFreight(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF06A6F41CB445443, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x7B18DA61F6BAE9D5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcCarJacking(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7B18DA61F6BAE9D5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x06EAF70AE066441E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcSmashAndGrab(int /* bug: Any */ p0)
{
Function.Call((Hash)0x06EAF70AE066441E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x14EDA9EE27BD1626<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcProtectionRacket(int /* bug: Any */ p0)
{
Function.Call((Hash)0x14EDA9EE27BD1626, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x930F504203F561C9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcMostWanted(int /* bug: Any */ p0)
{
Function.Call((Hash)0x930F504203F561C9, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xE3261D791EB44ACB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcFindersKeepers(int /* bug: Any */ p0)
{
Function.Call((Hash)0xE3261D791EB44ACB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x73001E34F85137F8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcPointToPoint(int /* bug: Any */ p0)
{
Function.Call((Hash)0x73001E34F85137F8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x53CAE13E9B426993<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcCashing(int /* bug: Any */ p0)
{
Function.Call((Hash)0x53CAE13E9B426993, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x7D36291161859389<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBcSalvage(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7D36291161859389, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xBE509B0A3693DE8B<br />
/// </para>
/// </remarks>
public static void PlaystatsSpentPiCustomLoadout(int amount)
{
Function.Call((Hash)0xBE509B0A3693DE8B, amount);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xD6781E42755531F7<br />
/// </para>
/// </remarks>
public static void PlaystatsBuyContrabandMission(int /* bug: structure */ data)
{
Function.Call((Hash)0xD6781E42755531F7, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xC729991A9065376E<br />
/// </para>
/// </remarks>
public static void PlaystatsSellContrabandMission(int /* bug: structure */ data)
{
Function.Call((Hash)0xC729991A9065376E, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x2605663BD4F23B5D<br />
/// </para>
/// </remarks>
public static void PlaystatsDefendContrabandMission(int /* bug: structure */ data)
{
Function.Call((Hash)0x2605663BD4F23B5D, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x04D90BA8207ADA2D<br />
/// </para>
/// </remarks>
public static void PlaystatsRecoverContrabandMission(int /* bug: structure */ data)
{
Function.Call((Hash)0x04D90BA8207ADA2D, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x60EEDC12AF66E846<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHitContrabandDestroyLimit(int /* bug: Any */ p0)
{
Function.Call((Hash)0x60EEDC12AF66E846, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x3EBEAC6C3F81F6BD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StartBeingBoss(int /* bug: Any */ p0)
{
Function.Call((Hash)0x3EBEAC6C3F81F6BD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x96E6D5150DBF1C09<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StartBeingGoon(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x96E6D5150DBF1C09, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xA3C53804BDB68ED2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void EndBeingBoss(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xA3C53804BDB68ED2, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x6BCCF9948492FD85<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void EndBeingGoon(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x6BCCF9948492FD85, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x792271AB35C356A4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void HiredLimo(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x792271AB35C356A4, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xCEA553E35C2246E1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void OrderBossVehicle(int /* bug: Any */ p0, int /* bug: Any */ p1, uint vehicleHash)
{
Function.Call((Hash)0xCEA553E35C2246E1, p0, p1, vehicleHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xD1C9B92BDD3F151D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ChangeUniform(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xD1C9B92BDD3F151D, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x44919CC079BB60BF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ChangeGoonLookingForWork(int /* bug: Any */ p0)
{
Function.Call((Hash)0x44919CC079BB60BF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x7033EEFD9B28088E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SendMetricGhostingToPlayer(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7033EEFD9B28088E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xAA525DFF66BB82F5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SendMetricVipPoach(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xAA525DFF66BB82F5, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x015B03EE1C43E6EC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SendMetricPunishBodyguard(int /* bug: Any */ p0)
{
Function.Call((Hash)0x015B03EE1C43E6EC, p0);
}

/// <summary>
/// Allows CEventNetworkStuntPerformed to be triggered.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x928DBFB892638EF3<br />
/// </para>
/// </remarks>
public static void PlaystatsStartTrackingStunts()
{
Function.Call((Hash)0x928DBFB892638EF3);
}

/// <summary>
/// Disallows CEventNetworkStuntPerformed to be triggered.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x8A800DACCC0DA55D<br />
/// </para>
/// </remarks>
public static void PlaystatsStopTrackingStunts()
{
Function.Call((Hash)0x8A800DACCC0DA55D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xBF371CD2B64212FD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMissionEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0xBF371CD2B64212FD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x7D8BA05688AD64C7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsImpexpMissionEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0x7D8BA05688AD64C7, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x0B565B0AAE56A0E8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsChangeMcRole(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int role, int p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x0B565B0AAE56A0E8, p0, p1, p2, p3, role, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x28ECB8AC2F607DB2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsChangeMcOutfit(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x28ECB8AC2F607DB2, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x0A50D2604E05CB94<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsSwitchMcEmblem(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x0A50D2604E05CB94, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xCC25A4553DFBF9EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMcRequestBike(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xCC25A4553DFBF9EA, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xF534D94DFA2EAD26<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMcKilledRivalMcMember(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xF534D94DFA2EAD26, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xD558BEC0BBA7E8D2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsAbandonedMc(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0xD558BEC0BBA7E8D2, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x501478855A6074CE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsEarnedMcPoints(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x501478855A6074CE, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x03C2EEBB04B3FB72<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMcFormationEnds(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x03C2EEBB04B3FB72, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x8989CBD7B4E82534<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMcClubhouseActivity(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x8989CBD7B4E82534, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x27AA1C973CACFE63<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRivalBehavior(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
Function.Call((Hash)0x27AA1C973CACFE63, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xB7257BA2550EA10A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCopyRankIntoNewSlot(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0xB7257BA2550EA10A, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x848B66100EE33B05<br />
/// </para>
/// </remarks>
public static void PlaystatsDupeDetected(int /* bug: structure */ data)
{
Function.Call((Hash)0x848B66100EE33B05, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x516FC96EB88EEFE5<br />
/// </para>
/// </remarks>
public static void PlaystatsBanAlert(int p0)
{
Function.Call((Hash)0x516FC96EB88EEFE5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0EACDF8487D5155A<br />
/// </para>
/// </remarks>
public static void PlaystatsGunrunningMissionEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0x0EACDF8487D5155A, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xDAF80797FC534BEC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsGunrunningRnd(int /* bug: Any */ p0)
{
Function.Call((Hash)0xDAF80797FC534BEC, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x316DB59CD14C1774<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsBusinessBattleEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0x316DB59CD14C1774, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x2D7A9B577E72385E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsWarehouseMissionEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2D7A9B577E72385E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x830C3A44EB3F2CF9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsNightclubMissionEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0x830C3A44EB3F2CF9, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xB26F670685631727<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsDjUsage(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xB26F670685631727, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xC14BD9F5337219B2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMinigameUsage(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xC14BD9F5337219B2, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x35E39E5570358630<br />
/// </para>
/// </remarks>
public static void PlaystatsStoneHatchetEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0x35E39E5570358630, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x320C35147D5B5DDD<br />
/// </para>
/// </remarks>
public static void PlaystatsSmugglerMissionEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0x320C35147D5B5DDD, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xD8AFB345A9C5CCBB<br />
/// </para>
/// </remarks>
public static void PlaystatsFmHeistPrepEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0xD8AFB345A9C5CCBB, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x1E1497D0D2108115<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsInstancedHeistEnded(int /* bug: structure */ data, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x1E1497D0D2108115, data, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0BC254FF3A911501<br />
/// </para>
/// </remarks>
public static void PlaystatsDarCheckpoint(int /* bug: structure */ data)
{
Function.Call((Hash)0x0BC254FF3A911501, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x878FF156D36E9956<br />
/// </para>
/// </remarks>
public static void PlaystatsEnterSessionPack(int /* bug: structure */ data)
{
Function.Call((Hash)0x878FF156D36E9956, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x66C7BB2416ED3FCE<br />
/// </para>
/// </remarks>
public static void PlaystatsDroneUsage(int p0, int p1, int p2)
{
Function.Call((Hash)0x66C7BB2416ED3FCE, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x6731DE84A38BFAD0<br />
/// </para>
/// </remarks>
public static void PlaystatsSpinWheel(int p0, int p1, int p2, int p3)
{
Function.Call((Hash)0x6731DE84A38BFAD0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x6F4F599753F8200A<br />
/// </para>
/// </remarks>
public static void PlaystatsArenaWarsSpectator(int p0, int p1, int p2, int p3, int p4)
{
Function.Call((Hash)0x6F4F599753F8200A, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xB479D9F0D48A1BC5<br />
/// </para>
/// </remarks>
public static void PlaystatsArenaWarsEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0xB479D9F0D48A1BC5, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x35EEC6C2BC821A71<br />
/// </para>
/// </remarks>
public static void PlaystatsSwitchPassiveMode(bool p0, int p1, int p2, int p3)
{
Function.Call((Hash)0x35EEC6C2BC821A71, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xCD0A8A9338681CF2<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCollectiblePickedUp(int p0, uint objectHash, int /* bug: Any */ p2, int /* bug: Any */ p3, int moneyAmount, int rpAmount, int chipsAmount, int /* bug: Any */ p7, int p8, int /* bug: Any */ p9, int /* bug: Any */ p10)
{
Function.Call((Hash)0xCD0A8A9338681CF2, p0, objectHash, p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xFCCCAC2BD3C1F180<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoStoryMissionEnded(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xFCCCAC2BD3C1F180, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x0999F3F090EC5012<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoChip(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0999F3F090EC5012, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x95101C443A84E7F1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoRoulette(int /* bug: Any */ p0)
{
Function.Call((Hash)0x95101C443A84E7F1, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x3EAE97309727E7AD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoBlackjack(int /* bug: Any */ p0)
{
Function.Call((Hash)0x3EAE97309727E7AD, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xF740FB339D471C35<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoThreeCardPoker(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF740FB339D471C35, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xEF5EC67D392B830A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoSlotMachine(int /* bug: Any */ p0)
{
Function.Call((Hash)0xEF5EC67D392B830A, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x049F059625058A86<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoInsideTrack(int /* bug: Any */ p0)
{
Function.Call((Hash)0x049F059625058A86, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x0C432C1435F5E4FA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoLuckySeven(int /* bug: Any */ p0)
{
Function.Call((Hash)0x0C432C1435F5E4FA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x6572ABA3DE1197FC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoRouletteLight(int /* bug: Any */ p0)
{
Function.Call((Hash)0x6572ABA3DE1197FC, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xD5451C7BF151EB6F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoBlackjackLight(int /* bug: Any */ p0)
{
Function.Call((Hash)0xD5451C7BF151EB6F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xC9001364B4388F22<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoThreeCardPokerLight(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC9001364B4388F22, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0xE60054A0FAE8227F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoSlotMachineLight(int /* bug: Any */ p0)
{
Function.Call((Hash)0xE60054A0FAE8227F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x23A3CBCD50D54E47<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCasinoInsideTrackLight(int /* bug: Any */ p0)
{
Function.Call((Hash)0x23A3CBCD50D54E47, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x533A7D1EA58DF958<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsArcadeGame(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x533A7D1EA58DF958, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x4FCDBD3F0A813C25<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsArcadeLoveMatch(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x4FCDBD3F0A813C25, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x1A0D4A6C336B7BC5<br />
/// </para>
/// </remarks>
public static void PlaystatsFreemodeCasinoMissionEnded(int /* bug: structure */ data)
{
Function.Call((Hash)0x1A0D4A6C336B7BC5, data);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xDFBD93BF2943E29B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist3Drone(int /* bug: Any */ p0)
{
Function.Call((Hash)0xDFBD93BF2943E29B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x92FC0EEDFAC04A14<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist3Hack(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x92FC0EEDFAC04A14, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x0077F15613D36993<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsNpcPhone(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x0077F15613D36993, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xF9096193DF1F99D4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsArcadeCabinet(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF9096193DF1F99D4, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x2E0259BABC27A327<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist3Finale(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2E0259BABC27A327, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x53C31853EC9531FF<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist3Prep(int /* bug: Any */ p0)
{
Function.Call((Hash)0x53C31853EC9531FF, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x810B5FCC52EC7FF0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMasterControl(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x810B5FCC52EC7FF0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x5BF29846C6527C54<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsQuitMode(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x5BF29846C6527C54, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xC03FAB2C2F92289B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsMissionVote(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC03FAB2C2F92289B, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x5CDAED54B34B0ED0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsNjvsVote(int /* bug: Any */ p0)
{
Function.Call((Hash)0x5CDAED54B34B0ED0, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x4AFF7E02E485E92B<br />
/// </para>
/// </remarks>
public static void PlaystatsKillYourself()
{
Function.Call((Hash)0x4AFF7E02E485E92B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x46A70777BE6CEAB9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFmMissionEnd(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x46A70777BE6CEAB9, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xDFCDB14317A9B361<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist4Prep(int /* bug: Any */ p0)
{
Function.Call((Hash)0xDFCDB14317A9B361, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xC1E963C58664B556<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist4Finale(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC1E963C58664B556, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x2FA3173480008493<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHeist4Hack(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x2FA3173480008493, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xD4367D310F079DB0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsSubWeap(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xD4367D310F079DB0, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x4DC416F246A41FC8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsFastTrvl(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
Function.Call((Hash)0x4DC416F246A41FC8, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x2818FF6638CB09DE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHubEntry(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2818FF6638CB09DE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xD6CA58B3B53A0F22<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsDjMissionEnded(int /* bug: Any */ p0)
{
Function.Call((Hash)0xD6CA58B3B53A0F22, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x1A67DFBF1F5C3835<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRobberyPrep(int /* bug: Any */ p0)
{
Function.Call((Hash)0x1A67DFBF1F5C3835, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xBBA55BE9AAAABF44<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsRobberyFinale(int /* bug: Any */ p0)
{
Function.Call((Hash)0xBBA55BE9AAAABF44, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xFA5B74BAB8A7EF99<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsExtraEvent(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFA5B74BAB8A7EF99, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xFF14D6FEEC507BBE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCarclubPoints(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFF14D6FEEC507BBE, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x1187CB58D7F3BED7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsCarclubChallenge(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x1187CB58D7F3BED7, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x69C922B677621428<br />
/// </para>
/// </remarks>
public static void PlaystatsCarclubPrize(int p0, uint vehicleModel)
{
Function.Call((Hash)0x69C922B677621428, p0, vehicleModel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x70F52471E758EBAE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsAwardNav(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x70F52471E758EBAE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0xFEA3F7E83C0610FA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsInstMissionEnd(int /* bug: Any */ p0)
{
Function.Call((Hash)0xFEA3F7E83C0610FA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x5A46ACE5C4661132<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsHubExit(int /* bug: Any */ p0)
{
Function.Call((Hash)0x5A46ACE5C4661132, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x887DAD63CF5B7908<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void PlaystatsInventory(int /* bug: Any */ p0)
{
Function.Call((Hash)0x887DAD63CF5B7908, p0);
}

#endregion
#region STREAMING
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD6E84632DD4CB3F<br />
/// </para>
/// </remarks>
public static void LoadAllObjectsNow()
{
Function.Call((Hash)0xBD6E84632DD4CB3F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4448EB75B4904BDB<br />
/// </para>
/// </remarks>
public static void LoadScene(float x, float y, float z)
{
Function.Call((Hash)0x4448EB75B4904BDB, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4582015556D1C46<br />
/// </para>
/// </remarks>
public static bool NetworkUpdateLoadScene()
{
return Function.Call<bool>((Hash)0xC4582015556D1C46);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41CA5A33160EA4AB<br />
/// </para>
/// </remarks>
public static bool IsNetworkLoadingScene()
{
return Function.Call<bool>((Hash)0x41CA5A33160EA4AB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE37B76C387BE28ED<br />
/// </para>
/// </remarks>
public static void SetInteriorActive(int interiorID, bool toggle)
{
Function.Call((Hash)0xE37B76C387BE28ED, interiorID, toggle);
}

/// <summary>
/// Request a model to be loaded into memory.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x963D27A58DF860AC<br />
/// </para>
/// </remarks>
public static void RequestModel(uint model)
{
Function.Call((Hash)0x963D27A58DF860AC, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0261AEF7ACFC51E<br />
/// </para>
/// </remarks>
public static void RequestMenuPedModel(uint model)
{
Function.Call((Hash)0xA0261AEF7ACFC51E, model);
}

/// <summary>
/// Checks if the specified model has loaded into memory.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98A4EB5D89A0C952<br />
/// </para>
/// </remarks>
public static bool HasModelLoaded(uint model)
{
return Function.Call<bool>((Hash)0x98A4EB5D89A0C952, model);
}

/// <summary>
/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, &quot;V_FIB01_cur_elev&quot;);<br />STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, &quot;limbo&quot;);<br />STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, &quot;V_Office_gnd_lifts&quot;);<br />STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, &quot;limbo&quot;);<br />STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, &quot;v_fib01_jan_elev&quot;);<br />STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, &quot;limbo&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A7A40100EDFEC58<br />
/// </para>
/// </remarks>
public static void RequestModelsInRoom(int /* Interior */ interior, string roomName)
{
Function.Call((Hash)0x8A7A40100EDFEC58, interior, roomName);
}

/// <summary>
/// Unloads model from memory
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE532F5D78798DAAB<br />
/// </para>
/// </remarks>
public static void SetModelAsNoLongerNeeded(uint model)
{
Function.Call((Hash)0xE532F5D78798DAAB, model);
}

/// <summary>
/// Check if model is in cdimage(rpf)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35B9E0803292B641<br />
/// </para>
/// </remarks>
public static bool IsModelInCdimage(uint model)
{
return Function.Call<bool>((Hash)0x35B9E0803292B641, model);
}

/// <summary>
/// Returns whether the specified model exists in the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0296A2EDF545E92<br />
/// </para>
/// </remarks>
public static bool IsModelValid(uint model)
{
return Function.Call<bool>((Hash)0xC0296A2EDF545E92, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x75816577FEA6DAD5<br />
/// </para>
/// </remarks>
public static bool IsModelAPed(uint model)
{
return Function.Call<bool>((Hash)0x75816577FEA6DAD5, model);
}

/// <summary>
/// Returns whether the specified model represents a vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x19AAC8F07BFEC53E<br />
/// </para>
/// </remarks>
public static bool IsModelAVehicle(uint model)
{
return Function.Call<bool>((Hash)0x19AAC8F07BFEC53E, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07503F7948F491A7<br />
/// </para>
/// </remarks>
public static void RequestCollisionAtCoord(float x, float y, float z)
{
Function.Call((Hash)0x07503F7948F491A7, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x923CB32A3B874FCB<br />
/// </para>
/// </remarks>
public static void RequestCollisionForModel(uint model)
{
Function.Call((Hash)0x923CB32A3B874FCB, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22CCA434E368F03A<br />
/// </para>
/// </remarks>
public static bool HasCollisionForModelLoaded(uint model)
{
return Function.Call<bool>((Hash)0x22CCA434E368F03A, model);
}

/// <summary>
/// Alias of REQUEST_COLLISION_AT_COORD.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC9156DC11411A9EA<br />
/// </para>
/// </remarks>
public static void RequestAdditionalCollisionAtCoord(float x, float y, float z)
{
Function.Call((Hash)0xC9156DC11411A9EA, x, y, z);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DA49C3B79856961<br />
/// </para>
/// </remarks>
public static bool DoesAnimDictExist(string animDict)
{
return Function.Call<bool>((Hash)0x2DA49C3B79856961, animDict);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3BD40951412FEF6<br />
/// </para>
/// </remarks>
public static void RequestAnimDict(string animDict)
{
Function.Call((Hash)0xD3BD40951412FEF6, animDict);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD031A9162D01088C<br />
/// </para>
/// </remarks>
public static bool HasAnimDictLoaded(string animDict)
{
return Function.Call<bool>((Hash)0xD031A9162D01088C, animDict);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF66A602F829E2A06<br />
/// </para>
/// </remarks>
public static void RemoveAnimDict(string animDict)
{
Function.Call((Hash)0xF66A602F829E2A06, animDict);
}

/// <summary>
/// Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EA47DAE7FAD0EED<br />
/// </para>
/// </remarks>
public static void RequestAnimSet(string animSet)
{
Function.Call((Hash)0x6EA47DAE7FAD0EED, animSet);
}

/// <summary>
/// Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.<br /><br />Animation set and clip set are synonymous.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC4EA073D86FB29B0<br />
/// </para>
/// </remarks>
public static bool HasAnimSetLoaded(string animSet)
{
return Function.Call<bool>((Hash)0xC4EA073D86FB29B0, animSet);
}

/// <summary>
/// Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.<br /><br />Animation set and clip set are synonymous.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16350528F93024B3<br />
/// </para>
/// </remarks>
public static void RemoveAnimSet(string animSet)
{
Function.Call((Hash)0x16350528F93024B3, animSet);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2A71E1A77418A49<br />
/// </para>
/// </remarks>
public static void RequestClipSet(string clipSet)
{
Function.Call((Hash)0xD2A71E1A77418A49, clipSet);
}

/// <summary>
/// Alias for HAS_ANIM_SET_LOADED.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x318234F4F3738AF3<br />
/// </para>
/// </remarks>
public static bool HasClipSetLoaded(string clipSet)
{
return Function.Call<bool>((Hash)0x318234F4F3738AF3, clipSet);
}

/// <summary>
/// Alias for REMOVE_ANIM_SET.<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01F73A131C18CD94<br />
/// </para>
/// </remarks>
public static void RemoveClipSet(string clipSet)
{
Function.Call((Hash)0x01F73A131C18CD94, clipSet);
}

/// <summary>
/// Exemple: REQUEST_IPL(&quot;TrevorsTrailerTrash&quot;);<br /><br />Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41B4893843BBDB74<br />
/// </para>
/// </remarks>
public static void RequestIpl(string iplName)
{
Function.Call((Hash)0x41B4893843BBDB74, iplName);
}

/// <summary>
/// Removes an IPL from the map.<br /><br />Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json<br /><br />Example:<br />C#:<br />Function.Call(Hash.REMOVE_IPL, &quot;trevorstrailertidy&quot;);<br /><br />C++:<br />STREAMING::REMOVE_IPL(&quot;trevorstrailertidy&quot;);<br /><br />iplName = Name of IPL you want to remove.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE6C5AD3ECE0A82D<br />
/// </para>
/// </remarks>
public static void RemoveIpl(string iplName)
{
Function.Call((Hash)0xEE6C5AD3ECE0A82D, iplName);
}

/// <summary>
/// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88A741E44A2B3495<br />
/// </para>
/// </remarks>
public static bool IsIplActive(string iplName)
{
return Function.Call<bool>((Hash)0x88A741E44A2B3495, iplName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E0C692677008888<br />
/// </para>
/// </remarks>
public static void SetStreaming(bool toggle)
{
Function.Call((Hash)0x6E0C692677008888, toggle);
}

/// <summary>
/// 0 - default<br />1 - HeistIsland
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x7E3F55ED251B76D3<br />
/// </para>
/// </remarks>
public static void LoadGlobalWaterFile(int waterType)
{
Function.Call((Hash)0x7E3F55ED251B76D3, waterType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xF741BD853611592D<br />
/// </para>
/// </remarks>
public static int GetGlobalWaterFile()
{
return Function.Call<int>((Hash)0xF741BD853611592D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x717CD6E6FAEBBEDC<br />
/// </para>
/// </remarks>
public static void SetGamePausesForStreaming(bool toggle)
{
Function.Call((Hash)0x717CD6E6FAEBBEDC, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77B5F9A36BF96710<br />
/// </para>
/// </remarks>
public static void SetReducePedModelBudget(bool toggle)
{
Function.Call((Hash)0x77B5F9A36BF96710, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80C527893080CCF3<br />
/// </para>
/// </remarks>
public static void SetReduceVehicleModelBudget(bool toggle)
{
Function.Call((Hash)0x80C527893080CCF3, toggle);
}

/// <summary>
/// This is a NOP function. It does nothing at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42CBE54462D92634<br />
/// </para>
/// </remarks>
public static void SetDitchPoliceModels(bool toggle)
{
Function.Call((Hash)0x42CBE54462D92634, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4060057271CEBC89<br />
/// </para>
/// </remarks>
public static int GetNumberOfStreamingRequests()
{
return Function.Call<int>((Hash)0x4060057271CEBC89);
}

/// <summary>
/// maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x944955FB2A3935C8<br />
/// </para>
/// </remarks>
public static void RequestPtfxAsset()
{
Function.Call((Hash)0x944955FB2A3935C8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCA7D9B86ECA7481B<br />
/// </para>
/// </remarks>
public static bool HasPtfxAssetLoaded()
{
return Function.Call<bool>((Hash)0xCA7D9B86ECA7481B);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88C6814073DD4A73<br />
/// </para>
/// </remarks>
public static void RemovePtfxAsset()
{
Function.Call((Hash)0x88C6814073DD4A73);
}

/// <summary>
///  From the b678d decompiled scripts:<br /><br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;core_snow&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;fm_mission_controler&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;proj_xmas_firework&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_apartment_mp&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_biolab_heist&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_indep_fireworks&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_indep_parachute&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_indep_wheelsmoke&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_mp_cig_plane&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_mp_creator&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_mp_tankbattle&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_ornate_heist&quot;);<br /> STREAMING::REQUEST_NAMED_PTFX_ASSET(&quot;scr_prison_break_heist_station&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB80D8756B4668AB6<br />
/// </para>
/// </remarks>
public static void RequestNamedPtfxAsset(string fxName)
{
Function.Call((Hash)0xB80D8756B4668AB6, fxName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8702416E512EC454<br />
/// </para>
/// </remarks>
public static bool HasNamedPtfxAssetLoaded(string fxName)
{
return Function.Call<bool>((Hash)0x8702416E512EC454, fxName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F61EBBE1A00F96D<br />
/// </para>
/// </remarks>
public static void RemoveNamedPtfxAsset(string fxName)
{
Function.Call((Hash)0x5F61EBBE1A00F96D, fxName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB9E1EB3BE2AF4E9<br />
/// </para>
/// </remarks>
public static void SetVehiclePopulationBudget(int p0)
{
Function.Call((Hash)0xCB9E1EB3BE2AF4E9, p0);
}

/// <summary>
/// Control how many new (ambient?) peds will spawn in the game world.<br />Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C95333CFC3340F3<br />
/// </para>
/// </remarks>
public static void SetPedPopulationBudget(int p0)
{
Function.Call((Hash)0x8C95333CFC3340F3, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31B73D1EA9F01DA2<br />
/// </para>
/// </remarks>
public static void ClearFocus()
{
Function.Call((Hash)0x31B73D1EA9F01DA2);
}

/// <summary>
/// Override the area where the camera will render the terrain.<br />p3, p4 and p5 are usually set to 0.0<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB7454BAFF08FE25<br />
/// </para>
/// </remarks>
public static void SetFocusPosAndVel(float x, float y, float z, float offsetX, float offsetY, float offsetZ)
{
Function.Call((Hash)0xBB7454BAFF08FE25, x, y, z, offsetX, offsetY, offsetZ);
}

/// <summary>
/// It seems to make the entity&apos;s coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x198F77705FA0931D<br />
/// </para>
/// </remarks>
public static void SetFocusEntity(int /* Entity */ entity)
{
Function.Call((Hash)0x198F77705FA0931D, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DDFF3FB9075D747<br />
/// </para>
/// </remarks>
public static bool IsEntityFocus(int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x2DDFF3FB9075D747, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0811381EF5062FEC<br />
/// </para>
/// </remarks>
public static void SetRestoreFocusEntity(int /* Entity */ p0)
{
Function.Call((Hash)0x0811381EF5062FEC, p0);
}

/// <summary>
/// Possible p0 values:<br /><br />&quot;prologue&quot;<br />&quot;Prologue_Main&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF12610C644A35C9<br />
/// </para>
/// </remarks>
public static void SetMapdatacullboxEnabled(string name, bool toggle)
{
Function.Call((Hash)0xAF12610C644A35C9, name, toggle);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E52E752C76E7E7A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAllMapdataCulled(int /* bug: Any */ p0)
{
Function.Call((Hash)0x4E52E752C76E7E7A, p0);
}

/// <summary>
/// Always returns zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x219C7B8D53E429FD<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StreamvolCreateSphere(float x, float y, float z, float rad, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
return Function.Call<int>((Hash)0x219C7B8D53E429FD, x, y, z, rad, p4, p5);
}

/// <summary>
/// Always returns zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F3F018BC3AFA77C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StreamvolCreateFrustum(float p0, float p1, float p2, float p3, float p4, float p5, float p6, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
return Function.Call<int>((Hash)0x1F3F018BC3AFA77C, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

/// <summary>
/// Always returns zero.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AD9710CEE2F590F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int StreamvolCreateLine(float p0, float p1, float p2, float p3, float p4, float p5, int /* bug: Any */ p6)
{
return Function.Call<int>((Hash)0x0AD9710CEE2F590F, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EE7D8DF4425F053<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void StreamvolDelete(int /* bug: Any */ unused)
{
Function.Call((Hash)0x1EE7D8DF4425F053, unused);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D41E9D2D17C5B2D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StreamvolHasLoaded(int /* bug: Any */ unused)
{
return Function.Call<bool>((Hash)0x7D41E9D2D17C5B2D, unused);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07C313F94746702C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool StreamvolIsValid(int /* bug: Any */ unused)
{
return Function.Call<bool>((Hash)0x07C313F94746702C, unused);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC9823AB80A3DCAC<br />
/// </para>
/// </remarks>
public static bool IsStreamvolActive()
{
return Function.Call<bool>((Hash)0xBC9823AB80A3DCAC);
}

/// <summary>
/// `radius` value is usually between `3f` and `7000f` in original 1868 scripts.<br />`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.<br />Returns True if success, used only 7 times in decompiled scripts of 1868
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x212A8D0D2BABFAC2<br />
/// </para>
/// </remarks>
public static bool NewLoadSceneStart(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7)
{
return Function.Call<bool>((Hash)0x212A8D0D2BABFAC2, posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACCFB4ACF53551B0<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool NewLoadSceneStartSphere(float x, float y, float z, float radius, int /* bug: Any */ p4)
{
return Function.Call<bool>((Hash)0xACCFB4ACF53551B0, x, y, z, radius, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC197616D221FF4A4<br />
/// </para>
/// </remarks>
public static void NewLoadSceneStop()
{
Function.Call((Hash)0xC197616D221FF4A4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA41A05B6CB741B85<br />
/// </para>
/// </remarks>
public static bool IsNewLoadSceneActive()
{
return Function.Call<bool>((Hash)0xA41A05B6CB741B85);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x01B8247A7A8B9AD1<br />
/// </para>
/// </remarks>
public static bool IsNewLoadSceneLoaded()
{
return Function.Call<bool>((Hash)0x01B8247A7A8B9AD1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71E7B2E657449AAD<br />
/// </para>
/// </remarks>
public static bool IsSafeToStartPlayerSwitch()
{
return Function.Call<bool>((Hash)0x71E7B2E657449AAD);
}

/// <summary>
/// // this enum comes directly from R* so don&apos;t edit this<br />enum ePlayerSwitchTypes<br />{<br />  SWITCH_TYPE_AUTO,<br /> SWITCH_TYPE_LONG,<br /> SWITCH_TYPE_MEDIUM,<br />   SWITCH_TYPE_SHORT<br />};<br /><br />Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.<br /><br />----------------------------------------------------<br /><br />Examples from the decompiled scripts:<br /><br />STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);<br />STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);<br />STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);<br />STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);<br /><br />Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You&apos;ll have to call STOP_PLAYER_SWITCH() to return to your ped.<br /><br />Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.<br />Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAA23F2CBA159D67<br />
/// </para>
/// </remarks>
public static void StartPlayerSwitch(int /* Ped */ from, int /* Ped */ to, int flags, int switchType)
{
Function.Call((Hash)0xFAA23F2CBA159D67, from, to, flags, switchType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95C0A5BBDC189AA1<br />
/// </para>
/// </remarks>
public static void StopPlayerSwitch()
{
Function.Call((Hash)0x95C0A5BBDC189AA1);
}

/// <summary>
/// Returns true if the player is currently switching, false otherwise.<br />(When the camera is in the sky moving from Trevor to Franklin for example)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9D2CFFF49FAB35F<br />
/// </para>
/// </remarks>
public static bool IsPlayerSwitchInProgress()
{
return Function.Call<bool>((Hash)0xD9D2CFFF49FAB35F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3C94A90D9FC9E62<br />
/// </para>
/// </remarks>
public static int GetPlayerSwitchType()
{
return Function.Call<int>((Hash)0xB3C94A90D9FC9E62);
}

/// <summary>
/// x1, y1, z1 -- Coords of your ped model<br />x2, y2, z2 -- Coords of the ped you want to switch to
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5D7B26B45720E05<br />
/// </para>
/// </remarks>
public static int GetIdealPlayerSwitchType(float x1, float y1, float z1, float x2, float y2, float z2)
{
return Function.Call<int>((Hash)0xB5D7B26B45720E05, x1, y1, z1, x2, y2, z2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x470555300D10B2A5<br />
/// </para>
/// </remarks>
public static int GetPlayerSwitchState()
{
return Function.Call<int>((Hash)0x470555300D10B2A5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20F898A5D9782800<br />
/// </para>
/// </remarks>
public static int GetPlayerShortSwitchState()
{
return Function.Call<int>((Hash)0x20F898A5D9782800);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F2013F8BC24EE69<br />
/// </para>
/// </remarks>
public static void SetPlayerShortSwitchStyle(int p0)
{
Function.Call((Hash)0x5F2013F8BC24EE69, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78C0D93253149435<br />
/// </para>
/// </remarks>
public static int GetPlayerSwitchJumpCutIndex()
{
return Function.Call<int>((Hash)0x78C0D93253149435);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC208B673CE446B61<br />
/// </para>
/// </remarks>
public static void SetPlayerSwitchOutro(float cameraCoordX, float cameraCoordY, float cameraCoordZ, float camRotationX, float camRotationY, float camRotationZ, float camFov, float camFarClip, int rotationOrder)
{
Function.Call((Hash)0xC208B673CE446B61, cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
}

/// <summary>
/// All names can be found in playerswitchestablishingshots.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FDE9DBFC0A6BC65<br />
/// </para>
/// </remarks>
public static void SetPlayerSwitchEstablishingShot(string name)
{
Function.Call((Hash)0x0FDE9DBFC0A6BC65, name);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43D1680C6D19A8E9<br />
/// </para>
/// </remarks>
public static void AllowPlayerSwitchPan()
{
Function.Call((Hash)0x43D1680C6D19A8E9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74DE2E8739086740<br />
/// </para>
/// </remarks>
public static void AllowPlayerSwitchOutro()
{
Function.Call((Hash)0x74DE2E8739086740);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E2A065ABDAE6994<br />
/// </para>
/// </remarks>
public static void AllowPlayerSwitchAscent()
{
Function.Call((Hash)0x8E2A065ABDAE6994);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD5FDF34B81BFE79<br />
/// </para>
/// </remarks>
public static void AllowPlayerSwitchDescent()
{
Function.Call((Hash)0xAD5FDF34B81BFE79);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFA80CB25D0A19B3<br />
/// </para>
/// </remarks>
public static bool IsSwitchReadyForDescent()
{
return Function.Call<bool>((Hash)0xDFA80CB25D0A19B3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4793DFF3AF2ABCD<br />
/// </para>
/// </remarks>
public static void EnableSwitchPauseBeforeDescent()
{
Function.Call((Hash)0xD4793DFF3AF2ABCD);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD605B8E0E18B3BB<br />
/// </para>
/// </remarks>
public static void DisableSwitchOutroFx()
{
Function.Call((Hash)0xBD605B8E0E18B3BB);
}

/// <summary>
/// doesn&apos;t act normally when used on mount chilliad<br />Flags is a bitflag:<br />2^n - Enabled Functionality:<br />0 - Skip camera rotate up<br />3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit &quot;properly&quot; and then STOP_PLAYER_SWITCH<br />6 - Invert Switch Direction (false = out, true = in)<br />8 - Hang above ped<br /><br />switchType: 0 - 3<br />0: 1 step towards ped<br />1: 3 steps out from ped<br />2: 1 step out from ped<br />3: 1 step towards ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAB3200ED59016BC<br />
/// </para>
/// </remarks>
public static void SwitchToMultiFirstpart(int /* Ped */ ped, int flags, int switchType)
{
Function.Call((Hash)0xAAB3200ED59016BC, ped, flags, switchType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8295AF639FD9CB8<br />
/// </para>
/// </remarks>
public static void SwitchToMultiSecondpart(int /* Ped */ ped)
{
Function.Call((Hash)0xD8295AF639FD9CB8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x933BBEEB8C61B5F4<br />
/// </para>
/// </remarks>
public static bool IsSwitchToMultiFirstpartFinished()
{
return Function.Call<bool>((Hash)0x933BBEEB8C61B5F4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x08C2D6C52A3104BB<br />
/// </para>
/// </remarks>
public static int GetPlayerSwitchInterpOutDuration()
{
return Function.Call<int>((Hash)0x08C2D6C52A3104BB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B48A06DD0E792A5<br />
/// </para>
/// </remarks>
public static int GetPlayerSwitchInterpOutCurrentTime()
{
return Function.Call<int>((Hash)0x5B48A06DD0E792A5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B74EA8CFD5E3E7E<br />
/// </para>
/// </remarks>
public static bool IsSwitchSkippingDescent()
{
return Function.Call<bool>((Hash)0x5B74EA8CFD5E3E7E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E9057A74FD73E23<br />
/// </para>
/// </remarks>
public static void SetSceneStreamingTracksCamPosThisFrame()
{
Function.Call((Hash)0x1E9057A74FD73E23);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0C15B0E443B2349D<br />
/// </para>
/// </remarks>
public static float GetLodscale()
{
return Function.Call<float>((Hash)0x0C15B0E443B2349D);
}

/// <summary>
/// This allows you to override &quot;extended distance scaling&quot; setting. Needs to be called each frame.<br />Max scaling seems to be 200.0, normal is 1.0<br />See https://gfycat.com/DetailedHauntingIncatern
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA76359FC80B2438E<br />
/// </para>
/// </remarks>
public static void OverrideLodscaleThisFrame(float scaling)
{
Function.Call((Hash)0xA76359FC80B2438E, scaling);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBED8CA5FF5E04113<br />
/// </para>
/// </remarks>
public static void RemapLodscaleRangeThisFrame(float p0, float p1, float p2, float p3)
{
Function.Call((Hash)0xBED8CA5FF5E04113, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x472397322E92A856<br />
/// </para>
/// </remarks>
public static void SuppressHdMapStreamingThisFrame()
{
Function.Call((Hash)0x472397322E92A856);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x40AEFD1A244741F2<br />
/// </para>
/// </remarks>
public static void SetRenderHdOnly(bool toggle)
{
Function.Call((Hash)0x40AEFD1A244741F2, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x03F1A106BDA7DD3E<br />
/// </para>
/// </remarks>
public static void ForceAllowTimeBasedFadingThisFrame()
{
Function.Call((Hash)0x03F1A106BDA7DD3E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95A7DABDDBB78AE7<br />
/// </para>
/// </remarks>
public static void IplGroupSwapStart(string iplName1, string iplName2)
{
Function.Call((Hash)0x95A7DABDDBB78AE7, iplName1, iplName2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63EB2B972A218CAC<br />
/// </para>
/// </remarks>
public static void IplGroupSwapCancel()
{
Function.Call((Hash)0x63EB2B972A218CAC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB199266061F820A<br />
/// </para>
/// </remarks>
public static bool IplGroupSwapIsReady()
{
return Function.Call<bool>((Hash)0xFB199266061F820A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4A0DADB70F57FA6<br />
/// </para>
/// </remarks>
public static void IplGroupSwapFinish()
{
Function.Call((Hash)0xF4A0DADB70F57FA6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5068F488DDB54DD8<br />
/// </para>
/// </remarks>
public static bool IplGroupSwapIsActive()
{
return Function.Call<bool>((Hash)0x5068F488DDB54DD8);
}

/// <summary>
/// This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for &apos;in-game&apos; cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.<br />For instance, GTA:O opening cutscene.<br />https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta<br />https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D245789CE12982C<br />
/// </para>
/// </remarks>
public static void PrefetchSrl(string srl)
{
Function.Call((Hash)0x3D245789CE12982C, srl);
}

/// <summary>
/// Returns true when the srl from BEGIN_SRL is loaded.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0263801A4C5B0BB<br />
/// </para>
/// </remarks>
public static bool IsSrlLoaded()
{
return Function.Call<bool>((Hash)0xD0263801A4C5B0BB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BADDC94EF83B823<br />
/// </para>
/// </remarks>
public static void BeginSrl()
{
Function.Call((Hash)0x9BADDC94EF83B823);
}

/// <summary>
/// Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A41540E63C9EE17<br />
/// </para>
/// </remarks>
public static void EndSrl()
{
Function.Call((Hash)0x0A41540E63C9EE17);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA74A541C6884E7B8<br />
/// </para>
/// </remarks>
public static void SetSrlTime(float p0)
{
Function.Call((Hash)0xA74A541C6884E7B8, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF39EE20C537E98C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSrlPostCutsceneCamera(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0xEF39EE20C537E98C, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBEB2D9A1D9A8F55A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSrlReadaheadTimes(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xBEB2D9A1D9A8F55A, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20C6C7E4EB082A7F<br />
/// </para>
/// </remarks>
public static void SetSrlLongJumpMode(bool p0)
{
Function.Call((Hash)0x20C6C7E4EB082A7F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8155A7F03DDFC8E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetSrlForcePrestream(int /* bug: Any */ p0)
{
Function.Call((Hash)0xF8155A7F03DDFC8E, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB85F26619073E775<br />
/// </para>
/// </remarks>
public static void SetHdArea(float x, float y, float z, float radius)
{
Function.Call((Hash)0xB85F26619073E775, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCE58B1CFB9290813<br />
/// </para>
/// </remarks>
public static void ClearHdArea()
{
Function.Call((Hash)0xCE58B1CFB9290813);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5A4DB34FE89B88A<br />
/// </para>
/// </remarks>
public static void InitCreatorBudget()
{
Function.Call((Hash)0xB5A4DB34FE89B88A);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCE26000E9A6FAD7<br />
/// </para>
/// </remarks>
public static void ShutdownCreatorBudget()
{
Function.Call((Hash)0xCCE26000E9A6FAD7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0BC3144DEB678666<br />
/// </para>
/// </remarks>
public static bool AddModelToCreatorBudget(uint modelHash)
{
return Function.Call<bool>((Hash)0x0BC3144DEB678666, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF086AD9354FAC3A3<br />
/// </para>
/// </remarks>
public static void RemoveModelFromCreatorBudget(uint modelHash)
{
Function.Call((Hash)0xF086AD9354FAC3A3, modelHash);
}

/// <summary>
/// 0.0 = no memory used<br />1.0 = all memory used<br /><br />Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3D3D8B3BE5A83D35<br />
/// </para>
/// </remarks>
public static float GetUsedCreatorBudget()
{
return Function.Call<float>((Hash)0x3D3D8B3BE5A83D35);
}

/// <summary>
/// Enables the specified island. For more information, see islandhopper.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x9A9D1BA639675CF1<br />
/// </para>
/// </remarks>
public static void SetIslandEnabled(string name, bool toggle)
{
Function.Call((Hash)0x9A9D1BA639675CF1, name, toggle);
}

#endregion
#region TASK
/// <summary>
/// Stand still (?)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE73A266DB0CA9042<br />
/// </para>
/// </remarks>
public static void TaskPause(int /* Ped */ ped, int ms)
{
Function.Call((Hash)0xE73A266DB0CA9042, ped, ms);
}

/// <summary>
/// Makes the specified ped stand still for (time) milliseconds.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x919BE13EED931959<br />
/// </para>
/// </remarks>
public static void TaskStandStill(int /* Ped */ ped, int time)
{
Function.Call((Hash)0x919BE13EED931959, ped, time);
}

/// <summary>
/// Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).<br /><br />v350: Ped ped, bool unused<br />v678: Ped ped, bool unused, bool flag1, bool flag2<br /><br />flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AE4086104E067B1<br />
/// </para>
/// </remarks>
public static void TaskJump(int /* Ped */ ped, bool usePlayerLaunchForce, bool doSuperJump, bool useFullSuperJumpForce)
{
Function.Call((Hash)0x0AE4086104E067B1, ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3EB1FE9E8E908E15<br />
/// </para>
/// </remarks>
public static void TaskCower(int /* Ped */ ped, int duration)
{
Function.Call((Hash)0x3EB1FE9E8E908E15, ped, duration);
}

/// <summary>
/// In the scripts, p3 was always -1.<br /><br />p3 seems to be duration or timeout of turn animation.<br />Also facingPed can be 0 or -1 so ped will just raise hands up.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2EAB31979A7F910<br />
/// </para>
/// </remarks>
public static void TaskHandsUp(int /* Ped */ ped, int duration, int /* Ped */ facingPed, int timeToFacePed, int flags)
{
Function.Call((Hash)0xF2EAB31979A7F910, ped, duration, facingPed, timeToFacePed, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA98FCAFD7893C834<br />
/// </para>
/// </remarks>
public static void UpdateTaskHandsUpDuration(int /* Ped */ ped, int duration)
{
Function.Call((Hash)0xA98FCAFD7893C834, ped, duration);
}

/// <summary>
/// The given ped will try to open the nearest door to &apos;seat&apos;.<br />Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x965791A9A488A062<br />
/// </para>
/// </remarks>
public static void TaskOpenVehicleDoor(int /* Ped */ ped, int /* Vehicle */ vehicle, int timeOut, int seat, float speed)
{
Function.Call((Hash)0x965791A9A488A062, ped, vehicle, timeOut, seat, speed);
}

/// <summary>
/// speed 1.0 = walk, 2.0 = run<br />p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle<br />p6 is always 0<br /><br />Usage of seat <br />-1 = driver<br />0 = passenger<br />1 = left back seat<br />2 = right back seat<br />3 = outside left<br />4 = outside right
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC20E50AA46D09CA8<br />
/// </para>
/// </remarks>
public static void TaskEnterVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, int timeout, int seat, float speed, int flag, string overrideEntryClipsetName)
{
Function.Call((Hash)0xC20E50AA46D09CA8, ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName);
}

/// <summary>
/// Flags from decompiled scripts:<br />0 = normal exit and closes door.<br />1 = normal exit and closes door.<br />16 = teleports outside, door kept closed.<br />64 = normal exit and closes door, maybe a bit slower animation than 0.<br />256 = normal exit but does not close the door.<br />4160 = ped is throwing himself out, even when the vehicle is still.<br />262144 = ped moves to passenger seat first, then exits normally<br /><br />Others to be tried out: 320, 512, 131072.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD3DBCE61A490BE02<br />
/// </para>
/// </remarks>
public static void TaskLeaveVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, int flags)
{
Function.Call((Hash)0xD3DBCE61A490BE02, ped, vehicle, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C00E77AF14B2DFF<br />
/// </para>
/// </remarks>
public static void TaskGetOffBoat(int /* Ped */ ped, int /* Vehicle */ boat)
{
Function.Call((Hash)0x9C00E77AF14B2DFF, ped, boat);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x601736CFE536B0A0<br />
/// </para>
/// </remarks>
public static void TaskSkyDive(int /* Ped */ ped, bool instant)
{
Function.Call((Hash)0x601736CFE536B0A0, ped, instant);
}

/// <summary>
/// Second parameter is unused.<br /><br />second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2F1C53C97EE81AB<br />
/// </para>
/// </remarks>
public static void TaskParachute(int /* Ped */ ped, bool giveParachuteItem, bool instant)
{
Function.Call((Hash)0xD2F1C53C97EE81AB, ped, giveParachuteItem, instant);
}

/// <summary>
/// makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB33E291AFA6BD03A<br />
/// </para>
/// </remarks>
public static void TaskParachuteToTarget(int /* Ped */ ped, float x, float y, float z)
{
Function.Call((Hash)0xB33E291AFA6BD03A, ped, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC313379AF0FCEDA7<br />
/// </para>
/// </remarks>
public static void SetParachuteTaskTarget(int /* Ped */ ped, float x, float y, float z)
{
Function.Call((Hash)0xC313379AF0FCEDA7, ped, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0729BAC1B8C64317<br />
/// </para>
/// </remarks>
public static void SetParachuteTaskThrust(int /* Ped */ ped, float thrust)
{
Function.Call((Hash)0x0729BAC1B8C64317, ped, thrust);
}

/// <summary>
/// minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling<br /><br />Only appears twice in the scripts.<br /><br />TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);<br />TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x09693B0312F91649<br />
/// </para>
/// </remarks>
public static void TaskRappelFromHeli(int /* Ped */ ped, float minHeightAboveGround)
{
Function.Call((Hash)0x09693B0312F91649, ped, minHeightAboveGround);
}

/// <summary>
/// info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE2A2AA2F659D77A7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TaskVehicleDriveToCoord(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, float speed, int /* bug: Any */ p6, uint vehicleModel, int drivingMode, float stopRange, float straightLineDistance)
{
Function.Call((Hash)0xE2A2AA2F659D77A7, ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x158BB33F920D360C<br />
/// </para>
/// </remarks>
public static void TaskVehicleDriveToCoordLongrange(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, float speed, int driveMode, float stopRange)
{
Function.Call((Hash)0x158BB33F920D360C, ped, vehicle, x, y, z, speed, driveMode, stopRange);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x480142959D337D00<br />
/// </para>
/// </remarks>
public static void TaskVehicleDriveWander(int /* Ped */ ped, int /* Vehicle */ vehicle, float speed, int drivingStyle)
{
Function.Call((Hash)0x480142959D337D00, ped, vehicle, speed, drivingStyle);
}

/// <summary>
/// p6 always -1<br />p7 always 10.0<br />p8 always 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x304AE42E357B8C7E<br />
/// </para>
/// </remarks>
public static void TaskFollowToOffsetOfEntity(int /* Ped */ ped, int /* Entity */ entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing)
{
Function.Call((Hash)0x304AE42E357B8C7E, ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD76B57B44F1E6F8B<br />
/// </para>
/// </remarks>
public static void TaskGoStraightToCoord(int /* Ped */ ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide)
{
Function.Call((Hash)0xD76B57B44F1E6F8B, ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61E360B7E040D12E<br />
/// </para>
/// </remarks>
public static void TaskGoStraightToCoordRelativeToEntity(int /* Ped */ ped, int /* Entity */ entity, float x, float y, float z, float moveBlendRatio, int time)
{
Function.Call((Hash)0x61E360B7E040D12E, ped, entity, x, y, z, moveBlendRatio, time);
}

/// <summary>
/// Makes the specified ped achieve the specified heading.<br /><br />pedHandle: The handle of the ped to assign the task to.<br />heading: The desired heading.<br />timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93B93A37987F1F3D<br />
/// </para>
/// </remarks>
public static void TaskAchieveHeading(int /* Ped */ ped, float heading, int timeout)
{
Function.Call((Hash)0x93B93A37987F1F3D, ped, heading, timeout);
}

/// <summary>
/// MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x841142A1376E9006<br />
/// </para>
/// </remarks>
public static void TaskFlushRoute()
{
Function.Call((Hash)0x841142A1376E9006);
}

/// <summary>
/// MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.<br /><br />A maximum of 8 points can be added.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E7889778264843A<br />
/// </para>
/// </remarks>
public static void TaskExtendRoute(float x, float y, float z)
{
Function.Call((Hash)0x1E7889778264843A, x, y, z);
}

/// <summary>
/// MulleKD19: Makes the ped go on the created point route.<br /><br />ped: The ped to give the task to.<br />speed: The speed to move at in m/s.<br />int: Unknown. Can be 0, 1, 2 or 3.<br /><br />Example:<br />TASK_FLUSH_ROUTE();<br />TASK_EXTEND_ROUTE(0f, 0f, 70f);<br />TASK_EXTEND_ROUTE(10f, 0f, 70f);<br />TASK_EXTEND_ROUTE(10f, 10f, 70f);<br />TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x595583281858626E<br />
/// </para>
/// </remarks>
public static void TaskFollowPointRoute(int /* Ped */ ped, float speed, int mode)
{
Function.Call((Hash)0x595583281858626E, ped, speed, mode);
}

/// <summary>
/// The entity will move towards the target until time is over (duration) or get in target&apos;s range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn&apos;t see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0<br /><br />Note: I&apos;ve only tested it on entity -&gt; ped and target -&gt; vehicle. It could work differently on other entities, didn&apos;t try it yet.<br /><br />Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)<br /><br />Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).<br /><br />enum EGOTO_ENTITY_SCRIPT_FLAGS<br />{<br />	EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A071245EB0D1882<br />
/// </para>
/// </remarks>
public static void TaskGoToEntity(int /* Entity */ entity, int /* Entity */ target, int duration, float distance, float moveBlendRatio, float slowDownDistance, int flags)
{
Function.Call((Hash)0x6A071245EB0D1882, entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
}

/// <summary>
/// Makes the specified ped flee the specified distance from the specified position.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x94587F17E9C365D5<br />
/// </para>
/// </remarks>
public static void TaskSmartFleeCoord(int /* Ped */ ped, float x, float y, float z, float distance, int time, bool preferPavements, bool quitIfOutOfRange)
{
Function.Call((Hash)0x94587F17E9C365D5, ped, x, y, z, distance, time, preferPavements, quitIfOutOfRange);
}

/// <summary>
/// Makes a ped run away from another ped (fleeTarget).<br /><br />distance = ped will flee this distance.<br />fleeTime = ped will flee for this amount of time, set to &quot;-1&quot; to flee forever
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22B0D0E37CCB840D<br />
/// </para>
/// </remarks>
public static void TaskSmartFleePed(int /* Ped */ ped, int /* Ped */ fleeTarget, float safeDistance, int fleeTime, bool preferPavements, bool updateToNearestHatedPed)
{
Function.Call((Hash)0x22B0D0E37CCB840D, ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x72C896464915D1B1<br />
/// </para>
/// </remarks>
public static void TaskReactAndFleePed(int /* Ped */ ped, int /* Ped */ fleeTarget)
{
Function.Call((Hash)0x72C896464915D1B1, ped, fleeTarget);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x452419CBD838065B<br />
/// </para>
/// </remarks>
public static void TaskShockingEventReact(int /* Ped */ ped, int eventHandle)
{
Function.Call((Hash)0x452419CBD838065B, ped, eventHandle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE054346CA3A0F315<br />
/// </para>
/// </remarks>
public static void TaskWanderInArea(int /* Ped */ ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks)
{
Function.Call((Hash)0xE054346CA3A0F315, ped, x, y, z, radius, minimalLength, timeBetweenWalks);
}

/// <summary>
/// Makes ped walk around the area.<br /><br />set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB9CE077274F6A1B<br />
/// </para>
/// </remarks>
public static void TaskWanderStandard(int /* Ped */ ped, float heading, int flags)
{
Function.Call((Hash)0xBB9CE077274F6A1B, ped, heading, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x6919A2F136426098<br />
/// </para>
/// </remarks>
public static void TaskWanderSpecific(int /* Ped */ ped, string conditionalAnimGroupStr, string conditionalAnimStr, float heading)
{
Function.Call((Hash)0x6919A2F136426098, ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
}

/// <summary>
/// Modes:<br />0 - ignore heading<br />1 - park forward<br />2 - park backwards<br /><br />Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.<br /><br />Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it&apos;s exactly where it should be. 20.0 Works well but lower values don&apos;t, like the radius is measured in centimeters or something.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F3E34E968EA374E<br />
/// </para>
/// </remarks>
public static void TaskVehiclePark(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, float heading, int mode, float radius, bool keepEngineOn)
{
Function.Call((Hash)0x0F3E34E968EA374E, ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn);
}

/// <summary>
/// known &quot;killTypes&quot; are: &quot;AR_stealth_kill_knife&quot; and &quot;AR_stealth_kill_a&quot;.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA5DC05579D60BD9<br />
/// </para>
/// </remarks>
public static void TaskStealthKill(int /* Ped */ killer, int /* Ped */ target, uint stealthKillActionResultHash, float desiredMoveBlendRatio, int stealthFlags)
{
Function.Call((Hash)0xAA5DC05579D60BD9, killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x965FEC691D55E9BF<br />
/// </para>
/// </remarks>
public static void TaskPlantBomb(int /* Ped */ ped, float x, float y, float z, float heading)
{
Function.Call((Hash)0x965FEC691D55E9BF, ped, x, y, z, heading);
}

/// <summary>
/// If no timeout, set timeout to -1.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15D3A79D4E44B913<br />
/// </para>
/// </remarks>
public static void TaskFollowNavMeshToCoord(int /* Ped */ ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float targetHeading)
{
Function.Call((Hash)0x15D3A79D4E44B913, ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x17F58B88D085DBAC<br />
/// </para>
/// </remarks>
public static void TaskFollowNavMeshToCoordAdvanced(int /* Ped */ ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float slideToCoordHeading, float maxSlopeNavigable, float clampMaxSearchDistance, float targetHeading)
{
Function.Call((Hash)0x17F58B88D085DBAC, ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E06A6FE76C9EFF4<br />
/// </para>
/// </remarks>
public static void SetPedPathCanUseClimbovers(int /* Ped */ ped, bool Toggle)
{
Function.Call((Hash)0x8E06A6FE76C9EFF4, ped, Toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77A5B103C87F476E<br />
/// </para>
/// </remarks>
public static void SetPedPathCanUseLadders(int /* Ped */ ped, bool Toggle)
{
Function.Call((Hash)0x77A5B103C87F476E, ped, Toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE361C5C71C431A4F<br />
/// </para>
/// </remarks>
public static void SetPedPathCanDropFromHeight(int /* Ped */ ped, bool Toggle)
{
Function.Call((Hash)0xE361C5C71C431A4F, ped, Toggle);
}

/// <summary>
/// Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88E32DB8C1A4AA4B<br />
/// </para>
/// </remarks>
public static void SetPedPathClimbCostModifier(int /* Ped */ ped, float modifier)
{
Function.Call((Hash)0x88E32DB8C1A4AA4B, ped, modifier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF35425A4204367EC<br />
/// </para>
/// </remarks>
public static void SetPedPathMayEnterWater(int /* Ped */ ped, bool mayEnterWater)
{
Function.Call((Hash)0xF35425A4204367EC, ped, mayEnterWater);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x38FE1EC73743793C<br />
/// </para>
/// </remarks>
public static void SetPedPathPreferToAvoidWater(int /* Ped */ ped, bool avoidWater)
{
Function.Call((Hash)0x38FE1EC73743793C, ped, avoidWater);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4455517B28441E60<br />
/// </para>
/// </remarks>
public static void SetPedPathAvoidFire(int /* Ped */ ped, bool avoidFire)
{
Function.Call((Hash)0x4455517B28441E60, ped, avoidFire);
}

/// <summary>
/// Needs to be looped! And yes, it does work and is not a hash collision.<br />Birds will try to reach the given height.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C6B148586F934F7<br />
/// </para>
/// </remarks>
public static void SetGlobalMinBirdFlightHeight(float height)
{
Function.Call((Hash)0x6C6B148586F934F7, height);
}

/// <summary>
/// Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.<br />Return value of native is the same as GET_NAVMESH_ROUTE_RESULT<br />Looks like the native returns an int for the path&apos;s state:<br />1 - ???<br />2 - ???<br />3 - Finished Generating 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6F5C0BCDC74D62D<br />
/// </para>
/// </remarks>
public static int GetNavmeshRouteDistanceRemaining(int /* Ped */ ped, ref float distanceRemaining, ref bool isPathReady)
{
var nativeAssistPointerVar0 = distanceRemaining;
var nativeAssistPointerVar1 = isPathReady;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0xC6F5C0BCDC74D62D, ped, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
distanceRemaining = nativeAssistPointerVar0;
isPathReady = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x632E831F382A0FA8<br />
/// </para>
/// </remarks>
public static int GetNavmeshRouteResult(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x632E831F382A0FA8, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E38E28A1D80DDF6<br />
/// </para>
/// </remarks>
public static bool IsControlledVehicleUnableToGetToRoad(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x3E38E28A1D80DDF6, ped);
}

/// <summary>
/// example from fm_mission_controller<br /><br />TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);<br /> 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5BC448CB78FA3E88<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordAnyMeans(int /* Ped */ ped, float x, float y, float z, float moveBlendRatio, int /* Vehicle */ vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets)
{
Function.Call((Hash)0x5BC448CB78FA3E88, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DD45F9ECFDB1BC9<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordAnyMeansExtraParams(int /* Ped */ ped, float x, float y, float z, float moveBlendRatio, int /* Vehicle */ vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float warpTimerMS)
{
Function.Call((Hash)0x1DD45F9ECFDB1BC9, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8ECD61F531A7B02<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(int /* Ped */ ped, float x, float y, float z, float moveBlendRatio, int /* Vehicle */ vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float cruiseSpeed, float targetArriveDist)
{
Function.Call((Hash)0xB8ECD61F531A7B02, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json<br /><br />float speed &gt; normal speed is 8.0f<br />----------------------<br /><br />float speedMultiplier &gt; multiply the playback speed<br />----------------------<br /><br />int duration: time in millisecond<br />----------------------<br />-1 _ _ _ _ _ _ _&gt; Default (see flag)<br />0 _ _ _ _ _ _ _ &gt; Not play at all<br />Small value _ _ &gt; Slow down animation speed<br />Other _ _ _ _ _ &gt; freeze player control until specific time (ms) has <br />_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be <br />_ _ _ _ _ _ _ _ _ controllable.)<br /><br />int flag:<br />----------------------<br />enum eAnimationFlags<br />{<br /> ANIM_FLAG_NORMAL = 0,<br />   ANIM_FLAG_REPEAT = 1,<br />   ANIM_FLAG_STOP_LAST_FRAME = 2,<br />   ANIM_FLAG_UPPERBODY = 16,<br />   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,<br />   ANIM_FLAG_CANCELABLE = 120,<br />};<br />Odd number : loop infinitely<br />Even number : Freeze at last frame<br />Multiple of 4: Freeze at last frame but controllable<br /><br />01 to 15 &gt; Full body<br />10 to 31 &gt; Upper body<br />32 to 47 &gt; Full body &gt; Controllable<br />48 to 63 &gt; Upper body &gt; Controllable<br />...<br />001 to 255 &gt; Normal<br />256 to 511 &gt; Garbled<br />...<br /><br />playbackRate:<br /><br />values are between 0.0 and 1.0<br /><br /><br />lockX:  <br /><br />0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3<br />&gt; 1 for mini@sprunk<br /> <br /><br />lockY:<br /><br />0 in most cases <br />1 for missfam5_yoga, missfra1mcs_2_crew_react<br /><br /><br />lockZ: <br /><br />    0 for single player <br />    Can be 1 but only for MP 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA47FE3719165B94<br />
/// </para>
/// </remarks>
public static void TaskPlayAnim(int /* Ped */ ped, string animDictionary, string animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, bool lockX, bool lockY, bool lockZ)
{
Function.Call((Hash)0xEA47FE3719165B94, ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
}

/// <summary>
/// It&apos;s similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83CDB10EA29B370B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TaskPlayAnimAdvanced(int /* Ped */ ped, string animDict, string animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float animEnterSpeed, float animExitSpeed, int duration, int /* bug: Any */ flag, float animTime, int rotOrder, int ikFlags)
{
Function.Call((Hash)0x83CDB10EA29B370B, ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97FF36A1D40EA00A<br />
/// </para>
/// </remarks>
public static void StopAnimTask(int /* Entity */ entity, string animDictionary, string animationName, float blendDelta)
{
Function.Call((Hash)0x97FF36A1D40EA00A, entity, animDictionary, animationName, blendDelta);
}

/// <summary>
/// From fm_mission_controller.c:<br />reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);<br />           vVar28 = {0.094f, 0.02f, -0.005f};<br />            vVar29 = {-92.24f, 63.64f, 150.24f};<br />          func_253(&amp;uVar30, joaat(&quot;prop_ld_case_01&quot;), Global_1592429.imm_34757[iParam1 &lt;268&gt;], 1, 1, 0, 1);<br />         set_entity_lod_dist(net_to_ent(uVar30), 500);<br />         attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);<br />           Var31.imm_4 = 1065353216;<br />         Var31.imm_5 = 1065353216;<br />         Var31.imm_9 = 1065353216;<br />         Var31.imm_10 = 1065353216;<br />            Var31.imm_14 = 1065353216;<br />            Var31.imm_15 = 1065353216;<br />            Var31.imm_17 = 1040187392;<br />            Var31.imm_18 = 1040187392;<br />            Var31.imm_19 = -1;<br />            Var32.imm_4 = 1065353216;<br />         Var32.imm_5 = 1065353216;<br />         Var32.imm_9 = 1065353216;<br />         Var32.imm_10 = 1065353216;<br />            Var32.imm_14 = 1065353216;<br />            Var32.imm_15 = 1065353216;<br />            Var32.imm_17 = 1040187392;<br />            Var32.imm_18 = 1040187392;<br />            Var32.imm_19 = -1;<br />            Var31 = 1;<br />            Var31.imm_1 = &quot;weapons@misc@jerrycan@mp_male&quot;;<br />          Var31.imm_2 = &quot;idle&quot;;<br />           Var31.imm_20 = 1048633;<br />           Var31.imm_4 = 0.5f;<br />           Var31.imm_16 = get_hash_key(&quot;BONEMASK_ARMONLY_R&quot;);<br />          task_scripted_animation(iParam0, &amp;Var31, &amp;Var32, &amp;Var32, 0f, 0.25f);<br />          set_model_as_no_longer_needed(joaat(&quot;prop_ld_case_01&quot;));<br />            remove_anim_dict(&quot;anim@heists@biolab@&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x126EF75F1E17ABE5<br />
/// </para>
/// </remarks>
public static void TaskScriptedAnimation(int /* Ped */ ped, ref int priorityLowData, ref int priorityMidData, ref int priorityHighData, float blendInDelta, float blendOutDelta)
{
var nativeAssistPointerVar0 = priorityLowData;
var nativeAssistPointerVar1 = priorityMidData;
var nativeAssistPointerVar2 = priorityHighData;
unsafe {
Function.Call((Hash)0x126EF75F1E17ABE5, ped, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, blendInDelta, blendOutDelta);
}
priorityLowData = nativeAssistPointerVar0;
priorityMidData = nativeAssistPointerVar1;
priorityHighData = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77A1EEC547E7FCF1<br />
/// </para>
/// </remarks>
public static void PlayEntityScriptedAnim(int /* Entity */ entity, ref int priorityLowData, ref int priorityMidData, ref int priorityHighData, float blendInDelta, float blendOutDelta)
{
var nativeAssistPointerVar0 = priorityLowData;
var nativeAssistPointerVar1 = priorityMidData;
var nativeAssistPointerVar2 = priorityHighData;
unsafe {
Function.Call((Hash)0x77A1EEC547E7FCF1, entity, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2, blendInDelta, blendOutDelta);
}
priorityLowData = nativeAssistPointerVar0;
priorityMidData = nativeAssistPointerVar1;
priorityHighData = nativeAssistPointerVar2;
}

/// <summary>
/// Looks like p1 may be a flag, still need to do some research, though.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEE08C992D238C5D1<br />
/// </para>
/// </remarks>
public static void StopAnimPlayback(int /* Entity */ entity, int priority, bool secondary)
{
Function.Call((Hash)0xEE08C992D238C5D1, entity, priority, secondary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x207F1A47C0342F48<br />
/// </para>
/// </remarks>
public static void SetAnimWeight(int /* Entity */ entity, float weight, int priority, int index, bool secondary)
{
Function.Call((Hash)0x207F1A47C0342F48, entity, weight, priority, index, secondary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xDDF3CB5A0A4C0B49<br />
/// </para>
/// </remarks>
public static void SetAnimPhase(int /* Entity */ entity, float phase, int priority, bool secondary)
{
Function.Call((Hash)0xDDF3CB5A0A4C0B49, entity, phase, priority, secondary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x032D49C5E359C847<br />
/// </para>
/// </remarks>
public static void SetAnimRate(int /* Entity */ entity, float rate, int priority, bool secondary)
{
Function.Call((Hash)0x032D49C5E359C847, entity, rate, priority, secondary);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70033C3CC29A1FF4<br />
/// </para>
/// </remarks>
public static void SetAnimLooped(int /* Entity */ entity, bool looped, int priority, bool secondary)
{
Function.Call((Hash)0x70033C3CC29A1FF4, entity, looped, priority, secondary);
}

/// <summary>
/// Example from the scripts:<br />TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);<br /><br />=========================================================<br />^^ No offense, but Idk how that would really help anyone.<br /><br />As for the animDict &amp; animation, they&apos;re both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.<br /><br />Known boneMaskTypes&apos;<br />&quot;BONEMASK_HEADONLY&quot;<br />&quot;BONEMASK_HEAD_NECK_AND_ARMS&quot;<br />&quot;BONEMASK_HEAD_NECK_AND_L_ARM&quot;<br />&quot;BONEMASK_HEAD_NECK_AND_R_ARM&quot;<br /><br />p4 known args - 0.0f, 0.5f, 0.25f<br />p5 known args - 0.0f, 0.25f<br />p6 known args - 1 if a global if check is passed.<br />p7 known args - 1 if a global if check is passed.<br /><br />The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).<br />=========================================================<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8FBB6758B3B3E9EC<br />
/// </para>
/// </remarks>
public static void TaskPlayPhoneGestureAnimation(int /* Ped */ ped, string animDict, string animation, string boneMaskType, float blendInDuration, float blendOutDuration, bool isLooping, bool holdLastFrame)
{
Function.Call((Hash)0x8FBB6758B3B3E9EC, ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3FA00D4F4641BFAE<br />
/// </para>
/// </remarks>
public static void TaskStopPhoneGestureAnimation(int /* Ped */ ped, float blendOutOverride)
{
Function.Call((Hash)0x3FA00D4F4641BFAE, ped, blendOutOverride);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8EBB1E9D3588C10<br />
/// </para>
/// </remarks>
public static bool IsPlayingPhoneGestureAnim(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB8EBB1E9D3588C10, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47619ABE8B268C60<br />
/// </para>
/// </remarks>
public static float GetPhoneGestureAnimCurrentTime(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x47619ABE8B268C60, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1EE0F68A7C25DEC6<br />
/// </para>
/// </remarks>
public static float GetPhoneGestureAnimTotalTime(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x1EE0F68A7C25DEC6, ped);
}

/// <summary>
/// Most probably plays a specific animation on vehicle. For example getting chop out of van etc...<br /><br />Here&apos;s how its used - <br /><br />TASK::TASK_VEHICLE_PLAY_ANIM(l_325, &quot;rcmnigel1b&quot;, &quot;idle_speedo&quot;);<br /><br />TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], &quot;missfra0_chop_drhome&quot;, &quot;InCar_GetOutofBack_Speedo&quot;);<br /><br />FYI : Speedo is the name of van in which chop was put in the mission.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69F5C3BD0F3EBD89<br />
/// </para>
/// </remarks>
public static void TaskVehiclePlayAnim(int /* Vehicle */ vehicle, string animationSet, string animationName)
{
Function.Call((Hash)0x69F5C3BD0F3EBD89, vehicle, animationSet, animationName);
}

/// <summary>
/// enum eScriptLookatFlags<br />{<br />	SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly<br />	SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly<br />	SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits<br />	SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit<br />	SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit<br />	SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit<br />	SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits<br />	SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit<br />	SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit<br />	SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit<br />	SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)<br />	SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV<br />	SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target<br />	SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes  <br />	SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF<br />	SLF_FROM_SCRIPT                = 32768, // internal use only<br />	SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6FA46612594F7973<br />
/// </para>
/// </remarks>
public static void TaskLookAtCoord(int /* Entity */ entity, float x, float y, float z, int duration, int flags, int priority)
{
Function.Call((Hash)0x6FA46612594F7973, entity, x, y, z, duration, flags, priority);
}

/// <summary>
/// For flags, please refer to TASK_LOOK_AT_COORD.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x69F4BE8C8CC4796C<br />
/// </para>
/// </remarks>
public static void TaskLookAtEntity(int /* Ped */ ped, int /* Entity */ lookAt, int duration, int flags, int priority)
{
Function.Call((Hash)0x69F4BE8C8CC4796C, ped, lookAt, duration, flags, priority);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F804F1DB19B9689<br />
/// </para>
/// </remarks>
public static void TaskClearLookAt(int /* Ped */ ped)
{
Function.Call((Hash)0x0F804F1DB19B9689, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8854A4326B9E12B<br />
/// </para>
/// </remarks>
public static void OpenSequenceTask(ref int taskSequenceId)
{
var nativeAssistPointerVar0 = taskSequenceId;
unsafe {
Function.Call((Hash)0xE8854A4326B9E12B, &nativeAssistPointerVar0);
}
taskSequenceId = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39E72BC99E6360CB<br />
/// </para>
/// </remarks>
public static void CloseSequenceTask(int taskSequenceId)
{
Function.Call((Hash)0x39E72BC99E6360CB, taskSequenceId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5ABA3986D90D8A3B<br />
/// </para>
/// </remarks>
public static void TaskPerformSequence(int /* Ped */ ped, int taskSequenceId)
{
Function.Call((Hash)0x5ABA3986D90D8A3B, ped, taskSequenceId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x8C33220C8D78CA0D<br />
/// </para>
/// </remarks>
public static void TaskPerformSequenceLocally(int /* Ped */ ped, int taskSequenceId)
{
Function.Call((Hash)0x8C33220C8D78CA0D, ped, taskSequenceId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3841422E9C488D8C<br />
/// </para>
/// </remarks>
public static void ClearSequenceTask(ref int taskSequenceId)
{
var nativeAssistPointerVar0 = taskSequenceId;
unsafe {
Function.Call((Hash)0x3841422E9C488D8C, &nativeAssistPointerVar0);
}
taskSequenceId = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58C70CF3A41E4AE7<br />
/// </para>
/// </remarks>
public static void SetSequenceToRepeat(int taskSequenceId, bool repeat)
{
Function.Call((Hash)0x58C70CF3A41E4AE7, taskSequenceId, repeat);
}

/// <summary>
/// returned values:<br />0 to 7 = task that&apos;s currently in progress, 0 meaning the first one.<br />-1 no task sequence in progress.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00A9010CFE1E3533<br />
/// </para>
/// </remarks>
public static int GetSequenceProgress(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x00A9010CFE1E3533, ped);
}

/// <summary>
/// Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB0760331C7AA4155<br />
/// </para>
/// </remarks>
public static bool GetIsTaskActive(int /* Ped */ ped, int taskIndex)
{
return Function.Call<bool>((Hash)0xB0760331C7AA4155, ped, taskIndex);
}

/// <summary>
/// Gets the status of a script-assigned task.<br />taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x77F1BEB8863288D5<br />
/// </para>
/// </remarks>
public static int GetScriptTaskStatus(int /* Ped */ ped, uint taskHash)
{
return Function.Call<int>((Hash)0x77F1BEB8863288D5, ped, taskHash);
}

/// <summary>
/// https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x534AEBA6E5ED4CAB<br />
/// </para>
/// </remarks>
public static int GetActiveVehicleMissionType(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x534AEBA6E5ED4CAB, vehicle);
}

/// <summary>
/// Flags are the same flags used in TASK_LEAVE_VEHICLE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x504D54DF3F6F2247<br />
/// </para>
/// </remarks>
public static void TaskLeaveAnyVehicle(int /* Ped */ ped, int delayTime, int flags)
{
Function.Call((Hash)0x504D54DF3F6F2247, ped, delayTime, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7A192BE16D373D00<br />
/// </para>
/// </remarks>
public static void TaskAimGunScripted(int /* Ped */ ped, uint scriptTask, bool disableBlockingClip, bool instantBlendToAim)
{
Function.Call((Hash)0x7A192BE16D373D00, ped, scriptTask, disableBlockingClip, instantBlendToAim);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8605AF0DE8B3A5AC<br />
/// </para>
/// </remarks>
public static void TaskAimGunScriptedWithTarget(int /* Ped */ ped, int /* Ped */ target, float x, float y, float z, int gunTaskType, bool disableBlockingClip, bool forceAim)
{
Function.Call((Hash)0x8605AF0DE8B3A5AC, ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9724FB59A3E72AD0<br />
/// </para>
/// </remarks>
public static void UpdateTaskAimGunScriptedTarget(int /* Ped */ ped, int /* Ped */ target, float x, float y, float z, bool disableBlockingClip)
{
Function.Call((Hash)0x9724FB59A3E72AD0, ped, target, x, y, z, disableBlockingClip);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A8CADC7D37AACC5<br />
/// </para>
/// </remarks>
public static string GetClipSetForScriptedGunTask(int gunTaskType)
{
return Function.Call<string>((Hash)0x3A8CADC7D37AACC5, gunTaskType);
}

/// <summary>
/// duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B53BB6E8943AF53<br />
/// </para>
/// </remarks>
public static void TaskAimGunAtEntity(int /* Ped */ ped, int /* Entity */ entity, int duration, bool instantBlendToAim)
{
Function.Call((Hash)0x9B53BB6E8943AF53, ped, entity, duration, instantBlendToAim);
}

/// <summary>
/// duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AD23D40115353AC<br />
/// </para>
/// </remarks>
public static void TaskTurnPedToFaceEntity(int /* Ped */ ped, int /* Entity */ entity, int duration)
{
Function.Call((Hash)0x5AD23D40115353AC, ped, entity, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6671F3EEC681BDA1<br />
/// </para>
/// </remarks>
public static void TaskAimGunAtCoord(int /* Ped */ ped, float x, float y, float z, int time, bool instantBlendToAim, bool playAnimIntro)
{
Function.Call((Hash)0x6671F3EEC681BDA1, ped, x, y, z, time, instantBlendToAim, playAnimIntro);
}

/// <summary>
/// Firing Pattern Hash Information: https://pastebin.com/Px036isB
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46A6CC01E0826106<br />
/// </para>
/// </remarks>
public static void TaskShootAtCoord(int /* Ped */ ped, float x, float y, float z, int duration, uint firingPattern)
{
Function.Call((Hash)0x46A6CC01E0826106, ped, x, y, z, duration, firingPattern);
}

/// <summary>
/// Makes the specified ped shuffle to the next vehicle seat.<br />The ped MUST be in a vehicle and the vehicle parameter MUST be the ped&apos;s current vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AA80209BDA643EB<br />
/// </para>
/// </remarks>
public static void TaskShuffleToNextVehicleSeat(int /* Ped */ ped, int /* Vehicle */ vehicle, bool useAlternateShuffle)
{
Function.Call((Hash)0x7AA80209BDA643EB, ped, vehicle, useAlternateShuffle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE1EF3C1216AFF2CD<br />
/// </para>
/// </remarks>
public static void ClearPedTasks(int /* Ped */ ped)
{
Function.Call((Hash)0xE1EF3C1216AFF2CD, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x176CECF6F920D707<br />
/// </para>
/// </remarks>
public static void ClearPedSecondaryTask(int /* Ped */ ped)
{
Function.Call((Hash)0x176CECF6F920D707, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F93691AB4B92272<br />
/// </para>
/// </remarks>
public static void TaskEveryoneLeaveVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x7F93691AB4B92272, vehicle);
}

/// <summary>
/// enum ESEEK_ENTITY_OFFSET_FLAGS<br />{<br />	ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,<br />	ESEEK_KEEP_TO_PAVEMENTS = 0x02<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE39B4FF4FDEBDE27<br />
/// </para>
/// </remarks>
public static void TaskGotoEntityOffset(int /* Ped */ ped, int /* Entity */ entity, int time, float seekRadius, float seekAngleDeg, float moveBlendRatio, int gotoEntityOffsetFlags)
{
Function.Call((Hash)0xE39B4FF4FDEBDE27, ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x338E7EF52B6095A9<br />
/// </para>
/// </remarks>
public static void TaskGotoEntityOffsetXy(int /* Ped */ ped, int /* Entity */ entity, int duration, float targetRadius, float offsetX, float offsetY, float moveBlendRatio, int gotoEntityOffsetFlags)
{
Function.Call((Hash)0x338E7EF52B6095A9, ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
}

/// <summary>
/// duration in milliseconds
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1DDA930A0AC38571<br />
/// </para>
/// </remarks>
public static void TaskTurnPedToFaceCoord(int /* Ped */ ped, float x, float y, float z, int duration)
{
Function.Call((Hash)0x1DDA930A0AC38571, ped, x, y, z, duration);
}

/// <summary>
/// &apos;1 - brake<br />&apos;3 - brake + reverse<br />&apos;4 - turn left 90 + braking<br />&apos;5 - turn right 90 + braking<br />&apos;6 - brake strong (handbrake?) until time ends<br />&apos;7 - turn left + accelerate<br />&apos;8 - turn right + accelerate<br />&apos;9 - weak acceleration<br />&apos;10 - turn left + restore wheel pos to center in the end<br />&apos;11 - turn right + restore wheel pos to center in the end<br />&apos;13 - turn left + go reverse<br />&apos;14 - turn left + go reverse<br />&apos;16 - crash the game after like 2 seconds :)<br />&apos;17 - keep actual state, game crashed after few tries<br />&apos;18 - game crash<br />&apos;19 - strong brake + turn left/right<br />&apos;20 - weak brake + turn left then turn right<br />&apos;21 - weak brake + turn right then turn left<br />&apos;22 - brake + reverse<br />&apos;23 - accelerate fast<br />&apos;24 - brake<br />&apos;25 - brake turning left then when almost stopping it turns left more<br />&apos;26 - brake turning right then when almost stopping it turns right more<br />&apos;27 - brake until car stop or until time ends<br />&apos;28 - brake + strong reverse acceleration<br />&apos;30 - performs a burnout (brake until stop + brake and accelerate)<br />&apos;31 - accelerate + handbrake<br />&apos;32 - accelerate very strong<br /><br />Seems to be this:<br />Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), &quot;time&quot; will work, otherwise the task will be performed forever until tasked with something else
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC429DCEEB339E129<br />
/// </para>
/// </remarks>
public static void TaskVehicleTempAction(int /* Ped */ driver, int /* Vehicle */ vehicle, int action, int time)
{
Function.Call((Hash)0xC429DCEEB339E129, driver, vehicle, action, time);
}

/// <summary>
/// missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x659427E0EF36BCDE<br />
/// </para>
/// </remarks>
public static void TaskVehicleMission(int /* Ped */ driver, int /* Vehicle */ vehicle, int /* Vehicle */ vehicleTarget, int missionType, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic)
{
Function.Call((Hash)0x659427E0EF36BCDE, driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
}

/// <summary>
/// See TASK_VEHICLE_MISSION
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9454528DF15D657A<br />
/// </para>
/// </remarks>
public static void TaskVehicleMissionPedTarget(int /* Ped */ ped, int /* Vehicle */ vehicle, int /* Ped */ pedTarget, int missionType, float maxSpeed, int drivingStyle, float minDistance, float straightLineDistance, bool DriveAgainstTraffic)
{
Function.Call((Hash)0x9454528DF15D657A, ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
}

/// <summary>
/// See TASK_VEHICLE_MISSION
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0AF20AA7731F8C3<br />
/// </para>
/// </remarks>
public static void TaskVehicleMissionCoorsTarget(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, int mission, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic)
{
Function.Call((Hash)0xF0AF20AA7731F8C3, ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
}

/// <summary>
/// Makes a ped follow the targetVehicle with &lt;minDistance&gt; in between.<br /><br />note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.<br /><br />Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.<br />-1 = behind<br />0 = ahead<br />1 = left<br />2 = right<br />3 = back left<br />4 = back right<br /><br />if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.<br /><br />Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FA6E4B75F302400<br />
/// </para>
/// </remarks>
public static void TaskVehicleEscort(int /* Ped */ ped, int /* Vehicle */ vehicle, int /* Vehicle */ targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int minHeightAboveTerrain, float noRoadsDistance)
{
Function.Call((Hash)0x0FA6E4B75F302400, ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
}

/// <summary>
/// Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)<br /><br />drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC545A9F0626E3B6<br />
/// </para>
/// </remarks>
public static void TaskVehicleFollow(int /* Ped */ driver, int /* Vehicle */ vehicle, int /* Entity */ targetEntity, float speed, int drivingStyle, int minDistance)
{
Function.Call((Hash)0xFC545A9F0626E3B6, driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
}

/// <summary>
/// chases targetEnt fast and aggressively<br />--<br />Makes ped (needs to be in vehicle) chase targetEnt.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C08A8E30363B353<br />
/// </para>
/// </remarks>
public static void TaskVehicleChase(int /* Ped */ driver, int /* Entity */ targetEnt)
{
Function.Call((Hash)0x3C08A8E30363B353, driver, targetEnt);
}

/// <summary>
/// pilot, vehicle and altitude are rather self-explanatory.<br /><br />p4: is unused variable in the function.<br /><br />entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.<br /><br />&apos;targetSpeed&apos;:  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you&apos;ll want to modulate it as opposed to calling it via a hard-wired, constant #.<br /><br />&apos;radius&apos; isn&apos;t just &quot;stop within radius of X of target&quot; like with ground vehicles.  In this case, the pilot will fly an entire circle around &apos;radius&apos; and continue to do so.<br /><br />NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.<br /><br />NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E09C32048FEFD1C<br />
/// </para>
/// </remarks>
public static void TaskVehicleHeliProtect(int /* Ped */ pilot, int /* Vehicle */ vehicle, int /* Entity */ entityToFollow, float targetSpeed, int drivingFlags, float radius, int altitude, int heliFlags)
{
Function.Call((Hash)0x1E09C32048FEFD1C, pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
}

/// <summary>
/// Flag 8: Medium-aggressive boxing tactic with a bit of PIT<br />Flag 1: Aggressive ramming of suspect<br />Flag 2: Ram attempts<br />Flag 32: Stay back from suspect, no tactical contact. Convoy-like.<br />Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCC665AAC360D31E7<br />
/// </para>
/// </remarks>
public static void SetTaskVehicleChaseBehaviorFlag(int /* Ped */ ped, int flag, bool set)
{
Function.Call((Hash)0xCC665AAC360D31E7, ped, flag, set);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x639B642FACBE4EDD<br />
/// </para>
/// </remarks>
public static void SetTaskVehicleChaseIdealPursuitDistance(int /* Ped */ ped, float distance)
{
Function.Call((Hash)0x639B642FACBE4EDD, ped, distance);
}

/// <summary>
/// Ped pilot should be in a heli.<br />EntityToFollow can be a vehicle or Ped.<br /><br />x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)<br /><br /><br />NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC83B1DB38D0ADA0<br />
/// </para>
/// </remarks>
public static void TaskHeliChase(int /* Ped */ pilot, int /* Entity */ entityToFollow, float x, float y, float z)
{
Function.Call((Hash)0xAC83B1DB38D0ADA0, pilot, entityToFollow, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D2386F273FF7A25<br />
/// </para>
/// </remarks>
public static void TaskPlaneChase(int /* Ped */ pilot, int /* Entity */ entityToFollow, float x, float y, float z)
{
Function.Call((Hash)0x2D2386F273FF7A25, pilot, entityToFollow, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF19721FA34D32C0<br />
/// </para>
/// </remarks>
public static void TaskPlaneLand(int /* Ped */ pilot, int /* Vehicle */ plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ)
{
Function.Call((Hash)0xBF19721FA34D32C0, pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x6100B3CEFD43452E<br />
/// </para>
/// </remarks>
public static void ClearDefaultPrimaryTask(int /* Ped */ ped)
{
Function.Call((Hash)0x6100B3CEFD43452E, ped);
}

/// <summary>
/// This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.<br />It is necessary to clear the ped&apos;s tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xDBBC7A2432524127<br />
/// </para>
/// </remarks>
public static void ClearPrimaryVehicleTask(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xDBBC7A2432524127, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x53DDC75BC3AC0A90<br />
/// </para>
/// </remarks>
public static void ClearVehicleCrashTask(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x53DDC75BC3AC0A90, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xF7F9DCCA89E7505B<br />
/// </para>
/// </remarks>
public static void TaskPlaneGotoPreciseVtol(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, int flightHeight, int minHeightAboveTerrain, bool useDesiredOrientation, float desiredOrientation, bool autopilot)
{
Function.Call((Hash)0xF7F9DCCA89E7505B, ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
}

/// <summary>
/// Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.<br /><br />p0 is always 0, p5 is always 1<br /><br />p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.<br /><br />Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xC22B40579A498CA4<br />
/// </para>
/// </remarks>
public static void TaskSubmarineGotoAndStop(int /* Ped */ ped, int /* Vehicle */ submarine, float x, float y, float z, bool autopilot)
{
Function.Call((Hash)0xC22B40579A498CA4, ped, submarine, x, y, z, autopilot);
}

/// <summary>
/// Must have targetVehicle, targetPed, OR destination X/Y/Z set<br />Will follow targeted vehicle/ped, or fly to destination<br />Set whichever is not being used to 0<br /><br /><br />Mission mode type:<br /> - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)<br /> - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.<br /> - 8: Makes the heli flee from the ped/vehicle/coordinate<br /> - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.<br /> - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target<br /> - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)<br /> - 20: Makes the heli land when near target ped. It won&apos;t resume chasing.<br /> - 21: Emulates a helicopter crash<br /> - 23: makes the heli circle erratically around ped<br /><br /><br />Heli will fly at maxSpeed (up to actual maximum speed defined by the model&apos;s handling config)<br />You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.<br /><br />If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT. <br /><br />Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from<br /><br />Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.<br /><br />Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:<br />   1: Forces heading to face E<br />   2: Unknown<br />   4: Tight circles around coordinate destination<br />   8: Unknown<br />  16: Circles around coordinate destination facing towards destination<br />  32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)<br />  64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.<br /> 128: Unknown<br /> 256: Unknown<br /> 512: Unknown<br />1024: Unknown <br />2048: Reverses direction of circling (mission type 9) to clockwise<br />4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route<br />8192: Unknown<br /><br />Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.<br /><br />Notes updated by PNWParksFan, May 2021<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDAD029E187A2BEB4<br />
/// </para>
/// </remarks>
public static void TaskHeliMission(int /* Ped */ pilot, int /* Vehicle */ aircraft, int /* Vehicle */ targetVehicle, int /* Ped */ targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float radius, float targetHeading, int maxHeight, int minHeight, float slowDownDistance, int behaviorFlags)
{
Function.Call((Hash)0xDAD029E187A2BEB4, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xB385523325077210<br />
/// </para>
/// </remarks>
public static void TaskHeliEscortHeli(int /* Ped */ pilot, int /* Vehicle */ heli1, int /* Vehicle */ heli2, float offsetX, float offsetY, float offsetZ)
{
Function.Call((Hash)0xB385523325077210, pilot, heli1, heli2, offsetX, offsetY, offsetZ);
}

/// <summary>
/// EXAMPLE USAGE:<br /><br />Fly around target (Precautiously, keeps high altitude):<br />Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);<br /><br />Fly around target (Dangerously, keeps VERY low altitude):<br />Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);<br /><br />Fly directly into target:<br />Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);<br /><br />EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)<br /><br />&apos;physicsSpeed&apos;: (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)<br />Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of &apos;physicsSpeed&apos;.  This also means that the plane must complete a circle before it can begin its &quot;bombing run&quot;, its straight line pass towards the target.  p9 appears to influence the angle at which a &quot;bombing run&quot; begins, although I can&apos;t confirm yet.<br /><br />VERY IMPORTANT: A &quot;bombing run&quot; will only occur if a plane can successfully determine a possible navigable route (the slower the value of &apos;physicsSpeed&apos;, the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)<br /><br />0 = Plane&apos;s physics are almost entirely frozen, plane appears to &quot;orbit&quot; around precise destination point<br />1-299 = Blend of &quot;frozen, small radius&quot; vs. normal vs. &quot;accelerated, hyperfast, large radius&quot;<br />300+ =  Vehicle behaves entirely like a normal gameplay plane.<br /><br />&apos;patrolBlend&apos; (The lower the value, the more the Destination is treated as a &quot;fly AT&quot; rather than a &quot;fly AROUND point&quot;.)<br /><br />Scenario: Destination is an Entity on ground level, wide open field<br />-5000 = Pilot kamikazes directly into Entity<br />-1000 = Pilot flies extremely low -around- Entity, very prone to crashing<br />-200 = Pilot flies lower than average around Entity.<br />0 = Pilot flies around Entity, normal altitude<br />200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn&apos;t seem to correlate directly into distance units.)<br /><br />-- Valid mission types found in the exe: --<br /><br />0 = None<br />1 = Unk<br />2 = CTaskVehicleRam<br />3 = CTaskVehicleBlock<br />4 = CTaskVehicleGoToPlane<br />5 = CTaskVehicleStop<br />6 = CTaskVehicleAttack<br />7 = CTaskVehicleFollow<br />8 = CTaskVehicleFleeAirborne<br />9= CTaskVehicleCircle<br />10 = CTaskVehicleEscort<br />15 = CTaskVehicleFollowRecording<br />16 = CTaskVehiclePoliceBehaviour<br />17 = CTaskVehicleCrash
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23703CD154E83B88<br />
/// </para>
/// </remarks>
public static void TaskPlaneMission(int /* Ped */ pilot, int /* Vehicle */ aircraft, int /* Vehicle */ targetVehicle, int /* Ped */ targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float targetReached, float targetHeading, float maxZ, float minZ, bool precise)
{
Function.Call((Hash)0x23703CD154E83B88, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x92C360B5F15D2302<br />
/// </para>
/// </remarks>
public static void TaskPlaneTaxi(int /* Ped */ pilot, int /* Vehicle */ aircraft, float x, float y, float z, float cruiseSpeed, float targetReached)
{
Function.Call((Hash)0x92C360B5F15D2302, pilot, aircraft, x, y, z, cruiseSpeed, targetReached);
}

/// <summary>
/// You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.<br /><br />Working example<br />float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));<br />TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);<br />PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);<br /><br />P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x15C86013127CE63F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TaskBoatMission(int /* Ped */ pedDriver, int /* Vehicle */ vehicle, int /* Vehicle */ targetVehicle, int /* Ped */ targetPed, float x, float y, float z, int mission, float maxSpeed, int drivingStyle, float targetReached, int /* bug: Any */ boatFlags)
{
Function.Call((Hash)0x15C86013127CE63F, pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
}

/// <summary>
/// Example:<br /><br />TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});<br /><br /><br /><br /><br />Needs working example. Doesn&apos;t seem to do anything.<br /><br />I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.<br />I marked p6 as distanceToShoot as if you think of GTA&apos;s Logic with the native SET_VEHICLE_SHOOT natives, it won&apos;t shoot till it gets within a certain distance of the target.<br />I marked p7 as pedAccuracy as it seems it&apos;s mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it&apos;s ammo count or not.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F8AF0E82773A171<br />
/// </para>
/// </remarks>
public static void TaskDriveBy(int /* Ped */ driverPed, int /* Ped */ targetPed, int /* Vehicle */ targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, bool pushUnderneathDrivingTaskIfDriving, uint firingPattern)
{
Function.Call((Hash)0x2F8AF0E82773A171, driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
}

/// <summary>
/// For p1 &amp; p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5B302114D8162EE<br />
/// </para>
/// </remarks>
public static void SetDrivebyTaskTarget(int /* Ped */ shootingPed, int /* Ped */ targetPed, int /* Vehicle */ targetVehicle, float x, float y, float z)
{
Function.Call((Hash)0xE5B302114D8162EE, shootingPed, targetPed, targetVehicle, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC35B5CDB2824CF69<br />
/// </para>
/// </remarks>
public static void ClearDrivebyTaskUnderneathDrivingTask(int /* Ped */ ped)
{
Function.Call((Hash)0xC35B5CDB2824CF69, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8785E6E40C7A8818<br />
/// </para>
/// </remarks>
public static bool IsDrivebyTaskUnderneathDrivingTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x8785E6E40C7A8818, ped);
}

/// <summary>
/// Forces the ped to use the mounted weapon.<br />Returns false if task is not possible.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCFE42068FE0135A<br />
/// </para>
/// </remarks>
public static bool ControlMountedWeapon(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xDCFE42068FE0135A, ped);
}

/// <summary>
/// Note: Look in decompiled scripts and the times that p1 and p2 aren&apos;t 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCCD892192C6D2BB9<br />
/// </para>
/// </remarks>
public static void SetMountedWeaponTarget(int /* Ped */ shootingPed, int /* Ped */ targetPed, int /* Vehicle */ targetVehicle, float x, float y, float z, int taskMode, bool ignoreTargetVehDeadCheck)
{
Function.Call((Hash)0xCCD892192C6D2BB9, shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA320EF046186FA3B<br />
/// </para>
/// </remarks>
public static bool IsMountedWeaponTaskUnderneathDrivingTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xA320EF046186FA3B, ped);
}

/// <summary>
/// Actually has 3 params, not 2.<br /><br />p0: Ped<br />p1: int (or bool?)<br />p2: int
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBD2A8EC3AF4DE7DB<br />
/// </para>
/// </remarks>
public static void TaskUseMobilePhone(int /* Ped */ ped, bool usePhone, int desiredPhoneMode)
{
Function.Call((Hash)0xBD2A8EC3AF4DE7DB, ped, usePhone, desiredPhoneMode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EE02954A14C69DB<br />
/// </para>
/// </remarks>
public static void TaskUseMobilePhoneTimed(int /* Ped */ ped, int duration)
{
Function.Call((Hash)0x5EE02954A14C69DB, ped, duration);
}

/// <summary>
/// p2 tend to be 16, 17 or 1<br />p3 to p7 tend to be 0.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C338E0263E4FD19<br />
/// </para>
/// </remarks>
public static void TaskChatToPed(int /* Ped */ ped, int /* Ped */ target, int flags, float goToLocationX, float goToLocationY, float goToLocationZ, float headingDegs, float idleTime)
{
Function.Call((Hash)0x8C338E0263E4FD19, ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
}

/// <summary>
/// Seat Numbers<br />-------------------------------<br />Driver = -1<br />Any = -2<br />Left-Rear = 1<br />Right-Front = 0<br />Right-Rear = 2<br />Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A7D091411C5F684<br />
/// </para>
/// </remarks>
public static void TaskWarpPedIntoVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, int seat)
{
Function.Call((Hash)0x9A7D091411C5F684, ped, vehicle, seat);
}

/// <summary>
/// //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds<br />Entity aimedentity;<br />Player player = PLAYER::PLAYER_ID();<br />PLAYER::_GET_AIMED_ENTITY(player, &amp;aimedentity);<br /><br />//bg is an array of peds<br />TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(&quot;FIRING_PATTERN_FULL_AUTO&quot;));<br /><br />in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.<br /><br />Firing Pattern Hash Information: https://pastebin.com/Px036isB
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x08DA95E8298AE772<br />
/// </para>
/// </remarks>
public static void TaskShootAtEntity(int /* Entity */ entity, int /* Entity */ target, int duration, uint firingPattern)
{
Function.Call((Hash)0x08DA95E8298AE772, entity, target, duration, firingPattern);
}

/// <summary>
/// Climbs or vaults the nearest thing.<br />usePlayerLaunchForce is unused.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89D9FCC2435112F1<br />
/// </para>
/// </remarks>
public static void TaskClimb(int /* Ped */ ped, bool usePlayerLaunchForce)
{
Function.Call((Hash)0x89D9FCC2435112F1, ped, usePlayerLaunchForce);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB6C987F9285A3814<br />
/// </para>
/// </remarks>
public static void TaskClimbLadder(int /* Ped */ ped, bool fast)
{
Function.Call((Hash)0xB6C987F9285A3814, ped, fast);
}

/// <summary>
/// Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.<br />p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xEAF66ACDDC794793<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TaskRappelDownWallUsingClipsetOverride(int /* Ped */ ped, float x1, float y1, float z1, float x2, float y2, float z2, float minZ, int ropeHandle, string clipSet, int /* bug: Any */ p10)
{
Function.Call((Hash)0xEAF66ACDDC794793, ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x9D252648778160DF<br />
/// </para>
/// </remarks>
public static int GetTaskRappelDownWallState(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x9D252648778160DF, ped);
}

/// <summary>
/// Immediately stops the pedestrian from whatever it&apos;s doing. They stop fighting, animations, etc. they forget what they were doing.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAAA34F8A7CB32098<br />
/// </para>
/// </remarks>
public static void ClearPedTasksImmediately(int /* Ped */ ped)
{
Function.Call((Hash)0xAAA34F8A7CB32098, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89221B16730234F0<br />
/// </para>
/// </remarks>
public static void TaskPerformSequenceFromProgress(int /* Ped */ ped, int taskIndex, int progress1, int progress2)
{
Function.Call((Hash)0x89221B16730234F0, ped, taskIndex, progress1, progress2);
}

/// <summary>
/// This native does absolutely nothing, just a nullsub<br /><br />R* Comment:<br />SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1B9F16E89E2C93A<br />
/// </para>
/// </remarks>
public static void SetNextDesiredMoveState(float nextMoveState)
{
Function.Call((Hash)0xF1B9F16E89E2C93A, nextMoveState);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E982AC8716912C5<br />
/// </para>
/// </remarks>
public static void SetPedDesiredMoveBlendRatio(int /* Ped */ ped, float newMoveBlendRatio)
{
Function.Call((Hash)0x1E982AC8716912C5, ped, newMoveBlendRatio);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8517D4A6CA8513ED<br />
/// </para>
/// </remarks>
public static float GetPedDesiredMoveBlendRatio(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x8517D4A6CA8513ED, ped);
}

/// <summary>
/// eg<br /><br /> TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);<br /><br />ped = Ped you want to perform this task.<br />target = the Entity they should aim at.<br />distanceToStopAt = distance from the target, where the ped should stop to aim.<br />StartAimingDist = distance where the ped should start to aim.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA9DA48FAB8A76C12<br />
/// </para>
/// </remarks>
public static void TaskGotoEntityAiming(int /* Ped */ ped, int /* Entity */ target, float distanceToStopAt, float StartAimingDist)
{
Function.Call((Hash)0xA9DA48FAB8A76C12, ped, target, distanceToStopAt, StartAimingDist);
}

/// <summary>
/// p1 is always GET_HASH_KEY(&quot;empty&quot;) in scripts, for the rare times this is used
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB8517DDA73720DA<br />
/// </para>
/// </remarks>
public static void TaskSetDecisionMaker(int /* Ped */ ped, uint decisionMakerId)
{
Function.Call((Hash)0xEB8517DDA73720DA, ped, decisionMakerId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x933C06518B52A9A4<br />
/// </para>
/// </remarks>
public static void TaskSetSphereDefensiveArea(int /* Ped */ ped, float x, float y, float z, float radius)
{
Function.Call((Hash)0x933C06518B52A9A4, ped, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95A6C46A31D1917D<br />
/// </para>
/// </remarks>
public static void TaskClearDefensiveArea(int /* Ped */ ped)
{
Function.Call((Hash)0x95A6C46A31D1917D, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD04FE6765D990A06<br />
/// </para>
/// </remarks>
public static void TaskPedSlideToCoord(int /* Ped */ ped, float x, float y, float z, float heading, float speed)
{
Function.Call((Hash)0xD04FE6765D990A06, ped, x, y, z, heading, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A4A6A6D3DC64F52<br />
/// </para>
/// </remarks>
public static void TaskPedSlideToCoordHdgRate(int /* Ped */ ped, float x, float y, float z, float heading, float speed, float headingChangeRate)
{
Function.Call((Hash)0x5A4A6A6D3DC64F52, ped, x, y, z, heading, speed, headingChangeRate);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5C12A75C7B9497F<br />
/// </para>
/// </remarks>
public static int AddCoverPoint(float x, float y, float z, float direction, int usage, int height, int arc, bool isPriority)
{
return Function.Call<int>((Hash)0xD5C12A75C7B9497F, x, y, z, direction, usage, height, arc, isPriority);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE287C923D891715<br />
/// </para>
/// </remarks>
public static void RemoveCoverPoint(int /* ScrHandle */ coverpoint)
{
Function.Call((Hash)0xAE287C923D891715, coverpoint);
}

/// <summary>
/// Checks if there is a cover point at position
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA98B8E3C088E5A31<br />
/// </para>
/// </remarks>
public static bool DoesScriptedCoverPointExistAtCoords(float x, float y, float z)
{
return Function.Call<bool>((Hash)0xA98B8E3C088E5A31, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x594A1028FC2A3E85<br />
/// </para>
/// </remarks>
public static Vector3 GetScriptedCoverPointCoords(int /* ScrHandle */ coverpoint)
{
return Function.Call<Vector3>((Hash)0x594A1028FC2A3E85, coverpoint);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x28B7B9BFDAF274AA<br />
/// </para>
/// </remarks>
public static void AddScriptedCoverArea(float x, float y, float z, float radius)
{
Function.Call((Hash)0x28B7B9BFDAF274AA, x, y, z, radius);
}

/// <summary>
/// Makes the specified ped attack the target ped.<br />p2 should be 0<br />p3 should be 16
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF166E48407BAC484<br />
/// </para>
/// </remarks>
public static void TaskCombatPed(int /* Ped */ ped, int /* Ped */ targetPed, int combatFlags, int threatResponseFlags)
{
Function.Call((Hash)0xF166E48407BAC484, ped, targetPed, combatFlags, threatResponseFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x944F30DCB7096BDE<br />
/// </para>
/// </remarks>
public static void TaskCombatPedTimed(int /* Ped */ ped, int /* Ped */ target, int time, int flags)
{
Function.Call((Hash)0x944F30DCB7096BDE, ped, target, time, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75AC2B60386D89F2<br />
/// </para>
/// </remarks>
public static void TaskSeekCoverFromPos(int /* Ped */ ped, float x, float y, float z, int duration, bool allowPeekingAndFiring)
{
Function.Call((Hash)0x75AC2B60386D89F2, ped, x, y, z, duration, allowPeekingAndFiring);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84D32B3BEC531324<br />
/// </para>
/// </remarks>
public static void TaskSeekCoverFromPed(int /* Ped */ ped, int /* Ped */ target, int duration, bool allowPeekingAndFiring)
{
Function.Call((Hash)0x84D32B3BEC531324, ped, target, duration, allowPeekingAndFiring);
}

/// <summary>
/// p5 is always -1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD43D95C7A869447F<br />
/// </para>
/// </remarks>
public static void TaskSeekCoverToCoverPoint(int /* Ped */ ped, int /* ScrHandle */ coverpoint, float x, float y, float z, int time, bool allowPeekingAndFiring)
{
Function.Call((Hash)0xD43D95C7A869447F, ped, coverpoint, x, y, z, time, allowPeekingAndFiring);
}

/// <summary>
/// p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.<br /><br />from michael2:<br />TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);<br /><br /><br />appears to be shorter variation<br />from michael3:<br />TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39246A6958EF072C<br />
/// </para>
/// </remarks>
public static void TaskSeekCoverToCoords(int /* Ped */ ped, float x1, float y1, float z1, float x2, float y2, float z2, int timeout, bool shortRoute)
{
Function.Call((Hash)0x39246A6958EF072C, ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4172393E6BE1FECE<br />
/// </para>
/// </remarks>
public static void TaskPutPedDirectlyIntoCover(int /* Ped */ ped, float x, float y, float z, int time, bool allowPeekingAndFiring, float blendInDuration, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier, bool doEntry)
{
Function.Call((Hash)0x4172393E6BE1FECE, ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x6E01E9E8D89F8276<br />
/// </para>
/// </remarks>
public static void TaskWarpPedDirectlyIntoCover(int /* Ped */ ped, int time, bool allowPeekingAndFiring, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier)
{
Function.Call((Hash)0x6E01E9E8D89F8276, ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
}

/// <summary>
/// p1 is 1, 2, or 3 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79B258E397854D29<br />
/// </para>
/// </remarks>
public static void TaskExitCover(int /* Ped */ ped, int exitType, float x, float y, float z)
{
Function.Call((Hash)0x79B258E397854D29, ped, exitType, x, y, z);
}

/// <summary>
/// from armenian3.c4<br /><br />TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C6CD14A876FFE39<br />
/// </para>
/// </remarks>
public static void TaskPutPedDirectlyIntoMelee(int /* Ped */ ped, int /* Ped */ meleeTarget, float blendInDuration, float timeInMelee, float strafePhaseSync, int aiCombatFlags)
{
Function.Call((Hash)0x1C6CD14A876FFE39, ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
}

/// <summary>
/// used in sequence task<br /><br />both parameters seems to be always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC96609B9995EDF8<br />
/// </para>
/// </remarks>
public static void TaskToggleDuck(int /* Ped */ ped, int toggleType)
{
Function.Call((Hash)0xAC96609B9995EDF8, ped, toggleType);
}

/// <summary>
/// From re_prisonvanbreak:<br /><br />TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4A58A47A72E3FCB4<br />
/// </para>
/// </remarks>
public static void TaskGuardCurrentPosition(int /* Ped */ ped, float maxPatrolProximity, float defensiveAreaRadius, bool setDefensiveArea)
{
Function.Call((Hash)0x4A58A47A72E3FCB4, ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2A207EEBDF9889B<br />
/// </para>
/// </remarks>
public static void TaskGuardAssignedDefensiveArea(int /* Ped */ ped, float x, float y, float z, float heading, float maxPatrolProximity, int timer)
{
Function.Call((Hash)0xD2A207EEBDF9889B, ped, x, y, z, heading, maxPatrolProximity, timer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC946FE14BE0EB5E2<br />
/// </para>
/// </remarks>
public static void TaskGuardSphereDefensiveArea(int /* Ped */ ped, float defendPositionX, float defendPositionY, float defendPositionZ, float heading, float maxPatrolProximity, int time, float x, float y, float z, float defensiveAreaRadius)
{
Function.Call((Hash)0xC946FE14BE0EB5E2, ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius);
}

/// <summary>
/// scenarioName example: &quot;WORLD_HUMAN_GUARD_STAND&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE032F8BBA959E90<br />
/// </para>
/// </remarks>
public static void TaskStandGuard(int /* Ped */ ped, float x, float y, float z, float heading, string scenarioName)
{
Function.Call((Hash)0xAE032F8BBA959E90, ped, x, y, z, heading, scenarioName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C9B84BD7D31D908<br />
/// </para>
/// </remarks>
public static void SetDriveTaskCruiseSpeed(int /* Ped */ driver, float cruiseSpeed)
{
Function.Call((Hash)0x5C9B84BD7D31D908, driver, cruiseSpeed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x404A5AA9B9F0B746<br />
/// </para>
/// </remarks>
public static void SetDriveTaskMaxCruiseSpeed(int /* Ped */ ped, float speed)
{
Function.Call((Hash)0x404A5AA9B9F0B746, ped, speed);
}

/// <summary>
/// This native is used to set the driving style for specific ped.<br /><br />Driving styles id seems to be:<br />786468<br />262144<br />786469<br /><br />http://gtaforums.com/topic/822314-guide-driving-styles/
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDACE1BE37D88AF67<br />
/// </para>
/// </remarks>
public static void SetDriveTaskDrivingStyle(int /* Ped */ ped, int drivingStyle)
{
Function.Call((Hash)0xDACE1BE37D88AF67, ped, drivingStyle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45C597097DD7CB81<br />
/// </para>
/// </remarks>
public static void AddCoverBlockingArea(float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer)
{
Function.Call((Hash)0x45C597097DD7CB81, startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDB6708C0B46F56D8<br />
/// </para>
/// </remarks>
public static void RemoveAllCoverBlockingAreas()
{
Function.Call((Hash)0xDB6708C0B46F56D8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xFA83CA6776038F64<br />
/// </para>
/// </remarks>
public static void RemoveCoverBlockingAreasAtPosition(float x, float y, float z)
{
Function.Call((Hash)0xFA83CA6776038F64, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x1F351CF1C6475734<br />
/// </para>
/// </remarks>
public static void RemoveSpecificCoverBlockingAreas(float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer)
{
Function.Call((Hash)0x1F351CF1C6475734, startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
}

/// <summary>
/// Plays a scenario on a Ped at their current location.<br /><br />unkDelay - Usually 0 or -1, doesn&apos;t seem to have any effect. Might be a delay between sequences.<br />playEnterAnim - Plays the &quot;Enter&quot; anim if true, otherwise plays the &quot;Exit&quot; anim. Scenarios that don&apos;t have any &quot;Enter&quot; anims won&apos;t play if this is set to true.<br /><br />----<br /><br />From &quot;am_hold_up.ysc.c4&quot; at line 339:<br /><br />TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);<br /><br />I&apos;m unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:<br />WORLD_HUMAN_SMOKING<br />WORLD_HUMAN_HANG_OUT_STREET<br />WORLD_HUMAN_STAND_MOBILE<br /><br />This makes sense, as these are what I commonly see when going by a liquor store.<br />-------------------------<br />List of scenarioNames: https://pastebin.com/6mrYTdQv<br />(^ Thank you so fucking much for this)<br /><br />Also these:<br />WORLD_FISH_FLEE<br />DRIVE<br />WORLD_HUMAN_HIKER<br />WORLD_VEHICLE_ATTRACTOR<br />WORLD_VEHICLE_BICYCLE_MOUNTAIN<br />WORLD_VEHICLE_BIKE_OFF_ROAD_RACE<br />WORLD_VEHICLE_BIKER<br />WORLD_VEHICLE_CONSTRUCTION_PASSENGERS<br />WORLD_VEHICLE_CONSTRUCTION_SOLO<br />WORLD_VEHICLE_DRIVE_PASSENGERS<br />WORLD_VEHICLE_DRIVE_SOLO<br />WORLD_VEHICLE_EMPTY<br />WORLD_VEHICLE_PARK_PARALLEL<br />WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN<br />WORLD_VEHICLE_POLICE_BIKE<br />WORLD_VEHICLE_POLICE_CAR<br />WORLD_VEHICLE_POLICE_NEXT_TO_CAR<br />WORLD_VEHICLE_SALTON_DIRT_BIKE<br />WORLD_VEHICLE_TRUCK_LOGS<br /><br />Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x142A02425FF02BD9<br />
/// </para>
/// </remarks>
public static void TaskStartScenarioInPlace(int /* Ped */ ped, string scenarioName, int unkDelay, bool playEnterAnim)
{
Function.Call((Hash)0x142A02425FF02BD9, ped, scenarioName, unkDelay, playEnterAnim);
}

/// <summary>
/// Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json<br /><br />Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.<br />---------------<br />The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario. <br /><br />The next 4 parameters were harder to decipher. After viewing &quot;hairdo_shop_mp.ysc.c4&quot;, and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.<br /><br />I haven&apos;t seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can&apos;t confirm anything.<br /><br />I have no idea what the last 3 parameters are, but I&apos;ll try to find out.<br /><br />-going on the last 3 parameters, they appear to always be &quot;0, 0, 1&quot;<br /><br />p6 -1 also used in scrips<br /><br />p7 used for sitting scenarios<br /><br />p8 teleports ped to position
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFA4EFC79F69D4F07<br />
/// </para>
/// </remarks>
public static void TaskStartScenarioAtPosition(int /* Ped */ ped, string scenarioName, float x, float y, float z, float heading, int duration, bool sittingScenario, bool teleport)
{
Function.Call((Hash)0xFA4EFC79F69D4F07, ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport);
}

/// <summary>
/// Updated variables<br /><br />An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x277F471BA9DB000B<br />
/// </para>
/// </remarks>
public static void TaskUseNearestScenarioToCoord(int /* Ped */ ped, float x, float y, float z, float distance, int duration)
{
Function.Call((Hash)0x277F471BA9DB000B, ped, x, y, z, distance, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x58E2E0F23F6B76C3<br />
/// </para>
/// </remarks>
public static void TaskUseNearestScenarioToCoordWarp(int /* Ped */ ped, float x, float y, float z, float radius, int timeToLeave)
{
Function.Call((Hash)0x58E2E0F23F6B76C3, ped, x, y, z, radius, timeToLeave);
}

/// <summary>
/// p5 is always 0 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9FDA1B3D7E7028B3<br />
/// </para>
/// </remarks>
public static void TaskUseNearestScenarioChainToCoord(int /* Ped */ ped, float x, float y, float z, float maxRange, int timeToLeave)
{
Function.Call((Hash)0x9FDA1B3D7E7028B3, ped, x, y, z, maxRange, timeToLeave);
}

/// <summary>
/// p5 is always -1 or 0 in scripts
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97A28E63F0BA5631<br />
/// </para>
/// </remarks>
public static void TaskUseNearestScenarioChainToCoordWarp(int /* Ped */ ped, float x, float y, float z, float radius, int timeToLeave)
{
Function.Call((Hash)0x97A28E63F0BA5631, ped, x, y, z, radius, timeToLeave);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A59271FFADD33C1<br />
/// </para>
/// </remarks>
public static bool DoesScenarioExistInArea(float x, float y, float z, float radius, bool mustBeFree)
{
return Function.Call<bool>((Hash)0x5A59271FFADD33C1, x, y, z, radius, mustBeFree);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A9D0C2A3BBC86C1<br />
/// </para>
/// </remarks>
public static bool DoesScenarioOfTypeExistInArea(float x, float y, float z, string scenarioName, float radius, bool mustBeFree)
{
return Function.Call<bool>((Hash)0x0A9D0C2A3BBC86C1, x, y, z, scenarioName, radius, mustBeFree);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x788756D73AC2E07C<br />
/// </para>
/// </remarks>
public static bool IsScenarioOccupied(float x, float y, float z, float maxRange, bool onlyUsersActuallyAtScenario)
{
return Function.Call<bool>((Hash)0x788756D73AC2E07C, x, y, z, maxRange, onlyUsersActuallyAtScenario);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x295E3CCEC879CCD7<br />
/// </para>
/// </remarks>
public static bool PedHasUseScenarioTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x295E3CCEC879CCD7, ped);
}

/// <summary>
/// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x748040460F8DF5DC<br />
/// </para>
/// </remarks>
public static void PlayAnimOnRunningScenario(int /* Ped */ ped, string animDict, string animName)
{
Function.Call((Hash)0x748040460F8DF5DC, ped, animDict, animName);
}

/// <summary>
/// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json<br />Occurrences in the b617d scripts:<br /><br />&quot;ARMY_GUARD&quot;,<br />&quot;ARMY_HELI&quot;,<br />&quot;Cinema_Downtown&quot;,<br />&quot;Cinema_Morningwood&quot;,<br />&quot;Cinema_Textile&quot;,<br />&quot;City_Banks&quot;,<br />&quot;Countryside_Banks&quot;,<br />&quot;DEALERSHIP&quot;,<br />&quot;GRAPESEED_PLANES&quot;,<br />&quot;KORTZ_SECURITY&quot;,<br />&quot;LOST_BIKERS&quot;,<br />&quot;LSA_Planes&quot;,<br />&quot;LSA_Planes&quot;,<br />&quot;MP_POLICE&quot;,<br />&quot;Observatory_Bikers&quot;, <br />&quot;POLICE_POUND1&quot;,<br />&quot;POLICE_POUND2&quot;,<br />&quot;POLICE_POUND3&quot;,<br />&quot;POLICE_POUND4&quot;,<br />&quot;POLICE_POUND5&quot;<br />&quot;QUARRY&quot;,<br />&quot;SANDY_PLANES&quot;,<br />&quot;SCRAP_SECURITY&quot;,<br />&quot;SEW_MACHINE&quot;,<br />&quot;SOLOMON_GATE&quot;,<br />&quot;Triathlon_1_Start&quot;, <br />&quot;Triathlon_2_Start&quot;, <br />&quot;Triathlon_3_Start&quot;<br /><br />Sometimes used with IS_SCENARIO_GROUP_ENABLED:<br />if (TASK::DOES_SCENARIO_GROUP_EXIST(&quot;Observatory_Bikers&quot;) &amp;&amp; (!TASK::IS_SCENARIO_GROUP_ENABLED(&quot;Observatory_Bikers&quot;))) {<br />else if (TASK::IS_SCENARIO_GROUP_ENABLED(&quot;BLIMP&quot;)) {<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF9034C136C9E00D3<br />
/// </para>
/// </remarks>
public static bool DoesScenarioGroupExist(string scenarioGroup)
{
return Function.Call<bool>((Hash)0xF9034C136C9E00D3, scenarioGroup);
}

/// <summary>
/// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json<br />Occurrences in the b617d scripts: <br /><br /> &quot;ARMY_GUARD&quot;,<br /> &quot;ARMY_HELI&quot;,<br /> &quot;BLIMP&quot;,<br /> &quot;Cinema_Downtown&quot;,<br /> &quot;Cinema_Morningwood&quot;,<br /> &quot;Cinema_Textile&quot;,<br /> &quot;City_Banks&quot;,<br /> &quot;Countryside_Banks&quot;,<br /> &quot;DEALERSHIP&quot;,<br /> &quot;KORTZ_SECURITY&quot;,<br /> &quot;LSA_Planes&quot;,<br /> &quot;MP_POLICE&quot;,<br /> &quot;Observatory_Bikers&quot;,<br /> &quot;POLICE_POUND1&quot;,<br /> &quot;POLICE_POUND2&quot;,<br /> &quot;POLICE_POUND3&quot;,<br /> &quot;POLICE_POUND4&quot;,<br /> &quot;POLICE_POUND5&quot;,<br /> &quot;Rampage1&quot;,<br /> &quot;SANDY_PLANES&quot;,<br /> &quot;SCRAP_SECURITY&quot;,<br /> &quot;SEW_MACHINE&quot;,<br /> &quot;SOLOMON_GATE&quot;<br /><br />Sometimes used with DOES_SCENARIO_GROUP_EXIST:<br />if (TASK::DOES_SCENARIO_GROUP_EXIST(&quot;Observatory_Bikers&quot;) &amp;&amp;   (!TASK::IS_SCENARIO_GROUP_ENABLED(&quot;Observatory_Bikers&quot;))) {<br />else if (TASK::IS_SCENARIO_GROUP_ENABLED(&quot;BLIMP&quot;)) {
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x367A09DED4E05B99<br />
/// </para>
/// </remarks>
public static bool IsScenarioGroupEnabled(string scenarioGroup)
{
return Function.Call<bool>((Hash)0x367A09DED4E05B99, scenarioGroup);
}

/// <summary>
/// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json<br />Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02C8E5B49848664E<br />
/// </para>
/// </remarks>
public static void SetScenarioGroupEnabled(string scenarioGroup, bool enabled)
{
Function.Call((Hash)0x02C8E5B49848664E, scenarioGroup, enabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDD902D0349AFAD3A<br />
/// </para>
/// </remarks>
public static void ResetScenarioGroupsEnabled()
{
Function.Call((Hash)0xDD902D0349AFAD3A);
}

/// <summary>
/// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json<br />Groups found in the scripts used with this native:<br /><br />&quot;AMMUNATION&quot;,<br />&quot;QUARRY&quot;,<br />&quot;Triathlon_1&quot;,<br />&quot;Triathlon_2&quot;,<br />&quot;Triathlon_3&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x535E97E1F7FC0C6A<br />
/// </para>
/// </remarks>
public static void SetExclusiveScenarioGroup(string scenarioGroup)
{
Function.Call((Hash)0x535E97E1F7FC0C6A, scenarioGroup);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4202BBCB8684563D<br />
/// </para>
/// </remarks>
public static void ResetExclusiveScenarioGroup()
{
Function.Call((Hash)0x4202BBCB8684563D);
}

/// <summary>
/// Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json<br />Occurrences in the b617d scripts:<br />&quot;PROP_HUMAN_SEAT_CHAIR&quot;,<br />&quot;WORLD_HUMAN_DRINKING&quot;,<br />&quot;WORLD_HUMAN_HANG_OUT_STREET&quot;,<br />&quot;WORLD_HUMAN_SMOKING&quot;,<br />&quot;WORLD_MOUNTAIN_LION_WANDER&quot;,<br />&quot;WORLD_HUMAN_DRINKING&quot;<br /><br />Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.<br /><br />scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A815DB3EA088722<br />
/// </para>
/// </remarks>
public static bool IsScenarioTypeEnabled(string scenarioType)
{
return Function.Call<bool>((Hash)0x3A815DB3EA088722, scenarioType);
}

/// <summary>
/// Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json<br />seems to enable/disable specific scenario-types from happening in the game world.<br /><br />Here are some scenario types from the scripts:<br />&quot;WORLD_MOUNTAIN_LION_REST&quot;                                             <br />&quot;WORLD_MOUNTAIN_LION_WANDER&quot;                                            <br />&quot;DRIVE&quot;                                                                  <br />&quot;WORLD_VEHICLE_POLICE_BIKE&quot;                                             <br />&quot;WORLD_VEHICLE_POLICE_CAR&quot;                                             <br />&quot;WORLD_VEHICLE_POLICE_NEXT_TO_CAR&quot;                                        <br />&quot;WORLD_VEHICLE_DRIVE_SOLO&quot;                                                 <br />&quot;WORLD_VEHICLE_BIKER&quot;                                                      <br />&quot;WORLD_VEHICLE_DRIVE_PASSENGERS&quot;                                           <br />&quot;WORLD_VEHICLE_SALTON_DIRT_BIKE&quot;                                           <br />&quot;WORLD_VEHICLE_BICYCLE_MOUNTAIN&quot;                                           <br />&quot;PROP_HUMAN_SEAT_CHAIR&quot;                                             <br />&quot;WORLD_VEHICLE_ATTRACTOR&quot;                                             <br />&quot;WORLD_HUMAN_LEANING&quot;                                                 <br />&quot;WORLD_HUMAN_HANG_OUT_STREET&quot;                                        <br />&quot;WORLD_HUMAN_DRINKING&quot;                                                <br />&quot;WORLD_HUMAN_SMOKING&quot;                                                <br />&quot;WORLD_HUMAN_GUARD_STAND&quot;                                            <br />&quot;WORLD_HUMAN_CLIPBOARD&quot;                                              <br />&quot;WORLD_HUMAN_HIKER&quot;                                                  <br />&quot;WORLD_VEHICLE_EMPTY&quot;                                                      <br />&quot;WORLD_VEHICLE_BIKE_OFF_ROAD_RACE&quot;                                      <br />&quot;WORLD_HUMAN_PAPARAZZI&quot;                                               <br />&quot;WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN&quot;                            <br />&quot;WORLD_VEHICLE_PARK_PARALLEL&quot;                                              <br />&quot;WORLD_VEHICLE_CONSTRUCTION_SOLO&quot;                               <br />&quot;WORLD_VEHICLE_CONSTRUCTION_PASSENGERS&quot;                                                                    <br />&quot;WORLD_VEHICLE_TRUCK_LOGS&quot;<br /><br />scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB47EC4E34FB7EE1<br />
/// </para>
/// </remarks>
public static void SetScenarioTypeEnabled(string scenarioType, bool toggle)
{
Function.Call((Hash)0xEB47EC4E34FB7EE1, scenarioType, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D40EE2A7F2B2D6D<br />
/// </para>
/// </remarks>
public static void ResetScenarioTypesEnabled()
{
Function.Call((Hash)0x0D40EE2A7F2B2D6D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA135F9482C82CC3<br />
/// </para>
/// </remarks>
public static bool IsPedActiveInScenario(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xAA135F9482C82CC3, ped);
}

/// <summary>
/// Used only once (am_mp_property_int)<br /><br />ped was PLAYER_PED_ID()<br /><br />Related to CTaskAmbientClips.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x621C6E4729388E41<br />
/// </para>
/// </remarks>
public static bool IsPedPlayingBaseClipInScenario(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x621C6E4729388E41, ped);
}

/// <summary>
/// Appears only in fm_mission_controller and used only 3 times.<br /><br />ped was always PLAYER_PED_ID()<br />p1 was always true<br />p2 was always true
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8FD89A6240813FD0<br />
/// </para>
/// </remarks>
public static void SetPedCanPlayAmbientIdles(int /* Ped */ ped, bool blockIdleClips, bool removeIdleClipIfPlaying)
{
Function.Call((Hash)0x8FD89A6240813FD0, ped, blockIdleClips, removeIdleClipIfPlaying);
}

/// <summary>
/// Despite its name, it only attacks ONE hated target. The one closest to the specified position.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4CF5F55DAC3280A0<br />
/// </para>
/// </remarks>
public static void TaskCombatHatedTargetsInArea(int /* Ped */ ped, float x, float y, float z, float radius, int combatFlags)
{
Function.Call((Hash)0x4CF5F55DAC3280A0, ped, x, y, z, radius, combatFlags);
}

/// <summary>
/// Despite its name, it only attacks ONE hated target. The one closest hated target.<br /><br />p2 seems to be always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7BF835BB9E2698C8<br />
/// </para>
/// </remarks>
public static void TaskCombatHatedTargetsAroundPed(int /* Ped */ ped, float radius, int combatFlags)
{
Function.Call((Hash)0x7BF835BB9E2698C8, ped, radius, combatFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BBA30B854534A0C<br />
/// </para>
/// </remarks>
public static void TaskCombatHatedTargetsAroundPedTimed(int /* Ped */ ped, float radius, int time, int combatFlags)
{
Function.Call((Hash)0x2BBA30B854534A0C, ped, radius, time, combatFlags);
}

/// <summary>
/// In every case of this native, I&apos;ve only seen the first parameter passed as 0, although I believe it&apos;s a Ped after seeing tasks around it using 0. That&apos;s because it&apos;s used in a Sequence Task.<br /><br />The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player&apos;s coordinates.<br />---<br />It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).<br />It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.<br />----------------------------------------------------<br />The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 &lt;14&gt;] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 &lt;14&gt;] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7285951DBF6B5A51<br />
/// </para>
/// </remarks>
public static void TaskThrowProjectile(int /* Ped */ ped, float x, float y, float z, int ignoreCollisionEntityIndex, bool createInvincibleProjectile)
{
Function.Call((Hash)0x7285951DBF6B5A51, ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA21C51255B205245<br />
/// </para>
/// </remarks>
public static void TaskSwapWeapon(int /* Ped */ ped, bool drawWeapon)
{
Function.Call((Hash)0xA21C51255B205245, ped, drawWeapon);
}

/// <summary>
/// The 2nd param (drawWeapon) is not implemented.<br /><br />-----------------------------------------------------------------------<br /><br />The only occurrence I found in a R* script (&quot;assassin_construction.ysc.c4&quot;):<br /><br />            if (((v_3 &lt; v_4) &amp;&amp; (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) &amp;&amp; (v_5 &gt; v_3)) {<br />                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);<br />            }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62D2916F56B9CD2D<br />
/// </para>
/// </remarks>
public static void TaskReloadWeapon(int /* Ped */ ped, bool drawWeapon)
{
Function.Call((Hash)0x62D2916F56B9CD2D, ped, drawWeapon);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A74E1D5F2F00EEC<br />
/// </para>
/// </remarks>
public static bool IsPedGettingUp(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x2A74E1D5F2F00EEC, ped);
}

/// <summary>
/// EX: Function.Call(Ped1, Ped2, Time, 0);<br /><br />The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.<br /><br /><br /><br />Third parameter does not appear to be time. The last parameter is not implemented (It&apos;s not used, regardless of value).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCDDC2B77CE54AC6E<br />
/// </para>
/// </remarks>
public static void TaskWrithe(int /* Ped */ ped, int /* Ped */ target, int minFireLoops, int startState, bool forceShootOnGround, int shootFromGroundTimer)
{
Function.Call((Hash)0xCDDC2B77CE54AC6E, ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
}

/// <summary>
/// This native checks if a ped is on the ground, in pain from a (gunshot) wound.<br />Returns `true` if the ped is in writhe, `false` otherwise.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEB6D52126E7D640<br />
/// </para>
/// </remarks>
public static bool IsPedInWrithe(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xDEB6D52126E7D640, ped);
}

/// <summary>
///  patrolRoutes found in the b617d scripts:<br /> &quot;miss_Ass0&quot;,<br /> &quot;miss_Ass1&quot;,<br /> &quot;miss_Ass2&quot;,<br /> &quot;miss_Ass3&quot;,<br /> &quot;miss_Ass4&quot;,<br /> &quot;miss_Ass5&quot;,<br /> &quot;miss_Ass6&quot;,<br /> &quot;MISS_PATROL_6&quot;,<br /> &quot;MISS_PATROL_7&quot;,<br /> &quot;MISS_PATROL_8&quot;,<br /> &quot;MISS_PATROL_9&quot;,<br /> &quot;miss_Tower_01&quot;,<br /> &quot;miss_Tower_02&quot;,<br /> &quot;miss_Tower_03&quot;,<br /> &quot;miss_Tower_04&quot;,<br /> &quot;miss_Tower_05&quot;,<br /> &quot;miss_Tower_06&quot;,<br /> &quot;miss_Tower_07&quot;,<br /> &quot;miss_Tower_08&quot;,<br /> &quot;miss_Tower_10&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA36BFB5EE89F3D82<br />
/// </para>
/// </remarks>
public static void OpenPatrolRoute(string patrolRoute)
{
Function.Call((Hash)0xA36BFB5EE89F3D82, patrolRoute);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB043ECA801B8CBC1<br />
/// </para>
/// </remarks>
public static void ClosePatrolRoute()
{
Function.Call((Hash)0xB043ECA801B8CBC1);
}

/// <summary>
/// Example: <br />TASK::ADD_PATROL_ROUTE_NODE(2, &quot;WORLD_HUMAN_GUARD_STAND&quot;, -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);<br /><br />p0 is between 0 and 4 in the scripts.<br /><br />p1 is &quot;WORLD_HUMAN_GUARD_STAND&quot; or &quot;StandGuard&quot;.<br /><br />p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates. <br />Examples: <br />TASK::ADD_PATROL_ROUTE_NODE(1, &quot;WORLD_HUMAN_GUARD_STAND&quot;, l_739[7/*3*/], 0.0, 0.0, 0.0, 0);<br /><br />TASK::ADD_PATROL_ROUTE_NODE(1, &quot;WORLD_HUMAN_GUARD_STAND&quot;, l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);<br /><br />p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.<br /><br />p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EDF950167586B7C<br />
/// </para>
/// </remarks>
public static void AddPatrolRouteNode(int nodeId, string nodeType, float posX, float posY, float posZ, float headingX, float headingY, float headingZ, int duration)
{
Function.Call((Hash)0x8EDF950167586B7C, nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23083260DEC3A551<br />
/// </para>
/// </remarks>
public static void AddPatrolRouteLink(int nodeId1, int nodeId2)
{
Function.Call((Hash)0x23083260DEC3A551, nodeId1, nodeId2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF8A443CCC8018DC<br />
/// </para>
/// </remarks>
public static void CreatePatrolRoute()
{
Function.Call((Hash)0xAF8A443CCC8018DC);
}

/// <summary>
/// From the b617d scripts:<br /><br />TASK::DELETE_PATROL_ROUTE(&quot;miss_merc0&quot;);<br />TASK::DELETE_PATROL_ROUTE(&quot;miss_merc1&quot;);<br />TASK::DELETE_PATROL_ROUTE(&quot;miss_merc2&quot;);<br />TASK::DELETE_PATROL_ROUTE(&quot;miss_dock&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7767DD9D65E91319<br />
/// </para>
/// </remarks>
public static void DeletePatrolRoute(string patrolRoute)
{
Function.Call((Hash)0x7767DD9D65E91319, patrolRoute);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x52F734CEBE20DFBA<br />
/// </para>
/// </remarks>
public static bool GetPatrolTaskInfo(int /* Ped */ ped, ref int timeLeftAtNode, ref int nodeId)
{
var nativeAssistPointerVar0 = timeLeftAtNode;
var nativeAssistPointerVar1 = nodeId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x52F734CEBE20DFBA, ped, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
timeLeftAtNode = nativeAssistPointerVar0;
nodeId = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:<br /><br />&quot;miss_Tower_01&quot; (this went from 01 - 10)<br />&quot;miss_Ass0&quot; (0, 4, 6, 3)<br />&quot;MISS_PATROL_8&quot;<br /><br />I think they&apos;re patrol routes, but I&apos;m not sure. And I believe the 3rd parameter is a BOOL, but I can&apos;t confirm other than only seeing 0 and 1 being passed.<br /><br /><br />As far as I can see the patrol routes names such as &quot;miss_Ass0&quot; have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. <br />From the scripts<br /><br />    TASK::OPEN_PATROL_ROUTE(&quot;miss_Ass0&quot;);<br />    TASK::ADD_PATROL_ROUTE_NODE(0, &quot;WORLD_HUMAN_GUARD_STAND&quot;, l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));<br />    TASK::ADD_PATROL_ROUTE_NODE(1, &quot;WORLD_HUMAN_GUARD_STAND&quot;, l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));<br />    TASK::ADD_PATROL_ROUTE_NODE(2, &quot;WORLD_HUMAN_GUARD_STAND&quot;, l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));<br />    TASK::ADD_PATROL_ROUTE_LINK(0, 1);<br />    TASK::ADD_PATROL_ROUTE_LINK(1, 2);<br />    TASK::ADD_PATROL_ROUTE_LINK(2, 0);<br />    TASK::CLOSE_PATROL_ROUTE();<br />    TASK::CREATE_PATROL_ROUTE();<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBDA5DF49D080FE4E<br />
/// </para>
/// </remarks>
public static void TaskPatrol(int /* Ped */ ped, string patrolRouteName, int alertState, bool canChatToPeds, bool useHeadLookAt)
{
Function.Call((Hash)0xBDA5DF49D080FE4E, ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
}

/// <summary>
/// Makes the ped run to take cover
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5DA8615A6180789<br />
/// </para>
/// </remarks>
public static void TaskStayInCover(int /* Ped */ ped)
{
Function.Call((Hash)0xE5DA8615A6180789, ped);
}

/// <summary>
/// x, y, z: offset in world coords from some entity.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CF0D8F9BBA0DD75<br />
/// </para>
/// </remarks>
public static void AddVehicleSubtaskAttackCoord(int /* Ped */ ped, float x, float y, float z)
{
Function.Call((Hash)0x5CF0D8F9BBA0DD75, ped, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85F462BADC7DA47F<br />
/// </para>
/// </remarks>
public static void AddVehicleSubtaskAttackPed(int /* Ped */ ped, int /* Ped */ target)
{
Function.Call((Hash)0x85F462BADC7DA47F, ped, target);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10AB107B887214D8<br />
/// </para>
/// </remarks>
public static void TaskVehicleShootAtPed(int /* Ped */ ped, int /* Ped */ target, float fireTolerance)
{
Function.Call((Hash)0x10AB107B887214D8, ped, target, fireTolerance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE41885592B08B097<br />
/// </para>
/// </remarks>
public static void TaskVehicleAimAtPed(int /* Ped */ ped, int /* Ped */ target)
{
Function.Call((Hash)0xE41885592B08B097, ped, target);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5190796ED39C9B6D<br />
/// </para>
/// </remarks>
public static void TaskVehicleShootAtCoord(int /* Ped */ ped, float x, float y, float z, float fireTolerance)
{
Function.Call((Hash)0x5190796ED39C9B6D, ped, x, y, z, fireTolerance);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x447C1E9EF844BC0F<br />
/// </para>
/// </remarks>
public static void TaskVehicleAimAtCoord(int /* Ped */ ped, float x, float y, float z)
{
Function.Call((Hash)0x447C1E9EF844BC0F, ped, x, y, z);
}

/// <summary>
/// Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other &quot;road laws&quot; into consideration.<br /><br />WARNING:<br />A behaviorFlag value of 0 will result in a clunky, stupid driver!<br /><br />Recommended settings:<br />speed = 30.0f,<br />behaviorFlag = 156, <br />stoppingRange = 5.0f;<br /><br />If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption. <br /><br />If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped&apos;s updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn&apos;t get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an &quot;anti-stuck&quot; mechanism, which allows the driver to realize he&apos;s stuck, temporarily pause the tick, unstuck, then resume the tick.<br /><br />EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x195AEEB13CEFE2EE<br />
/// </para>
/// </remarks>
public static void TaskVehicleGotoNavmesh(int /* Ped */ ped, int /* Vehicle */ vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange)
{
Function.Call((Hash)0x195AEEB13CEFE2EE, ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
}

/// <summary>
/// movement_speed: mostly 2f, but also 1/1.2f, etc.<br />p8: always false<br />p9: 2f<br />p10: 0.5f<br />p11: true<br />p12: 0 / 512 / 513, etc.<br />p13: 0<br />firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11315AB3385B8AC0<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordWhileAimingAtCoord(int /* Ped */ ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, uint firingPattern)
{
Function.Call((Hash)0x11315AB3385B8AC0, ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2A16444EAD9AE47<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordWhileAimingAtEntity(int /* Ped */ ped, float x, float y, float z, int /* Entity */ aimAtID, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, uint firingPattern, int time)
{
Function.Call((Hash)0xB2A16444EAD9AE47, ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
}

/// <summary>
/// The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.<br /><br />If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.<br /><br />If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.<br /><br />The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.<br /><br />I still can&apos;t figure out what unkTrue is used for. I don&apos;t notice any difference if I set it to false but in the decompiled scripts is always true.<br /><br />I think that unkFlag, like the driving styles, could be a flag that &quot;work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function&quot;. What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don&apos;t know what behavior enable or disable this possible flag so I leave it at 0.<br /><br />Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.<br /><br />The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).<br /><br />Example:<br /><br />enum AimFlag<br />{<br />   AimAtFocusLocation,<br />   AimAtGoToLocation<br />};<br /><br />Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.<br /><br />Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.<br /><br />Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground<br /><br />// 1st example<br />TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);<br /><br />// 2nd example<br />TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don&apos;t shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);<br /><br /><br />1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using &quot;FullAuto&quot; firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.<br /><br />2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA55547801EB331FC<br />
/// </para>
/// </remarks>
public static void TaskGoToCoordAndAimAtHatedEntitiesNearCoord(int /* Ped */ pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, bool shootAtEnemies, float distanceToStopAt, float noRoadsDistance, bool useNavMesh, int navFlags, int taskFlags, uint firingPattern)
{
Function.Call((Hash)0xA55547801EB331FC, pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x04701832B739DCE5<br />
/// </para>
/// </remarks>
public static void TaskGoToEntityWhileAimingAtCoord(int /* Ped */ ped, int /* Entity */ entity, float aimX, float aimY, float aimZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, uint firingPattern)
{
Function.Call((Hash)0x04701832B739DCE5, ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
}

/// <summary>
/// shootatEntity:<br />If true, peds will shoot at Entity till it is dead.<br />If false, peds will just walk till they reach the entity and will cease shooting.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97465886D35210E9<br />
/// </para>
/// </remarks>
public static void TaskGoToEntityWhileAimingAtEntity(int /* Ped */ ped, int /* Entity */ entityToWalkTo, int /* Entity */ entityToAimAt, float speed, bool shootatEntity, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, uint firingPattern)
{
Function.Call((Hash)0x97465886D35210E9, ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
}

/// <summary>
/// Makes the ped ragdoll like when falling from a great height
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C825BDC7741D37C<br />
/// </para>
/// </remarks>
public static void SetHighFallTask(int /* Ped */ ped, int minTime, int maxTime, int entryType)
{
Function.Call((Hash)0x8C825BDC7741D37C, ped, minTime, maxTime, entryType);
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json<br />For a full list of the points, see here: goo.gl/wIH0vn<br /><br />Max number of loaded recordings is 32.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9EEFB62EB27B5792<br />
/// </para>
/// </remarks>
public static void RequestWaypointRecording(string name)
{
Function.Call((Hash)0x9EEFB62EB27B5792, name);
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCB4E8BE8A0063C5D<br />
/// </para>
/// </remarks>
public static bool GetIsWaypointRecordingLoaded(string name)
{
return Function.Call<bool>((Hash)0xCB4E8BE8A0063C5D, name);
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFF1B8B4AA1C25DC8<br />
/// </para>
/// </remarks>
public static void RemoveWaypointRecording(string name)
{
Function.Call((Hash)0xFF1B8B4AA1C25DC8, name);
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json<br />For a full list of the points, see here: goo.gl/wIH0vn
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5343532C01A07234<br />
/// </para>
/// </remarks>
public static bool WaypointRecordingGetNumPoints(string name, ref int points)
{
var nativeAssistPointerVar0 = points;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x5343532C01A07234, name, &nativeAssistPointerVar0);
}
points = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json<br />For a full list of the points, see here: goo.gl/wIH0vn
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FB897405C90B361<br />
/// </para>
/// </remarks>
public static bool WaypointRecordingGetCoord(string name, int point, ref Vector3 coord)
{
var nativeAssistPointerVar0 = coord;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2FB897405C90B361, name, point, &nativeAssistPointerVar0);
}
coord = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x005622AEBC33ACA9<br />
/// </para>
/// </remarks>
public static float WaypointRecordingGetSpeedAtPoint(string name, int point)
{
return Function.Call<float>((Hash)0x005622AEBC33ACA9, name, point);
}

/// <summary>
/// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json<br />For a full list of the points, see here: goo.gl/wIH0vn
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB629A298081F876F<br />
/// </para>
/// </remarks>
public static bool WaypointRecordingGetClosestWaypoint(string name, float x, float y, float z, ref int point)
{
var nativeAssistPointerVar0 = point;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xB629A298081F876F, name, x, y, z, &nativeAssistPointerVar0);
}
point = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0759591819534F7B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void TaskFollowWaypointRecording(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x0759591819534F7B, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE03B3F2D3DC59B64<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool IsWaypointPlaybackGoingOnForPed(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0xE03B3F2D3DC59B64, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2720AAA75001E094<br />
/// </para>
/// </remarks>
public static int GetPedWaypointProgress(int /* Ped */ ped)
{
return Function.Call<int>((Hash)0x2720AAA75001E094, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6A877C64CAF1BC5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static float GetPedWaypointDistance(int /* bug: Any */ p0)
{
return Function.Call<float>((Hash)0xE6A877C64CAF1BC5, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED98E10B0AFCE4B4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetPedWaypointRouteOffset(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0xED98E10B0AFCE4B4, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5B769058763E497<br />
/// </para>
/// </remarks>
public static float GetWaypointDistanceAlongRoute(string p0, int p1)
{
return Function.Call<float>((Hash)0xA5B769058763E497, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x701375A7D43F01CB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool WaypointPlaybackGetIsPaused(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x701375A7D43F01CB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F342546AA06FED5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackPause(int /* bug: Any */ p0, bool p1, bool p2)
{
Function.Call((Hash)0x0F342546AA06FED5, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x244F70C84C547D2D<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackResume(int /* bug: Any */ p0, bool p1, int /* bug: Any */ p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0x244F70C84C547D2D, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D7D2B47FA788E85<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackOverrideSpeed(int /* bug: Any */ p0, float p1, bool p2)
{
Function.Call((Hash)0x7D7D2B47FA788E85, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6599D834B12D0800<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackUseDefaultSpeed(int /* bug: Any */ p0)
{
Function.Call((Hash)0x6599D834B12D0800, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5A353B8E6B1095B5<br />
/// </para>
/// </remarks>
public static void UseWaypointRecordingAsAssistedMovementRoute(string name, bool p1, float p2, float p3)
{
Function.Call((Hash)0x5A353B8E6B1095B5, name, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20E330937C399D29<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackStartAimingAtPed(int /* bug: Any */ p0, int /* bug: Any */ p1, bool p2)
{
Function.Call((Hash)0x20E330937C399D29, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8968400D900ED8B3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackStartAimingAtCoord(int /* bug: Any */ p0, float p1, float p2, float p3, bool p4)
{
Function.Call((Hash)0x8968400D900ED8B3, p0, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE70BA7B90F8390DC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackStartShootingAtPed(int /* bug: Any */ p0, int /* bug: Any */ p1, bool p2, int /* bug: Any */ p3)
{
Function.Call((Hash)0xE70BA7B90F8390DC, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x057A25CFCC9DB671<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackStartShootingAtCoord(int /* bug: Any */ p0, float p1, float p2, float p3, bool p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0x057A25CFCC9DB671, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x47EFA040EBB8E2EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void WaypointPlaybackStopAimingOrShooting(int /* bug: Any */ p0)
{
Function.Call((Hash)0x47EFA040EBB8E2EA, p0);
}

/// <summary>
/// Routes: &quot;1_FIBStairs&quot;, &quot;2_FIBStairs&quot;, &quot;3_FIBStairs&quot;, &quot;4_FIBStairs&quot;, &quot;5_FIBStairs&quot;, &quot;5_TowardsFire&quot;, &quot;6a_FIBStairs&quot;, &quot;7_FIBStairs&quot;, &quot;8_FIBStairs&quot;, &quot;Aprtmnt_1&quot;, &quot;AssAfterLift&quot;, &quot;ATM_1&quot;, &quot;coroner2&quot;, &quot;coroner_stairs&quot;, &quot;f5_jimmy1&quot;, &quot;fame1&quot;, &quot;family5b&quot;, &quot;family5c&quot;, &quot;Family5d&quot;, &quot;family5d&quot;, &quot;FIB_Glass1&quot;, &quot;FIB_Glass2&quot;, &quot;FIB_Glass3&quot;, &quot;finaBroute1A&quot;, &quot;finalb1st&quot;, &quot;finalB1sta&quot;, &quot;finalbround&quot;, &quot;finalbroute2&quot;, &quot;Hairdresser1&quot;, &quot;jan_foyet_ft_door&quot;, &quot;Jo_3&quot;, &quot;Lemar1&quot;, &quot;Lemar2&quot;, &quot;mansion_1&quot;, &quot;Mansion_1&quot;, &quot;pols_1&quot;, &quot;pols_2&quot;, &quot;pols_3&quot;, &quot;pols_4&quot;, &quot;pols_5&quot;, &quot;pols_6&quot;, &quot;pols_7&quot;, &quot;pols_8&quot;, &quot;Pro_S1&quot;, &quot;Pro_S1a&quot;, &quot;Pro_S2&quot;, &quot;Towards_case&quot;, &quot;trev_steps&quot;, &quot;tunrs1&quot;, &quot;tunrs2&quot;, &quot;tunrs3&quot;, &quot;Wave01457s&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x817268968605947A<br />
/// </para>
/// </remarks>
public static void AssistedMovementRequestRoute(string route)
{
Function.Call((Hash)0x817268968605947A, route);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3548536485DD792B<br />
/// </para>
/// </remarks>
public static void AssistedMovementRemoveRoute(string route)
{
Function.Call((Hash)0x3548536485DD792B, route);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60F9A4393A21F741<br />
/// </para>
/// </remarks>
public static bool AssistedMovementIsRouteLoaded(string route)
{
return Function.Call<bool>((Hash)0x60F9A4393A21F741, route);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5002D78B7162E1B<br />
/// </para>
/// </remarks>
public static void AssistedMovementSetRouteProperties(string route, int props)
{
Function.Call((Hash)0xD5002D78B7162E1B, route, props);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x13945951E16EF912<br />
/// </para>
/// </remarks>
public static void AssistedMovementOverrideLoadDistanceThisFrame(float dist)
{
Function.Call((Hash)0x13945951E16EF912, dist);
}

/// <summary>
/// task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)<br /><br />p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf<br />p3 = 786468<br />p4 = 0<br />p5 = 16<br />p6 = -1 (angle?)<br />p7/8/9 = usually v3.zero<br />p10 = bool (repeat?)<br />p11 = 1073741824<br /><br />Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3123FAA6DB1CF7ED<br />
/// </para>
/// </remarks>
public static void TaskVehicleFollowWaypointRecording(int /* Ped */ ped, int /* Vehicle */ vehicle, string WPRecording, int p3, int p4, int p5, int p6, float p7, bool p8, float p9)
{
Function.Call((Hash)0x3123FAA6DB1CF7ED, ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF5134943EA29868C<br />
/// </para>
/// </remarks>
public static bool IsWaypointPlaybackGoingOnForVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xF5134943EA29868C, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9824CFF8FC66E159<br />
/// </para>
/// </remarks>
public static int GetVehicleWaypointProgress(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x9824CFF8FC66E159, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x416B62AC8B9E5BBD<br />
/// </para>
/// </remarks>
public static int GetVehicleWaypointTargetPoint(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x416B62AC8B9E5BBD, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8A4E6AC373666BC5<br />
/// </para>
/// </remarks>
public static void VehicleWaypointPlaybackPause(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x8A4E6AC373666BC5, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC04FCAA7839D492<br />
/// </para>
/// </remarks>
public static void VehicleWaypointPlaybackResume(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xDC04FCAA7839D492, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CEB25A7D2848963<br />
/// </para>
/// </remarks>
public static void VehicleWaypointPlaybackUseDefaultSpeed(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x5CEB25A7D2848963, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x121F0593E0A431D7<br />
/// </para>
/// </remarks>
public static void VehicleWaypointPlaybackOverrideSpeed(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0x121F0593E0A431D7, vehicle, speed);
}

/// <summary>
/// I cant believe I have to define this, this is one of the best natives.<br /><br />It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.<br /><br />Since it is a task, every time the native is called the ped will stop for a moment. 
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90D2156198831D69<br />
/// </para>
/// </remarks>
public static void TaskSetBlockingOfNonTemporaryEvents(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x90D2156198831D69, ped, toggle);
}

/// <summary>
/// p2 always false<br /><br />[30/03/2017] ins1de :<br /><br />See FORCE_PED_MOTION_STATE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F056E1AFFEF17AB<br />
/// </para>
/// </remarks>
public static void TaskForceMotionState(int /* Ped */ ped, uint state, bool forceRestart)
{
Function.Call((Hash)0x4F056E1AFFEF17AB, ped, state, forceRestart);
}

/// <summary>
/// Example:<br />TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), &quot;arm_wrestling_sweep_paired_a_rev3&quot;, 0.0f, true, &quot;mini@arm_wrestling&quot;, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D537BA194896636<br />
/// </para>
/// </remarks>
public static void TaskMoveNetworkByName(int /* Ped */ ped, string task, float multiplier, bool allowOverrideCloneUpdate, string animDict, int flags)
{
Function.Call((Hash)0x2D537BA194896636, ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
}

/// <summary>
/// Example:<br />TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), &quot;minigame_tattoo_michael_parts&quot;, 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5B35BEA41919ACB<br />
/// </para>
/// </remarks>
public static void TaskMoveNetworkAdvancedByName(int /* Ped */ ped, string network, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, string animDict, int flags)
{
Function.Call((Hash)0xD5B35BEA41919ACB, ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
}

/// <summary>
/// Used only once in the scripts (am_mp_nightclub)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x3D45B0B355C5E0C9<br />
/// </para>
/// </remarks>
public static void TaskMoveNetworkByNameWithInitParams(int /* Ped */ ped, string network, ref int initialParameters, float blendDuration, bool allowOverrideCloneUpdate, string animDict, int flags)
{
var nativeAssistPointerVar0 = initialParameters;
unsafe {
Function.Call((Hash)0x3D45B0B355C5E0C9, ped, network, &nativeAssistPointerVar0, blendDuration, allowOverrideCloneUpdate, animDict, flags);
}
initialParameters = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x29682E2CCF21E9B5<br />
/// </para>
/// </remarks>
public static void TaskMoveNetworkAdvancedByNameWithInitParams(int /* Ped */ ped, string network, ref int initialParameters, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, string dictionary, int flags)
{
var nativeAssistPointerVar0 = initialParameters;
unsafe {
Function.Call((Hash)0x29682E2CCF21E9B5, ped, network, &nativeAssistPointerVar0, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);
}
initialParameters = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x921CE12C489C4C41<br />
/// </para>
/// </remarks>
public static bool IsTaskMoveNetworkActive(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x921CE12C489C4C41, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30ED88D5E0C56A37<br />
/// </para>
/// </remarks>
public static bool IsTaskMoveNetworkReadyForTransition(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x30ED88D5E0C56A37, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD01015C7316AE176<br />
/// </para>
/// </remarks>
public static bool RequestTaskMoveNetworkStateTransition(int /* Ped */ ped, string name)
{
return Function.Call<bool>((Hash)0xD01015C7316AE176, ped, name);
}

/// <summary>
/// Used only once in the scripts (fm_mission_controller) like so:<br /><br />TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, &quot;Cutting&quot;);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB13A5565480B6D9<br />
/// </para>
/// </remarks>
public static bool SetExpectedCloneNextTaskMoveNetworkState(int /* Ped */ ped, string state)
{
return Function.Call<bool>((Hash)0xAB13A5565480B6D9, ped, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x717E4D1F2048376D<br />
/// </para>
/// </remarks>
public static string GetTaskMoveNetworkState(int /* Ped */ ped)
{
return Function.Call<string>((Hash)0x717E4D1F2048376D, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x8423541E8B3A1589<br />
/// </para>
/// </remarks>
public static void SetTaskMoveNetworkAnimSet(int /* Ped */ ped, uint clipSet, uint variableClipSet)
{
Function.Call((Hash)0x8423541E8B3A1589, ped, clipSet, variableClipSet);
}

/// <summary>
/// signalName - &quot;Phase&quot;, &quot;Wobble&quot;, &quot;x_axis&quot;,&quot;y_axis&quot;,&quot;introphase&quot;,&quot;speed&quot;.<br />p2 - From what i can see it goes up to 1f (maybe).<br /><br />Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), &quot;Phase&quot;, 0.5);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD5BB4025AE449A4E<br />
/// </para>
/// </remarks>
public static void SetTaskMoveNetworkSignalFloat(int /* Ped */ ped, string signalName, float value)
{
Function.Call((Hash)0xD5BB4025AE449A4E, ped, signalName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x373EF409B82697A3<br />
/// </para>
/// </remarks>
public static void SetTaskMoveNetworkSignalLocalFloat(int /* Ped */ ped, string signalName, float value)
{
Function.Call((Hash)0x373EF409B82697A3, ped, signalName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x8634CEF2522D987B<br />
/// </para>
/// </remarks>
public static void SetTaskMoveNetworkSignalFloatLerpRate(int /* Ped */ ped, string signalName, float value)
{
Function.Call((Hash)0x8634CEF2522D987B, ped, signalName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB0A6CFD2C69C1088<br />
/// </para>
/// </remarks>
public static void SetTaskMoveNetworkSignalBool(int /* Ped */ ped, string signalName, bool value)
{
Function.Call((Hash)0xB0A6CFD2C69C1088, ped, signalName, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x44AB0B3AFECCE242<br />
/// </para>
/// </remarks>
public static float GetTaskMoveNetworkSignalFloat(int /* Ped */ ped, string signalName)
{
return Function.Call<float>((Hash)0x44AB0B3AFECCE242, ped, signalName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7FFBA498E4AAF67<br />
/// </para>
/// </remarks>
public static bool GetTaskMoveNetworkSignalBool(int /* Ped */ ped, string signalName)
{
return Function.Call<bool>((Hash)0xA7FFBA498E4AAF67, ped, signalName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4F47213DF45A64C<br />
/// </para>
/// </remarks>
public static bool GetTaskMoveNetworkEvent(int /* Ped */ ped, string eventName)
{
return Function.Call<bool>((Hash)0xB4F47213DF45A64C, ped, eventName);
}

/// <summary>
/// Doesn&apos;t actually return anything.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x0FFB3C758E8C07B9<br />
/// </para>
/// </remarks>
public static bool SetTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(int /* Ped */ ped, bool enable)
{
return Function.Call<bool>((Hash)0x0FFB3C758E8C07B9, ped, enable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x349CE7B56DAFD95C<br />
/// </para>
/// </remarks>
public static bool IsMoveBlendRatioStill(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x349CE7B56DAFD95C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF133BBBE91E1691F<br />
/// </para>
/// </remarks>
public static bool IsMoveBlendRatioWalking(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xF133BBBE91E1691F, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4D8636C0199A939<br />
/// </para>
/// </remarks>
public static bool IsMoveBlendRatioRunning(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xD4D8636C0199A939, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24A2AD74FA9814E2<br />
/// </para>
/// </remarks>
public static bool IsMoveBlendRatioSprinting(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x24A2AD74FA9814E2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC29253EEF8F0180<br />
/// </para>
/// </remarks>
public static bool IsPedStill(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xAC29253EEF8F0180, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDE4C184B2B9B071A<br />
/// </para>
/// </remarks>
public static bool IsPedWalking(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xDE4C184B2B9B071A, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5286FFC176F28A2<br />
/// </para>
/// </remarks>
public static bool IsPedRunning(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xC5286FFC176F28A2, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57E457CD2C0FC168<br />
/// </para>
/// </remarks>
public static bool IsPedSprinting(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x57E457CD2C0FC168, ped);
}

/// <summary>
/// What&apos;s strafing?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE45B7F222DE47E09<br />
/// </para>
/// </remarks>
public static bool IsPedStrafing(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xE45B7F222DE47E09, ped);
}

/// <summary>
///  TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, &quot;creatures@rottweiler@in_vehicle@std_car&quot;, &quot;get_in&quot;, 1000.0, -8.0, 4, 0, 0x447a0000, 0);<br /><br />Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEA929141F699854<br />
/// </para>
/// </remarks>
public static void TaskSynchronizedScene(int /* Ped */ ped, int scene, string animDictionary, string animationName, float blendIn, float blendOut, int flags, int ragdollBlockingFlags, float moverBlendDelta, int ikFlags)
{
Function.Call((Hash)0xEEA929141F699854, ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x19D1B791CB3670FE<br />
/// </para>
/// </remarks>
public static void TaskAgitatedActionConfrontResponse(int /* Ped */ ped, int /* Ped */ ped2)
{
Function.Call((Hash)0x19D1B791CB3670FE, ped, ped2);
}

/// <summary>
/// This function is called on peds in vehicles.<br /><br />anim: animation name<br />p2, p3, p4: &quot;sweep_low&quot;, &quot;sweep_med&quot; or &quot;sweep_high&quot;<br />p5: no idea what it does but is usually -1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2047C02158D6405A<br />
/// </para>
/// </remarks>
public static void TaskSweepAimEntity(int /* Ped */ ped, string animDict, string lowAnimName, string medAnimName, string hiAnimName, int runtime, int /* Entity */ targetEntity, float turnRate, float blendInDuration)
{
Function.Call((Hash)0x2047C02158D6405A, ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4973DBDBE6E44B3<br />
/// </para>
/// </remarks>
public static void UpdateTaskSweepAimEntity(int /* Ped */ ped, int /* Entity */ entity)
{
Function.Call((Hash)0xE4973DBDBE6E44B3, ped, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AFE8FDC10BC07D2<br />
/// </para>
/// </remarks>
public static void TaskSweepAimPosition(int /* Ped */ ped, string animDict, string lowAnimName, string medAnimName, string hiAnimName, int runtime, float x, float y, float z, float turnRate, float blendInDuration)
{
Function.Call((Hash)0x7AFE8FDC10BC07D2, ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB106883F5201FC4<br />
/// </para>
/// </remarks>
public static void UpdateTaskSweepAimPosition(int /* Ped */ ped, float x, float y, float z)
{
Function.Call((Hash)0xBB106883F5201FC4, ped, x, y, z);
}

/// <summary>
/// Example from &quot;me_amanda1.ysc.c4&quot;:<br />TASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());<br /><br />Example from &quot;armenian1.ysc.c4&quot;:<br />if (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {<br />    TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());<br />}<br /><br />I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.<br /><br /><br />Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn&apos;t do anything if tasked to arrest another ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3B9A78A178572B1<br />
/// </para>
/// </remarks>
public static void TaskArrestPed(int /* Ped */ ped, int /* Ped */ target)
{
Function.Call((Hash)0xF3B9A78A178572B1, ped, target);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3DC52677769B4AE0<br />
/// </para>
/// </remarks>
public static bool IsPedRunningArrestTask(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x3DC52677769B4AE0, ped);
}

/// <summary>
/// This function is hard-coded to always return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90A09F3A45FED688<br />
/// </para>
/// </remarks>
public static bool IsPedBeingArrested(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x90A09F3A45FED688, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67406F2C8F87FC4F<br />
/// </para>
/// </remarks>
public static void UncuffPed(int /* Ped */ ped)
{
Function.Call((Hash)0x67406F2C8F87FC4F, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74E559B3BC910685<br />
/// </para>
/// </remarks>
public static bool IsPedCuffed(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x74E559B3BC910685, ped);
}

#endregion
#region VEHICLE
/// <summary>
/// p7 when set to true allows you to spawn vehicles under -100 z.<br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF35D0D2583051B0<br />
/// </para>
/// </remarks>
public static int CreateVehicle(uint modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool p7)
{
return Function.Call<int>((Hash)0xAF35D0D2583051B0, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7);
}

/// <summary>
/// Deletes a vehicle.<br />The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);<br /><br />eg how to use:<br />SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);<br />DELETE_VEHICLE(&amp;vehicle);<br /><br />Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEA386986E786A54F<br />
/// </para>
/// </remarks>
public static void DeleteVehicle(ref int /* Vehicle* */ vehicle)
{
var nativeAssistPointerVar0 = vehicle;
unsafe {
Function.Call((Hash)0xEA386986E786A54F, &nativeAssistPointerVar0);
}
vehicle = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D6F9A3EF26136A0<br />
/// </para>
/// </remarks>
public static void SetVehicleAllowHomingMissleLockon(int /* Vehicle */ vehicle, bool toggle, bool p2)
{
Function.Call((Hash)0x7D6F9A3EF26136A0, vehicle, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x1DDA078D12879EEE<br />
/// </para>
/// </remarks>
public static void SetVehicleAllowHomingMissleLockonSynced(int /* Vehicle */ vehicle, bool canBeLockedOn, bool unk)
{
Function.Call((Hash)0x1DDA078D12879EEE, vehicle, canBeLockedOn, unk);
}

/// <summary>
/// Makes the vehicle accept no passengers.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5D14D4154BFE7B2C<br />
/// </para>
/// </remarks>
public static void SetVehicleAllowNoPassengersLockon(int /* Vehicle */ veh, bool toggle)
{
Function.Call((Hash)0x5D14D4154BFE7B2C, veh, toggle);
}

/// <summary>
/// Returns a value depending on the lock-on state of vehicle weapons.<br />0: not locked on<br />1: locking on<br />2: locked on
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6B0E8CFC3633BF0<br />
/// </para>
/// </remarks>
public static int GetVehicleHomingLockonState(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xE6B0E8CFC3633BF0, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x6EAAEFC76ACC311F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetVehicleHomingLockedontoState(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x6EAAEFC76ACC311F, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x407DC5E97DB1A4D3<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleHomingLockedontoState(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x407DC5E97DB1A4D3, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x423E8DE37D934D89<br />
/// </para>
/// </remarks>
public static bool IsVehicleModel(int /* Vehicle */ vehicle, uint model)
{
return Function.Call<bool>((Hash)0x423E8DE37D934D89, vehicle, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6086BC836400876<br />
/// </para>
/// </remarks>
public static bool DoesScriptVehicleGeneratorExist(int vehicleGenerator)
{
return Function.Call<bool>((Hash)0xF6086BC836400876, vehicleGenerator);
}

/// <summary>
/// Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.<br /><br />Parameters:<br />x/y/z - Generator position<br />heading - Generator heading<br />p4 - Unknown (always 5.0)<br />p5 - Unknown (always 3.0)<br />modelHash - Vehicle model hash<br />p7/8/9/10 - Unknown (always -1)<br />p11 - Unknown (usually TRUE, only one instance of FALSE)<br />p12/13 - Unknown (always FALSE)<br />p14 - Unknown (usally FALSE, only two instances of TRUE)<br />p15 - Unknown (always TRUE)<br />p16 - Unknown (always -1)<br /><br />Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY(&quot;adder&quot;), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9DEF883114668116<br />
/// </para>
/// </remarks>
public static int CreateScriptVehicleGenerator(float x, float y, float z, float heading, float p4, float p5, uint modelHash, int p7, int p8, int p9, int p10, bool p11, bool p12, bool p13, bool p14, bool p15, int p16)
{
return Function.Call<int>((Hash)0x9DEF883114668116, x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22102C9ABFCF125D<br />
/// </para>
/// </remarks>
public static void DeleteScriptVehicleGenerator(int vehicleGenerator)
{
Function.Call((Hash)0x22102C9ABFCF125D, vehicleGenerator);
}

/// <summary>
/// Only called once in the decompiled scripts. Presumably activates the specified generator.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD9D620E0AC6DC4B0<br />
/// </para>
/// </remarks>
public static void SetScriptVehicleGenerator(int vehicleGenerator, bool enabled)
{
Function.Call((Hash)0xD9D620E0AC6DC4B0, vehicleGenerator, enabled);
}

/// <summary>
/// When p6 is true, vehicle generators are active.<br />p7 seems to always be true in story mode scripts, but it&apos;s sometimes false in online scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC12321827687FE4D<br />
/// </para>
/// </remarks>
public static void SetAllVehicleGeneratorsActiveInArea(float x1, float y1, float z1, float x2, float y2, float z2, bool toggle, bool p7)
{
Function.Call((Hash)0xC12321827687FE4D, x1, y1, z1, x2, y2, z2, toggle, p7);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34AD89078831A4BC<br />
/// </para>
/// </remarks>
public static void SetAllVehicleGeneratorsActive()
{
Function.Call((Hash)0x34AD89078831A4BC);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x608207E7A8FB787C<br />
/// </para>
/// </remarks>
public static void SetAllLowPriorityVehicleGeneratorsActive(bool active)
{
Function.Call((Hash)0x608207E7A8FB787C, active);
}

/// <summary>
/// Related to car generators &amp; CPlayerSwitchMgrLong
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A75585FB2E54FAD<br />
/// </para>
/// </remarks>
public static void SetVehicleGeneratorAreaOfInterest(float x, float y, float z, float radius)
{
Function.Call((Hash)0x9A75585FB2E54FAD, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A436B8643716D14<br />
/// </para>
/// </remarks>
public static void ClearVehicleGeneratorAreaOfInterest()
{
Function.Call((Hash)0x0A436B8643716D14);
}

/// <summary>
/// Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.<br /><br />sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x49733E92263139D1<br />
/// </para>
/// </remarks>
public static bool SetVehicleOnGroundProperly(int /* Vehicle */ vehicle, float p1)
{
return Function.Call<bool>((Hash)0x49733E92263139D1, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE023E8AC4EF7C117<br />
/// </para>
/// </remarks>
public static bool SetVehicleUseCutsceneWheelCompression(int /* Vehicle */ p0, bool p1, bool p2, bool p3)
{
return Function.Call<bool>((Hash)0xE023E8AC4EF7C117, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB497F06B288DCFDF<br />
/// </para>
/// </remarks>
public static bool IsVehicleStuckOnRoof(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xB497F06B288DCFDF, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB72E26D81006005B<br />
/// </para>
/// </remarks>
public static void AddVehicleUpsidedownCheck(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xB72E26D81006005B, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC53EB42A499A7E90<br />
/// </para>
/// </remarks>
public static void RemoveVehicleUpsidedownCheck(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xC53EB42A499A7E90, vehicle);
}

/// <summary>
/// Returns true if the vehicle&apos;s current speed is less than, or equal to 0.0025f.<br /><br />For some vehicles it returns true if the current speed is &lt;= 0.00039999999.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5721B434AD84D57A<br />
/// </para>
/// </remarks>
public static bool IsVehicleStopped(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x5721B434AD84D57A, vehicle);
}

/// <summary>
/// Gets the number of passengers.<br /><br />This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.<br /><br />To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x24CB2137731FFE89<br />
/// </para>
/// </remarks>
public static int GetVehicleNumberOfPassengers(int /* Vehicle */ vehicle, bool includeDriver, bool includeDeadOccupants)
{
return Function.Call<int>((Hash)0x24CB2137731FFE89, vehicle, includeDriver, includeDeadOccupants);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7C4F2C6E744A550<br />
/// </para>
/// </remarks>
public static int GetVehicleMaxNumberOfPassengers(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xA7C4F2C6E744A550, vehicle);
}

/// <summary>
/// Returns max number of passengers (including the driver) for the specified vehicle model.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AD93716F184EDA4<br />
/// </para>
/// </remarks>
public static int GetVehicleModelNumberOfSeats(uint modelHash)
{
return Function.Call<int>((Hash)0x2AD93716F184EDA4, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7F203E31F96F6A1<br />
/// </para>
/// </remarks>
public static bool IsSeatWarpOnly(int /* Vehicle */ vehicle, int seatIndex)
{
return Function.Call<bool>((Hash)0xF7F203E31F96F6A1, vehicle, seatIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE33FFA906CE74880<br />
/// </para>
/// </remarks>
public static bool IsTurretSeat(int /* Vehicle */ vehicle, int seatIndex)
{
return Function.Call<bool>((Hash)0xE33FFA906CE74880, vehicle, seatIndex);
}

/// <summary>
/// Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x4E417C547182C84D<br />
/// </para>
/// </remarks>
public static bool DoesVehicleAllowRappel(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x4E417C547182C84D, vehicle);
}

/// <summary>
/// Use this native inside a looped function.<br />Values:<br />- `0.0` = no vehicles on streets<br />- `1.0` = normal vehicles on streets
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x245A6883D966D537<br />
/// </para>
/// </remarks>
public static void SetVehicleDensityMultiplierThisFrame(float multiplier)
{
Function.Call((Hash)0x245A6883D966D537, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3B3359379FE77D3<br />
/// </para>
/// </remarks>
public static void SetRandomVehicleDensityMultiplierThisFrame(float multiplier)
{
Function.Call((Hash)0xB3B3359379FE77D3, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEAE6DCC7EEE3DB1D<br />
/// </para>
/// </remarks>
public static void SetParkedVehicleDensityMultiplierThisFrame(float multiplier)
{
Function.Call((Hash)0xEAE6DCC7EEE3DB1D, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4B8E3D1917BC86B<br />
/// </para>
/// </remarks>
public static void SetDisableRandomTrainsThisFrame(bool toggle)
{
Function.Call((Hash)0xD4B8E3D1917BC86B, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90B6DA738A9A25DA<br />
/// </para>
/// </remarks>
public static void SetAmbientVehicleRangeMultiplierThisFrame(float value)
{
Function.Call((Hash)0x90B6DA738A9A25DA, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26324F33423F3CC3<br />
/// </para>
/// </remarks>
public static void SetFarDrawVehicles(bool toggle)
{
Function.Call((Hash)0x26324F33423F3CC3, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCAA15F13EBD417FF<br />
/// </para>
/// </remarks>
public static void SetNumberOfParkedVehicles(int value)
{
Function.Call((Hash)0xCAA15F13EBD417FF, value);
}

/// <summary>
/// enum eVehicleLockState<br />{<br />	VEHICLELOCK_NONE,<br />	VEHICLELOCK_UNLOCKED,<br />	VEHICLELOCK_LOCKED,<br />	VEHICLELOCK_LOCKOUT_PLAYER_ONLY,<br />	VEHICLELOCK_LOCKED_PLAYER_INSIDE,<br />	VEHICLELOCK_LOCKED_INITIALLY,<br />	VEHICLELOCK_FORCE_SHUT_DOORS,<br />	VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,<br />	VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,<br />	VEHICLELOCK_LOCKED_NO_PASSENGERS,<br />	VEHICLELOCK_CANNOT_ENTER	<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB664292EAECF7FA6<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLocked(int /* Vehicle */ vehicle, int doorLockStatus)
{
Function.Call((Hash)0xB664292EAECF7FA6, vehicle, doorLockStatus);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE70724027F85BCD<br />
/// </para>
/// </remarks>
public static void SetVehicleIndividualDoorsLocked(int /* Vehicle */ vehicle, int doorId, int doorLockStatus)
{
Function.Call((Hash)0xBE70724027F85BCD, vehicle, doorId, doorLockStatus);
}

/// <summary>
/// If set to true, prevents vehicle sirens from having sound, leaving only the lights.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD8050E0EB60CF274<br />
/// </para>
/// </remarks>
public static void SetVehicleHasMutedSirens(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xD8050E0EB60CF274, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x517AAF684BB50CD1<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLockedForPlayer(int /* Vehicle */ vehicle, int /* Player */ player, bool toggle)
{
Function.Call((Hash)0x517AAF684BB50CD1, vehicle, player, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6AF6CB341349015<br />
/// </para>
/// </remarks>
public static bool GetVehicleDoorsLockedForPlayer(int /* Vehicle */ vehicle, int /* Player */ player)
{
return Function.Call<bool>((Hash)0xF6AF6CB341349015, vehicle, player);
}

/// <summary>
/// After some analysis, I&apos;ve decided that these are what the parameters are.<br /><br />We can see this being used in R* scripts such as &quot;am_mp_property_int.ysc.c4&quot;:<br />l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);<br />...<br />VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA2F80B8D040727CC<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLockedForAllPlayers(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xA2F80B8D040727CC, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9737A37136F07E75<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLockedForNonScriptPlayers(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x9737A37136F07E75, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB81F6D4A8F5EEBA8<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLockedForTeam(int /* Vehicle */ vehicle, int team, bool toggle)
{
Function.Call((Hash)0xB81F6D4A8F5EEBA8, vehicle, team, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x203B527D1B77904C<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsLockedForAllTeams(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x203B527D1B77904C, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x76D26A22750E849E<br />
/// </para>
/// </remarks>
public static void SetVehicleDontTerminateTaskWhenAchieved(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x76D26A22750E849E, vehicle);
}

/// <summary>
/// Explodes a selected vehicle.<br /><br />Vehicle vehicle = Vehicle you want to explode.<br />BOOL isAudible = If explosion makes a sound.<br />BOOL isInvisible = If the explosion is invisible or not.<br /><br />First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA71116ADF5B514C<br />
/// </para>
/// </remarks>
public static void ExplodeVehicle(int /* Vehicle */ vehicle, bool isAudible, bool isInvisible)
{
Function.Call((Hash)0xBA71116ADF5B514C, vehicle, isAudible, isInvisible);
}

/// <summary>
/// Tested on the player&apos;s current vehicle. Unless you kill the driver, the vehicle doesn&apos;t loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF19D095E42D430CC<br />
/// </para>
/// </remarks>
public static void SetVehicleOutOfControl(int /* Vehicle */ vehicle, bool killDriver, bool explodeOnImpact)
{
Function.Call((Hash)0xF19D095E42D430CC, vehicle, killDriver, explodeOnImpact);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E0A74E1002380B1<br />
/// </para>
/// </remarks>
public static void SetVehicleTimedExplosion(int /* Vehicle */ vehicle, int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x2E0A74E1002380B1, vehicle, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99AD4CCCB128CBC9<br />
/// </para>
/// </remarks>
public static void AddVehiclePhoneExplosiveDevice(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x99AD4CCCB128CBC9, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xAA3F739ABDDCF21F<br />
/// </para>
/// </remarks>
public static void ClearVehiclePhoneExplosiveDevice()
{
Function.Call((Hash)0xAA3F739ABDDCF21F);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6ADAABD3068C5235<br />
/// </para>
/// </remarks>
public static bool HasVehiclePhoneExplosiveDevice()
{
return Function.Call<bool>((Hash)0x6ADAABD3068C5235);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEF49CF0270307CBE<br />
/// </para>
/// </remarks>
public static void DetonateVehiclePhoneExplosiveDevice()
{
Function.Call((Hash)0xEF49CF0270307CBE);
}

/// <summary>
/// This is not tested - it&apos;s just an assumption.<br />- Nac<br /><br />Doesn&apos;t seem to work.  I&apos;ll try with an int instead. --JT<br /><br />Read the scripts, im dumpass. <br /><br />                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {<br />                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);<br />                            }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x598803E85E8448D9<br />
/// </para>
/// </remarks>
public static void SetTaxiLights(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x598803E85E8448D9, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7504C0F113AB50FC<br />
/// </para>
/// </remarks>
public static bool IsTaxiLightOn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x7504C0F113AB50FC, vehicle);
}

/// <summary>
/// garageName example &quot;Michael - Beverly Hills&quot;<br /><br />Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEE4490CD57BB3C2<br />
/// </para>
/// </remarks>
public static bool IsVehicleInGarageArea(string garageName, int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xCEE4490CD57BB3C2, garageName, vehicle);
}

/// <summary>
/// colorPrimary &amp; colorSecondary are the paint index for the vehicle.<br />For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK<br />-------------------------------------------------------------------------<br />Note: minimum color index is 0, maximum color index is (numColorIndices - 1)<br /><br />Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F1D4BE3A7F24601<br />
/// </para>
/// </remarks>
public static void SetVehicleColours(int /* Vehicle */ vehicle, int colorPrimary, int colorSecondary)
{
Function.Call((Hash)0x4F1D4BE3A7F24601, vehicle, colorPrimary, colorSecondary);
}

/// <summary>
/// It switch to highbeam when p1 is set to true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8B7FD87F0DDB421E<br />
/// </para>
/// </remarks>
public static void SetVehicleFullbeam(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8B7FD87F0DDB421E, vehicle, toggle);
}

/// <summary>
/// p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x07116E24E9D1929D<br />
/// </para>
/// </remarks>
public static void SetVehicleIsRacing(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x07116E24E9D1929D, vehicle, toggle);
}

/// <summary>
/// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7141766F91D15BEA<br />
/// </para>
/// </remarks>
public static void SetVehicleCustomPrimaryColour(int /* Vehicle */ vehicle, int r, int g, int b)
{
Function.Call((Hash)0x7141766F91D15BEA, vehicle, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB64CF2CCA9D95F52<br />
/// </para>
/// </remarks>
public static void GetVehicleCustomPrimaryColour(int /* Vehicle */ vehicle, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0xB64CF2CCA9D95F52, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x55E1D2758F34E437<br />
/// </para>
/// </remarks>
public static void ClearVehicleCustomPrimaryColour(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x55E1D2758F34E437, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF095C0405307B21B<br />
/// </para>
/// </remarks>
public static bool GetIsVehiclePrimaryColourCustom(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xF095C0405307B21B, vehicle);
}

/// <summary>
/// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36CED73BFED89754<br />
/// </para>
/// </remarks>
public static void SetVehicleCustomSecondaryColour(int /* Vehicle */ vehicle, int r, int g, int b)
{
Function.Call((Hash)0x36CED73BFED89754, vehicle, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8389CD56CA8072DC<br />
/// </para>
/// </remarks>
public static void GetVehicleCustomSecondaryColour(int /* Vehicle */ vehicle, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0x8389CD56CA8072DC, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FFBDEEC3E8E2009<br />
/// </para>
/// </remarks>
public static void ClearVehicleCustomSecondaryColour(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x5FFBDEEC3E8E2009, vehicle);
}

/// <summary>
/// Check if Vehicle Secondary is avaliable for customize
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x910A32E7AAD2656C<br />
/// </para>
/// </remarks>
public static bool GetIsVehicleSecondaryColourCustom(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x910A32E7AAD2656C, vehicle);
}

/// <summary>
/// The parameter fade is a value from 0-1, where 0 is fresh paint.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3AFDC536C3D01674<br />
/// </para>
/// </remarks>
public static void SetVehicleEnveffScale(int /* Vehicle */ vehicle, float fade)
{
Function.Call((Hash)0x3AFDC536C3D01674, vehicle, fade);
}

/// <summary>
/// The result is a value from 0-1, where 0 is fresh paint.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA82819CAC9C4C403<br />
/// </para>
/// </remarks>
public static float GetVehicleEnveffScale(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xA82819CAC9C4C403, vehicle);
}

/// <summary>
/// Hardcoded to not work in multiplayer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52BBA29D5EC69356<br />
/// </para>
/// </remarks>
public static void SetCanResprayVehicle(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x52BBA29D5EC69356, vehicle, state);
}

/// <summary>
/// Used for GTAO CEO/Associate spawned vehicles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xAB31EF4DE6800CE9<br />
/// </para>
/// </remarks>
public static void SetGoonBossVehicle(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xAB31EF4DE6800CE9, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x1B212B26DD3C04DF<br />
/// </para>
/// </remarks>
public static void SetOpenRearDoorsOnExplosion(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1B212B26DD3C04DF, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33506883545AC0DF<br />
/// </para>
/// </remarks>
public static void ForceSubmarineSurfaceMode(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x33506883545AC0DF, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0xC67DB108A9ADE3BE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void ForceSubmarineNeurtalBuoyancy(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xC67DB108A9ADE3BE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC59872A5134879C7<br />
/// </para>
/// </remarks>
public static void SetSubmarineCrushDepths(int /* Vehicle */ vehicle, bool p1, float depth1, float depth2, float depth3)
{
Function.Call((Hash)0xC59872A5134879C7, vehicle, p1, depth1, depth2, depth3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x3E71D0B300B7AA79<br />
/// </para>
/// </remarks>
public static bool GetSubmarineIsUnderDesignDepth(int /* Vehicle */ submarine)
{
return Function.Call<bool>((Hash)0x3E71D0B300B7AA79, submarine);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x093D6DDCA5B8FBAE<br />
/// </para>
/// </remarks>
public static int GetSubmarineNumberOfAirLeaks(int /* Vehicle */ submarine)
{
return Function.Call<int>((Hash)0x093D6DDCA5B8FBAE, submarine);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xED5EDE9E676643C9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetBoatIgnoreLandProbes(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xED5EDE9E676643C9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75DBEC174AEEAD10<br />
/// </para>
/// </remarks>
public static void SetBoatAnchor(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x75DBEC174AEEAD10, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x26C10ECBDA5D043B<br />
/// </para>
/// </remarks>
public static bool CanAnchorBoatHere(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x26C10ECBDA5D043B, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0x24F4121D07579880<br />
/// </para>
/// </remarks>
public static bool CanAnchorBoatHereIgnorePlayers(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x24F4121D07579880, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE3EBAAE484798530<br />
/// </para>
/// </remarks>
public static void SetBoatRemainsAnchoredWhilePlayerIsDriver(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xE3EBAAE484798530, vehicle, toggle);
}

/// <summary>
/// No observed effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB28B1FE5BFADD7F5<br />
/// </para>
/// </remarks>
public static void SetForceLowLodAnchorMode(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xB28B1FE5BFADD7F5, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE842A9398079BD82<br />
/// </para>
/// </remarks>
public static void SetBoatLowLodAnchorDistance(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0xE842A9398079BD82, vehicle, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xB0AD1238A709B1A2<br />
/// </para>
/// </remarks>
public static bool IsBoatAnchored(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xB0AD1238A709B1A2, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F719973E1445BA2<br />
/// </para>
/// </remarks>
public static void SetBoatSinksWhenWrecked(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8F719973E1445BA2, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xBD32E46AA95C1DD2<br />
/// </para>
/// </remarks>
public static void SetBoatWrecked(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xBD32E46AA95C1DD2, vehicle);
}

/// <summary>
/// Activate siren on vehicle (Only works if the vehicle has a siren).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4924635A19EB37D<br />
/// </para>
/// </remarks>
public static void SetVehicleSiren(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xF4924635A19EB37D, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C9BF537BE2634B2<br />
/// </para>
/// </remarks>
public static bool IsVehicleSirenOn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x4C9BF537BE2634B2, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5CC40FBCB586380<br />
/// </para>
/// </remarks>
public static bool IsVehicleSirenAudioOn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xB5CC40FBCB586380, vehicle);
}

/// <summary>
/// If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E8C8727991A8A0B<br />
/// </para>
/// </remarks>
public static void SetVehicleStrong(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x3E8C8727991A8A0B, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8386BFB614D06749<br />
/// </para>
/// </remarks>
public static void RemoveVehicleStuckCheck(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x8386BFB614D06749, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA19435F193E081AC<br />
/// </para>
/// </remarks>
public static void GetVehicleColours(int /* Vehicle */ vehicle, ref int colorPrimary, ref int colorSecondary)
{
var nativeAssistPointerVar0 = colorPrimary;
var nativeAssistPointerVar1 = colorSecondary;
unsafe {
Function.Call((Hash)0xA19435F193E081AC, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
colorPrimary = nativeAssistPointerVar0;
colorSecondary = nativeAssistPointerVar1;
}

/// <summary>
/// Check if a vehicle seat is free.<br /><br />seatIndex  = -1 being the driver seat.<br />Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.<br />isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x22AC59A870E6A669<br />
/// </para>
/// </remarks>
public static bool IsVehicleSeatFree(int /* Vehicle */ vehicle, int seatIndex, bool isTaskRunning)
{
return Function.Call<bool>((Hash)0x22AC59A870E6A669, vehicle, seatIndex, isTaskRunning);
}

/// <summary>
/// If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.<br /><br />Seat indexes:<br />-1 = Driver<br />0 = Front Right Passenger<br />1 = Back Left Passenger<br />2 = Back Right Passenger<br />3 = Further Back Left Passenger (vehicles &gt; 4 seats)<br />4 = Further Back Right Passenger (vehicles &gt; 4 seats)<br />etc.<br /><br />If p2 is true it uses a different GetOccupant function.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBB40DD2270B65366<br />
/// </para>
/// </remarks>
public static int GetPedInVehicleSeat(int /* Vehicle */ vehicle, int seatIndex, bool p2)
{
return Function.Call<int>((Hash)0xBB40DD2270B65366, vehicle, seatIndex, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x83F969AA1EE2A664<br />
/// </para>
/// </remarks>
public static int GetLastPedInVehicleSeat(int /* Vehicle */ vehicle, int seatIndex)
{
return Function.Call<int>((Hash)0x83F969AA1EE2A664, vehicle, seatIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB91B4C20085BD12F<br />
/// </para>
/// </remarks>
public static bool GetVehicleLightsState(int /* Vehicle */ vehicle, ref bool lightsOn, ref bool highbeamsOn)
{
var nativeAssistPointerVar0 = lightsOn;
var nativeAssistPointerVar1 = highbeamsOn;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xB91B4C20085BD12F, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
lightsOn = nativeAssistPointerVar0;
highbeamsOn = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// wheelID used for 4 wheelers seem to be (0, 1, 4, 5)<br />completely - is to check if tire completely gone from rim.<br /><br />&apos;0 = wheel_lf / bike, plane or jet front<br />&apos;1 = wheel_rf<br />&apos;2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left<br />&apos;3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right<br />&apos;4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left<br />&apos;5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right<br />&apos;45 = 6 wheels trailer mid wheel left<br />&apos;47 = 6 wheels trailer mid wheel right
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA291848A0815CA9<br />
/// </para>
/// </remarks>
public static bool IsVehicleTyreBurst(int /* Vehicle */ vehicle, int wheelID, bool completely)
{
return Function.Call<bool>((Hash)0xBA291848A0815CA9, vehicle, wheelID, completely);
}

/// <summary>
/// SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.<br /><br />Speed is in meters per second<br />You can convert meters/s to mph here:<br />http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB54A438726D25D5<br />
/// </para>
/// </remarks>
public static void SetVehicleForwardSpeed(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0xAB54A438726D25D5, vehicle, speed);
}

/// <summary>
/// Seems to be identical to SET_VEHICLE_FORWARD_SPEED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x6501129C9E0FFA05<br />
/// </para>
/// </remarks>
public static void SetVehicleForwardSpeedXy(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0x6501129C9E0FFA05, vehicle, speed);
}

/// <summary>
/// This native makes the vehicle stop immediately, as happens when we enter a MP garage.<br /><br />. distance defines how far it will travel until stopping. Garage doors use 3.0.<br /><br />. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x260BE8F09E326A20<br />
/// </para>
/// </remarks>
public static void BringVehicleToHalt(int /* Vehicle */ vehicle, float distance, int duration, bool unknown)
{
Function.Call((Hash)0x260BE8F09E326A20, vehicle, distance, duration, unknown);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xDCE97BDF8A0EABC8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleSteerForBuildings(int /* Vehicle */ vehicle, int /* bug: Any */ p1)
{
Function.Call((Hash)0xDCE97BDF8A0EABC8, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x9849DE24FCF23CCC<br />
/// </para>
/// </remarks>
public static void SetVehicleCausesSwerving(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x9849DE24FCF23CCC, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x8664170EF165C4A6<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetIgnorePlanesSmallPitchChange(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x8664170EF165C4A6, p0, p1);
}

/// <summary>
/// Stops CTaskBringVehicleToHalt
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x7C06330BFDDA182E<br />
/// </para>
/// </remarks>
public static void StopBringingVehicleToHalt(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x7C06330BFDDA182E, vehicle);
}

/// <summary>
/// Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xC69BB1D832A710EF<br />
/// </para>
/// </remarks>
public static bool IsVehicleBeingBroughtToHalt(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xC69BB1D832A710EF, vehicle);
}

/// <summary>
/// 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can&apos;t pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a &apos;lifted-value&apos; it will raise the car with no issue lol
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37EBBF3117BD6A25<br />
/// </para>
/// </remarks>
public static void SetForkliftForkHeight(int /* Vehicle */ vehicle, float height)
{
Function.Call((Hash)0x37EBBF3117BD6A25, vehicle, height);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57715966069157AD<br />
/// </para>
/// </remarks>
public static bool IsEntityAttachedToHandlerFrame(int /* Vehicle */ vehicle, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x57715966069157AD, vehicle, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x62CA17B74C435651<br />
/// </para>
/// </remarks>
public static bool IsAnyEntityAttachedToHandlerFrame(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x62CA17B74C435651, vehicle);
}

/// <summary>
/// Finds the vehicle that is carrying this entity with a handler frame.<br />The model of the entity must be prop_contr_03b_ld or the function will return 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x375E7FC44F21C8AB<br />
/// </para>
/// </remarks>
public static int FindHandlerVehicleContainerIsAttachedTo(int /* Entity */ entity)
{
return Function.Call<int>((Hash)0x375E7FC44F21C8AB, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89D630CF5EA96D23<br />
/// </para>
/// </remarks>
public static bool IsHandlerFrameLinedUpWithContainer(int /* Vehicle */ vehicle, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0x89D630CF5EA96D23, vehicle, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A98C2ECF57FA5D4<br />
/// </para>
/// </remarks>
public static void AttachContainerToHandlerFrameWhenLinedUp(int /* Vehicle */ vehicle, int /* Entity */ entity)
{
Function.Call((Hash)0x6A98C2ECF57FA5D4, vehicle, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C0043FDFF6436BC<br />
/// </para>
/// </remarks>
public static void DetachContainerFromHandlerFrame(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x7C0043FDFF6436BC, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8AA9180DE2FEDD45<br />
/// </para>
/// </remarks>
public static void SetVehicleDisableHeightMapAvoidance(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x8AA9180DE2FEDD45, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A6A279F3AA4FD70<br />
/// </para>
/// </remarks>
public static void SetBoatDisableAvoidance(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x0A6A279F3AA4FD70, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x634148744F385576<br />
/// </para>
/// </remarks>
public static bool IsHeliLandingAreaBlocked(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x634148744F385576, vehicle);
}

/// <summary>
/// Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x107A473D7A6647A9<br />
/// </para>
/// </remarks>
public static void SetShortSlowdownForLanding(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x107A473D7A6647A9, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6F13851780394DA<br />
/// </para>
/// </remarks>
public static void SetHeliTurbulenceScalar(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0xE6F13851780394DA, vehicle, p1);
}

/// <summary>
/// Initially used in Max Payne 3, that&apos;s why we know the name.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xFC40CBF7B90CA77C<br />
/// </para>
/// </remarks>
public static void SetCarBootOpen(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xFC40CBF7B90CA77C, vehicle);
}

/// <summary>
/// &quot;To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)<br />to burst all tyres type it 8 times where p1 = 0 to 7.<br /><br />p3 seems to be how much damage it has taken. 0 doesn&apos;t deflate them, 1000 completely deflates them.<br /><br />&apos;0 = wheel_lf / bike, plane or jet front<br />&apos;1 = wheel_rf<br />&apos;2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left<br />&apos;3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right<br />&apos;4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left<br />&apos;5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right<br />&apos;45 = 6 wheels trailer mid wheel left<br />&apos;47 = 6 wheels trailer mid wheel right
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEC6A202EE4960385<br />
/// </para>
/// </remarks>
public static void SetVehicleTyreBurst(int /* Vehicle */ vehicle, int index, bool onRim, float p3)
{
Function.Call((Hash)0xEC6A202EE4960385, vehicle, index, onRim, p3);
}

/// <summary>
/// Closes all doors of a vehicle:
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x781B3D62BB013EF5<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorsShut(int /* Vehicle */ vehicle, bool closeInstantly)
{
Function.Call((Hash)0x781B3D62BB013EF5, vehicle, closeInstantly);
}

/// <summary>
/// Allows you to toggle bulletproof tires.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEB9DC3C7D8596C46<br />
/// </para>
/// </remarks>
public static void SetVehicleTyresCanBurst(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xEB9DC3C7D8596C46, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x678B9BB8C3F58FEB<br />
/// </para>
/// </remarks>
public static bool GetVehicleTyresCanBurst(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x678B9BB8C3F58FEB, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29B18B4FD460CA8F<br />
/// </para>
/// </remarks>
public static void SetVehicleWheelsCanBreak(int /* Vehicle */ vehicle, bool enabled)
{
Function.Call((Hash)0x29B18B4FD460CA8F, vehicle, enabled);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7C65DAC73C35C862<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorOpen(int /* Vehicle */ vehicle, int doorId, bool loose, bool openInstantly)
{
Function.Call((Hash)0x7C65DAC73C35C862, vehicle, doorId, loose, openInstantly);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT<br /><br />Usually used alongside other vehicle door natives.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x3B458DDB57038F08<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorAutoLock(int /* Vehicle */ vehicle, int doorId, bool toggle)
{
Function.Call((Hash)0x3B458DDB57038F08, vehicle, doorId, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xA247F9EF01D8082E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetFleeingVehiclesUseSwitchedOffNodes(int /* bug: Any */ p0)
{
Function.Call((Hash)0xA247F9EF01D8082E, p0);
}

/// <summary>
/// windowIndex:<br />0 = Front Right Window<br />1 = Front Left Window<br />2 = Back Right Window<br />3 = Back Left Window<br />4 = Unknown<br />5 = Unknown<br />6 = Windscreen<br />7 = Rear Windscreen
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA711568EEDB43069<br />
/// </para>
/// </remarks>
public static void RemoveVehicleWindow(int /* Vehicle */ vehicle, int windowIndex)
{
Function.Call((Hash)0xA711568EEDB43069, vehicle, windowIndex);
}

/// <summary>
/// Roll down all the windows of the vehicle passed through the first parameter.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x85796B0549DDE156<br />
/// </para>
/// </remarks>
public static void RollDownWindows(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x85796B0549DDE156, vehicle);
}

/// <summary>
/// windowIndex:<br />0 = Front Left Window<br />1 = Front Right Window<br />2 = Rear Left Window<br />3 = Rear Right Window<br />4 = Front Windscreen<br />5 = Rear Windscreen<br />6 = Mid Left<br />7 = Mid Right<br />8 = Invalid
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7AD9E6CE657D69E3<br />
/// </para>
/// </remarks>
public static void RollDownWindow(int /* Vehicle */ vehicle, int windowIndex)
{
Function.Call((Hash)0x7AD9E6CE657D69E3, vehicle, windowIndex);
}

/// <summary>
/// windowIndex:<br />0 = Front Left Window<br />1 = Front Right Window<br />2 = Rear Left Window<br />3 = Rear Right Window<br />4 = Front Windscreen<br />5 = Rear Windscreen<br />6 = Mid Left<br />7 = Mid Right<br />8 = Invalid
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x602E548F46E24D59<br />
/// </para>
/// </remarks>
public static void RollUpWindow(int /* Vehicle */ vehicle, int windowIndex)
{
Function.Call((Hash)0x602E548F46E24D59, vehicle, windowIndex);
}

/// <summary>
/// windowIndex:<br />0 = Front Left Window<br />1 = Front Right Window<br />2 = Rear Left Window<br />3 = Rear Right Window<br />4 = Front Windscreen<br />5 = Rear Windscreen<br />6 = Mid Left<br />7 = Mid Right<br />8 = Invalid
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9E5B5E4D2CCD2259<br />
/// </para>
/// </remarks>
public static void SmashVehicleWindow(int /* Vehicle */ vehicle, int windowIndex)
{
Function.Call((Hash)0x9E5B5E4D2CCD2259, vehicle, windowIndex);
}

/// <summary>
/// windowIndex:<br />0 = Front Left Window<br />1 = Front Right Window<br />2 = Rear Left Window<br />3 = Rear Right Window<br />4 = Front Windscreen<br />5 = Rear Windscreen<br />6 = Mid Left<br />7 = Mid Right<br />8 = Invalid<br /><br />Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.<br /><br />Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x772282EBEB95E682<br />
/// </para>
/// </remarks>
public static void FixVehicleWindow(int /* Vehicle */ vehicle, int windowIndex)
{
Function.Call((Hash)0x772282EBEB95E682, vehicle, windowIndex);
}

/// <summary>
/// Detaches the vehicle&apos;s windscreen.<br />For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D645D59FB5F5AD3<br />
/// </para>
/// </remarks>
public static void PopOutVehicleWindscreen(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x6D645D59FB5F5AD3, vehicle);
}

/// <summary>
/// Pops off the &quot;roof&quot; bone in the direction of the specified offset from the vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE38CB9D7D39FDBCC<br />
/// </para>
/// </remarks>
public static void PopOffVehicleRoofWithImpulse(int /* Vehicle */ vehicle, float x, float y, float z)
{
Function.Call((Hash)0xE38CB9D7D39FDBCC, vehicle, x, y, z);
}

/// <summary>
/// set&apos;s if the vehicle has lights or not.<br />not an on off toggle.<br />p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams<br />p1 = 1 ;vehicle doesn&apos;t have lights, always off<br />p1 = 2 ;vehicle has always on lights<br />p1 = 3 ;or even larger like 4,5,... normal lights like =1<br />note1: when using =2 on day it&apos;s lowbeam,highbeam<br />but at night it&apos;s lowbeam,lowbeam,highbeam<br />note2: when using =0 it&apos;s affected by day or night for highbeams don&apos;t exist in daytime.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x34E710FF01247C5A<br />
/// </para>
/// </remarks>
public static void SetVehicleLights(int /* Vehicle */ vehicle, int state)
{
Function.Call((Hash)0x34E710FF01247C5A, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC45C27EF50F36ADC<br />
/// </para>
/// </remarks>
public static void SetVehicleUsePlayerLightSettings(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xC45C27EF50F36ADC, vehicle, toggle);
}

/// <summary>
/// p1 can be either 0, 1 or 2.<br /><br />Determines how vehicle lights behave when toggled.<br /><br />0 = Default (Lights can be toggled between off, normal and high beams)<br />1 = Lights Disabled (Lights are fully disabled, cannot be toggled)<br />2 = Always On (Lights can be toggled between normal and high beams)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1FD09E7390A74D54<br />
/// </para>
/// </remarks>
public static void SetVehicleHeadlightShadows(int /* Vehicle */ vehicle, int p1)
{
Function.Call((Hash)0x1FD09E7390A74D54, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCDE5E70C1DDB954C<br />
/// </para>
/// </remarks>
public static void SetVehicleAlarm(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0xCDE5E70C1DDB954C, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8FF7AB45305C345<br />
/// </para>
/// </remarks>
public static void StartVehicleAlarm(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xB8FF7AB45305C345, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4319E335B71FFF34<br />
/// </para>
/// </remarks>
public static bool IsVehicleAlarmActivated(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x4319E335B71FFF34, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC2042F090AF6AD3<br />
/// </para>
/// </remarks>
public static void SetVehicleInteriorlight(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xBC2042F090AF6AD3, vehicle, toggle);
}

/// <summary>
/// Sets some bit of vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x8821196D91FA2DE5<br />
/// </para>
/// </remarks>
public static void SetVehicleForceInteriorlight(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8821196D91FA2DE5, vehicle, toggle);
}

/// <summary>
/// multiplier = brightness of head lights.<br />this value isn&apos;t capped afaik.<br /><br />multiplier = 0.0 no lights<br />multiplier = 1.0 default game value<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB385454F8791F57C<br />
/// </para>
/// </remarks>
public static void SetVehicleLightMultiplier(int /* Vehicle */ vehicle, float multiplier)
{
Function.Call((Hash)0xB385454F8791F57C, vehicle, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3C7D42D58F770B54<br />
/// </para>
/// </remarks>
public static void AttachVehicleToTrailer(int /* Vehicle */ vehicle, int /* Vehicle */ trailer, float radius)
{
Function.Call((Hash)0x3C7D42D58F770B54, vehicle, trailer, radius);
}

/// <summary>
/// This is the proper way of attaching vehicles to the car carrier, it&apos;s what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16B5E274BDE402F8<br />
/// </para>
/// </remarks>
public static void AttachVehicleOnToTrailer(int /* Vehicle */ vehicle, int /* Vehicle */ trailer, float offsetX, float offsetY, float offsetZ, float coordsX, float coordsY, float coordsZ, float rotationX, float rotationY, float rotationZ, float disableCollisions)
{
Function.Call((Hash)0x16B5E274BDE402F8, vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x374706271354CB18<br />
/// </para>
/// </remarks>
public static void StabiliseEntityAttachedToHeli(int /* Vehicle */ vehicle, int /* Entity */ entity, float p2)
{
Function.Call((Hash)0x374706271354CB18, vehicle, entity, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90532EDF0D2BDD86<br />
/// </para>
/// </remarks>
public static void DetachVehicleFromTrailer(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x90532EDF0D2BDD86, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE7CF3C4F9F489F0C<br />
/// </para>
/// </remarks>
public static bool IsVehicleAttachedToTrailer(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xE7CF3C4F9F489F0C, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A8F319B392E7B3F<br />
/// </para>
/// </remarks>
public static void SetTrailerInverseMassScale(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0x2A8F319B392E7B3F, vehicle, p1);
}

/// <summary>
/// in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95CF53B3D687F9FA<br />
/// </para>
/// </remarks>
public static void SetTrailerLegsRaised(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x95CF53B3D687F9FA, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x878C75C09FBDB942<br />
/// </para>
/// </remarks>
public static void SetTrailerLegsLowered(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x878C75C09FBDB942, vehicle);
}

/// <summary>
/// tyreIndex = 0 to 4 on normal vehicles<br /><br />&apos;0 = wheel_lf / bike, plane or jet front<br />&apos;1 = wheel_rf<br />&apos;2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left<br />&apos;3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right<br />&apos;4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left<br />&apos;5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right<br />&apos;45 = 6 wheels trailer mid wheel left<br />&apos;47 = 6 wheels trailer mid wheel right
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E13FC662B882D1D<br />
/// </para>
/// </remarks>
public static void SetVehicleTyreFixed(int /* Vehicle */ vehicle, int tyreIndex)
{
Function.Call((Hash)0x6E13FC662B882D1D, vehicle, tyreIndex);
}

/// <summary>
/// Sets a vehicle&apos;s license plate text.  8 chars maximum.<br /><br />Example:<br />Ped playerPed = PLAYER::PLAYER_PED_ID();<br />Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);<br />char *plateText = &quot;KING&quot;;<br />VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x95A88F0B409CDA47<br />
/// </para>
/// </remarks>
public static void SetVehicleNumberPlateText(int /* Vehicle */ vehicle, string plateText)
{
Function.Call((Hash)0x95A88F0B409CDA47, vehicle, plateText);
}

/// <summary>
/// Returns the license plate text from a vehicle. 8 chars maximum.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7CE1CCB9B293020E<br />
/// </para>
/// </remarks>
public static string GetVehicleNumberPlateText(int /* Vehicle */ vehicle)
{
return Function.Call<string>((Hash)0x7CE1CCB9B293020E, vehicle);
}

/// <summary>
/// Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C4D6B2644F458CB<br />
/// </para>
/// </remarks>
public static int GetNumberOfVehicleNumberPlates()
{
return Function.Call<int>((Hash)0x4C4D6B2644F458CB);
}

/// <summary>
/// Plates:<br />Blue/White - 0<br />Yellow/black - 1<br />Yellow/Blue - 2<br />Blue/White2 - 3<br />Blue/White3 - 4<br />Yankton - 5
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9088EB5A43FFB0A1<br />
/// </para>
/// </remarks>
public static void SetVehicleNumberPlateTextIndex(int /* Vehicle */ vehicle, int plateIndex)
{
Function.Call((Hash)0x9088EB5A43FFB0A1, vehicle, plateIndex);
}

/// <summary>
/// Returns the PlateType of a vehicle<br />      Blue_on_White_1 = 3,<br />      Blue_on_White_2 = 0,<br />      Blue_on_White_3 = 4,<br />      Yellow_on_Blue = 2,<br />       Yellow_on_Black = 1,<br />      North_Yankton = 5,
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF11BC2DD9A3E7195<br />
/// </para>
/// </remarks>
public static int GetVehicleNumberPlateTextIndex(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xF11BC2DD9A3E7195, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x80D9F74197EA47D9<br />
/// </para>
/// </remarks>
public static void SetRandomTrains(bool toggle)
{
Function.Call((Hash)0x80D9F74197EA47D9, toggle);
}

/// <summary>
/// Train models HAVE TO be loaded (requested) before you use this.<br />For variation 15 - request:<br /><br />freight<br />freightcar<br />freightgrain<br />freightcont1<br />freightcont2<br />freighttrailer<br /><br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x63C6CCA8E68AE8C8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int CreateMissionTrain(int variation, float x, float y, float z, bool direction, int /* bug: Any */ p5, int /* bug: Any */ p6)
{
return Function.Call<int>((Hash)0x63C6CCA8E68AE8C8, variation, x, y, z, direction, p5, p6);
}

/// <summary>
/// Toggles whether ambient trains can spawn on the specified track or not<br /><br />`trackId` is the internal id of the train track to switch.<br />`state` is whether ambient trains can spawn or not<br /><br />trackIds<br />0 (`trains1.dat`) Main track around SA<br />1 (`trains2.dat`) Davis Quartz Quarry branch<br />2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.<br />3 (`trains4.dat`) Metro track circuit<br />4 (`trains5.dat`) Branch in Mirror Park Railyard<br />5 (`trains6.dat`) Branch in Mirror Park Railyard<br />6 (`trains7.dat`) LS branch to Mirror Park Railyard<br />7 (`trains8.dat`) Overground part of metro track along Forum Dr.<br />8 (`trains9.dat`) Branch to Mirror Park Railyard<br />9 (`trains10.dat`) Yankton train<br />10 (`trains11.dat`) Part of metro track near mission row<br />11 (`trains12.dat`) Yankton prologue mission train<br />Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD813BB7DB977F20<br />
/// </para>
/// </remarks>
public static void SwitchTrainTrack(int trackId, bool state)
{
Function.Call((Hash)0xFD813BB7DB977F20, trackId, state);
}

/// <summary>
/// Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000<br /><br />trackIndex: 0 - 26<br />Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21973BBF8D17EDFA<br />
/// </para>
/// </remarks>
public static void SetTrainTrackSpawnFrequency(int trackIndex, int frequency)
{
Function.Call((Hash)0x21973BBF8D17EDFA, trackIndex, frequency);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x2310A8F9421EBF43<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AllowTrainToBeRemovedByPopulation(int /* bug: Any */ p0)
{
Function.Call((Hash)0x2310A8F9421EBF43, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x736A718577F39C7D<br />
/// </para>
/// </remarks>
public static void DeleteAllTrains()
{
Function.Call((Hash)0x736A718577F39C7D);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA0BC91BE0B796E3<br />
/// </para>
/// </remarks>
public static void SetTrainSpeed(int /* Vehicle */ train, float speed)
{
Function.Call((Hash)0xAA0BC91BE0B796E3, train, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x16469284DB8C62B5<br />
/// </para>
/// </remarks>
public static void SetTrainCruiseSpeed(int /* Vehicle */ train, float speed)
{
Function.Call((Hash)0x16469284DB8C62B5, train, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84436EC293B1415F<br />
/// </para>
/// </remarks>
public static void SetRandomBoats(bool toggle)
{
Function.Call((Hash)0x84436EC293B1415F, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xDA5E12F728DB30CA<br />
/// </para>
/// </remarks>
public static void SetRandomBoatsMp(bool toggle)
{
Function.Call((Hash)0xDA5E12F728DB30CA, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AFD795EEAC8D30D<br />
/// </para>
/// </remarks>
public static void SetGarbageTrucks(bool toggle)
{
Function.Call((Hash)0x2AFD795EEAC8D30D, toggle);
}

/// <summary>
/// Maximum amount of vehicles with vehicle stuck check appears to be 16.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57E4C39DE5EE8470<br />
/// </para>
/// </remarks>
public static bool DoesVehicleHaveStuckVehicleCheck(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x57E4C39DE5EE8470, vehicle);
}

/// <summary>
/// See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21543C612379DB3C<br />
/// </para>
/// </remarks>
public static int GetVehicleRecordingId(int recording, string script)
{
return Function.Call<int>((Hash)0x21543C612379DB3C, recording, script);
}

/// <summary>
/// Request the vehicle recording defined by the lowercase format string &quot;%s%03d.yvr&quot;. For example, REQUEST_VEHICLE_RECORDING(1, &quot;FBIs1UBER&quot;) corresponds to fbis1uber001.yvr.<br />For all vehicle recording/playback natives, &quot;script&quot; is a common prefix that usually corresponds to the script/mission the recording is used in, &quot;recording&quot; is its int suffix, and &quot;id&quot; (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.<br />Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAF514CABE74CBF15<br />
/// </para>
/// </remarks>
public static void RequestVehicleRecording(int recording, string script)
{
Function.Call((Hash)0xAF514CABE74CBF15, recording, script);
}

/// <summary>
/// See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x300D614A4C785FC4<br />
/// </para>
/// </remarks>
public static bool HasVehicleRecordingBeenLoaded(int recording, string script)
{
return Function.Call<bool>((Hash)0x300D614A4C785FC4, recording, script);
}

/// <summary>
/// See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF1160ACCF98A3FC8<br />
/// </para>
/// </remarks>
public static void RemoveVehicleRecording(int recording, string script)
{
Function.Call((Hash)0xF1160ACCF98A3FC8, recording, script);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92523B76657A517D<br />
/// </para>
/// </remarks>
public static Vector3 GetPositionOfVehicleRecordingIdAtTime(int id, float time)
{
return Function.Call<Vector3>((Hash)0x92523B76657A517D, id, time);
}

/// <summary>
/// This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.<br /><br />See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD242728AA6F0FBA2<br />
/// </para>
/// </remarks>
public static Vector3 GetPositionOfVehicleRecordingAtTime(int recording, float time, string script)
{
return Function.Call<Vector3>((Hash)0xD242728AA6F0FBA2, recording, time, script);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0F2103EFAF8CBA7<br />
/// </para>
/// </remarks>
public static Vector3 GetRotationOfVehicleRecordingIdAtTime(int id, float time)
{
return Function.Call<Vector3>((Hash)0xF0F2103EFAF8CBA7, id, time);
}

/// <summary>
/// This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.<br /><br />See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2058206FBE79A8AD<br />
/// </para>
/// </remarks>
public static Vector3 GetRotationOfVehicleRecordingAtTime(int recording, float time, string script)
{
return Function.Call<Vector3>((Hash)0x2058206FBE79A8AD, recording, time, script);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x102D125411A7B6E6<br />
/// </para>
/// </remarks>
public static float GetTotalDurationOfVehicleRecordingId(int id)
{
return Function.Call<float>((Hash)0x102D125411A7B6E6, id);
}

/// <summary>
/// See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E48D1C262390950<br />
/// </para>
/// </remarks>
public static float GetTotalDurationOfVehicleRecording(int recording, string script)
{
return Function.Call<float>((Hash)0x0E48D1C262390950, recording, script);
}

/// <summary>
/// Distance traveled in the vehicles current recording.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2DACD605FC681475<br />
/// </para>
/// </remarks>
public static float GetPositionInRecording(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x2DACD605FC681475, vehicle);
}

/// <summary>
/// Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5746F3A7AB7FE544<br />
/// </para>
/// </remarks>
public static float GetTimePositionInRecording(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x5746F3A7AB7FE544, vehicle);
}

/// <summary>
/// p3 is some flag related to &apos;trailers&apos; (invokes CVehicle::GetTrailer).<br /><br />See REQUEST_VEHICLE_RECORDING
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3F878F92B3A7A071<br />
/// </para>
/// </remarks>
public static void StartPlaybackRecordedVehicle(int /* Vehicle */ vehicle, int recording, string script, bool p3)
{
Function.Call((Hash)0x3F878F92B3A7A071, vehicle, recording, script, p3);
}

/// <summary>
/// flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.<br /><br />time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D80FD645D4DA346<br />
/// </para>
/// </remarks>
public static void StartPlaybackRecordedVehicleWithFlags(int /* Vehicle */ vehicle, int recording, string script, int flags, int time, int drivingStyle)
{
Function.Call((Hash)0x7D80FD645D4DA346, vehicle, recording, script, flags, time, drivingStyle);
}

/// <summary>
/// Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F2E4E06DEA8992B<br />
/// </para>
/// </remarks>
public static void ForcePlaybackRecordedVehicleUpdate(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x1F2E4E06DEA8992B, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54833611C17ABDEA<br />
/// </para>
/// </remarks>
public static void StopPlaybackRecordedVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x54833611C17ABDEA, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x632A689BF42301B1<br />
/// </para>
/// </remarks>
public static void PausePlaybackRecordedVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x632A689BF42301B1, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8879EE09268305D5<br />
/// </para>
/// </remarks>
public static void UnpausePlaybackRecordedVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x8879EE09268305D5, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1C8A4C2C19E68EEC<br />
/// </para>
/// </remarks>
public static bool IsPlaybackGoingOnForVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x1C8A4C2C19E68EEC, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAEA8FD591FAD4106<br />
/// </para>
/// </remarks>
public static bool IsPlaybackUsingAiGoingOnForVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xAEA8FD591FAD4106, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42BC05C27A946054<br />
/// </para>
/// </remarks>
public static int GetCurrentPlaybackForVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x42BC05C27A946054, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB8E2EDA0C0A5883<br />
/// </para>
/// </remarks>
public static void SkipToEndAndStopPlaybackRecordedVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xAB8E2EDA0C0A5883, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6683AB880E427778<br />
/// </para>
/// </remarks>
public static void SetPlaybackSpeed(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0x6683AB880E427778, vehicle, speed);
}

/// <summary>
/// AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.<br /><br />FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29DE5FA52D00428C<br />
/// </para>
/// </remarks>
public static void StartPlaybackRecordedVehicleUsingAi(int /* Vehicle */ vehicle, int recording, string script, float speed, int drivingStyle)
{
Function.Call((Hash)0x29DE5FA52D00428C, vehicle, recording, script, speed, drivingStyle);
}

/// <summary>
/// SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9438F7AD68771A20<br />
/// </para>
/// </remarks>
public static void SkipTimeInPlaybackRecordedVehicle(int /* Vehicle */ vehicle, float time)
{
Function.Call((Hash)0x9438F7AD68771A20, vehicle, time);
}

/// <summary>
/// Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA549C3B37EA28131<br />
/// </para>
/// </remarks>
public static void SetPlaybackToUseAi(int /* Vehicle */ vehicle, int drivingStyle)
{
Function.Call((Hash)0xA549C3B37EA28131, vehicle, drivingStyle);
}

/// <summary>
/// Time is number of milliseconds before reverting, zero for indefinitely.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E63860BBB190730<br />
/// </para>
/// </remarks>
public static void SetPlaybackToUseAiTryToRevertBackLater(int /* Vehicle */ vehicle, int time, int drivingStyle, bool p3)
{
Function.Call((Hash)0x6E63860BBB190730, vehicle, time, drivingStyle, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5845066D8A1EA7F7<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAdditionalRotationForRecordedVehiclePlayback(int /* Vehicle */ vehicle, float x, float y, float z, int /* bug: Any */ p4)
{
Function.Call((Hash)0x5845066D8A1EA7F7, vehicle, x, y, z, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x796A877E459B99EA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPositionOffsetForRecordedVehiclePlayback(int /* bug: Any */ p0, float p1, float p2, float p3)
{
Function.Call((Hash)0x796A877E459B99EA, p0, p1, p2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFAF2A78061FD9EF4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetGlobalPositionOffsetForRecordedVehiclePlayback(int /* bug: Any */ p0, float p1, float p2, float p3)
{
Function.Call((Hash)0xFAF2A78061FD9EF4, p0, p1, p2, p3);
}

/// <summary>
/// A vehicle recording playback flag only used in jewelry_heist
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x063AE2B2CC273588<br />
/// </para>
/// </remarks>
public static void SetShouldLerpFromAiToFullRecording(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x063AE2B2CC273588, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x786A4EB67B01BF0B<br />
/// </para>
/// </remarks>
public static void ExplodeVehicleInCutscene(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x786A4EB67B01BF0B, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FA9923062DD396C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AddVehicleStuckCheckWithWarp(int /* bug: Any */ p0, float p1, int /* bug: Any */ p2, bool p3, bool p4, bool p5, int /* bug: Any */ p6)
{
Function.Call((Hash)0x2FA9923062DD396C, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// seems to make the vehicle stop spawning naturally in traffic. Here&apos;s an essential example:<br /><br />VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY(&quot;taco&quot;), true);<br /><br />god I hate taco vans<br /><br />Confirmed to work? Needs to be looped? Can not get it to work.<br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0FC2D89AC25A5814<br />
/// </para>
/// </remarks>
public static void SetVehicleModelIsSuppressed(uint model, bool suppressed)
{
Function.Call((Hash)0x0FC2D89AC25A5814, model, suppressed);
}

/// <summary>
/// Gets a random vehicle in a sphere at the specified position, of the specified radius.<br /><br />x: The X-component of the position of the sphere.<br />y: The Y-component of the position of the sphere.<br />z: The Z-component of the position of the sphere.<br />radius: The radius of the sphere. Max is 9999.9004.<br />modelHash: The vehicle model to limit the selection to. Pass 0 for any model.<br />flags: The bitwise flags that modifies the behaviour of this function.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x386F6CE5BAF6091C<br />
/// </para>
/// </remarks>
public static int GetRandomVehicleInSphere(float x, float y, float z, float radius, uint modelHash, int flags)
{
return Function.Call<int>((Hash)0x386F6CE5BAF6091C, x, y, z, radius, modelHash, flags);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC5574E0AEB86BA68<br />
/// </para>
/// </remarks>
public static int GetRandomVehicleFrontBumperInSphere(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
{
return Function.Call<int>((Hash)0xC5574E0AEB86BA68, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB50807EABE20A8DC<br />
/// </para>
/// </remarks>
public static int GetRandomVehicleBackBumperInSphere(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
{
return Function.Call<int>((Hash)0xB50807EABE20A8DC, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// Example usage<br />VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) <br /><br />x, y, z: Position to get closest vehicle to.<br />radius: Max radius to get a vehicle.<br />modelHash: Limit to vehicles with this model. 0 for any.<br />flags: The bitwise flags altering the function&apos;s behaviour.<br /><br />Does not return police cars or helicopters.<br /><br />It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason<br /><br />Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. <br /><br />These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.<br />Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles<br /><br />Conversion of found flags to binary: https://pastebin.com/kghNFkRi<br /><br />At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. <br /><br />It&apos;s probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT<br /><br />-------------------------------------------------------------------------<br /><br />Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF73EB622C4F1689B<br />
/// </para>
/// </remarks>
public static int GetClosestVehicle(float x, float y, float z, float radius, uint modelHash, int flags)
{
return Function.Call<int>((Hash)0xF73EB622C4F1689B, x, y, z, radius, modelHash, flags);
}

/// <summary>
/// Corrected p1. it&apos;s basically the &apos;carriage/trailer number&apos;. So if the train has 3 trailers you&apos;d call the native once with a var or 3 times with 1, 2, 3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x08AAFD0814722BC3<br />
/// </para>
/// </remarks>
public static int GetTrainCarriage(int /* Vehicle */ train, int trailerNumber)
{
return Function.Call<int>((Hash)0x08AAFD0814722BC3, train, trailerNumber);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xAD464F2E18836BFC<br />
/// </para>
/// </remarks>
public static bool IsMissionTrain(int /* Vehicle */ train)
{
return Function.Call<bool>((Hash)0xAD464F2E18836BFC, train);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5B76B14AE875C795<br />
/// </para>
/// </remarks>
public static void DeleteMissionTrain(ref int /* Vehicle* */ train)
{
var nativeAssistPointerVar0 = train;
unsafe {
Function.Call((Hash)0x5B76B14AE875C795, &nativeAssistPointerVar0);
}
train = nativeAssistPointerVar0;
}

/// <summary>
/// p1 is always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBBE7648349B49BE8<br />
/// </para>
/// </remarks>
public static void SetMissionTrainAsNoLongerNeeded(ref int /* Vehicle* */ train, bool p1)
{
var nativeAssistPointerVar0 = train;
unsafe {
Function.Call((Hash)0xBBE7648349B49BE8, &nativeAssistPointerVar0, p1);
}
train = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x591CA673AA6AB736<br />
/// </para>
/// </remarks>
public static void SetMissionTrainCoords(int /* Vehicle */ train, float x, float y, float z)
{
Function.Call((Hash)0x591CA673AA6AB736, train, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45A9187928F4B9E3<br />
/// </para>
/// </remarks>
public static bool IsThisModelABoat(uint model)
{
return Function.Call<bool>((Hash)0x45A9187928F4B9E3, model);
}

/// <summary>
/// Checks if model is a boat, then checks for FLAG_IS_JETSKI.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9537097412CF75FE<br />
/// </para>
/// </remarks>
public static bool IsThisModelAJetski(uint model)
{
return Function.Call<bool>((Hash)0x9537097412CF75FE, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA0948AB42D7BA0DE<br />
/// </para>
/// </remarks>
public static bool IsThisModelAPlane(uint model)
{
return Function.Call<bool>((Hash)0xA0948AB42D7BA0DE, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCE4334788AF94EA<br />
/// </para>
/// </remarks>
public static bool IsThisModelAHeli(uint model)
{
return Function.Call<bool>((Hash)0xDCE4334788AF94EA, model);
}

/// <summary>
/// To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7F6DB52EEFC96DF8<br />
/// </para>
/// </remarks>
public static bool IsThisModelACar(uint model)
{
return Function.Call<bool>((Hash)0x7F6DB52EEFC96DF8, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB935175B22E822B<br />
/// </para>
/// </remarks>
public static bool IsThisModelATrain(uint model)
{
return Function.Call<bool>((Hash)0xAB935175B22E822B, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB50C0B0CEDC6CE84<br />
/// </para>
/// </remarks>
public static bool IsThisModelABike(uint model)
{
return Function.Call<bool>((Hash)0xB50C0B0CEDC6CE84, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF94DD42F63BDED2<br />
/// </para>
/// </remarks>
public static bool IsThisModelABicycle(uint model)
{
return Function.Call<bool>((Hash)0xBF94DD42F63BDED2, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39DAC362EE65FA28<br />
/// </para>
/// </remarks>
public static bool IsThisModelAQuadbike(uint model)
{
return Function.Call<bool>((Hash)0x39DAC362EE65FA28, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x633F6F44A537EBB6<br />
/// </para>
/// </remarks>
public static bool IsThisModelAnAmphibiousCar(uint model)
{
return Function.Call<bool>((Hash)0x633F6F44A537EBB6, model);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xA1A9FC1C76A6730D<br />
/// </para>
/// </remarks>
public static bool IsThisModelAnAmphibiousQuadbike(uint model)
{
return Function.Call<bool>((Hash)0xA1A9FC1C76A6730D, model);
}

/// <summary>
/// Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);<br /><br />this native works on planes to?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA178472EBB8AE60D<br />
/// </para>
/// </remarks>
public static void SetHeliBladesFullSpeed(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xA178472EBB8AE60D, vehicle);
}

/// <summary>
/// Sets the speed of the helicopter blades in percentage of the full speed.<br /><br />vehicleHandle: The helicopter.<br />speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFD280B4D7F3ABC4D<br />
/// </para>
/// </remarks>
public static void SetHeliBladesSpeed(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0xFD280B4D7F3ABC4D, vehicle, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99CAD8E7AFDB60FA<br />
/// </para>
/// </remarks>
public static void ForceSubThrottleForTime(int /* Vehicle */ vehicle, float p1, float p2)
{
Function.Call((Hash)0x99CAD8E7AFDB60FA, vehicle, p1, p2);
}

/// <summary>
/// This has not yet been tested - it&apos;s just an assumption of what the types could be.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3750146A28097A82<br />
/// </para>
/// </remarks>
public static void SetVehicleCanBeTargetted(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x3750146A28097A82, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBC631F109350B8C<br />
/// </para>
/// </remarks>
public static void SetDontAllowPlayerToEnterVehicleIfLockedForPlayer(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xDBC631F109350B8C, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C7028F78FFD3681<br />
/// </para>
/// </remarks>
public static void SetVehicleCanBeVisiblyDamaged(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x4C7028F78FFD3681, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1AA8A837D2169D94<br />
/// </para>
/// </remarks>
public static void SetVehicleHasUnbreakableLights(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1AA8A837D2169D94, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2311DD7159F00582<br />
/// </para>
/// </remarks>
public static void SetVehicleRespectsLocksWhenHasDriver(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x2311DD7159F00582, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x065D03A9D6B2C6B5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleCanEjectPassengersIfLocked(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x065D03A9D6B2C6B5, p0, p1);
}

/// <summary>
/// Dirt level 0..15
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F17BC8BA08DA62B<br />
/// </para>
/// </remarks>
public static float GetVehicleDirtLevel(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x8F17BC8BA08DA62B, vehicle);
}

/// <summary>
/// You can&apos;t use values greater than 15.0<br />Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79D3B596FE44EE8B<br />
/// </para>
/// </remarks>
public static void SetVehicleDirtLevel(int /* Vehicle */ vehicle, float dirtLevel)
{
Function.Call((Hash)0x79D3B596FE44EE8B, vehicle, dirtLevel);
}

/// <summary>
/// Appears to return true if the vehicle has any damage, including cosmetically.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCDC5017D3CE1E9E<br />
/// </para>
/// </remarks>
public static bool GetDoesVehicleHaveDamageDecals(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xBCDC5017D3CE1E9E, vehicle);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3E933CFF7B111C22<br />
/// </para>
/// </remarks>
public static bool IsVehicleDoorFullyOpen(int /* Vehicle */ vehicle, int doorId)
{
return Function.Call<bool>((Hash)0x3E933CFF7B111C22, vehicle, doorId);
}

/// <summary>
/// Starts or stops the engine on the specified vehicle.<br /><br />vehicle: The vehicle to start or stop the engine on.<br />value: true to turn the vehicle on; false to turn it off.<br />instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.<br />disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.<br /><br />from what I&apos;ve tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2497C4717C8B881E<br />
/// </para>
/// </remarks>
public static void SetVehicleEngineOn(int /* Vehicle */ vehicle, bool value, bool instantly, bool disableAutoStart)
{
Function.Call((Hash)0x2497C4717C8B881E, vehicle, value, instantly, disableAutoStart);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8ABA6AF54B942B95<br />
/// </para>
/// </remarks>
public static void SetVehicleUndriveable(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8ABA6AF54B942B95, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AFEEDD9BB2899D7<br />
/// </para>
/// </remarks>
public static void SetVehicleProvidesCover(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x5AFEEDD9BB2899D7, vehicle, toggle);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF2BFA0430F0A0FCB<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorControl(int /* Vehicle */ vehicle, int doorId, int speed, float angle)
{
Function.Call((Hash)0xF2BFA0430F0A0FCB, vehicle, doorId, speed, angle);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA5A9653A8D2CAF48<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorLatched(int /* Vehicle */ vehicle, int doorId, bool p2, bool p3, bool p4)
{
Function.Call((Hash)0xA5A9653A8D2CAF48, vehicle, doorId, p2, p3, p4);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE3F9C29F7B32BD5<br />
/// </para>
/// </remarks>
public static float GetVehicleDoorAngleRatio(int /* Vehicle */ vehicle, int doorId)
{
return Function.Call<float>((Hash)0xFE3F9C29F7B32BD5, vehicle, doorId);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x218297BF0CFD853B<br />
/// </para>
/// </remarks>
public static int GetPedUsingVehicleDoor(int /* Vehicle */ vehicle, int doord)
{
return Function.Call<int>((Hash)0x218297BF0CFD853B, vehicle, doord);
}

/// <summary>
/// enum eDoorId<br />{<br />	VEH_EXT_DOOR_INVALID_ID = -1,<br />	VEH_EXT_DOOR_DSIDE_F,<br />	VEH_EXT_DOOR_DSIDE_R,<br />	VEH_EXT_DOOR_PSIDE_F,<br />	VEH_EXT_DOOR_PSIDE_R,<br />	VEH_EXT_BONNET,<br />	VEH_EXT_BOOT<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93D9BD300D7789E5<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorShut(int /* Vehicle */ vehicle, int doorId, bool closeInstantly)
{
Function.Call((Hash)0x93D9BD300D7789E5, vehicle, doorId, closeInstantly);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4D4F6A4AB575A33<br />
/// </para>
/// </remarks>
public static void SetVehicleDoorBroken(int /* Vehicle */ vehicle, int doorId, bool deleteDoor)
{
Function.Call((Hash)0xD4D4F6A4AB575A33, vehicle, doorId, deleteDoor);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x59BF8C3D52C92F66<br />
/// </para>
/// </remarks>
public static void SetVehicleCanBreak(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x59BF8C3D52C92F66, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8AC862B0B32C5B80<br />
/// </para>
/// </remarks>
public static bool DoesVehicleHaveRoof(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x8AC862B0B32C5B80, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xC4B3347BD68BD609<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleRemoveAggressiveCarjackMission(int /* bug: Any */ p0)
{
Function.Call((Hash)0xC4B3347BD68BD609, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xD3301660A57C9272<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleAvoidPlayerVehicleRiotVanMission(int /* bug: Any */ p0)
{
Function.Call((Hash)0xD3301660A57C9272, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xB9562064627FF9DB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCarjackMissionRemovalParameters(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xB9562064627FF9DB, p0, p1);
}

/// <summary>
/// Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F243D3919F442FE<br />
/// </para>
/// </remarks>
public static bool IsBigVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x9F243D3919F442FE, vehicle);
}

/// <summary>
/// Returns the total amount of color combinations found in the vehicle&apos;s carvariations.meta entry.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B963160CD65D41E<br />
/// </para>
/// </remarks>
public static int GetNumberOfVehicleColours(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x3B963160CD65D41E, vehicle);
}

/// <summary>
/// Sets the selected vehicle&apos;s colors to the specified index of the color combination found in the vehicle&apos;s carvariations.meta entry.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33E8CD3322E2FE31<br />
/// </para>
/// </remarks>
public static void SetVehicleColourCombination(int /* Vehicle */ vehicle, int colorCombination)
{
Function.Call((Hash)0x33E8CD3322E2FE31, vehicle, colorCombination);
}

/// <summary>
/// Returns the index of the color combination found in the vehicle&apos;s carvariations.meta entry.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6A842D197F845D56<br />
/// </para>
/// </remarks>
public static int GetVehicleColourCombination(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x6A842D197F845D56, vehicle);
}

/// <summary>
/// `color`: is the paint index for the vehicle.<br />Paint index goes from 0 to 12.<br />Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png<br />Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xE41033B25D003A07<br />
/// </para>
/// </remarks>
public static void SetVehicleXenonLightColorIndex(int /* Vehicle */ vehicle, int colorIndex)
{
Function.Call((Hash)0xE41033B25D003A07, vehicle, colorIndex);
}

/// <summary>
/// Returns the headlight color index from the vehicle. Value between 0, 12.<br />Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.<br />Must enable xenon headlights before it&apos;ll take affect.<br /><br />Returns an int, value between 0-12 or 255 if no color is set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x3DFF319A831E0CDB<br />
/// </para>
/// </remarks>
public static int GetVehicleXenonLightColorIndex(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x3DFF319A831E0CDB, vehicle);
}

/// <summary>
/// Setting this to false, makes the specified vehicle to where if you press Y your character doesn&apos;t even attempt the animation to enter the vehicle. Hence it&apos;s not considered aka ignored.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x31B927BBC44156CD<br />
/// </para>
/// </remarks>
public static void SetVehicleIsConsideredByPlayer(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x31B927BBC44156CD, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBE5C1255A1830FF5<br />
/// </para>
/// </remarks>
public static void SetVehicleWillForceOtherVehiclesToStop(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xBE5C1255A1830FF5, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BECD4B9FEF3F8A6<br />
/// </para>
/// </remarks>
public static void SetVehicleActAsIfHasSirenOn(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x9BECD4B9FEF3F8A6, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x88BC673CA9E0AE99<br />
/// </para>
/// </remarks>
public static void SetVehicleUseMoreRestrictiveSpawnChecks(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x88BC673CA9E0AE99, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE851E480B814D4BA<br />
/// </para>
/// </remarks>
public static void SetVehicleMayBeUsedByGotoPointAnyMeans(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xE851E480B814D4BA, vehicle, p1);
}

/// <summary>
/// Not present in the retail version! It&apos;s just a nullsub.<br /><br />p0 always true (except in one case)<br />successIndicator: 0 if success, -1 if failed
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x055BF0AC0C34F4FD<br />
/// </para>
/// </remarks>
public static void GetRandomVehicleModelInMemory(bool p0, ref uint modelHash, ref int successIndicator)
{
var nativeAssistPointerVar0 = modelHash;
var nativeAssistPointerVar1 = successIndicator;
unsafe {
Function.Call((Hash)0x055BF0AC0C34F4FD, p0, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
modelHash = nativeAssistPointerVar0;
successIndicator = nativeAssistPointerVar1;
}

/// <summary>
/// enum VehicleLockStatus = {<br />    None = 0,<br />    Unlocked = 1,<br />    Locked = 2,<br />    LockedForPlayer = 3,<br />    StickPlayerInside = 4, -- Doesn&apos;t allow players to exit the vehicle with the exit vehicle key.<br />    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1<br />    CanBeBrokenIntoPersist = 8, -- Can be broken into persist<br />    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25BC98A59C2EA962<br />
/// </para>
/// </remarks>
public static int GetVehicleDoorLockStatus(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x25BC98A59C2EA962, vehicle);
}

/// <summary>
/// Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xCA4AC3EAAE46EC7B<br />
/// </para>
/// </remarks>
public static int GetVehicleIndividualDoorLockStatus(int /* Vehicle */ vehicle, int doorId)
{
return Function.Call<int>((Hash)0xCA4AC3EAAE46EC7B, vehicle, doorId);
}

/// <summary>
/// doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8E181E559464527<br />
/// </para>
/// </remarks>
public static bool IsVehicleDoorDamaged(int /* Vehicle */ veh, int doorID)
{
return Function.Call<bool>((Hash)0xB8E181E559464527, veh, doorID);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2FA133A4A9D37ED8<br />
/// </para>
/// </remarks>
public static void SetDoorAllowedToBeBrokenOff(int /* Vehicle */ vehicle, int doorId, bool isBreakable)
{
Function.Call((Hash)0x2FA133A4A9D37ED8, vehicle, doorId, isBreakable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27B926779DEB502D<br />
/// </para>
/// </remarks>
public static bool IsVehicleBumperBouncing(int /* Vehicle */ vehicle, bool frontBumper)
{
return Function.Call<bool>((Hash)0x27B926779DEB502D, vehicle, frontBumper);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x468056A6BB6F3846<br />
/// </para>
/// </remarks>
public static bool IsVehicleBumperBrokenOff(int /* Vehicle */ vehicle, bool frontBumper)
{
return Function.Call<bool>((Hash)0x468056A6BB6F3846, vehicle, frontBumper);
}

/// <summary>
/// Usage:<br /><br />public bool isCopInRange(Vector3 Location, float Range)<br />        {<br />            return Function.Call&lt;bool&gt;(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);<br />        }
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EEF65D5F153E26A<br />
/// </para>
/// </remarks>
public static bool IsCopVehicleInArea3d(float x1, float x2, float y1, float y2, float z1, float z2)
{
return Function.Call<bool>((Hash)0x7EEF65D5F153E26A, x1, x2, y1, y2, z1, z2);
}

/// <summary>
///  Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean<br />        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)<br />    End Function<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB104CD1BABF302E2<br />
/// </para>
/// </remarks>
public static bool IsVehicleOnAllWheels(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xB104CD1BABF302E2, vehicle);
}

/// <summary>
/// Returns `nMonetaryValue` from handling.meta for specific model.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x5873C14A52D74236<br />
/// </para>
/// </remarks>
public static int GetVehicleModelValue(uint vehicleModel)
{
return Function.Call<int>((Hash)0x5873C14A52D74236, vehicleModel);
}

/// <summary>
/// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x28D37D4F71AC5C58<br />
/// </para>
/// </remarks>
public static uint GetVehicleLayoutHash(int /* Vehicle */ vehicle)
{
return Function.Call<uint>((Hash)0x28D37D4F71AC5C58, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA01BC64DD4BFBBAC<br />
/// </para>
/// </remarks>
public static uint GetInVehicleClipsetHashForSeat(int /* Vehicle */ vehicle, int p1)
{
return Function.Call<uint>((Hash)0xA01BC64DD4BFBBAC, vehicle, p1);
}

/// <summary>
/// Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x317B11A312DF5534<br />
/// </para>
/// </remarks>
public static void SetRenderTrainAsDerailed(int /* Vehicle */ train, bool toggle)
{
Function.Call((Hash)0x317B11A312DF5534, train, toggle);
}

/// <summary>
/// They use the same color indexs as SET_VEHICLE_COLOURS.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2036F561ADD12E33<br />
/// </para>
/// </remarks>
public static void SetVehicleExtraColours(int /* Vehicle */ vehicle, int pearlescentColor, int wheelColor)
{
Function.Call((Hash)0x2036F561ADD12E33, vehicle, pearlescentColor, wheelColor);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BC4245933A166F7<br />
/// </para>
/// </remarks>
public static void GetVehicleExtraColours(int /* Vehicle */ vehicle, ref int pearlescentColor, ref int wheelColor)
{
var nativeAssistPointerVar0 = pearlescentColor;
var nativeAssistPointerVar1 = wheelColor;
unsafe {
Function.Call((Hash)0x3BC4245933A166F7, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
pearlescentColor = nativeAssistPointerVar0;
wheelColor = nativeAssistPointerVar1;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xF40DD601A65F7F19<br />
/// </para>
/// </remarks>
public static void SetVehicleExtraColour5(int /* Vehicle */ vehicle, int color)
{
Function.Call((Hash)0xF40DD601A65F7F19, vehicle, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x7D1464D472D32136<br />
/// </para>
/// </remarks>
public static void GetVehicleExtraColour5(int /* Vehicle */ vehicle, ref int color)
{
var nativeAssistPointerVar0 = color;
unsafe {
Function.Call((Hash)0x7D1464D472D32136, vehicle, &nativeAssistPointerVar0);
}
color = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x6089CDF6A57F326C<br />
/// </para>
/// </remarks>
public static void SetVehicleExtraColour6(int /* Vehicle */ vehicle, int color)
{
Function.Call((Hash)0x6089CDF6A57F326C, vehicle, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xB7635E80A5C31BFF<br />
/// </para>
/// </remarks>
public static void GetVehicleExtraColour6(int /* Vehicle */ vehicle, ref int color)
{
var nativeAssistPointerVar0 = color;
unsafe {
Function.Call((Hash)0xB7635E80A5C31BFF, vehicle, &nativeAssistPointerVar0);
}
color = nativeAssistPointerVar0;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F87E938BDF29D66<br />
/// </para>
/// </remarks>
public static void StopAllGarageActivity()
{
Function.Call((Hash)0x0F87E938BDF29D66);
}

/// <summary>
/// This fixes a vehicle.<br />If the vehicle&apos;s engine&apos;s broken then you cannot fix it with this native.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x115722B1B9C14C1C<br />
/// </para>
/// </remarks>
public static void SetVehicleFixed(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x115722B1B9C14C1C, vehicle);
}

/// <summary>
/// This fixes the deformation of a vehicle but the vehicle health doesn&apos;t improve
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x953DA1E1B12C0491<br />
/// </para>
/// </remarks>
public static void SetVehicleDeformationFixed(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x953DA1E1B12C0491, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x206BC5DC9D1AC70A<br />
/// </para>
/// </remarks>
public static void SetVehicleCanEngineMissfire(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x206BC5DC9D1AC70A, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51BB2D88D31A914B<br />
/// </para>
/// </remarks>
public static void SetVehicleCanLeakOil(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x51BB2D88D31A914B, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x192547247864DFDD<br />
/// </para>
/// </remarks>
public static void SetVehicleCanLeakPetrol(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x192547247864DFDD, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x465BF26AB9684352<br />
/// </para>
/// </remarks>
public static void SetDisableVehiclePetrolTankFires(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x465BF26AB9684352, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x37C8252A7C92D017<br />
/// </para>
/// </remarks>
public static void SetDisableVehiclePetrolTankDamage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x37C8252A7C92D017, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91A0BD635321F145<br />
/// </para>
/// </remarks>
public static void SetDisableVehicleEngineFires(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x91A0BD635321F145, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC50CE861B55EAB8B<br />
/// </para>
/// </remarks>
public static void SetVehicleLimitSpeedWhenPlayerInactive(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xC50CE861B55EAB8B, vehicle, toggle);
}

/// <summary>
/// sfink: sets bit in vehicle&apos;s structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly: <br />CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)<br />{<br />    CVehicle *result; // rax@1<br /><br />    result = EntityAsCVehicle(a1);<br />    if ( result )<br />    {<br />        result-&gt;field_886 &amp;= 0xEFu;<br />        result-&gt;field_886 |= 16 * (a2 &amp; 1);<br />    }<br />    return result;<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6EBFB22D646FFC18<br />
/// </para>
/// </remarks>
public static void SetVehicleStopInstantlyWhenPlayerInactive(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x6EBFB22D646FFC18, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25367DE49D64CF16<br />
/// </para>
/// </remarks>
public static void SetDisablePretendOccupants(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x25367DE49D64CF16, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46A1E1A299EC4BBA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void RemoveVehiclesFromGeneratorsInArea(float x1, float y1, float z1, float x2, float y2, float z2, int /* bug: Any */ unk)
{
Function.Call((Hash)0x46A1E1A299EC4BBA, x1, y1, z1, x2, y2, z2, unk);
}

/// <summary>
/// Locks the vehicle&apos;s steering to the desired angle, explained below.<br /><br />Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.<br /><br />Steer bias:<br />-1.0 = full right<br />0.0 = centered steering<br />1.0 = full left
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42A8EC77D5150CBE<br />
/// </para>
/// </remarks>
public static void SetVehicleSteerBias(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0x42A8EC77D5150CBE, vehicle, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD2E6822DBFD6C8BD<br />
/// </para>
/// </remarks>
public static bool IsVehicleExtraTurnedOn(int /* Vehicle */ vehicle, int extraId)
{
return Function.Call<bool>((Hash)0xD2E6822DBFD6C8BD, vehicle, extraId);
}

/// <summary>
/// Note: only some vehicle have extras<br />extra ids are from 1 - 9 depending on the vehicle<br /><br />-------------------------------------------------<br /><br />^ not sure if outdated or simply wrong. Max extra ID for b944 is 14<br /><br />-------------------------------------------------<br />p2 is not a on/off toggle. mostly 0 means on and 1 means off.<br />not sure if it really should be a BOOL.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EE3A3C5E4A40CC9<br />
/// </para>
/// </remarks>
public static void SetVehicleExtra(int /* Vehicle */ vehicle, int extraId, bool disable)
{
Function.Call((Hash)0x7EE3A3C5E4A40CC9, vehicle, extraId, disable);
}

/// <summary>
/// Checks via CVehicleModelInfo
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1262D55792428154<br />
/// </para>
/// </remarks>
public static bool DoesExtraExist(int /* Vehicle */ vehicle, int extraId)
{
return Function.Call<bool>((Hash)0x1262D55792428154, vehicle, extraId);
}

/// <summary>
/// Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x534E36D4DB9ECC5D<br />
/// </para>
/// </remarks>
public static bool IsExtraBrokenOff(int /* Vehicle */ vehicle, int extraId)
{
return Function.Call<bool>((Hash)0x534E36D4DB9ECC5D, vehicle, extraId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF39C4F538B5124C2<br />
/// </para>
/// </remarks>
public static void SetConvertibleRoof(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xF39C4F538B5124C2, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDED51F703D0FA83D<br />
/// </para>
/// </remarks>
public static void LowerConvertibleRoof(int /* Vehicle */ vehicle, bool instantlyLower)
{
Function.Call((Hash)0xDED51F703D0FA83D, vehicle, instantlyLower);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F5FB35D7E88FC70<br />
/// </para>
/// </remarks>
public static void RaiseConvertibleRoof(int /* Vehicle */ vehicle, bool instantlyRaise)
{
Function.Call((Hash)0x8F5FB35D7E88FC70, vehicle, instantlyRaise);
}

/// <summary>
/// 0 -&gt; up<br />1 -&gt; lowering down<br />2 -&gt; down<br />3 -&gt; raising up
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8C397922FC03F41<br />
/// </para>
/// </remarks>
public static int GetConvertibleRoofState(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xF8C397922FC03F41, vehicle);
}

/// <summary>
/// Returns true if the vehicle has a convertible roof.<br /><br />p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x52F357A30698BCCE<br />
/// </para>
/// </remarks>
public static bool IsVehicleAConvertible(int /* Vehicle */ vehicle, bool p1)
{
return Function.Call<bool>((Hash)0x52F357A30698BCCE, vehicle, p1);
}

/// <summary>
/// Transforms the `stormberg`/`toreador` to its &quot;submarine&quot; variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won&apos;t change at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xBE4C854FFDB6EEBE<br />
/// </para>
/// </remarks>
public static bool TransformToSubmarine(int /* Vehicle */ vehicle, bool noAnimation)
{
return Function.Call<bool>((Hash)0xBE4C854FFDB6EEBE, vehicle, noAnimation);
}

/// <summary>
/// Transforms the `stormberg`/`toreador` to its &quot;road vehicle&quot; variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won&apos;t change at all.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2A69FFD1B42BFF9E<br />
/// </para>
/// </remarks>
public static void TransformToCar(int /* Vehicle */ vehicle, bool noAnimation)
{
Function.Call((Hash)0x2A69FFD1B42BFF9E, vehicle, noAnimation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xA77DC70BD689A1E5<br />
/// </para>
/// </remarks>
public static bool IsVehicleInSubmarineMode(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xA77DC70BD689A1E5, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2959F696AE390A99<br />
/// </para>
/// </remarks>
public static bool IsVehicleStoppedAtTrafficLights(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x2959F696AE390A99, vehicle);
}

/// <summary>
/// Apply damage to vehicle at a location. Location is relative to vehicle model (not world).<br /><br />Radius of effect damage applied in a sphere at impact location<br />When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA1DD317EA8FD4F29<br />
/// </para>
/// </remarks>
public static void SetVehicleDamage(int /* Vehicle */ vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, bool focusOnModel)
{
Function.Call((Hash)0xA1DD317EA8FD4F29, vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x35BB21DE06784373<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleOccupantsTakeExplosiveDamage(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x35BB21DE06784373, p0, p1);
}

/// <summary>
/// Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it&apos;s not a vehicle.<br /><br />Minimum: -4000<br />Maximum: 1000<br /><br />-4000: Engine is destroyed<br />0 and below: Engine catches fire and health rapidly declines<br />300: Engine is smoking and losing functionality<br />1000: Engine is perfect
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC45D23BAF168AAB8<br />
/// </para>
/// </remarks>
public static float GetVehicleEngineHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xC45D23BAF168AAB8, vehicle);
}

/// <summary>
/// 1000 is max health<br />Begins leaking gas at around 650 health<br />Minimum: -4000<br />Maximum: 1000<br /><br />-4000: Engine is destroyed<br />0 and below: Engine catches fire and health rapidly declines<br />300: Engine is smoking and losing functionality<br />1000: Engine is perfect
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x45F6D8EEF34ABEF1<br />
/// </para>
/// </remarks>
public static void SetVehicleEngineHealth(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0x45F6D8EEF34ABEF1, vehicle, health);
}

/// <summary>
/// Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x2A86A0475B6A1434<br />
/// </para>
/// </remarks>
public static void SetPlaneEngineHealth(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0x2A86A0475B6A1434, vehicle, health);
}

/// <summary>
/// 1000 is max health<br />Begins leaking gas at around 650 health<br />-999.90002441406 appears to be minimum health, although nothing special occurs
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7D5DABE888D2D074<br />
/// </para>
/// </remarks>
public static float GetVehiclePetrolTankHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x7D5DABE888D2D074, vehicle);
}

/// <summary>
/// 1000 is max health<br />Begins leaking gas at around 650 health<br />-999.90002441406 appears to be minimum health, although nothing special occurs
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x70DB57649FA8D0D8<br />
/// </para>
/// </remarks>
public static void SetVehiclePetrolTankHealth(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0x70DB57649FA8D0D8, vehicle, health);
}

/// <summary>
/// p1 can be anywhere from 0 to 3 in the scripts.<br />p2 being how long in milliseconds the vehicle has been stuck
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x679BE1DAF71DA874<br />
/// </para>
/// </remarks>
public static bool IsVehicleStuckTimerUp(int /* Vehicle */ vehicle, int p1, int ms)
{
return Function.Call<bool>((Hash)0x679BE1DAF71DA874, vehicle, p1, ms);
}

/// <summary>
/// The inner function has a switch on the second parameter. It&apos;s the stuck timer index.<br /><br />Here&apos;s some pseudo code I wrote for the inner function:<br />void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)<br />{<br /> switch (timerIndex)<br />   {<br /> case 0:<br />       unknownClassInVehicle-&gt;FirstStuckTimer = (WORD)0u;<br /> case 1:<br />       unknownClassInVehicle-&gt;SecondStuckTimer = (WORD)0u;<br />    case 2:<br />       unknownClassInVehicle-&gt;ThirdStuckTimer = (WORD)0u;<br /> case 3:<br />       unknownClassInVehicle-&gt;FourthStuckTimer = (WORD)0u;<br />    case 4:<br />       unknownClassInVehicle-&gt;FirstStuckTimer = (WORD)0u;<br />     unknownClassInVehicle-&gt;SecondStuckTimer = (WORD)0u;<br />        unknownClassInVehicle-&gt;ThirdStuckTimer = (WORD)0u;<br />     unknownClassInVehicle-&gt;FourthStuckTimer = (WORD)0u;<br />        break;<br />    };<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD7591B0065AFAA7A<br />
/// </para>
/// </remarks>
public static void ResetVehicleStuckTimer(int /* Vehicle */ vehicle, int nullAttributes)
{
Function.Call((Hash)0xD7591B0065AFAA7A, vehicle, nullAttributes);
}

/// <summary>
/// p1 is always 0 in the scripts.<br /><br />p1 = check if vehicle is on fire
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4C241E39B23DF959<br />
/// </para>
/// </remarks>
public static bool IsVehicleDriveable(int /* Vehicle */ vehicle, bool isOnFireCheck)
{
return Function.Call<bool>((Hash)0x4C241E39B23DF959, vehicle, isOnFireCheck);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B5F9D2AF1F1722D<br />
/// </para>
/// </remarks>
public static void SetVehicleHasBeenOwnedByPlayer(int /* Vehicle */ vehicle, bool owned)
{
Function.Call((Hash)0x2B5F9D2AF1F1722D, vehicle, owned);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFBA550EA44404EE6<br />
/// </para>
/// </remarks>
public static void SetVehicleNeedsToBeHotwired(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xFBA550EA44404EE6, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9F3F689B814F2599<br />
/// </para>
/// </remarks>
public static void SetVehicleBlipThrottleRandomly(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x9F3F689B814F2599, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4E74E62E0A97E901<br />
/// </para>
/// </remarks>
public static void SetPoliceFocusWillTrackVehicle(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x4E74E62E0A97E901, vehicle, toggle);
}

/// <summary>
/// Sounds the horn for the specified vehicle.<br /><br />vehicle: The vehicle to activate the horn for.<br />mode: The hash of &quot;NORMAL&quot; or &quot;HELDDOWN&quot;. Can be 0.<br />duration: The duration to sound the horn, in milliseconds.<br /><br />Note: If a player is in the vehicle, it will only sound briefly.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9C8C6504B5B63D2C<br />
/// </para>
/// </remarks>
public static void StartVehicleHorn(int /* Vehicle */ vehicle, int duration, uint mode, bool forever)
{
Function.Call((Hash)0x9C8C6504B5B63D2C, vehicle, duration, mode, forever);
}

/// <summary>
/// If set to TRUE, it seems to suppress door noises and doesn&apos;t allow the horn to be continuous.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D44FCCE98450843<br />
/// </para>
/// </remarks>
public static void SetVehicleInCarModShop(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x9D44FCCE98450843, vehicle, toggle);
}

/// <summary>
/// if true, axles won&apos;t bend.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92F0CF722BC4202F<br />
/// </para>
/// </remarks>
public static void SetVehicleHasStrongAxles(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x92F0CF722BC4202F, vehicle, toggle);
}

/// <summary>
/// Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.<br />-----------------------------------------------------------------------------------------------------------------------------------------<br />While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.<br />-----------------------------------------------------------------------------------------------------------------------------------------<br /><br />Returns &quot;CARNOTFOUND&quot; if the hash doesn&apos;t match a vehicle hash.<br /><br />Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB215AAC32D25D019<br />
/// </para>
/// </remarks>
public static string GetDisplayNameFromVehicleModel(uint modelHash)
{
return Function.Call<string>((Hash)0xB215AAC32D25D019, modelHash);
}

/// <summary>
/// Will return a vehicle&apos;s manufacturer display label.<br />Returns &quot;CARNOTFOUND&quot; if the hash doesn&apos;t match a vehicle hash.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0xF7AF4F159FF99F97<br />
/// </para>
/// </remarks>
public static string GetMakeNameFromVehicleModel(uint modelHash)
{
return Function.Call<string>((Hash)0xF7AF4F159FF99F97, modelHash);
}

/// <summary>
/// The only example I can find of this function in the scripts, is this:<br /><br />struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);<br /><br />-----------------------------------------------------------------------------------------------------------------------------------------<br />PC scripts:<br /><br />v_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4EC6CFBC7B2E9536<br />
/// </para>
/// </remarks>
public static Vector3 GetVehicleDeformationAtPos(int /* Vehicle */ vehicle, float offsetX, float offsetY, float offsetZ)
{
return Function.Call<Vector3>((Hash)0x4EC6CFBC7B2E9536, vehicle, offsetX, offsetY, offsetZ);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x60BF608F1B8CD1B6<br />
/// </para>
/// </remarks>
public static void SetVehicleLivery(int /* Vehicle */ vehicle, int livery)
{
Function.Call((Hash)0x60BF608F1B8CD1B6, vehicle, livery);
}

/// <summary>
/// -1 = no livery
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2BB9230590DA5E8A<br />
/// </para>
/// </remarks>
public static int GetVehicleLivery(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x2BB9230590DA5E8A, vehicle);
}

/// <summary>
/// Returns -1 if the vehicle has no livery
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87B63E25A529D526<br />
/// </para>
/// </remarks>
public static int GetVehicleLiveryCount(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x87B63E25A529D526, vehicle);
}

/// <summary>
/// Used to set the tornado custom (convertible) rooftop livery.<br /><br />Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.<br /><br />Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xA6D3A8750DC73270<br />
/// </para>
/// </remarks>
public static void SetVehicleLivery2(int /* Vehicle */ vehicle, int livery)
{
Function.Call((Hash)0xA6D3A8750DC73270, vehicle, livery);
}

/// <summary>
/// Returns index of the current vehicle&apos;s rooftop livery. A getter for _SET_VEHICLE_ROOF_LIVERY.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x60190048C0764A26<br />
/// </para>
/// </remarks>
public static int GetVehicleLivery2(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x60190048C0764A26, vehicle);
}

/// <summary>
/// Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x5ECB40269053C0D4<br />
/// </para>
/// </remarks>
public static int GetVehicleLivery2Count(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x5ECB40269053C0D4, vehicle);
}

/// <summary>
/// This will return false if the window is broken, or rolled down.<br />Window indexes:<br />0 = Front Right Window<br />1 = Front Left Window<br />2 = Back Right Window<br />3 = Back Left Window<br /><br /><br />Those numbers go on for vehicles that have more than 4 doors with windows.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x46E571A0E20D01F1<br />
/// </para>
/// </remarks>
public static bool IsVehicleWindowIntact(int /* Vehicle */ vehicle, int windowIndex)
{
return Function.Call<bool>((Hash)0x46E571A0E20D01F1, vehicle, windowIndex);
}

/// <summary>
/// Appears to return false if any window is broken.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x11D862A3E977A9EF<br />
/// </para>
/// </remarks>
public static bool AreAllVehicleWindowsIntact(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x11D862A3E977A9EF, vehicle);
}

/// <summary>
/// Returns false if every seat is occupied.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D34FC3BC4ADB780<br />
/// </para>
/// </remarks>
public static bool AreAnyVehicleSeatsFree(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x2D34FC3BC4ADB780, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21D2E5662C1F6FED<br />
/// </para>
/// </remarks>
public static void ResetVehicleWheels(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x21D2E5662C1F6FED, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC74B4BE25EB6C8A<br />
/// </para>
/// </remarks>
public static bool IsHeliPartBroken(int /* Vehicle */ vehicle, bool p1, bool p2, bool p3)
{
return Function.Call<bool>((Hash)0xBC74B4BE25EB6C8A, vehicle, p1, p2, p3);
}

/// <summary>
/// Max 1000.<br />At 0 the main rotor will stall.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4CB7541F413D2C5<br />
/// </para>
/// </remarks>
public static float GetHeliMainRotorHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xE4CB7541F413D2C5, vehicle);
}

/// <summary>
/// Max 1000.<br />At 0 the tail rotor will stall.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE8CE82A4219AC8C<br />
/// </para>
/// </remarks>
public static float GetHeliTailRotorHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xAE8CE82A4219AC8C, vehicle);
}

/// <summary>
/// Max 1000.<br />At -100 both helicopter rotors will stall.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC51915D27E4A5F7<br />
/// </para>
/// </remarks>
public static float GetHeliTailBoomHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xAC51915D27E4A5F7, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x4056EA1105F5ABD7<br />
/// </para>
/// </remarks>
public static void SetHeliMainRotorHealth(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0x4056EA1105F5ABD7, vehicle, health);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xFE205F38AAA58E5B<br />
/// </para>
/// </remarks>
public static void SetHeliTailRotorHealth(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0xFE205F38AAA58E5B, vehicle, health);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3EC8BF18AA453FE9<br />
/// </para>
/// </remarks>
public static bool SetHeliTailBoomCanBreakOff(int /* Vehicle */ vehicle, bool toggle)
{
return Function.Call<bool>((Hash)0x3EC8BF18AA453FE9, vehicle, toggle);
}

/// <summary>
/// NOTE: Debugging functions are not present in the retail version of the game.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFDF984E2C22B94F<br />
/// </para>
/// </remarks>
public static void SetVehicleNameDebug(int /* Vehicle */ vehicle, string name)
{
Function.Call((Hash)0xBFDF984E2C22B94F, vehicle, name);
}

/// <summary>
/// Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x71B0892EC081D60A<br />
/// </para>
/// </remarks>
public static void SetVehicleExplodesOnHighExplosionDamage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x71B0892EC081D60A, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xD565F438137F0E10<br />
/// </para>
/// </remarks>
public static void SetVehicleExplodesOnExplosionDamageAtZeroBodyHealth(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xD565F438137F0E10, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3441CAD2F2231923<br />
/// </para>
/// </remarks>
public static void SetAllowVehicleExplodesOnContact(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x3441CAD2F2231923, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B6747FAA9DB9D6B<br />
/// </para>
/// </remarks>
public static void SetVehicleDisableTowing(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x2B6747FAA9DB9D6B, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xE43701C36CAFF1A4<br />
/// </para>
/// </remarks>
public static bool GetVehicleHasLandingGear(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xE43701C36CAFF1A4, vehicle);
}

/// <summary>
/// Works for vehicles with a retractable landing gear<br /><br />landing gear states:<br /><br />0: Deployed<br />1: Closing<br />2: Opening<br />3: Retracted<br /><br />what can I use to make the hydra thing forward?
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFC8BE9A5E1FE575<br />
/// </para>
/// </remarks>
public static void ControlLandingGear(int /* Vehicle */ vehicle, int state)
{
Function.Call((Hash)0xCFC8BE9A5E1FE575, vehicle, state);
}

/// <summary>
/// Landing gear states:<br /><br />0: Deployed<br />1: Closing (Retracting)<br />2:(Landing gear state 2 is never used.)<br />3: Opening (Deploying)<br />4: Retracted<br /><br />Returns the current state of the vehicles landing gear.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9B0F3DCA3DB0F4CD<br />
/// </para>
/// </remarks>
public static int GetLandingGearState(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x9B0F3DCA3DB0F4CD, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x61E1DD6125A3EEE6<br />
/// </para>
/// </remarks>
public static bool IsAnyVehicleNearPoint(float x, float y, float z, float radius)
{
return Function.Call<bool>((Hash)0x61E1DD6125A3EEE6, x, y, z, radius);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA6E9FDCB2C76785E<br />
/// </para>
/// </remarks>
public static void RequestVehicleHighDetailModel(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xA6E9FDCB2C76785E, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00689CDE5F7C6787<br />
/// </para>
/// </remarks>
public static void RemoveVehicleHighDetailModel(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x00689CDE5F7C6787, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F25887F3C104278<br />
/// </para>
/// </remarks>
public static bool IsVehicleHighDetail(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x1F25887F3C104278, vehicle);
}

/// <summary>
/// REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);<br /><br />vehicle found that have asset&apos;s:<br />cargobob3<br />submersible<br />blazer
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81A15811460FAB3A<br />
/// </para>
/// </remarks>
public static void RequestVehicleAsset(uint vehicleHash, int vehicleAsset)
{
Function.Call((Hash)0x81A15811460FAB3A, vehicleHash, vehicleAsset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1BBE0523B8DB9A21<br />
/// </para>
/// </remarks>
public static bool HasVehicleAssetLoaded(int vehicleAsset)
{
return Function.Call<bool>((Hash)0x1BBE0523B8DB9A21, vehicleAsset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACE699C71AB9DEB5<br />
/// </para>
/// </remarks>
public static void RemoveVehicleAsset(int vehicleAsset)
{
Function.Call((Hash)0xACE699C71AB9DEB5, vehicleAsset);
}

/// <summary>
/// Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFE54B92A344583CA<br />
/// </para>
/// </remarks>
public static void SetVehicleTowTruckArmPosition(int /* Vehicle */ vehicle, float position)
{
Function.Call((Hash)0xFE54B92A344583CA, vehicle, position);
}

/// <summary>
/// HookOffset defines where the hook is attached. leave at 0 for default attachment.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29A16F8D621C4508<br />
/// </para>
/// </remarks>
public static void AttachVehicleToTowTruck(int /* Vehicle */ towTruck, int /* Vehicle */ vehicle, bool rear, float hookOffsetX, float hookOffsetY, float hookOffsetZ)
{
Function.Call((Hash)0x29A16F8D621C4508, towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
}

/// <summary>
/// First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC2DB6B6708350ED8<br />
/// </para>
/// </remarks>
public static void DetachVehicleFromTowTruck(int /* Vehicle */ towTruck, int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xC2DB6B6708350ED8, towTruck, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0E9CE05A1E68CD8<br />
/// </para>
/// </remarks>
public static bool DetachVehicleFromAnyTowTruck(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xD0E9CE05A1E68CD8, vehicle);
}

/// <summary>
/// Scripts verify that towTruck is the first parameter, not the second.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x146DF9EC4C4B9FD4<br />
/// </para>
/// </remarks>
public static bool IsVehicleAttachedToTowTruck(int /* Vehicle */ towTruck, int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x146DF9EC4C4B9FD4, towTruck, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFEA18DCF10F8F75<br />
/// </para>
/// </remarks>
public static int GetEntityAttachedToTowTruck(int /* Vehicle */ towTruck)
{
return Function.Call<int>((Hash)0xEFEA18DCF10F8F75, towTruck);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8BA6F76BC53A1493<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int SetVehicleAutomaticallyAttaches(int /* Vehicle */ vehicle, bool p1, int /* bug: Any */ p2)
{
return Function.Call<int>((Hash)0x8BA6F76BC53A1493, vehicle, p1, p2);
}

/// <summary>
/// Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF8EBCCC96ADB9FB7<br />
/// </para>
/// </remarks>
public static void SetVehicleBulldozerArmPosition(int /* Vehicle */ vehicle, float position, bool p2)
{
Function.Call((Hash)0xF8EBCCC96ADB9FB7, vehicle, position, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56B94C6D7127DFBA<br />
/// </para>
/// </remarks>
public static void SetVehicleTankTurretPosition(int /* Vehicle */ vehicle, float position, bool p2)
{
Function.Call((Hash)0x56B94C6D7127DFBA, vehicle, position, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0581730AB9380412<br />
/// </para>
/// </remarks>
public static void SetVehicleTurretTarget(int /* Vehicle */ vehicle, bool p1, float x, float y, float z, bool p5)
{
Function.Call((Hash)0x0581730AB9380412, vehicle, p1, x, y, z, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x737E398138550FFF<br />
/// </para>
/// </remarks>
public static void SetVehicleTankStationary(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x737E398138550FFF, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1093408B4B9D1146<br />
/// </para>
/// </remarks>
public static void SetVehicleTurretSpeedThisFrame(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0x1093408B4B9D1146, vehicle, speed);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x32CAEDF24A583345<br />
/// </para>
/// </remarks>
public static void DisableVehicleTurretMovementThisFrame(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x32CAEDF24A583345, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30D779DE7C4F6DD3<br />
/// </para>
/// </remarks>
public static void SetVehicleFlightNozzlePosition(int /* Vehicle */ vehicle, float angleRatio)
{
Function.Call((Hash)0x30D779DE7C4F6DD3, vehicle, angleRatio);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9AA47FFF660CB932<br />
/// </para>
/// </remarks>
public static void SetVehicleFlightNozzlePositionImmediate(int /* Vehicle */ vehicle, float angle)
{
Function.Call((Hash)0x9AA47FFF660CB932, vehicle, angle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xDA62027C8BDB326E<br />
/// </para>
/// </remarks>
public static float GetVehicleFlightNozzlePosition(int /* Vehicle */ plane)
{
return Function.Call<float>((Hash)0xDA62027C8BDB326E, plane);
}

/// <summary>
/// True stops vtols from switching modes. Doesn&apos;t stop the sound though.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xCE2B43770B655F8F<br />
/// </para>
/// </remarks>
public static void SetDisableVerticalFlightModeTransition(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xCE2B43770B655F8F, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4822F1CF23F4810<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GenerateVehicleCreationPosFromPaths(ref Vector3 outVec, int /* bug: Any */ p1, ref Vector3 outVec1, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5, int /* bug: Any */ p6, int /* bug: Any */ p7, int /* bug: Any */ p8)
{
var nativeAssistPointerVar0 = outVec;
var nativeAssistPointerVar1 = outVec1;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xA4822F1CF23F4810, &nativeAssistPointerVar0, p1, &nativeAssistPointerVar1, p3, p4, p5, p6, p7, p8);
}
outVec = nativeAssistPointerVar0;
outVec1 = nativeAssistPointerVar1;
return retVal;
}

/// <summary>
/// On accelerating, spins the driven wheels with the others braked, so you don&apos;t go anywhere.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFB8794444A7D60FB<br />
/// </para>
/// </remarks>
public static void SetVehicleBurnout(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xFB8794444A7D60FB, vehicle, toggle);
}

/// <summary>
/// Returns whether the specified vehicle is currently in a burnout.<br /><br /><br />vb.net<br />Public Function isVehicleInBurnout(vh As Vehicle) As Boolean<br />        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)<br />    End Function
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1297A88E081430EB<br />
/// </para>
/// </remarks>
public static bool IsVehicleInBurnout(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x1297A88E081430EB, vehicle);
}

/// <summary>
/// Reduces grip significantly so it&apos;s hard to go anywhere.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x222FF6A823D122E2<br />
/// </para>
/// </remarks>
public static void SetVehicleReduceGrip(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x222FF6A823D122E2, vehicle, toggle);
}

/// <summary>
/// val is 0-3<br />Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x6DEE944E1EE90CFB<br />
/// </para>
/// </remarks>
public static void SetVehicleReduceGripLevel(int /* Vehicle */ vehicle, int val)
{
Function.Call((Hash)0x6DEE944E1EE90CFB, vehicle, val);
}

/// <summary>
/// Sets the turn signal enabled for a vehicle.<br />Set turnSignal to 1 for left light, 0 for right light.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5D45264751B7DF0<br />
/// </para>
/// </remarks>
public static void SetVehicleIndicatorLights(int /* Vehicle */ vehicle, int turnSignal, bool toggle)
{
Function.Call((Hash)0xB5D45264751B7DF0, vehicle, turnSignal, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92B35082E0B42F66<br />
/// </para>
/// </remarks>
public static void SetVehicleBrakeLights(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x92B35082E0B42F66, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x684785568EF26A22<br />
/// </para>
/// </remarks>
public static void SetVehicleHandbrake(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x684785568EF26A22, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xE4E2FD323574965C<br />
/// </para>
/// </remarks>
public static void SetVehicleBrake(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xE4E2FD323574965C, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48ADC8A773564670<br />
/// </para>
/// </remarks>
public static void InstantlyFillVehiclePopulation()
{
Function.Call((Hash)0x48ADC8A773564670);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x91D6DD290888CBAB<br />
/// </para>
/// </remarks>
public static bool HasInstantFillVehiclePopulationFinished()
{
return Function.Call<bool>((Hash)0x91D6DD290888CBAB);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51DB102F4A3BA5E0<br />
/// </para>
/// </remarks>
public static void NetworkEnableEmptyCrowdingVehiclesRemoval(bool toggle)
{
Function.Call((Hash)0x51DB102F4A3BA5E0, toggle);
}

/// <summary>
/// Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xA4A9A4C40E615885<br />
/// </para>
/// </remarks>
public static void NetworkCapEmptyCrowdingVehiclesRemoval(int p0)
{
Function.Call((Hash)0xA4A9A4C40E615885, p0);
}

/// <summary>
/// Gets the trailer of a vehicle and puts it into the trailer parameter.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CDD6BADC297830D<br />
/// </para>
/// </remarks>
public static bool GetVehicleTrailerVehicle(int /* Vehicle */ vehicle, ref int /* Vehicle* */ trailer)
{
var nativeAssistPointerVar0 = trailer;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x1CDD6BADC297830D, vehicle, &nativeAssistPointerVar0);
}
trailer = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// vehicle must be a plane
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCAC66558B944DA67<br />
/// </para>
/// </remarks>
public static void SetVehicleUsesLargeRearRamp(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xCAC66558B944DA67, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x09606148B6C71DEF<br />
/// </para>
/// </remarks>
public static void SetVehicleRudderBroken(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x09606148B6C71DEF, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1A78AD3D8240536F<br />
/// </para>
/// </remarks>
public static void SetConvertibleRoofLatchState(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x1A78AD3D8240536F, vehicle, state);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53AF99BAA671CA47<br />
/// </para>
/// </remarks>
public static float GetVehicleEstimatedMaxSpeed(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x53AF99BAA671CA47, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD7E85FC227197C4<br />
/// </para>
/// </remarks>
public static float GetVehicleMaxBraking(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xAD7E85FC227197C4, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA132FB5370554DB0<br />
/// </para>
/// </remarks>
public static float GetVehicleMaxTraction(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xA132FB5370554DB0, vehicle);
}

/// <summary>
/// static - max acceleration
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DD35C8D074E57AE<br />
/// </para>
/// </remarks>
public static float GetVehicleAcceleration(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x5DD35C8D074E57AE, vehicle);
}

/// <summary>
/// Returns max speed (without mods) of the specified vehicle model in m/s.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF417C2502FFFED43<br />
/// </para>
/// </remarks>
public static float GetVehicleModelEstimatedMaxSpeed(uint modelHash)
{
return Function.Call<float>((Hash)0xF417C2502FFFED43, modelHash);
}

/// <summary>
/// Returns max braking of the specified vehicle model.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC53FD41B4ED944C<br />
/// </para>
/// </remarks>
public static float GetVehicleModelMaxBraking(uint modelHash)
{
return Function.Call<float>((Hash)0xDC53FD41B4ED944C, modelHash);
}

/// <summary>
/// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBFBA3BA79CFF7EBF<br />
/// </para>
/// </remarks>
public static float GetVehicleModelMaxBrakingMaxMods(uint modelHash)
{
return Function.Call<float>((Hash)0xBFBA3BA79CFF7EBF, modelHash);
}

/// <summary>
/// Returns max traction of the specified vehicle model.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x539DE94D44FDFD0D<br />
/// </para>
/// </remarks>
public static float GetVehicleModelMaxTraction(uint modelHash)
{
return Function.Call<float>((Hash)0x539DE94D44FDFD0D, modelHash);
}

/// <summary>
/// Returns the acceleration of the specified model.<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C044C5C84505B6A<br />
/// </para>
/// </remarks>
public static float GetVehicleModelAcceleration(uint modelHash)
{
return Function.Call<float>((Hash)0x8C044C5C84505B6A, modelHash);
}

/// <summary>
/// 9.8 * thrust if air vehicle, else 0.38 + drive force?<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53409B5163D5B846<br />
/// </para>
/// </remarks>
public static float GetVehicleModelAccelerationMaxMods(uint modelHash)
{
return Function.Call<float>((Hash)0x53409B5163D5B846, modelHash);
}

/// <summary>
/// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC6AD107DDC9054CC<br />
/// </para>
/// </remarks>
public static float GetFlyingVehicleModelAgility(uint modelHash)
{
return Function.Call<float>((Hash)0xC6AD107DDC9054CC, modelHash);
}

/// <summary>
/// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5AA3F878A178C4FC<br />
/// </para>
/// </remarks>
public static float GetBoatVehicleModelAgility(uint modelHash)
{
return Function.Call<float>((Hash)0x5AA3F878A178C4FC, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x00C09F246ABEDD82<br />
/// </para>
/// </remarks>
public static float GetVehicleClassEstimatedMaxSpeed(int vehicleClass)
{
return Function.Call<float>((Hash)0x00C09F246ABEDD82, vehicleClass);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBC86D85C5059461<br />
/// </para>
/// </remarks>
public static float GetVehicleClassMaxTraction(int vehicleClass)
{
return Function.Call<float>((Hash)0xDBC86D85C5059461, vehicleClass);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4F930AD022D6DE3B<br />
/// </para>
/// </remarks>
public static float GetVehicleClassMaxAgility(int vehicleClass)
{
return Function.Call<float>((Hash)0x4F930AD022D6DE3B, vehicleClass);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2F83E7E45D9EA7AE<br />
/// </para>
/// </remarks>
public static float GetVehicleClassMaxAcceleration(int vehicleClass)
{
return Function.Call<float>((Hash)0x2F83E7E45D9EA7AE, vehicleClass);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4BF54C16EC8FEC03<br />
/// </para>
/// </remarks>
public static float GetVehicleClassMaxBraking(int vehicleClass)
{
return Function.Call<float>((Hash)0x4BF54C16EC8FEC03, vehicleClass);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2CE544C68FB812A0<br />
/// </para>
/// </remarks>
public static int AddRoadNodeSpeedZone(float x, float y, float z, float radius, float speed, bool p5)
{
return Function.Call<int>((Hash)0x2CE544C68FB812A0, x, y, z, radius, speed, p5);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1033371FC8E842A7<br />
/// </para>
/// </remarks>
public static bool RemoveRoadNodeSpeedZone(int speedzone)
{
return Function.Call<bool>((Hash)0x1033371FC8E842A7, speedzone);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x87E7F24270732CB1<br />
/// </para>
/// </remarks>
public static void OpenBombBayDoors(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x87E7F24270732CB1, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3556041742A0DC74<br />
/// </para>
/// </remarks>
public static void CloseBombBayDoors(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x3556041742A0DC74, vehicle);
}

/// <summary>
/// Returns true when the bomb bay doors of this plane are open. False if they&apos;re closed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xD0917A423314BBA8<br />
/// </para>
/// </remarks>
public static bool GetAreBombBayDoorsOpen(int /* Vehicle */ aircraft)
{
return Function.Call<bool>((Hash)0xD0917A423314BBA8, aircraft);
}

/// <summary>
/// Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.<br /><br />@Author Nac
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC0F97FCE55094987<br />
/// </para>
/// </remarks>
public static bool IsVehicleSearchlightOn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xC0F97FCE55094987, vehicle);
}

/// <summary>
/// Only works during nighttime.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14E85C5EE7A4D542<br />
/// </para>
/// </remarks>
public static void SetVehicleSearchlight(int /* Vehicle */ heli, bool toggle, bool canBeUsedByAI)
{
Function.Call((Hash)0x14E85C5EE7A4D542, heli, toggle, canBeUsedByAI);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2189<br />
/// <b>Native ID:</b> 0x99015ED7DBEA5113<br />
/// </para>
/// </remarks>
public static bool DoesVehicleHaveSearchlight(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x99015ED7DBEA5113, vehicle);
}

/// <summary>
/// Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).<br /><br />seatIndex  = -1 being the driver seat.<br />Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.<br />side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.<br />onEnter = check if you can enter (true) or exit (false) a vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x639431E895B9AA57<br />
/// </para>
/// </remarks>
public static bool IsEntryPointForSeatClear(int /* Ped */ ped, int /* Vehicle */ vehicle, int seatIndex, bool side, bool onEnter)
{
return Function.Call<bool>((Hash)0x639431E895B9AA57, ped, vehicle, seatIndex, side, onEnter);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xC0572928C0ABFDA3<br />
/// </para>
/// </remarks>
public static Vector3 GetEntryPointPosition(int /* Vehicle */ vehicle, int doorId)
{
return Function.Call<Vector3>((Hash)0xC0572928C0ABFDA3, vehicle, doorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x30785D90C956BF35<br />
/// </para>
/// </remarks>
public static bool CanShuffleSeat(int /* Vehicle */ vehicle, int seatIndex)
{
return Function.Call<bool>((Hash)0x30785D90C956BF35, vehicle, seatIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33F2E3FE70EAAE1D<br />
/// </para>
/// </remarks>
public static int GetNumModKits(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x33F2E3FE70EAAE1D, vehicle);
}

/// <summary>
/// Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That&apos;s what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.<br /><br />Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F2AA07F00B3217A<br />
/// </para>
/// </remarks>
public static void SetVehicleModKit(int /* Vehicle */ vehicle, int modKit)
{
Function.Call((Hash)0x1F2AA07F00B3217A, vehicle, modKit);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6325D1A044AE510D<br />
/// </para>
/// </remarks>
public static int GetVehicleModKit(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x6325D1A044AE510D, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC058F5121E54C32<br />
/// </para>
/// </remarks>
public static int GetVehicleModKitType(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xFC058F5121E54C32, vehicle);
}

/// <summary>
/// Returns an int<br /><br />Wheel Types:<br />0: Sport<br />1: Muscle<br />2: Lowrider<br />3: SUV<br />4: Offroad<br />5: Tuner<br />6: Bike Wheels<br />7: High End<br />8: Benny&apos;s Originals<br />9: Benny&apos;s Bespoke<br />10: Racing<br />11: Street<br />12: Track<br /><br />Tested in Los Santos Customs
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3ED1BFB4BE636DC<br />
/// </para>
/// </remarks>
public static int GetVehicleWheelType(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xB3ED1BFB4BE636DC, vehicle);
}

/// <summary>
/// 0: Sport<br />1: Muscle<br />2: Lowrider<br />3: SUV<br />4: Offroad<br />5: Tuner<br />6: Bike Wheels<br />7: High End<br />8: Benny&apos;s Originals<br />9: Benny&apos;s Bespoke<br />10: Racing<br />11: Street<br />12: Track
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x487EB21CC7295BA1<br />
/// </para>
/// </remarks>
public static void SetVehicleWheelType(int /* Vehicle */ vehicle, int WheelType)
{
Function.Call((Hash)0x487EB21CC7295BA1, vehicle, WheelType);
}

/// <summary>
/// paintType:<br />0: Normal<br />1: Metallic<br />2: Pearl<br />3: Matte<br />4: Metal<br />5: Chrome<br />6: Chameleon
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA551BE18C11A476D<br />
/// </para>
/// </remarks>
public static int GetNumModColors(int paintType, bool p1)
{
return Function.Call<int>((Hash)0xA551BE18C11A476D, paintType, p1);
}

/// <summary>
/// paintType:<br />0: Normal<br />1: Metallic<br />2: Pearl<br />3: Matte<br />4: Metal<br />5: Chrome<br />6: Chameleon<br /><br />color: number of the color.<br /><br />p3 seems to always be 0.<br /><br />Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x43FEB945EE7F85B8<br />
/// </para>
/// </remarks>
public static void SetVehicleModColor1(int /* Vehicle */ vehicle, int paintType, int color, int pearlescentColor)
{
Function.Call((Hash)0x43FEB945EE7F85B8, vehicle, paintType, color, pearlescentColor);
}

/// <summary>
/// Changes the secondary paint type and color<br />paintType:<br />0: Normal<br />1: Metallic<br />2: Pearl<br />3: Matte<br />4: Metal<br />5: Chrome<br />6: Chameleon<br /><br />color: number of the color<br /><br />Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x816562BADFDEC83E<br />
/// </para>
/// </remarks>
public static void SetVehicleModColor2(int /* Vehicle */ vehicle, int paintType, int color)
{
Function.Call((Hash)0x816562BADFDEC83E, vehicle, paintType, color);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE8D65CA700C9A693<br />
/// </para>
/// </remarks>
public static void GetVehicleModColor1(int /* Vehicle */ vehicle, ref int paintType, ref int color, ref int pearlescentColor)
{
var nativeAssistPointerVar0 = paintType;
var nativeAssistPointerVar1 = color;
var nativeAssistPointerVar2 = pearlescentColor;
unsafe {
Function.Call((Hash)0xE8D65CA700C9A693, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
paintType = nativeAssistPointerVar0;
color = nativeAssistPointerVar1;
pearlescentColor = nativeAssistPointerVar2;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x81592BE4E3878728<br />
/// </para>
/// </remarks>
public static void GetVehicleModColor2(int /* Vehicle */ vehicle, ref int paintType, ref int color)
{
var nativeAssistPointerVar0 = paintType;
var nativeAssistPointerVar1 = color;
unsafe {
Function.Call((Hash)0x81592BE4E3878728, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
paintType = nativeAssistPointerVar0;
color = nativeAssistPointerVar1;
}

/// <summary>
/// Returns a string which is the codename of the vehicle&apos;s currently selected primary color<br /><br />p1 is always 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB45085B721EFD38C<br />
/// </para>
/// </remarks>
public static string GetVehicleModColor1Name(int /* Vehicle */ vehicle, bool p1)
{
return Function.Call<string>((Hash)0xB45085B721EFD38C, vehicle, p1);
}

/// <summary>
/// Returns a string which is the codename of the vehicle&apos;s currently selected secondary color
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4967A516ED23A5A1<br />
/// </para>
/// </remarks>
public static string GetVehicleModColor2Name(int /* Vehicle */ vehicle)
{
return Function.Call<string>((Hash)0x4967A516ED23A5A1, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A83F5F9963775EF<br />
/// </para>
/// </remarks>
public static bool HaveVehicleModsStreamedIn(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x9A83F5F9963775EF, vehicle);
}

/// <summary>
/// Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0x00834EAC4A96E010<br />
/// </para>
/// </remarks>
public static bool IsVehicleModGen9Exclusive(int /* Vehicle */ vehicle, int modType, int modIndex)
{
return Function.Call<bool>((Hash)0x00834EAC4A96E010, vehicle, modType, modIndex);
}

/// <summary>
/// In b944, there are 50 (0 - 49) mod types.<br /><br />Sets the vehicle mod.<br />The vehicle must have a mod kit first.<br /><br />Any out of range ModIndex is stock.<br /><br />#Mod Type<br />Spoilers - 0<br />Front Bumper - 1<br />Rear Bumper - 2<br />Side Skirt - 3<br />Exhaust - 4<br />Frame - 5<br />Grille - 6<br />Hood - 7<br />Fender - 8<br />Right Fender - 9<br />Roof - 10<br />Engine - 11<br />Brakes - 12<br />Transmission - 13<br />Horns - 14 (modIndex from 0 to 51)<br />Suspension - 15<br />Armor - 16<br />Front Wheels - 23<br />Back Wheels - 24 //only for motocycles<br />Plate holders - 25<br />Trim Design - 27<br />Ornaments - 28<br />Dial Design - 30<br />Steering Wheel - 33<br />Shifter Leavers - 34<br />Plaques - 35<br />Hydraulics - 38<br />Livery - 48<br /><br />ENUMS: https://pastebin.com/QzEAn02v
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6AF0636DDEDCB6DD<br />
/// </para>
/// </remarks>
public static void SetVehicleMod(int /* Vehicle */ vehicle, int modType, int modIndex, bool customTires)
{
Function.Call((Hash)0x6AF0636DDEDCB6DD, vehicle, modType, modIndex, customTires);
}

/// <summary>
/// In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.<br /><br />Returns -1 if the vehicle mod is stock
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x772960298DA26FDB<br />
/// </para>
/// </remarks>
public static int GetVehicleMod(int /* Vehicle */ vehicle, int modType)
{
return Function.Call<int>((Hash)0x772960298DA26FDB, vehicle, modType);
}

/// <summary>
/// Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3924ECD70E095DC<br />
/// </para>
/// </remarks>
public static int GetVehicleModVariation(int /* Vehicle */ vehicle, int modType)
{
return Function.Call<int>((Hash)0xB3924ECD70E095DC, vehicle, modType);
}

/// <summary>
/// Returns how many possible mods a vehicle has for a given mod type
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE38E9162A2500646<br />
/// </para>
/// </remarks>
public static int GetNumVehicleMods(int /* Vehicle */ vehicle, int modType)
{
return Function.Call<int>((Hash)0xE38E9162A2500646, vehicle, modType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x92D619E420858204<br />
/// </para>
/// </remarks>
public static void RemoveVehicleMod(int /* Vehicle */ vehicle, int modType)
{
Function.Call((Hash)0x92D619E420858204, vehicle, modType);
}

/// <summary>
/// Toggles:<br />UNK17 - 17<br />Turbo - 18<br />UNK19 - 19<br />Tire Smoke - 20<br />UNK21 - 21<br />Xenon Headlights - 22
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2A1F4F37F95BAD08<br />
/// </para>
/// </remarks>
public static void ToggleVehicleMod(int /* Vehicle */ vehicle, int modType, bool toggle)
{
Function.Call((Hash)0x2A1F4F37F95BAD08, vehicle, modType, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84B233A8C8FC8AE7<br />
/// </para>
/// </remarks>
public static bool IsToggleModOn(int /* Vehicle */ vehicle, int modType)
{
return Function.Call<bool>((Hash)0x84B233A8C8FC8AE7, vehicle, modType);
}

/// <summary>
/// Returns the text label of a mod type for a given vehicle<br /><br />Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game&apos;s language
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8935624F8C5592CC<br />
/// </para>
/// </remarks>
public static string GetModTextLabel(int /* Vehicle */ vehicle, int modType, int modValue)
{
return Function.Call<string>((Hash)0x8935624F8C5592CC, vehicle, modType, modValue);
}

/// <summary>
/// Returns the name for the type of vehicle mod(Armour, engine etc)<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x51F0FEB9F6AE98C0<br />
/// </para>
/// </remarks>
public static string GetModSlotName(int /* Vehicle */ vehicle, int modType)
{
return Function.Call<string>((Hash)0x51F0FEB9F6AE98C0, vehicle, modType);
}

/// <summary>
/// Second Param = LiveryIndex<br /><br />example <br /><br />int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);<br />for (int i = 0; i &lt; count; i++)  <br />  {<br />     const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);<br />  }<br /><br /><br />this example will work fine to fetch all names <br />for example for Sanchez we get <br /><br />SANC_LV1<br />SANC_LV2<br />SANC_LV3<br />SANC_LV4<br />SANC_LV5<br /><br /><br />Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.<br /><br />Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4C7A93837C91A1F<br />
/// </para>
/// </remarks>
public static string GetLiveryName(int /* Vehicle */ vehicle, int liveryIndex)
{
return Function.Call<string>((Hash)0xB4C7A93837C91A1F, vehicle, liveryIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x90A38E9838E0A8C1<br />
/// </para>
/// </remarks>
public static int GetVehicleModModifierValue(int /* Vehicle */ vehicle, int modType, int modIndex)
{
return Function.Call<int>((Hash)0x90A38E9838E0A8C1, vehicle, modType, modIndex);
}

/// <summary>
/// Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4593CF82AA179706<br />
/// </para>
/// </remarks>
public static uint GetVehicleModIdentifierHash(int /* Vehicle */ vehicle, int modType, int modIndex)
{
return Function.Call<uint>((Hash)0x4593CF82AA179706, vehicle, modType, modIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x758F49C24925568A<br />
/// </para>
/// </remarks>
public static void PreloadVehicleMod(int /* Vehicle */ vehicle, int modType, int modIndex)
{
Function.Call((Hash)0x758F49C24925568A, vehicle, modType, modIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06F43E5175EB6D96<br />
/// </para>
/// </remarks>
public static bool HasPreloadModsFinished(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x06F43E5175EB6D96, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x445D79F995508307<br />
/// </para>
/// </remarks>
public static void ReleasePreloadMods(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x445D79F995508307, vehicle);
}

/// <summary>
/// Sets the tire smoke&apos;s color of this vehicle.<br /><br />vehicle: The vehicle that is the target of this method.<br />r: The red level in the RGB color code.<br />g: The green level in the RGB color code.<br />b: The blue level in the RGB color code.<br /><br />Note:<br />setting r,g,b to 0 will give the car independance day tyre smoke
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5BA80F839791C0F<br />
/// </para>
/// </remarks>
public static void SetVehicleTyreSmokeColor(int /* Vehicle */ vehicle, int r, int g, int b)
{
Function.Call((Hash)0xB5BA80F839791C0F, vehicle, r, g, b);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB635392A4938B3C3<br />
/// </para>
/// </remarks>
public static void GetVehicleTyreSmokeColor(int /* Vehicle */ vehicle, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0xB635392A4938B3C3, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// enum WindowTints<br />{<br /> WINDOWTINT_NONE,<br />  WINDOWTINT_PURE_BLACK,<br />    WINDOWTINT_DARKSMOKE,<br /> WINDOWTINT_LIGHTSMOKE,<br />    WINDOWTINT_STOCK,<br /> WINDOWTINT_LIMO,<br />  WINDOWTINT_GREEN<br />};<br />Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x57C51E6BAD752696<br />
/// </para>
/// </remarks>
public static void SetVehicleWindowTint(int /* Vehicle */ vehicle, int tint)
{
Function.Call((Hash)0x57C51E6BAD752696, vehicle, tint);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0EE21293DAD47C95<br />
/// </para>
/// </remarks>
public static int GetVehicleWindowTint(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x0EE21293DAD47C95, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9D1224004B3A6707<br />
/// </para>
/// </remarks>
public static int GetNumVehicleWindowTints()
{
return Function.Call<int>((Hash)0x9D1224004B3A6707);
}

/// <summary>
/// What&apos;s this for? Primary and Secondary RGB have their own natives and this one doesn&apos;t seem specific.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF3CC740D36221548<br />
/// </para>
/// </remarks>
public static void GetVehicleColor(int /* Vehicle */ vehicle, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0xF3CC740D36221548, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// Some kind of flags.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEEBFC7A7EFDC35B4<br />
/// </para>
/// </remarks>
public static int GetVehicleColoursWhichCanBeSet(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xEEBFC7A7EFDC35B4, vehicle);
}

/// <summary>
/// iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);<br />if (iVar3 == joaat(&quot;weapon_stickybomb&quot;))<br />{<br />	func_171(726);<br />	iLocal_260 = 1;<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE495D1EF4C91FD20<br />
/// </para>
/// </remarks>
public static uint GetVehicleCauseOfDestruction(int /* Vehicle */ vehicle)
{
return Function.Call<uint>((Hash)0xE495D1EF4C91FD20, vehicle);
}

/// <summary>
/// Used for helis.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x5EE5632F47AE9695<br />
/// </para>
/// </remarks>
public static void OverridePlaneDamageThrehsold(int /* Vehicle */ vehicle, float health)
{
Function.Call((Hash)0x5EE5632F47AE9695, vehicle, health);
}

/// <summary>
/// From the driver&apos;s perspective, is the left headlight broken.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5EF77C9ADD3B11A3<br />
/// </para>
/// </remarks>
public static bool GetIsLeftVehicleHeadlightDamaged(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x5EF77C9ADD3B11A3, vehicle);
}

/// <summary>
/// From the driver&apos;s perspective, is the right headlight broken.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7ECB73355EB2F20<br />
/// </para>
/// </remarks>
public static bool GetIsRightVehicleHeadlightDamaged(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xA7ECB73355EB2F20, vehicle);
}

/// <summary>
/// Returns true when both headlights are broken. This does not include extralights.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xEC69ADF931AAE0C3<br />
/// </para>
/// </remarks>
public static bool GetBothVehicleHeadlightsDamaged(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xEC69ADF931AAE0C3, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93A3996368C94158<br />
/// </para>
/// </remarks>
public static void ModifyVehicleTopSpeed(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0x93A3996368C94158, vehicle, value);
}

/// <summary>
/// To reset the max speed, set the `speed` value to `0.0` or lower.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xBAA045B4E42F3C06<br />
/// </para>
/// </remarks>
public static void SetVehicleMaxSpeed(int /* Vehicle */ vehicle, float speed)
{
Function.Call((Hash)0xBAA045B4E42F3C06, vehicle, speed);
}

/// <summary>
/// Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.<br />May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for &apos;func_1333&apos; in freemode.c it isn&apos;t used just for trains. Thanks for the info tho.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1CF38D529D7441D9<br />
/// </para>
/// </remarks>
public static void SetVehicleStaysFrozenWhenCleanedUp(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1CF38D529D7441D9, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1F9FB66F3A3842D2<br />
/// </para>
/// </remarks>
public static void SetVehicleActAsIfHighSpeedForFragSmashing(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x1F9FB66F3A3842D2, vehicle, p1);
}

/// <summary>
/// Sets some bit and float of vehicle. float is &gt;= 0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0x59C3757B3B7408E8<br />
/// </para>
/// </remarks>
public static void SetPedsCanFallOffThisVehicleFromLargeFallDamage(int /* Vehicle */ vehicle, bool toggle, float p2)
{
Function.Call((Hash)0x59C3757B3B7408E8, vehicle, toggle, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x54B0F614960F4A5F<br />
/// </para>
/// </remarks>
public static int AddVehicleCombatAngledAvoidanceArea(float p0, float p1, float p2, float p3, float p4, float p5, float p6)
{
return Function.Call<int>((Hash)0x54B0F614960F4A5F, p0, p1, p2, p3, p4, p5, p6);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE30524E1871F481D<br />
/// </para>
/// </remarks>
public static void RemoveVehicleCombatAvoidanceArea(int p0)
{
Function.Call((Hash)0xE30524E1871F481D, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x291E373D483E7EE7<br />
/// </para>
/// </remarks>
public static bool IsAnyPedRappellingFromHeli(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x291E373D483E7EE7, vehicle);
}

/// <summary>
/// &lt;1.0 - Decreased torque<br />=1.0 - Default torque<br />&gt;1.0 - Increased torque<br /><br />Negative values will cause the vehicle to go backwards instead of forwards while accelerating.<br /><br />value - is between 0.2 and 1.8 in the decompiled scripts. <br /><br />This needs to be called every frame to take effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB59E4BD37AE292DB<br />
/// </para>
/// </remarks>
public static void SetVehicleCheatPowerIncrease(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0xB59E4BD37AE292DB, vehicle, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0AD9E8F87FF7C16F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleInfluencesWantedLevel(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0x0AD9E8F87FF7C16F, p0, p1);
}

/// <summary>
/// Sets the wanted state of this vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7EC25A3EBEEC726<br />
/// </para>
/// </remarks>
public static void SetVehicleIsWanted(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0xF7EC25A3EBEEC726, vehicle, state);
}

/// <summary>
/// Sets the boat boom position for the `TR3` trailer.<br />Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.<br />To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF488C566413B4232<br />
/// </para>
/// </remarks>
public static void SwingBoatBoomToRatio(int /* Vehicle */ vehicle, float ratio)
{
Function.Call((Hash)0xF488C566413B4232, vehicle, ratio);
}

/// <summary>
/// Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC1F981A6F74F0C23<br />
/// </para>
/// </remarks>
public static void SwingBoatBoomFreely(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xC1F981A6F74F0C23, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0F3B4D4E43177236<br />
/// </para>
/// </remarks>
public static void AllowBoatBoomToAnimate(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x0F3B4D4E43177236, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6636C535F6CC2725<br />
/// </para>
/// </remarks>
public static float GetBoatBoomPositionRatio(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x6636C535F6CC2725, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x23428FC53C60919C<br />
/// </para>
/// </remarks>
public static void DisablePlaneAileron(int /* Vehicle */ vehicle, bool p1, bool p2)
{
Function.Call((Hash)0x23428FC53C60919C, vehicle, p1, p2);
}

/// <summary>
/// Returns true when in a vehicle, false whilst entering/exiting.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAE31E7DF9B5B132E<br />
/// </para>
/// </remarks>
public static bool GetIsVehicleEngineRunning(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xAE31E7DF9B5B132E, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1D97D1E3A70A649F<br />
/// </para>
/// </remarks>
public static void SetVehicleUseAlternateHandling(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1D97D1E3A70A649F, vehicle, toggle);
}

/// <summary>
/// Only works on bikes, both X and Y work in the -1 - 1 range.<br /><br />X forces the bike to turn left or right (-1, 1)<br />Y forces the bike to lean to the left or to the right (-1, 1)<br /><br />Example with X -1/Y 1<br />http://i.imgur.com/TgIuAPJ.jpg
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CFA4896C3A53CBB<br />
/// </para>
/// </remarks>
public static void SetBikeOnStand(int /* Vehicle */ vehicle, float x, float y)
{
Function.Call((Hash)0x9CFA4896C3A53CBB, vehicle, x, y);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAB04325045427AAE<br />
/// </para>
/// </remarks>
public static void SetVehicleNotStealableAmbiently(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xAB04325045427AAE, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCFD778E7904C255E<br />
/// </para>
/// </remarks>
public static void LockDoorsWhenNoLongerNeeded(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xCFD778E7904C255E, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xACFB2463CC22BED2<br />
/// </para>
/// </remarks>
public static void SetLastDrivenVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xACFB2463CC22BED2, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB2D06FAEDE65B577<br />
/// </para>
/// </remarks>
public static int GetLastDrivenVehicle()
{
return Function.Call<int>((Hash)0xB2D06FAEDE65B577);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE01903C47C7AC89E<br />
/// </para>
/// </remarks>
public static void ClearLastDrivenVehicle()
{
Function.Call((Hash)0xE01903C47C7AC89E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x02398B627547189C<br />
/// </para>
/// </remarks>
public static void SetVehicleHasBeenDrivenFlag(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x02398B627547189C, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB893215D8D4C015B<br />
/// </para>
/// </remarks>
public static void SetTaskVehicleGotoPlaneMinHeightAboveTerrain(int /* Vehicle */ plane, int height)
{
Function.Call((Hash)0xB893215D8D4C015B, plane, height);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x93AE6A61BE015BF1<br />
/// </para>
/// </remarks>
public static void SetVehicleLodMultiplier(int /* Vehicle */ vehicle, float multiplier)
{
Function.Call((Hash)0x93AE6A61BE015BF1, vehicle, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x428BACCDF5E26EAD<br />
/// </para>
/// </remarks>
public static void SetVehicleCanSaveInGarage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x428BACCDF5E26EAD, vehicle, toggle);
}

/// <summary>
/// Also includes some &quot;turnOffBones&quot; when vehicle mods are installed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x42A4BEB35D372407<br />
/// </para>
/// </remarks>
public static int GetVehicleNumOfBrokenOffParts(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x42A4BEB35D372407, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C8CBFE1EA5FC631<br />
/// </para>
/// </remarks>
public static int GetVehicleNumOfBrokenLoosenParts(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x2C8CBFE1EA5FC631, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4D9D109F63FEE1D4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetForceVehicleEngineDamageByBullet(int /* bug: Any */ p0, bool p1)
{
Function.Call((Hash)0x4D9D109F63FEE1D4, p0, p1);
}

/// <summary>
/// Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x279D50DE5652D935<br />
/// </para>
/// </remarks>
public static void SetVehicleGeneratesEngineShockingEvents(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x279D50DE5652D935, vehicle, toggle);
}

/// <summary>
/// Copies sourceVehicle&apos;s damage (broken bumpers, broken lights, etc.) to targetVehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE44A982368A4AF23<br />
/// </para>
/// </remarks>
public static void CopyVehicleDamages(int /* Vehicle */ sourceVehicle, int /* Vehicle */ targetVehicle)
{
Function.Call((Hash)0xE44A982368A4AF23, sourceVehicle, targetVehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF25E02CB9C5818F8<br />
/// </para>
/// </remarks>
public static void DisableVehicleExplosionBreakOffParts()
{
Function.Call((Hash)0xF25E02CB9C5818F8);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC3CCA5844452B06<br />
/// </para>
/// </remarks>
public static void SetLightsCutoffDistanceTweak(float distance)
{
Function.Call((Hash)0xBC3CCA5844452B06, distance);
}

/// <summary>
/// Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:<br /><br />WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY(&quot;VEHICLE_WEAPON_PLANE_ROCKET&quot;));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x74CD9A9327A282EA<br />
/// </para>
/// </remarks>
public static void SetVehicleShootAtTarget(int /* Ped */ driver, int /* Entity */ entity, float xTarget, float yTarget, float zTarget)
{
Function.Call((Hash)0x74CD9A9327A282EA, driver, entity, xTarget, yTarget, zTarget);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8F5EBAB1F260CFCE<br />
/// </para>
/// </remarks>
public static bool GetVehicleLockOnTarget(int /* Vehicle */ vehicle, ref int /* Entity* */ entity)
{
var nativeAssistPointerVar0 = entity;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8F5EBAB1F260CFCE, vehicle, &nativeAssistPointerVar0);
}
entity = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x97CE68CB032583F0<br />
/// </para>
/// </remarks>
public static void SetForceHdVehicle(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x97CE68CB032583F0, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x182F266C2D9E2BEB<br />
/// </para>
/// </remarks>
public static void SetVehicleCustomPathNodeStreamingRadius(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0x182F266C2D9E2BEB, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9CCC9525BF2408E0<br />
/// </para>
/// </remarks>
public static int GetVehiclePlateType(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x9CCC9525BF2408E0, vehicle);
}

/// <summary>
/// in script hook .net <br /><br />Vehicle v = ...;<br />Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x64473AEFDCF47DCA<br />
/// </para>
/// </remarks>
public static void TrackVehicleVisibility(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x64473AEFDCF47DCA, vehicle);
}

/// <summary>
/// must be called after TRACK_VEHICLE_VISIBILITY <br /><br />it&apos;s not instant so probabilly must pass an &apos;update&apos; to see correct result.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA0A52D24FB98293<br />
/// </para>
/// </remarks>
public static bool IsVehicleVisible(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xAA0A52D24FB98293, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x89F149B6131E57DA<br />
/// </para>
/// </remarks>
public static void SetVehicleGravity(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x89F149B6131E57DA, vehicle, toggle);
}

/// <summary>
/// Enable/Disables global slipstream physics
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE6C0C80B8C867537<br />
/// </para>
/// </remarks>
public static void SetEnableVehicleSlipstreaming(bool toggle)
{
Function.Call((Hash)0xE6C0C80B8C867537, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xF051D9BFB6BA39C0<br />
/// </para>
/// </remarks>
public static void SetVehicleSlipstreamingShouldTimeOut(bool toggle)
{
Function.Call((Hash)0xF051D9BFB6BA39C0, toggle);
}

/// <summary>
/// Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36492C2F0D134C56<br />
/// </para>
/// </remarks>
public static float GetVehicleCurrentTimeInSlipStream(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x36492C2F0D134C56, vehicle);
}

/// <summary>
/// Returns true if the vehicle is being slipstreamed by another vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x48C633E94A8142A7<br />
/// </para>
/// </remarks>
public static bool IsVehicleProducingSlipStream(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x48C633E94A8142A7, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x06582AFF74894C75<br />
/// </para>
/// </remarks>
public static void SetVehicleInactiveDuringPlayback(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x06582AFF74894C75, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDFFCEF48E511DB48<br />
/// </para>
/// </remarks>
public static void SetVehicleActiveDuringPlayback(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xDFFCEF48E511DB48, vehicle, toggle);
}

/// <summary>
/// Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8D474C8FAEFF6CDE<br />
/// </para>
/// </remarks>
public static bool IsVehicleSprayable(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x8D474C8FAEFF6CDE, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x983765856F2564F9<br />
/// </para>
/// </remarks>
public static void SetVehicleEngineCanDegrade(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x983765856F2564F9, vehicle, toggle);
}

/// <summary>
/// Adds some kind of shadow to the vehicle.<br /><br />p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF0E4BA16D1DB546C<br />
/// </para>
/// </remarks>
public static void DisableVehcileDynamicAmbientScales(int /* Vehicle */ vehicle, int p1, int p2)
{
Function.Call((Hash)0xF0E4BA16D1DB546C, vehicle, p1, p2);
}

/// <summary>
/// Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF87D9F2301F7D206<br />
/// </para>
/// </remarks>
public static void EnableVehicleDynamicAmbientScales(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xF87D9F2301F7D206, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4198AB0022B15F87<br />
/// </para>
/// </remarks>
public static bool IsPlaneLandingGearIntact(int /* Vehicle */ plane)
{
return Function.Call<bool>((Hash)0x4198AB0022B15F87, plane);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x755D6D5267CBBD7E<br />
/// </para>
/// </remarks>
public static bool ArePlanePropellersIntact(int /* Vehicle */ plane)
{
return Function.Call<bool>((Hash)0x755D6D5267CBBD7E, plane);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x4C815EB175086F84<br />
/// </para>
/// </remarks>
public static bool SetPlanePropellerHealth(int /* Vehicle */ plane, float health)
{
return Function.Call<bool>((Hash)0x4C815EB175086F84, plane, health);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0CDDA42F9E360CA6<br />
/// </para>
/// </remarks>
public static void SetVehicleCanDeformWheels(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x0CDDA42F9E360CA6, vehicle, toggle);
}

/// <summary>
/// Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4AF9BD80EEBEB453<br />
/// </para>
/// </remarks>
public static bool IsVehicleStolen(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x4AF9BD80EEBEB453, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x67B2C79AA7FF5738<br />
/// </para>
/// </remarks>
public static void SetVehicleIsStolen(int /* Vehicle */ vehicle, bool isStolen)
{
Function.Call((Hash)0x67B2C79AA7FF5738, vehicle, isStolen);
}

/// <summary>
/// This native sets the turbulence multiplier. It only works for planes.<br />0.0 = no turbulence at all.<br />1.0 = heavy turbulence.<br />Works by just calling it once, does not need to be called every tick.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAD2D28A1AFDFF131<br />
/// </para>
/// </remarks>
public static void SetPlaneTurbulenceMultiplier(int /* Vehicle */ vehicle, float multiplier)
{
Function.Call((Hash)0xAD2D28A1AFDFF131, vehicle, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5991A01434CE9677<br />
/// </para>
/// </remarks>
public static bool AreWingsOfPlaneIntact(int /* Vehicle */ plane)
{
return Function.Call<bool>((Hash)0x5991A01434CE9677, plane);
}

/// <summary>
/// This native doesn&apos;t seem to do anything, might be a debug-only native.<br /><br />Confirmed, it is a debug native.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB264C4D2F2B0A78B<br />
/// </para>
/// </remarks>
public static void AllowAmbientVehiclesToAvoidAdverseConditions(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xB264C4D2F2B0A78B, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E21D3DF1051399D<br />
/// </para>
/// </remarks>
public static void DetachVehicleFromCargobob(int /* Vehicle */ vehicle, int /* Vehicle */ cargobob)
{
Function.Call((Hash)0x0E21D3DF1051399D, vehicle, cargobob);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADF7BE450512C12F<br />
/// </para>
/// </remarks>
public static bool DetachVehicleFromAnyCargobob(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xADF7BE450512C12F, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xAF03011701811146<br />
/// </para>
/// </remarks>
public static bool DetachEntityFromCargobob(int /* Vehicle */ cargobob, int /* Entity */ entity)
{
return Function.Call<bool>((Hash)0xAF03011701811146, cargobob, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD40148F22E81A1D9<br />
/// </para>
/// </remarks>
public static bool IsVehicleAttachedToCargobob(int /* Vehicle */ cargobob, int /* Vehicle */ vehicleAttached)
{
return Function.Call<bool>((Hash)0xD40148F22E81A1D9, cargobob, vehicleAttached);
}

/// <summary>
/// Returns attached vehicle (Vehicle in parameter must be cargobob)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x873B82D42AC2B9E5<br />
/// </para>
/// </remarks>
public static int GetVehicleAttachedToCargobob(int /* Vehicle */ cargobob)
{
return Function.Call<int>((Hash)0x873B82D42AC2B9E5, cargobob);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x99093F60746708CA<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetEntityAttachedToCargobob(int /* bug: Any */ p0)
{
return Function.Call<int>((Hash)0x99093F60746708CA, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4127F1D84E347769<br />
/// </para>
/// </remarks>
public static void AttachVehicleToCargobob(int /* Vehicle */ vehicle, int /* Vehicle */ cargobob, int p2, float x, float y, float z)
{
Function.Call((Hash)0x4127F1D84E347769, vehicle, cargobob, p2, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xA1DD82F3CCF9A01E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void AttachEntityToCargobob(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4, int /* bug: Any */ p5)
{
Function.Call((Hash)0xA1DD82F3CCF9A01E, p0, p1, p2, p3, p4, p5);
}

/// <summary>
/// Stops cargobob from being able to detach the attached vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x571FEB383F629926<br />
/// </para>
/// </remarks>
public static void SetCargobobForceDontDetachVehicle(int /* Vehicle */ cargobob, bool toggle)
{
Function.Call((Hash)0x571FEB383F629926, cargobob, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x1F34B0626C594380<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCargobobExcludeFromPickupEntity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x1F34B0626C594380, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x2C1D8B3B19E517CC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool CanCargobobPickUpEntity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x2C1D8B3B19E517CC, p0, p1);
}

/// <summary>
/// Gets the position of the cargobob hook, in world coords.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCBDB9B923CACC92D<br />
/// </para>
/// </remarks>
public static Vector3 GetAttachedPickUpHookPosition(int /* Vehicle */ cargobob)
{
return Function.Call<Vector3>((Hash)0xCBDB9B923CACC92D, cargobob);
}

/// <summary>
/// Returns true only when the hook is active, will return false if the magnet is active
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1821D91AD4B56108<br />
/// </para>
/// </remarks>
public static bool DoesCargobobHavePickUpRope(int /* Vehicle */ cargobob)
{
return Function.Call<bool>((Hash)0x1821D91AD4B56108, cargobob);
}

/// <summary>
/// Drops the Hook/Magnet on a cargobob<br /><br />state<br />enum eCargobobHook<br />{<br />  CARGOBOB_HOOK = 0,<br />    CARGOBOB_MAGNET = 1,<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7BEB0C7A235F6F3B<br />
/// </para>
/// </remarks>
public static void CreatePickUpRopeForCargobob(int /* Vehicle */ cargobob, int state)
{
Function.Call((Hash)0x7BEB0C7A235F6F3B, cargobob, state);
}

/// <summary>
/// Retracts the hook on the cargobob.<br /><br />Note: after you retract it the natives for dropping the hook no longer work
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9768CF648F54C804<br />
/// </para>
/// </remarks>
public static void RemovePickUpRopeForCargobob(int /* Vehicle */ cargobob)
{
Function.Call((Hash)0x9768CF648F54C804, cargobob);
}

/// <summary>
/// min: 1.9f, max: 100.0f
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x877C1EAEAC531023<br />
/// </para>
/// </remarks>
public static void SetPickupRopeLengthForCargobob(int /* Vehicle */ cargobob, float length1, float length2, bool p3)
{
Function.Call((Hash)0x877C1EAEAC531023, cargobob, length1, length2, p3);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xC0ED6438E6D39BA8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPickupRopeLengthWithoutCreatingRopeForCargobob(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0xC0ED6438E6D39BA8, p0, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCF1182F682F65307<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCargobobPickupRopeDampingMultiplier(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xCF1182F682F65307, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0D5F65A8F4EBDAB5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCargobobPickupRopeType(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x0D5F65A8F4EBDAB5, p0, p1);
}

/// <summary>
/// Returns true only when the magnet is active, will return false if the hook is active
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E08BF5B3722BAC9<br />
/// </para>
/// </remarks>
public static bool DoesCargobobHavePickupMagnet(int /* Vehicle */ cargobob)
{
return Function.Call<bool>((Hash)0x6E08BF5B3722BAC9, cargobob);
}

/// <summary>
/// Won&apos;t attract or magnetize to any helicopters or planes of course, but that&apos;s common sense.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9A665550F8DA349B<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetActive(int /* Vehicle */ cargobob, bool isActive)
{
Function.Call((Hash)0x9A665550F8DA349B, cargobob, isActive);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCBFCD9D1DAC19E2<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetStrength(int /* Vehicle */ cargobob, float strength)
{
Function.Call((Hash)0xBCBFCD9D1DAC19E2, cargobob, strength);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA17BAD153B51547E<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetFalloff(int /* Vehicle */ cargobob, float p1)
{
Function.Call((Hash)0xA17BAD153B51547E, cargobob, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x66979ACF5102FD2F<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetReducedStrength(int /* Vehicle */ cargobob, float p1)
{
Function.Call((Hash)0x66979ACF5102FD2F, cargobob, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D8EAC07506291FB<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetReducedFalloff(int /* Vehicle */ cargobob, float p1)
{
Function.Call((Hash)0x6D8EAC07506291FB, cargobob, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xED8286F71A819BAA<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetPullStrength(int /* Vehicle */ cargobob, float p1)
{
Function.Call((Hash)0xED8286F71A819BAA, cargobob, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x685D5561680D088B<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetPullRopeLength(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0x685D5561680D088B, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE301BD63E9E13CF0<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetSetTargetedMode(int /* Vehicle */ vehicle, int /* Vehicle */ cargobob)
{
Function.Call((Hash)0xE301BD63E9E13CF0, vehicle, cargobob);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9BDDC73CC6A115D4<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetSetAmbientMode(int /* Vehicle */ vehicle, bool p1, bool p2)
{
Function.Call((Hash)0x9BDDC73CC6A115D4, vehicle, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x56EB5E94318D3FB6<br />
/// </para>
/// </remarks>
public static void SetCargobobPickupMagnetEnsurePickupEntityUpright(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x56EB5E94318D3FB6, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x25ECB9F8017D98E0<br />
/// </para>
/// </remarks>
public static bool DoesVehicleHaveWeapons(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x25ECB9F8017D98E0, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2C4A1590ABF43E8B<br />
/// </para>
/// </remarks>
public static void SetVehicleWillTellOthersToHurry(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0x2C4A1590ABF43E8B, vehicle, p1);
}

/// <summary>
/// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF4FC6A6F67D8D856<br />
/// </para>
/// </remarks>
public static void DisableVehicleWeapon(bool disabled, uint weaponHash, int /* Vehicle */ vehicle, int /* Ped */ owner)
{
Function.Call((Hash)0xF4FC6A6F67D8D856, disabled, weaponHash, vehicle, owner);
}

/// <summary>
/// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x563B65A643ED072E<br />
/// </para>
/// </remarks>
public static bool IsVehicleWeaponDisabled(uint weaponHash, int /* Vehicle */ vehicle, int /* Ped */ owner)
{
return Function.Call<bool>((Hash)0x563B65A643ED072E, weaponHash, vehicle, owner);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE05DD0E9707003A3<br />
/// </para>
/// </remarks>
public static void SetVehicleUsedForPilotSchool(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xE05DD0E9707003A3, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x21115BCD6E44656A<br />
/// </para>
/// </remarks>
public static void SetVehicleActiveForPedNavigation(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x21115BCD6E44656A, vehicle, toggle);
}

/// <summary>
/// Returns an int<br /><br />Vehicle Classes:<br />0: Compacts<br />1: Sedans<br />2: SUVs<br />3: Coupes<br />4: Muscle<br />5: Sports Classics<br />6: Sports<br />7: Super<br />8: Motorcycles<br />9: Off-road<br />10: Industrial<br />11: Utility<br />12: Vans<br />13: Cycles<br />14: Boats<br />15: Helicopters<br />16: Planes<br />17: Service<br />18: Emergency<br />19: Military<br />20: Commercial<br />21: Trains<br /><br />char buffer[128];<br />std::sprintf(buffer, &quot;VEH_CLASS_%i&quot;, VEHICLE::GET_VEHICLE_CLASS(vehicle));<br /><br />const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x29439776AAA00A62<br />
/// </para>
/// </remarks>
public static int GetVehicleClass(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x29439776AAA00A62, vehicle);
}

/// <summary>
/// char buffer[128];<br />std::sprintf(buffer, &quot;VEH_CLASS_%i&quot;, VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));<br /><br />const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);<br /><br />Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDEDF1C8BD47C2200<br />
/// </para>
/// </remarks>
public static int GetVehicleClassFromName(uint modelHash)
{
return Function.Call<int>((Hash)0xDEDF1C8BD47C2200, modelHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBCDF8BAF56C87B6A<br />
/// </para>
/// </remarks>
public static void SetPlayersLastVehicle(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xBCDF8BAF56C87B6A, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x300504B23BD3B711<br />
/// </para>
/// </remarks>
public static void SetVehicleCanBeUsedByFleeingPeds(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x300504B23BD3B711, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE5810AC70602F2F5<br />
/// </para>
/// </remarks>
public static void SetAircraftPilotSkillNoiseScalar(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0xE5810AC70602F2F5, vehicle, p1);
}

/// <summary>
/// Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.<br /><br />youtu.be/3arlUxzHl5Y <br />i.imgur.com/WrNpYFs.jpg
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x068F64F2470F9656<br />
/// </para>
/// </remarks>
public static void SetVehicleDropsMoneyWhenBlownUp(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x068F64F2470F9656, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8FBC8B1330CA9B4<br />
/// </para>
/// </remarks>
public static void SetVehicleKeepEngineOnWhenAbandoned(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xB8FBC8B1330CA9B4, vehicle, toggle);
}

/// <summary>
/// Seems to copy some values in vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x6A973569BA094650<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleImpatienceTimer(int /* Vehicle */ vehicle, int /* bug: Any */ p1)
{
Function.Call((Hash)0x6A973569BA094650, vehicle, p1);
}

/// <summary>
/// Use the &quot;AIHandling&quot; string found in handling.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x10655FAB9915623D<br />
/// </para>
/// </remarks>
public static void SetVehicleHandlingOverride(int /* Vehicle */ vehicle, uint hash)
{
Function.Call((Hash)0x10655FAB9915623D, vehicle, hash);
}

/// <summary>
/// Max value is 32767
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x79DF7E806202CE01<br />
/// </para>
/// </remarks>
public static void SetVehicleExtendedRemovalRange(int /* Vehicle */ vehicle, int range)
{
Function.Call((Hash)0x79DF7E806202CE01, vehicle, range);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9007A2F21DC108D4<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleSteeringBiasScalar(int /* bug: Any */ p0, float p1)
{
Function.Call((Hash)0x9007A2F21DC108D4, p0, p1);
}

/// <summary>
/// value between 0.0 and 1.0
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6E0859B530A365CC<br />
/// </para>
/// </remarks>
public static void SetHeliControlLaggingRateScalar(int /* Vehicle */ helicopter, float multiplier)
{
Function.Call((Hash)0x6E0859B530A365CC, helicopter, multiplier);
}

/// <summary>
/// Seems to be related to the metal parts, not tyres (like i was expecting lol)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1837AF7C627009BA<br />
/// </para>
/// </remarks>
public static void SetVehicleFrictionOverride(int /* Vehicle */ vehicle, float friction)
{
Function.Call((Hash)0x1837AF7C627009BA, vehicle, friction);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA37B9A517B133349<br />
/// </para>
/// </remarks>
public static void SetVehicleWheelsCanBreakOffWhenBlowUp(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xA37B9A517B133349, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF78F94D60248C737<br />
/// </para>
/// </remarks>
public static bool ArePlaneControlPanelsIntact(int /* Vehicle */ vehicle, bool p1)
{
return Function.Call<bool>((Hash)0xF78F94D60248C737, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA46413066687A328<br />
/// </para>
/// </remarks>
public static void SetVehicleCeilingHeight(int /* Vehicle */ vehicle, float height)
{
Function.Call((Hash)0xA46413066687A328, vehicle, height);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E569EC46EC21CAE<br />
/// </para>
/// </remarks>
public static void SetVehicleNoExplosionDamageFromDriver(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x5E569EC46EC21CAE, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6D6AF961B72728AE<br />
/// </para>
/// </remarks>
public static void ClearVehicleRouteHistory(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x6D6AF961B72728AE, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x956B409B984D9BF7<br />
/// </para>
/// </remarks>
public static int DoesVehicleExistWithDecorator(string decorator)
{
return Function.Call<int>((Hash)0x956B409B984D9BF7, decorator);
}

/// <summary>
/// Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER<br />Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn&apos;t enable that feature (or trigger script events related to it).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x41062318F23ED854<br />
/// </para>
/// </remarks>
public static void SetVehicleAiCanUseExclusiveSeats(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x41062318F23ED854, vehicle, toggle);
}

/// <summary>
/// index: 0 - 1<br /><br />Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB5C51B5502E85E83<br />
/// </para>
/// </remarks>
public static void SetVehicleExclusiveDriver(int /* Vehicle */ vehicle, int /* Ped */ ped, int index)
{
Function.Call((Hash)0xB5C51B5502E85E83, vehicle, ped, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0xB09D25E77C33EB3F<br />
/// </para>
/// </remarks>
public static bool IsPedExclusiveDriverOfVehicle(int /* Ped */ ped, int /* Vehicle */ vehicle, ref int outIndex)
{
var nativeAssistPointerVar0 = outIndex;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xB09D25E77C33EB3F, ped, vehicle, &nativeAssistPointerVar0);
}
outIndex = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x500873A45724C863<br />
/// </para>
/// </remarks>
public static void DisableIndividualPlanePropeller(int /* Vehicle */ vehicle, int propeller)
{
Function.Call((Hash)0x500873A45724C863, vehicle, propeller);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB055A34527CB8FD7<br />
/// </para>
/// </remarks>
public static void SetVehicleForceAfterburner(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xB055A34527CB8FD7, vehicle, toggle);
}

/// <summary>
/// R* used it to &quot;remove&quot; vehicle windows when &quot;nightshark&quot; had some mod, which adding some kind of armored windows. When enabled, you can&apos;t break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x1087BC8EC540DAEB<br />
/// </para>
/// </remarks>
public static void SetDontProcessVehicleGlass(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1087BC8EC540DAEB, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x4AD280EB48B2D8E6<br />
/// </para>
/// </remarks>
public static void SetDisableWantedConesResponse(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x4AD280EB48B2D8E6, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xB68CFAF83A02768D<br />
/// </para>
/// </remarks>
public static void SetUseDesiredZCruiseSpeedForLanding(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xB68CFAF83A02768D, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0205F5365292D2EB<br />
/// </para>
/// </remarks>
public static void SetArriveDistanceOverrideForVehiclePersuitAttack(int /* Vehicle */ vehicle, float p1)
{
Function.Call((Hash)0x0205F5365292D2EB, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xCF9159024555488C<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleReadyForCleanup(int /* bug: Any */ p0)
{
Function.Call((Hash)0xCF9159024555488C, p0);
}

/// <summary>
/// Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF796359A959DF65D<br />
/// </para>
/// </remarks>
public static void SetDistantCarsEnabled(bool toggle)
{
Function.Call((Hash)0xF796359A959DF65D, toggle);
}

/// <summary>
/// Sets the color of the neon lights of the specified vehicle.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8E0A582209A62695<br />
/// </para>
/// </remarks>
public static void SetVehicleNeonColour(int /* Vehicle */ vehicle, int r, int g, int b)
{
Function.Call((Hash)0x8E0A582209A62695, vehicle, r, g, b);
}

/// <summary>
/// Index references CVehicleModelColor
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1493<br />
/// <b>Native ID:</b> 0xB93B2867F7B479D1<br />
/// </para>
/// </remarks>
public static void SetVehicleNeonIndexColour(int /* Vehicle */ vehicle, int index)
{
Function.Call((Hash)0xB93B2867F7B479D1, vehicle, index);
}

/// <summary>
/// Gets the color of the neon lights of the specified vehicle.<br /><br />See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7619EEE8C886757F<br />
/// </para>
/// </remarks>
public static void GetVehicleNeonColour(int /* Vehicle */ vehicle, ref int r, ref int g, ref int b)
{
var nativeAssistPointerVar0 = r;
var nativeAssistPointerVar1 = g;
var nativeAssistPointerVar2 = b;
unsafe {
Function.Call((Hash)0x7619EEE8C886757F, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1, &nativeAssistPointerVar2);
}
r = nativeAssistPointerVar0;
g = nativeAssistPointerVar1;
b = nativeAssistPointerVar2;
}

/// <summary>
/// Sets the neon lights of the specified vehicle on/off.<br /><br />Indices:<br />0 = Left<br />1 = Right<br />2 = Front<br />3 = Back
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2AA720E4287BF269<br />
/// </para>
/// </remarks>
public static void SetVehicleNeonEnabled(int /* Vehicle */ vehicle, int index, bool toggle)
{
Function.Call((Hash)0x2AA720E4287BF269, vehicle, index, toggle);
}

/// <summary>
/// indices:<br />0 = Left<br />1 = Right<br />2 = Front<br />3 = Back
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C4B92553E4766A5<br />
/// </para>
/// </remarks>
public static bool GetVehicleNeonEnabled(int /* Vehicle */ vehicle, int index)
{
return Function.Call<bool>((Hash)0x8C4B92553E4766A5, vehicle, index);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x35E0654F4BAD7971<br />
/// </para>
/// </remarks>
public static void SetAmbientVehicleNeonEnabled(bool p0)
{
Function.Call((Hash)0x35E0654F4BAD7971, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x83F813570FF519DE<br />
/// </para>
/// </remarks>
public static void SuppressNeonsOnVehicle(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x83F813570FF519DE, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB088E9A47AE6EDD5<br />
/// </para>
/// </remarks>
public static void SetDisableSuperdummy(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xB088E9A47AE6EDD5, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDBA3C090E3D74690<br />
/// </para>
/// </remarks>
public static void RequestVehicleDial(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xDBA3C090E3D74690, vehicle);
}

/// <summary>
/// Seems related to vehicle health, like the one in IV.<br />Max 1000, min 0.<br />Vehicle does not necessarily explode or become undrivable at 0.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF271147EB7B40F12<br />
/// </para>
/// </remarks>
public static float GetVehicleBodyHealth(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0xF271147EB7B40F12, vehicle);
}

/// <summary>
/// p2 often set to 1000.0 in the decompiled scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB77D05AC8C78AADB<br />
/// </para>
/// </remarks>
public static void SetVehicleBodyHealth(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0xB77D05AC8C78AADB, vehicle, value);
}

/// <summary>
/// Outputs 2 Vector3&apos;s.<br />Scripts check if out2.x - out1.x &gt; someshit.x<br />Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDF7E3EEB29642C38<br />
/// </para>
/// </remarks>
public static void GetVehicleSize(int /* Vehicle */ vehicle, ref Vector3 out1, ref Vector3 out2)
{
var nativeAssistPointerVar0 = out1;
var nativeAssistPointerVar1 = out2;
unsafe {
Function.Call((Hash)0xDF7E3EEB29642C38, vehicle, &nativeAssistPointerVar0, &nativeAssistPointerVar1);
}
out1 = nativeAssistPointerVar0;
out2 = nativeAssistPointerVar1;
}

/// <summary>
/// Gets the height of the vehicle&apos;s suspension.<br />The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.<br />0.000 is the stock suspension.<br />0.008 is Ultra Suspension.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x53952FD2BAA19F17<br />
/// </para>
/// </remarks>
public static float GetFakeSuspensionLoweringAmount(int /* Vehicle */ vehicle)
{
return Function.Call<float>((Hash)0x53952FD2BAA19F17, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x84FD40F56075E816<br />
/// </para>
/// </remarks>
public static void SetCarHighSpeedBumpSeverityMultiplier(float multiplier)
{
Function.Call((Hash)0x84FD40F56075E816, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x92922A607497B14D<br />
/// </para>
/// </remarks>
public static int GetNumberOfVehicleDoors(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x92922A607497B14D, vehicle);
}

/// <summary>
/// If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.<br /><br />Only used once in each carmod script, on a car that does not have hydraulics to begin with.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x28B18377EB6E25F6<br />
/// </para>
/// </remarks>
public static void SetHydraulicsControl(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x28B18377EB6E25F6, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA7DCDF4DED40A8F4<br />
/// </para>
/// </remarks>
public static void SetCanAdjustGroundClearance(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xA7DCDF4DED40A8F4, vehicle, p1);
}

/// <summary>
/// 0 min 100 max<br />starts at 100<br />Seams to have health zones<br />Front of vehicle when damaged goes from 100-50 and stops at 50.<br />Rear can be damaged from 100-0<br />Only tested with two cars.<br /><br />any idea how this differs from the first one?<br /><br />--<br />May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)<br /><br />example:<br /><br />v_F = ENTITY::GET_ENTITY_MODEL(v_3);<br />if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {<br />    if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) &lt;= 1.0) {<br />        NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);<br />    }<br />}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB8EF61207C2393A9<br />
/// </para>
/// </remarks>
public static float GetVehicleHealthPercentage(int /* Vehicle */ vehicle, float maxEngineHealth, float maxPetrolTankHealth, float maxBodyHealth, float maxMainRotorHealth, float maxTailRotorHealth, float maxUnkHealth)
{
return Function.Call<float>((Hash)0xB8EF61207C2393A9, vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD4C4642CB7F50B5D<br />
/// </para>
/// </remarks>
public static bool GetVehicleIsMercenary(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xD4C4642CB7F50B5D, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC361AA040D6637A8<br />
/// </para>
/// </remarks>
public static void SetVehicleBrokenPartsDontAffectAiHandling(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xC361AA040D6637A8, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x99C82F8A139F3E4E<br />
/// </para>
/// </remarks>
public static void SetVehicleKersAllowed(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x99C82F8A139F3E4E, vehicle, toggle);
}

/// <summary>
/// Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x50634E348C8D44EF<br />
/// </para>
/// </remarks>
public static bool GetVehicleHasKers(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x50634E348C8D44EF, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE16142B94664DEFD<br />
/// </para>
/// </remarks>
public static void SetPlaneResistToExplosion(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xE16142B94664DEFD, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2545<br />
/// <b>Native ID:</b> 0x8074CC1886802912<br />
/// </para>
/// </remarks>
public static void SetHeliResistToExplosion(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8074CC1886802912, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x26D99D5A82FD18E8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDisableBmxExtraTrickForces(int /* bug: Any */ p0)
{
Function.Call((Hash)0x26D99D5A82FD18E8, p0);
}

/// <summary>
/// Works only on vehicles that support hydraulics.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x84EA99C62CB3EF0C<br />
/// </para>
/// </remarks>
public static void SetHydraulicSuspensionRaiseFactor(int /* Vehicle */ vehicle, int wheelId, float value)
{
Function.Call((Hash)0x84EA99C62CB3EF0C, vehicle, wheelId, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x0BB5CBDDD0F25AE3<br />
/// </para>
/// </remarks>
public static float GetHydraulicSuspensionRaiseFactor(int /* Vehicle */ vehicle, int wheelId)
{
return Function.Call<float>((Hash)0x0BB5CBDDD0F25AE3, vehicle, wheelId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x1201E8A3290A3B98<br />
/// </para>
/// </remarks>
public static void SetCanUseHydraulics(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x1201E8A3290A3B98, vehicle, toggle);
}

/// <summary>
/// States:<br />4 = raise<br />5 = lower<br />6 = jump
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x8EA86DF356801C7D<br />
/// </para>
/// </remarks>
public static void SetHydraulicVehicleState(int /* Vehicle */ vehicle, int state)
{
Function.Call((Hash)0x8EA86DF356801C7D, vehicle, state);
}

/// <summary>
/// Sets vehicle wheel hydraulic states transition. Known states:<br />0 - reset<br />1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)<br />2 - jump using wheel
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0xC24075310A8B9CD1<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetHydraulicWheelState(int /* Vehicle */ vehicle, int wheelId, int state, float value, int /* bug: Any */ p4)
{
Function.Call((Hash)0xC24075310A8B9CD1, vehicle, wheelId, state, value, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x5BA68A0840D546AC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HasVehiclePetroltankSetOnFireByEntity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0x5BA68A0840D546AC, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 463<br />
/// <b>Native ID:</b> 0x4419966C9936071A<br />
/// </para>
/// </remarks>
public static void ClearVehiclePetroltankFireCulprit(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x4419966C9936071A, vehicle);
}

/// <summary>
/// Controls how fast bobbleheads and tsurikawas move on each axis.<br /><br />p2 is probably z, but changing that value didn&apos;t seem to have a noticeable effect.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x870B8B7A766615C8<br />
/// </para>
/// </remarks>
public static void SetVehicleBobbleheadVelocity(float x, float y, float p2)
{
Function.Call((Hash)0x870B8B7A766615C8, x, y, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x8533CAFDE1F0F336<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetVehicleIsDummy(int /* bug: Any */ p0)
{
return Function.Call<bool>((Hash)0x8533CAFDE1F0F336, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0x4E20D2A627011E8E<br />
/// </para>
/// </remarks>
public static bool SetVehicleDamageScale(int /* Vehicle */ vehicle, float p1)
{
return Function.Call<bool>((Hash)0x4E20D2A627011E8E, vehicle, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x45A561A9421AB6AD<br />
/// </para>
/// </remarks>
public static bool SetVehicleWeaponDamageScale(int /* Vehicle */ vehicle, float multiplier)
{
return Function.Call<bool>((Hash)0x45A561A9421AB6AD, vehicle, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xD4196117AF7BB974<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool SetDisableDamageWithPickedUpEntity(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<bool>((Hash)0xD4196117AF7BB974, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 757<br />
/// <b>Native ID:</b> 0xBB2333BB87DDD87F<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleUsesMpPlayerDamageMultiplier(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xBB2333BB87DDD87F, p0, p1);
}

/// <summary>
/// When enabled, the player won&apos;t fall off the bike when landing from large heights.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x73561D4425A021A2<br />
/// </para>
/// </remarks>
public static void SetBikeEasyToLand(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x73561D4425A021A2, vehicle, toggle);
}

/// <summary>
/// Inverts vehicle&apos;s controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)<br />Doesn&apos;t work for planes/helis.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 791<br />
/// <b>Native ID:</b> 0x5B91B229243351A8<br />
/// </para>
/// </remarks>
public static void SetInvertVehicleControls(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x5B91B229243351A8, vehicle, state);
}

/// <summary>
/// Disables the screen effects and sound effects when driving over a speed boost pad.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x7BBE7FF626A591FE<br />
/// </para>
/// </remarks>
public static void SetSpeedBoostEffectDisabled(bool disabled)
{
Function.Call((Hash)0x7BBE7FF626A591FE, disabled);
}

/// <summary>
/// Disables the screen effects and sound effects when driving over a slowdown pad.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x65B080555EA48149<br />
/// </para>
/// </remarks>
public static void SetSlowDownEffectDisabled(bool disabled)
{
Function.Call((Hash)0x65B080555EA48149, disabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0x428AD3E26C8D9EB0<br />
/// </para>
/// </remarks>
public static void SetFormationLeader(int /* Vehicle */ vehicle, float x, float y, float z, float p4)
{
Function.Call((Hash)0x428AD3E26C8D9EB0, vehicle, x, y, z, p4);
}

/// <summary>
/// Resets the effect of SET_FORMATION_LEADER
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xE2F53F172B45EDE1<br />
/// </para>
/// </remarks>
public static void ResetFormationLeader()
{
Function.Call((Hash)0xE2F53F172B45EDE1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 877<br />
/// <b>Native ID:</b> 0xBA91D045575699AD<br />
/// </para>
/// </remarks>
public static bool GetIsBoatCapsized(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xBA91D045575699AD, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x80E3357FDEF45C21<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetAllowRammingSoopOrRamp(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x80E3357FDEF45C21, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xEFC13B1CE30D755D<br />
/// </para>
/// </remarks>
public static void SetScriptRampImpulseScale(int /* Vehicle */ vehicle, float impulseScale)
{
Function.Call((Hash)0xEFC13B1CE30D755D, vehicle, impulseScale);
}

/// <summary>
/// doorId: see SET_VEHICLE_DOOR_SHUT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x645F4B6E8499F632<br />
/// </para>
/// </remarks>
public static bool GetIsDoorValid(int /* Vehicle */ vehicle, int doorId)
{
return Function.Call<bool>((Hash)0x645F4B6E8499F632, vehicle, doorId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xE00F2AB100B76E89<br />
/// </para>
/// </remarks>
public static void SetScriptRocketBoostRechargeTime(int /* Vehicle */ vehicle, float seconds)
{
Function.Call((Hash)0xE00F2AB100B76E89, vehicle, seconds);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x36D782F68B309BDA<br />
/// </para>
/// </remarks>
public static bool GetHasRocketBoost(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x36D782F68B309BDA, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x3D34E80EED4AE3BE<br />
/// </para>
/// </remarks>
public static bool IsRocketBoostActive(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x3D34E80EED4AE3BE, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x81E1552E35DC3839<br />
/// </para>
/// </remarks>
public static void SetRocketBoostActive(int /* Vehicle */ vehicle, bool active)
{
Function.Call((Hash)0x81E1552E35DC3839, vehicle, active);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xDCA174A42133F08C<br />
/// </para>
/// </remarks>
public static bool GetHasRetractableWheels(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xDCA174A42133F08C, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x1DA0DA9CB3F0C8BF<br />
/// </para>
/// </remarks>
public static bool GetIsWheelsRetracted(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x1DA0DA9CB3F0C8BF, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xF660602546D27BA8<br />
/// </para>
/// </remarks>
public static void SetWheelsExtendedInstantly(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0xF660602546D27BA8, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x5335BE58C083E74E<br />
/// </para>
/// </remarks>
public static void SetWheelsRetractedInstantly(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x5335BE58C083E74E, vehicle);
}

/// <summary>
/// Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x9078C0C5EF8C19E9<br />
/// </para>
/// </remarks>
public static bool GetCarHasJump(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x9078C0C5EF8C19E9, vehicle);
}

/// <summary>
/// Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xF06A16CA55D138D8<br />
/// </para>
/// </remarks>
public static void SetUseHigherCarJump(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xF06A16CA55D138D8, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xB2E0C0D6922D31F2<br />
/// </para>
/// </remarks>
public static void SetClearFreezeWaitingOnCollisionOncePlayerEnters(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xB2E0C0D6922D31F2, vehicle, toggle);
}

/// <summary>
/// Set vehicle&apos;s primary mounted weapon 2 ammo. For example, use it on APC.<br />For example, you can &quot;remove&quot; any vehicle weapon from any vehicle.<br />ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x44CD1F493DB2A0A6<br />
/// </para>
/// </remarks>
public static void SetVehicleWeaponRestrictedAmmo(int /* Vehicle */ vehicle, int weaponIndex, int capacity)
{
Function.Call((Hash)0x44CD1F493DB2A0A6, vehicle, weaponIndex, capacity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x8181CE2F25CB9BB7<br />
/// </para>
/// </remarks>
public static int GetVehicleWeaponRestrictedAmmo(int /* Vehicle */ vehicle, int weaponIndex)
{
return Function.Call<int>((Hash)0x8181CE2F25CB9BB7, vehicle, weaponIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xBC9CFF381338CB4F<br />
/// </para>
/// </remarks>
public static bool GetVehicleHasParachute(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xBC9CFF381338CB4F, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0xA916396DF4154EE3<br />
/// </para>
/// </remarks>
public static bool GetVehicleCanDeployParachute(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xA916396DF4154EE3, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x0BFFB028B3DD0A97<br />
/// </para>
/// </remarks>
public static void VehicleStartParachuting(int /* Vehicle */ vehicle, bool active)
{
Function.Call((Hash)0x0BFFB028B3DD0A97, vehicle, active);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x3DE51E9C80B116CF<br />
/// </para>
/// </remarks>
public static bool IsVehicleParachuteDeployed(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x3DE51E9C80B116CF, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x28D034A93FE31BF5<br />
/// </para>
/// </remarks>
public static void VehicleSetRampAndRammingCarsTakeDamage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x28D034A93FE31BF5, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x1BBAC99C0BC53656<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void VehicleSetEnableRampCarSideImpulse(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x1BBAC99C0BC53656, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 944<br />
/// <b>Native ID:</b> 0x756AE6E962168A04<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void VehicleSetEnableNormaliseRampCarVerticalVeloctiy(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x756AE6E962168A04, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x9D30687C57BAA0BB<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void VehicleSetJetWashForceEnabled(int /* bug: Any */ p0)
{
Function.Call((Hash)0x9D30687C57BAA0BB, p0);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x86B4B6212CB8B627<br />
/// </para>
/// </remarks>
public static void SetVehicleWeaponCanTargetObjects(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x86B4B6212CB8B627, vehicle, toggle);
}

/// <summary>
/// Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x41290B40FA63E6DA<br />
/// </para>
/// </remarks>
public static void SetVehicleUseBoostButtonForWheelRetract(bool toggle)
{
Function.Call((Hash)0x41290B40FA63E6DA, toggle);
}

/// <summary>
/// Parachute models:<br />- sr_prop_specraces_para_s_01<br />- imp_prop_impexp_para_s (SecuroServ; Default)<br />Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won&apos;t get stuck mid-air when using an umbrella.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x4D610C6B56031351<br />
/// </para>
/// </remarks>
public static void VehicleSetParachuteModelOverride(int /* Vehicle */ vehicle, uint modelHash)
{
Function.Call((Hash)0x4D610C6B56031351, vehicle, modelHash);
}

/// <summary>
/// Variations available for the generic parachute (sr_prop_specraces_para_s_01):<br />- 0: Rainbow<br />- 1: Red<br />- 2: White, blue, yellow<br />- 3: Black, red, white<br />- 4: Red, white, blue<br />- 5: Blue<br />- 6: Black<br />- 7: Black, yellow
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0xA74AD2439468C883<br />
/// </para>
/// </remarks>
public static void VehicleSetParachuteModelTintIndex(int /* Vehicle */ vehicle, int textureVariation)
{
Function.Call((Hash)0xA74AD2439468C883, vehicle, textureVariation);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x0419B167EE128F33<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int VehicleSetOverrideExtenableSideRatio(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x0419B167EE128F33, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF3B0E0AED097A3F5<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int VehicleSetExtenableSideTargetRatio(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0xF3B0E0AED097A3F5, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xD3E51C0AB8C26EEE<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int VehicleSetOverrideSideRatio(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0xD3E51C0AB8C26EEE, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x9B8E1BF04B51F2E8<br />
/// </para>
/// </remarks>
public static int GetAllVehicles(int /* bug: structure */ vehsStruct)
{
return Function.Call<int>((Hash)0x9B8E1BF04B51F2E8, vehsStruct);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x72BECCF4B829522E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetCargobobExtaPickupRange(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x72BECCF4B829522E, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x66E3AAFACE2D1EB8<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetOverrideVehicleDoorTorque(int /* bug: Any */ p0, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x66E3AAFACE2D1EB8, p0, p1, p2);
}

/// <summary>
/// Enables/disables the ability to wheelie on motorcycles.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x1312DDD8385AEE4E<br />
/// </para>
/// </remarks>
public static void SetWheelieEnabled(int /* Vehicle */ vehicle, bool enabled)
{
Function.Call((Hash)0x1312DDD8385AEE4E, vehicle, enabled);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xEDBC8405B3895CC9<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetDisableHeliExplodeFromBodyDamage(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0xEDBC8405B3895CC9, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x26E13D440E7F6064<br />
/// </para>
/// </remarks>
public static void SetDisableExplodeFromBodyDamageOnCollision(int /* Vehicle */ vehicle, float value)
{
Function.Call((Hash)0x26E13D440E7F6064, vehicle, value);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x2FA2494B47FDD009<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetTrailerAttachmentEnabled(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x2FA2494B47FDD009, p0, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xFEB2DDED3509562E<br />
/// </para>
/// </remarks>
public static void SetRocketBoostFill(int /* Vehicle */ vehicle, float percentage)
{
Function.Call((Hash)0xFEB2DDED3509562E, vehicle, percentage);
}

/// <summary>
/// Set state to true to extend the wings, false to retract them.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x544996C0081ABDEB<br />
/// </para>
/// </remarks>
public static void SetGliderActive(int /* Vehicle */ vehicle, bool state)
{
Function.Call((Hash)0x544996C0081ABDEB, vehicle, state);
}

/// <summary>
/// Resets the vehicle&apos;s turret to its default position in scripted cameras. Doesn&apos;t seem to affect turrets that are occupied by a ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x78CEEE41F49F421F<br />
/// </para>
/// </remarks>
public static void SetShouldResetTurretInScriptedCameras(int /* Vehicle */ vehicle, bool shouldReset)
{
Function.Call((Hash)0x78CEEE41F49F421F, vehicle, shouldReset);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xAF60E6A2936F982A<br />
/// </para>
/// </remarks>
public static void SetVehicleDisableCollisionUponCreation(int /* Vehicle */ vehicle, bool disable)
{
Function.Call((Hash)0xAF60E6A2936F982A, vehicle, disable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x430A7631A84C9BE7<br />
/// </para>
/// </remarks>
public static void SetGroundEffectReducesDrag(bool toggle)
{
Function.Call((Hash)0x430A7631A84C9BE7, toggle);
}

/// <summary>
/// Disables collision for this vehicle (maybe it also supports other entities, not sure).<br />Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.<br />Example: https://streamable.com/6n45d5<br />Not sure if there is a native (and if so, which one) that resets the collisions.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x75627043C6AA90AD<br />
/// </para>
/// </remarks>
public static void SetDisableMapCollision(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x75627043C6AA90AD, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x8235F1BEAD557629<br />
/// </para>
/// </remarks>
public static void SetDisablePedStandOnTop(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x8235F1BEAD557629, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x9640E30A7F395E4B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetVehicleDamageScales(int /* Vehicle */ vehicle, int /* bug: Any */ p1, int /* bug: Any */ p2, int /* bug: Any */ p3, int /* bug: Any */ p4)
{
Function.Call((Hash)0x9640E30A7F395E4B, vehicle, p1, p2, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x0BBB9A7A8FFE931B<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPlaneSectionDamageScale(int /* Vehicle */ vehicle, int /* bug: Any */ p1, int /* bug: Any */ p2)
{
Function.Call((Hash)0x0BBB9A7A8FFE931B, vehicle, p1, p2);
}

/// <summary>
/// Stops the cargobob from being able to attach any vehicle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x94A68DA412C4007D<br />
/// </para>
/// </remarks>
public static void SetHeliCanPickupEntityThatHasPickUpDisabled(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x94A68DA412C4007D, vehicle, toggle);
}

/// <summary>
/// Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xF4B2ED59DEB5D774<br />
/// </para>
/// </remarks>
public static void SetVehicleBombAmmo(int /* Vehicle */ vehicle, int bombCount)
{
Function.Call((Hash)0xF4B2ED59DEB5D774, vehicle, bombCount);
}

/// <summary>
/// Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xEA12BD130D7569A1<br />
/// </para>
/// </remarks>
public static int GetVehicleBombAmmo(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xEA12BD130D7569A1, vehicle);
}

/// <summary>
/// Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.<br />Use GET_VEHICLE_BOMB_AMMO to get the current amount.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x9BDA23BF666F0855<br />
/// </para>
/// </remarks>
public static void SetVehicleCountermeasureAmmo(int /* Vehicle */ vehicle, int counterMeasureCount)
{
Function.Call((Hash)0x9BDA23BF666F0855, vehicle, counterMeasureCount);
}

/// <summary>
/// Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.<br />Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0xF846AA63DF56B804<br />
/// </para>
/// </remarks>
public static int GetVehicleCountermeasureAmmo(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0xF846AA63DF56B804, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x0A3F820A9A9A9AC5<br />
/// </para>
/// </remarks>
public static void SetHeliCombatOffset(int /* Vehicle */ vehicle, float x, float y, float z)
{
Function.Call((Hash)0x0A3F820A9A9A9AC5, vehicle, x, y, z);
}

/// <summary>
/// Used in decompiled scripts in combination with GET_VEHICLE_SIZE<br />p7 is usually 2<br />p8 is usually 1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x51F30DB60626A20E<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool GetCanVehicleBePlacedHere(int /* Vehicle */ vehicle, float x, float y, float z, float rotX, float rotY, float rotZ, int p7, int /* bug: Any */ p8)
{
return Function.Call<bool>((Hash)0x51F30DB60626A20E, vehicle, x, y, z, rotX, rotY, rotZ, p7, p8);
}

/// <summary>
/// Sets a flag on heli and another vehicle type.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1180<br />
/// <b>Native ID:</b> 0x97841634EF7DF1D6<br />
/// </para>
/// </remarks>
public static void SetDisableAutomaticCrashTask(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x97841634EF7DF1D6, vehicle, toggle);
}

/// <summary>
/// Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar&apos;s scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.<br /><br />Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.<br /><br />Example:<br />Ped playerPed = PLAYER::PLAYER_PED_ID();<br />Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);<br />VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);<br />VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xD138FA15C9776837<br />
/// </para>
/// </remarks>
public static void SetSpecialFlightModeRatio(int /* Vehicle */ vehicle, float ratio)
{
Function.Call((Hash)0xD138FA15C9776837, vehicle, ratio);
}

/// <summary>
/// Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar&apos;s scripts. The vehicle will transform into the given targetRatio, starting from the vehicle&apos;s current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.<br /><br />targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.<br /><br />Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.<br /><br />Example:<br />Ped playerPed = PLAYER::PLAYER_PED_ID();<br />Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);<br />VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);<br />VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x438B3D7CA026FE91<br />
/// </para>
/// </remarks>
public static void SetSpecialFlightModeTargetRatio(int /* Vehicle */ vehicle, float targetRatio)
{
Function.Call((Hash)0x438B3D7CA026FE91, vehicle, targetRatio);
}

/// <summary>
/// It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xF1211889DF15A763<br />
/// </para>
/// </remarks>
public static void SetSpecialFlightModeAllowed(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xF1211889DF15A763, vehicle, toggle);
}

/// <summary>
/// Disables &quot;wings&quot; for some flying vehicles. Works only for oppressor _2_ and deluxo.<br />For deluxo it just immediately removes vehicle&apos;s &quot;wings&quot; and you will be not able to fly up.<br />For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.<br />But for opressor 2 you still can fly if you somehow get back in the air.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x2D55FE374D5FDB91<br />
/// </para>
/// </remarks>
public static void SetDisableHoverModeFlight(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x2D55FE374D5FDB91, vehicle, toggle);
}

/// <summary>
/// Checks if Chernobog&apos;s stabilizers are deployed or not.<br />These are the metal supports that allow it to fire.<br />This native only applies to the Chernobog.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x3A9128352EAC9E85<br />
/// </para>
/// </remarks>
public static bool GetOutriggersDeployed(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x3A9128352EAC9E85, vehicle);
}

/// <summary>
/// Native is significantly more complicated than simply generating a random vector &amp; length.<br />The &apos;point&apos; is either 400.0 or 250.0 units away from the Ped&apos;s current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x8DC9675797123522<br />
/// </para>
/// </remarks>
public static Vector3 FindSpawnCoordinatesForHeli(int /* Ped */ ped)
{
return Function.Call<Vector3>((Hash)0x8DC9675797123522, ped);
}

/// <summary>
/// Only used with the &quot;akula&quot; and &quot;annihilator2&quot; in the decompiled native scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xB251E0B33E58B424<br />
/// </para>
/// </remarks>
public static void SetDeployFoldingWings(int /* Vehicle */ vehicle, bool deploy, bool p2)
{
Function.Call((Hash)0xB251E0B33E58B424, vehicle, deploy, p2);
}

/// <summary>
/// Only used with the &quot;akula&quot; and &quot;annihilator2&quot; in the decompiled native scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xAEF12960FA943792<br />
/// </para>
/// </remarks>
public static bool AreFoldingWingsDeployed(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xAEF12960FA943792, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xAA653AE61924B0A0<br />
/// </para>
/// </remarks>
public static void SetDipStraightDownWhenCrashingPlane(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xAA653AE61924B0A0, vehicle, toggle);
}

/// <summary>
/// Toggles specific flag on turret
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0xC60060EB0D8AC7B1<br />
/// </para>
/// </remarks>
public static void SetTurretHidden(int /* Vehicle */ vehicle, int index, bool toggle)
{
Function.Call((Hash)0xC60060EB0D8AC7B1, vehicle, index, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x70A252F60A3E036B<br />
/// </para>
/// </remarks>
public static void SetHoverModeWingRatio(int /* Vehicle */ vehicle, float ratio)
{
Function.Call((Hash)0x70A252F60A3E036B, vehicle, ratio);
}

/// <summary>
/// Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0xE615BB7A7752C76A<br />
/// </para>
/// </remarks>
public static void SetDisableTurretMovement(int /* Vehicle */ vehicle, int turretId)
{
Function.Call((Hash)0xE615BB7A7752C76A, vehicle, turretId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x887FA38787DE8C72<br />
/// </para>
/// </remarks>
public static void SetForceFixLinkMatrices(int /* Vehicle */ vehicle)
{
Function.Call((Hash)0x887FA38787DE8C72, vehicle);
}

/// <summary>
/// Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x498218259FB7C72D<br />
/// </para>
/// </remarks>
public static void SetTransformRateForAnimation(int /* Vehicle */ vehicle, float transformRate)
{
Function.Call((Hash)0x498218259FB7C72D, vehicle, transformRate);
}

/// <summary>
/// When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1365<br />
/// <b>Native ID:</b> 0x41B9FB92EDED32A6<br />
/// </para>
/// </remarks>
public static void SetTransformToSubmarineUsesAlternateInput(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x41B9FB92EDED32A6, vehicle, toggle);
}

/// <summary>
/// Does nothing. It&apos;s a nullsub.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x36DE109527A2C0C4<br />
/// </para>
/// </remarks>
public static void SetVehicleCombatMode(bool toggle)
{
Function.Call((Hash)0x36DE109527A2C0C4, toggle);
}

/// <summary>
/// Does nothing. It&apos;s a nullsub.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x82E0AC411E41A5B4<br />
/// </para>
/// </remarks>
public static void SetVehicleDetonationMode(bool toggle)
{
Function.Call((Hash)0x82E0AC411E41A5B4, toggle);
}

/// <summary>
/// Does nothing. It&apos;s a nullsub.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x99A05839C46CE316<br />
/// </para>
/// </remarks>
public static void SetVehicleShuntOnStick(bool toggle)
{
Function.Call((Hash)0x99A05839C46CE316, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xA2459F72C14E2E8D<br />
/// </para>
/// </remarks>
public static bool GetIsVehicleShunting(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xA2459F72C14E2E8D, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xE8718FAF591FD224<br />
/// </para>
/// </remarks>
public static bool GetHasVehicleBeenHitByShunt(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0xE8718FAF591FD224, vehicle);
}

/// <summary>
/// Returns last vehicle that was rammed by the given vehicle using the shunt boost.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x04F2FA6E234162F7<br />
/// </para>
/// </remarks>
public static int GetLastShuntVehicle(int /* Vehicle */ vehicle)
{
return Function.Call<int>((Hash)0x04F2FA6E234162F7, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x143921E45EC44D62<br />
/// </para>
/// </remarks>
public static void SetDisableVehicleExplosionsDamage(bool toggle)
{
Function.Call((Hash)0x143921E45EC44D62, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xC8E9B6B71B8E660D<br />
/// </para>
/// </remarks>
public static void SetOverrideNitrousLevel(int /* Vehicle */ vehicle, bool toggle, float level, float power, float rechargeTime, bool disableSound)
{
Function.Call((Hash)0xC8E9B6B71B8E660D, vehicle, toggle, level, power, rechargeTime, disableSound);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x2970EAA18FD5E42F<br />
/// </para>
/// </remarks>
public static void SetIncreaseWheelCrushDamage(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x2970EAA18FD5E42F, vehicle, toggle);
}

/// <summary>
/// Sets some global vehicle related bool
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x211E95CE9903940C<br />
/// </para>
/// </remarks>
public static void SetDisableWeaponBladeForces(bool toggle)
{
Function.Call((Hash)0x211E95CE9903940C, toggle);
}

/// <summary>
/// Changes the car jump control to require a double-tap to activate.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x5BBCF35BF6E456F7<br />
/// </para>
/// </remarks>
public static void SetUseDoubleClickForCarJump(bool toggle)
{
Function.Call((Hash)0x5BBCF35BF6E456F7, toggle);
}

/// <summary>
/// Returns true only if the &quot;tombstone&quot; bone is attached to the vehicle, irrespective of &quot;FLAG_HAS_TOMBSTONE&quot; being present or not. Detaching the tombstone will return false.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x71AFB258CCED3A27<br />
/// </para>
/// </remarks>
public static bool GetDoesVehicleHaveTombstone(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x71AFB258CCED3A27, vehicle);
}

/// <summary>
/// Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0xAE71FB656C600587<br />
/// </para>
/// </remarks>
public static void HideTombstone(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xAE71FB656C600587, vehicle, toggle);
}

/// <summary>
/// Returns whether this vehicle is currently disabled by an EMP mine.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x0506ED94363AD905<br />
/// </para>
/// </remarks>
public static bool GetIsVehicleDisabledByEmp(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x0506ED94363AD905, vehicle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1604<br />
/// <b>Native ID:</b> 0x8F0D5BA1C2CC91D7<br />
/// </para>
/// </remarks>
public static void SetDisableRetractingWeaponBlades(bool toggle)
{
Function.Call((Hash)0x8F0D5BA1C2CC91D7, toggle);
}

/// <summary>
/// Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x55EAB010FAEE9380<br />
/// </para>
/// </remarks>
public static float GetTyreHealth(int /* Vehicle */ vehicle, int wheelIndex)
{
return Function.Call<float>((Hash)0x55EAB010FAEE9380, vehicle, wheelIndex);
}

/// <summary>
/// SET_TYRE_WEAR_RATE must be active, otherwise values set to &lt;1000.0f will default to 350.0f<br /><br />Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x74C68EF97645E79D<br />
/// </para>
/// </remarks>
public static void SetTyreHealth(int /* Vehicle */ vehicle, int wheelIndex, float health)
{
Function.Call((Hash)0x74C68EF97645E79D, vehicle, wheelIndex, health);
}

/// <summary>
/// Returns the multiplier value from SET_TYRE_WEAR_RATE<br /><br />Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x6E387895952F4F71<br />
/// </para>
/// </remarks>
public static float GetTyreWearRate(int /* Vehicle */ vehicle, int wheelIndex)
{
return Function.Call<float>((Hash)0x6E387895952F4F71, vehicle, wheelIndex);
}

/// <summary>
/// Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be &gt;0f.<br />Default value in Rockstar&apos;s Open Wheel Race JSON&apos;s (&quot;owrtws&quot;, &quot;owrtwm&quot;, &quot;owrtwh&quot;) is 1.0<br /><br />Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x01894E2EDE923CA2<br />
/// </para>
/// </remarks>
public static void SetTyreWearRate(int /* Vehicle */ vehicle, int wheelIndex, float multiplier)
{
Function.Call((Hash)0x01894E2EDE923CA2, vehicle, wheelIndex, multiplier);
}

/// <summary>
/// Controls how fast the tires wear out.<br /><br />Default values from Rockstar&apos;s Open Wheel Race JSON&apos;s:<br />&quot;owrtss&quot; (Soft): 2.2<br />&quot;owrtsm&quot; (Medium): 1.7<br />&quot;owrtsh&quot; (Hard): 1.2<br /><br />Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x392183BB9EA57697<br />
/// </para>
/// </remarks>
public static void SetTyreWearRateScale(int /* Vehicle */ vehicle, int wheelIndex, float multiplier)
{
Function.Call((Hash)0x392183BB9EA57697, vehicle, wheelIndex, multiplier);
}

/// <summary>
/// Controls how much traction the wheel loses.<br /><br />Default values from Rockstar&apos;s Open Wheel Race JSON&apos;s:<br />&quot;owrtds&quot; (Soft): 0.05<br />&quot;owrtdm&quot; (Medium): 0.45<br />&quot;owrtdh&quot; (Hard): 0.8<br /><br />Usable wheels:<br />0: wheel_lf<br />1: wheel_rf<br />2: wheel_lm1<br />3: wheel_rm1<br />4: wheel_lr<br />5: wheel_rr
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xC970D0E0FC31D768<br />
/// </para>
/// </remarks>
public static void SetTyreMaximumGripDifferenceDueToWearRate(int /* Vehicle */ vehicle, int wheelIndex, float multiplier)
{
Function.Call((Hash)0xC970D0E0FC31D768, vehicle, wheelIndex, multiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0xF8B49F5BA7F850E7<br />
/// </para>
/// </remarks>
public static void SetAircraftIgnoreHightmapOptimisation(int /* Vehicle */ vehicle, int p1)
{
Function.Call((Hash)0xF8B49F5BA7F850E7, vehicle, p1);
}

/// <summary>
/// Lowers the vehicle&apos;s stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x3A375167F5782A65<br />
/// </para>
/// </remarks>
public static void SetReducedSuspensionForce(int /* Vehicle */ vehicle, bool enable)
{
Function.Call((Hash)0x3A375167F5782A65, vehicle, enable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x5AC79C98C5C17F05<br />
/// </para>
/// </remarks>
public static void SetDriftTyres(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0x5AC79C98C5C17F05, vehicle, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x2F5A72430E78C8D3<br />
/// </para>
/// </remarks>
public static bool GetDriftTyresSet(int /* Vehicle */ vehicle)
{
return Function.Call<bool>((Hash)0x2F5A72430E78C8D3, vehicle);
}

/// <summary>
/// Implemented only for trains.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xEC0C1D4922AF9754<br />
/// </para>
/// </remarks>
public static void NetworkUseHighPrecisionTrainBlending(int /* Vehicle */ vehicle, bool toggle)
{
Function.Call((Hash)0xEC0C1D4922AF9754, vehicle, toggle);
}

/// <summary>
/// Only used in R* Script fm_content_cargo
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2699<br />
/// <b>Native ID:</b> 0xEF9D388F8D377F44<br />
/// </para>
/// </remarks>
public static void SetCheckForEnoughRoomForPed(int /* Vehicle */ vehicle, bool p1)
{
Function.Call((Hash)0xEF9D388F8D377F44, vehicle, p1);
}

#endregion
#region WATER
/// <summary>
/// This function set height to the value of z-axis of the water surface.<br /><br />This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)<br /><br />note: seems to return true when you are in water
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF6829842C06AE524<br />
/// </para>
/// </remarks>
public static bool GetWaterHeight(float x, float y, float z, ref float height)
{
var nativeAssistPointerVar0 = height;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xF6829842C06AE524, x, y, z, &nativeAssistPointerVar0);
}
height = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8EE6B53CE13A9794<br />
/// </para>
/// </remarks>
public static bool GetWaterHeightNoWaves(float x, float y, float z, ref float height)
{
var nativeAssistPointerVar0 = height;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x8EE6B53CE13A9794, x, y, z, &nativeAssistPointerVar0);
}
height = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFFA5D878809819DB<br />
/// </para>
/// </remarks>
public static bool TestProbeAgainstWater(float x1, float y1, float z1, float x2, float y2, float z2, ref Vector3 result)
{
var nativeAssistPointerVar0 = result;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xFFA5D878809819DB, x1, y1, z1, x2, y2, z2, &nativeAssistPointerVar0);
}
result = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// enum eScriptWaterTestResult<br />{<br />	SCRIPT_WATER_TEST_RESULT_NONE,<br />	SCRIPT_WATER_TEST_RESULT_WATER,<br />	SCRIPT_WATER_TEST_RESULT_BLOCKED,<br />};
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8974647ED222EA5F<br />
/// </para>
/// </remarks>
public static int TestProbeAgainstAllWater(float x1, float y1, float z1, float x2, float y2, float z2, int flags, ref float waterHeight)
{
var nativeAssistPointerVar0 = waterHeight;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x8974647ED222EA5F, x1, y1, z1, x2, y2, z2, flags, &nativeAssistPointerVar0);
}
waterHeight = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// See TEST_PROBE_AGAINST_ALL_WATER.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B3451FA1E3142E2<br />
/// </para>
/// </remarks>
public static int TestVerticalProbeAgainstAllWater(float x, float y, float z, int flags, ref float waterHeight)
{
var nativeAssistPointerVar0 = waterHeight;
int retVal;
unsafe {
retVal = Function.Call<int>((Hash)0x2B3451FA1E3142E2, x, y, z, flags, &nativeAssistPointerVar0);
}
waterHeight = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Sets the water height for a given position and radius.<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC443FD757C3BA637<br />
/// </para>
/// </remarks>
public static void ModifyWater(float x, float y, float radius, float height)
{
Function.Call((Hash)0xC443FD757C3BA637, x, y, radius, height);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFDBF4CDBC07E1706<br />
/// </para>
/// </remarks>
public static int AddExtraCalmingQuad(float xLow, float yLow, float xHigh, float yHigh, float height)
{
return Function.Call<int>((Hash)0xFDBF4CDBC07E1706, xLow, yLow, xHigh, yHigh, height);
}

/// <summary>
/// p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1252E3E59A82AAF<br />
/// </para>
/// </remarks>
public static void RemoveExtraCalmingQuad(int p0)
{
Function.Call((Hash)0xB1252E3E59A82AAF, p0);
}

/// <summary>
/// Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.<br /><br />Works only ~200 meters around the player.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB96B00E976BE977F<br />
/// </para>
/// </remarks>
public static void SetDeepOceanScaler(float intensity)
{
Function.Call((Hash)0xB96B00E976BE977F, intensity);
}

/// <summary>
/// Gets the aggressiveness factor of the ocean waves.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B2A2CC86778B619<br />
/// </para>
/// </remarks>
public static float GetDeepOceanScaler()
{
return Function.Call<float>((Hash)0x2B2A2CC86778B619);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x547237AA71AB44DE<br />
/// </para>
/// </remarks>
public static void SetCalmedWaveHeightScaler(float p0)
{
Function.Call((Hash)0x547237AA71AB44DE, p0);
}

/// <summary>
/// Sets the waves intensity back to original (1.0 in most cases).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5E5E99285AE812DB<br />
/// </para>
/// </remarks>
public static void ResetDeepOceanScaler()
{
Function.Call((Hash)0x5E5E99285AE812DB);
}

#endregion
#region WEAPON
/// <summary>
/// Enables laser sight on any weapon.<br /><br />It doesn&apos;t work. Neither on tick nor OnKeyDown
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC8B46D7727D864AA<br />
/// </para>
/// </remarks>
public static void EnableLaserSightRendering(bool toggle)
{
Function.Call((Hash)0xC8B46D7727D864AA, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0DB57B41EC1DB083<br />
/// </para>
/// </remarks>
public static uint GetWeaponComponentTypeModel(uint componentHash)
{
return Function.Call<uint>((Hash)0x0DB57B41EC1DB083, componentHash);
}

/// <summary>
/// Returns the model of any weapon.<br /><br />Can also take an ammo hash?<br />sub_6663a(&amp;l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF46CDC33180FDA94<br />
/// </para>
/// </remarks>
public static uint GetWeapontypeModel(uint weaponHash)
{
return Function.Call<uint>((Hash)0xF46CDC33180FDA94, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4215460B9B8B7FA0<br />
/// </para>
/// </remarks>
public static uint GetWeapontypeSlot(uint weaponHash)
{
return Function.Call<uint>((Hash)0x4215460B9B8B7FA0, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC3287EE3050FB74C<br />
/// </para>
/// </remarks>
public static uint GetWeapontypeGroup(uint weaponHash)
{
return Function.Call<uint>((Hash)0xC3287EE3050FB74C, weaponHash);
}

/// <summary>
/// Returns the amount of extra components the specified component has.<br />Returns -1 if the component isn&apos;t of type CWeaponComponentVariantModel.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x6558AC7C17BFEF58<br />
/// </para>
/// </remarks>
public static int GetWeaponComponentVariantExtraCount(uint componentHash)
{
return Function.Call<int>((Hash)0x6558AC7C17BFEF58, componentHash);
}

/// <summary>
/// Returns the model hash of the extra component at specified index.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 372<br />
/// <b>Native ID:</b> 0x4D1CB8DC40208A17<br />
/// </para>
/// </remarks>
public static uint GetWeaponComponentVariantExtraModel(uint componentHash, int extraComponentIndex)
{
return Function.Call<uint>((Hash)0x4D1CB8DC40208A17, componentHash, extraComponentIndex);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xADF692B254977C0C<br />
/// </para>
/// </remarks>
public static void SetCurrentPedWeapon(int /* Ped */ ped, uint weaponHash, bool bForceInHand)
{
Function.Call((Hash)0xADF692B254977C0C, ped, weaponHash, bForceInHand);
}

/// <summary>
/// The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.<br />p2 seems to be 1 most of the time.<br /><br /><br /><br /><br /><br />p2 is not implemented<br /><br />disassembly said that?<br />
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3A87E44BB9A01D54<br />
/// </para>
/// </remarks>
public static bool GetCurrentPedWeapon(int /* Ped */ ped, ref uint weaponHash, bool p2)
{
var nativeAssistPointerVar0 = weaponHash;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x3A87E44BB9A01D54, ped, &nativeAssistPointerVar0, p2);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3B390A939AF0B5FC<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int GetCurrentPedWeaponEntityIndex(int /* Ped */ ped, int /* bug: Any */ p1)
{
return Function.Call<int>((Hash)0x3B390A939AF0B5FC, ped, p1);
}

/// <summary>
/// p1 is always 0 in the scripts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8483E98E8B888AE2<br />
/// </para>
/// </remarks>
public static uint GetBestPedWeapon(int /* Ped */ ped, bool p1)
{
return Function.Call<uint>((Hash)0x8483E98E8B888AE2, ped, p1);
}

/// <summary>
/// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x75C55983C2C39DAA<br />
/// </para>
/// </remarks>
public static bool SetCurrentPedVehicleWeapon(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<bool>((Hash)0x75C55983C2C39DAA, ped, weaponHash);
}

/// <summary>
/// Example in VB<br /><br />    Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer<br />        Dim arg As New OutputArgument()<br />        Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)<br />        Return arg.GetResult(Of Integer)()<br />    End Function<br /><br />Usage:<br />If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something<br />Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1017582BCD3832DC<br />
/// </para>
/// </remarks>
public static bool GetCurrentPedVehicleWeapon(int /* Ped */ ped, ref uint weaponHash)
{
var nativeAssistPointerVar0 = weaponHash;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x1017582BCD3832DC, ped, &nativeAssistPointerVar0);
}
weaponHash = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1734<br />
/// <b>Native ID:</b> 0x50276EF8172F5F12<br />
/// </para>
/// </remarks>
public static void SetPedCycleVehicleWeaponsOnly(int /* Ped */ ped)
{
Function.Call((Hash)0x50276EF8172F5F12, ped);
}

/// <summary>
/// Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.<br /><br />Type flag bit values:<br />1 = Melee weapons<br />2 = Explosive weapons<br />4 = Any other weapons<br /><br />Not specifying any bit will lead to the native *always* returning &apos;false&apos;, and for example specifying &apos;4 | 2&apos; will check for any weapon except fists and melee weapons.<br />7 returns true if you are equipped with any weapon except your fists.<br />6 returns true if you are equipped with any weapon except melee weapons.<br />5 returns true if you are equipped with any weapon except the Explosives weapon group.<br />4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.<br />3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).<br />2 returns true only if you are equipped with any weapon from the Explosives weapon group.<br />1 returns true only if you are equipped with any Melee weapon.<br />0 never returns true.<br /><br />Note: When I say &quot;Explosives weapon group&quot;, it does not include the Jerry can and Fire Extinguisher.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x475768A975D5AD17<br />
/// </para>
/// </remarks>
public static bool IsPedArmed(int /* Ped */ ped, int typeFlags)
{
return Function.Call<bool>((Hash)0x475768A975D5AD17, ped, typeFlags);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x937C71165CF334B3<br />
/// </para>
/// </remarks>
public static bool IsWeaponValid(uint weaponHash)
{
return Function.Call<bool>((Hash)0x937C71165CF334B3, weaponHash);
}

/// <summary>
/// p2 should be FALSE, otherwise it seems to always return FALSE<br /><br />Bool does not check if the weapon is current equipped, unfortunately.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8DECB02F88F428BC<br />
/// </para>
/// </remarks>
public static bool HasPedGotWeapon(int /* Ped */ ped, uint weaponHash, bool p2)
{
return Function.Call<bool>((Hash)0x8DECB02F88F428BC, ped, weaponHash, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB80CA294F2F26749<br />
/// </para>
/// </remarks>
public static bool IsPedWeaponReadyToShoot(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0xB80CA294F2F26749, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xEFFED78E9011134D<br />
/// </para>
/// </remarks>
public static uint GetPedWeapontypeInSlot(int /* Ped */ ped, uint weaponSlot)
{
return Function.Call<uint>((Hash)0xEFFED78E9011134D, ped, weaponSlot);
}

/// <summary>
/// WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)<br /><br />From decompiled scripts<br />Returns total ammo in weapon<br /><br />GTALua Example :<br />natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x015A522136D7F951<br />
/// </para>
/// </remarks>
public static int GetAmmoInPedWeapon(int /* Ped */ ped, uint weaponhash)
{
return Function.Call<int>((Hash)0x015A522136D7F951, ped, weaponhash);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x78F0424C34306220<br />
/// </para>
/// </remarks>
public static void AddAmmoToPed(int /* Ped */ ped, uint weaponHash, int ammo)
{
Function.Call((Hash)0x78F0424C34306220, ped, weaponHash, ammo);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x14E56BC5B5DB6A19<br />
/// </para>
/// </remarks>
public static void SetPedAmmo(int /* Ped */ ped, uint weaponHash, int ammo, bool p3)
{
Function.Call((Hash)0x14E56BC5B5DB6A19, ped, weaponHash, ammo, p3);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3EDCB0505123623B<br />
/// </para>
/// </remarks>
public static void SetPedInfiniteAmmo(int /* Ped */ ped, bool toggle, uint weaponHash)
{
Function.Call((Hash)0x3EDCB0505123623B, ped, toggle, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x183DADC6AA953186<br />
/// </para>
/// </remarks>
public static void SetPedInfiniteAmmoClip(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x183DADC6AA953186, ped, toggle);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1868<br />
/// <b>Native ID:</b> 0x24C024BA8379A70A<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static void SetPedStunGunFiniteAmmo(int /* bug: Any */ p0, int /* bug: Any */ p1)
{
Function.Call((Hash)0x24C024BA8379A70A, p0, p1);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBF0FD6E56C964FCB<br />
/// </para>
/// </remarks>
public static void GiveWeaponToPed(int /* Ped */ ped, uint weaponHash, int ammoCount, bool isHidden, bool bForceInHand)
{
Function.Call((Hash)0xBF0FD6E56C964FCB, ped, weaponHash, ammoCount, isHidden, bForceInHand);
}

/// <summary>
/// Gives a weapon to PED with a delay, example:<br /><br />WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY(&quot;WEAPON_PISTOL&quot;), 1000, false)<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB282DC6EBD803C75<br />
/// </para>
/// </remarks>
public static void GiveDelayedWeaponToPed(int /* Ped */ ped, uint weaponHash, int ammoCount, bool bForceInHand)
{
Function.Call((Hash)0xB282DC6EBD803C75, ped, weaponHash, ammoCount, bForceInHand);
}

/// <summary>
/// setting the last params to false it does that same so I would suggest its not a toggle
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF25DF915FA38C5F3<br />
/// </para>
/// </remarks>
public static void RemoveAllPedWeapons(int /* Ped */ ped, bool p1)
{
Function.Call((Hash)0xF25DF915FA38C5F3, ped, p1);
}

/// <summary>
/// This native removes a specified weapon from your selected ped.<br /><br />Example:<br />C#:<br />Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);<br /><br />C++:<br />WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);<br /><br />The code above removes the knife from the player.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4899CB088EDF59B8<br />
/// </para>
/// </remarks>
public static void RemoveWeaponFromPed(int /* Ped */ ped, uint weaponHash)
{
Function.Call((Hash)0x4899CB088EDF59B8, ped, weaponHash);
}

/// <summary>
/// Hides the players weapon during a cutscene.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6F6981D2253C208F<br />
/// </para>
/// </remarks>
public static void HidePedWeaponForScriptedCutscene(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x6F6981D2253C208F, ped, toggle);
}

/// <summary>
/// Has 5 parameters since latest patches.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0725A4CCFDED9A70<br />
/// </para>
/// </remarks>
public static void SetPedCurrentWeaponVisible(int /* Ped */ ped, bool visible, bool deselectWeapon, bool p3, bool p4)
{
Function.Call((Hash)0x0725A4CCFDED9A70, ped, visible, deselectWeapon, p3, p4);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x476AE72C1D19D1A8<br />
/// </para>
/// </remarks>
public static void SetPedDropsWeaponsWhenDead(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x476AE72C1D19D1A8, ped, toggle);
}

/// <summary>
/// It determines what weapons caused damage:<br /><br />If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0<br />If you want to define any melee weapon, second parameter=0, third parameter=1.<br />If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2D343D2219CD027A<br />
/// </para>
/// </remarks>
public static bool HasPedBeenDamagedByWeapon(int /* Ped */ ped, uint weaponHash, int weaponType)
{
return Function.Call<bool>((Hash)0x2D343D2219CD027A, ped, weaponHash, weaponType);
}

/// <summary>
/// Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0E98F88A24C5F4B8<br />
/// </para>
/// </remarks>
public static void ClearPedLastWeaponDamage(int /* Ped */ ped)
{
Function.Call((Hash)0x0E98F88A24C5F4B8, ped);
}

/// <summary>
/// It determines what weapons caused damage:<br /><br />If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0<br />If you want to define any melee weapon, second parameter=0, third parameter=1.<br />If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x131D401334815E94<br />
/// </para>
/// </remarks>
public static bool HasEntityBeenDamagedByWeapon(int /* Entity */ entity, uint weaponHash, int weaponType)
{
return Function.Call<bool>((Hash)0x131D401334815E94, entity, weaponHash, weaponType);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAC678E40BE7C74D2<br />
/// </para>
/// </remarks>
public static void ClearEntityLastWeaponDamage(int /* Entity */ entity)
{
Function.Call((Hash)0xAC678E40BE7C74D2, entity);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6B7513D9966FBEC0<br />
/// </para>
/// </remarks>
public static void SetPedDropsWeapon(int /* Ped */ ped)
{
Function.Call((Hash)0x6B7513D9966FBEC0, ped);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x208A1888007FC0E6<br />
/// </para>
/// </remarks>
public static void SetPedDropsInventoryWeapon(int /* Ped */ ped, uint weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount)
{
Function.Call((Hash)0x208A1888007FC0E6, ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
}

/// <summary>
/// p2 is mostly 1 in the scripts.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA38DCFFCEA8962FA<br />
/// </para>
/// </remarks>
public static int GetMaxAmmoInClip(int /* Ped */ ped, uint weaponHash, bool p2)
{
return Function.Call<int>((Hash)0xA38DCFFCEA8962FA, ped, weaponHash, p2);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2E1202248937775C<br />
/// </para>
/// </remarks>
public static bool GetAmmoInClip(int /* Ped */ ped, uint weaponHash, ref int ammo)
{
var nativeAssistPointerVar0 = ammo;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x2E1202248937775C, ped, weaponHash, &nativeAssistPointerVar0);
}
ammo = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDCD2A934D65CB497<br />
/// </para>
/// </remarks>
public static bool SetAmmoInClip(int /* Ped */ ped, uint weaponHash, int ammo)
{
return Function.Call<bool>((Hash)0xDCD2A934D65CB497, ped, weaponHash, ammo);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xDC16122C7A20C933<br />
/// </para>
/// </remarks>
public static bool GetMaxAmmo(int /* Ped */ ped, uint weaponHash, ref int ammo)
{
var nativeAssistPointerVar0 = ammo;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xDC16122C7A20C933, ped, weaponHash, &nativeAssistPointerVar0);
}
ammo = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x585847C5E4E11709<br />
/// </para>
/// </remarks>
public static bool GetMaxAmmoByType(int /* Ped */ ped, uint ammoTypeHash, ref int ammo)
{
var nativeAssistPointerVar0 = ammo;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x585847C5E4E11709, ped, ammoTypeHash, &nativeAssistPointerVar0);
}
ammo = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x2472622CE1F2D45F<br />
/// </para>
/// </remarks>
public static void AddPedAmmoByType(int /* Ped */ ped, uint ammoTypeHash, int ammo)
{
Function.Call((Hash)0x2472622CE1F2D45F, ped, ammoTypeHash, ammo);
}

/// <summary>
/// Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5FD1E1F011E76D7E<br />
/// </para>
/// </remarks>
public static void SetPedAmmoByType(int /* Ped */ ped, uint ammoTypeHash, int ammo)
{
Function.Call((Hash)0x5FD1E1F011E76D7E, ped, ammoTypeHash, ammo);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x39D22031557946C1<br />
/// </para>
/// </remarks>
public static int GetPedAmmoByType(int /* Ped */ ped, uint ammoTypeHash)
{
return Function.Call<int>((Hash)0x39D22031557946C1, ped, ammoTypeHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xA4EFEF9440A5B0EF<br />
/// </para>
/// </remarks>
public static void SetPedAmmoToDrop(int /* Ped */ ped, int p1)
{
Function.Call((Hash)0xA4EFEF9440A5B0EF, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE620FD3512A04F18<br />
/// </para>
/// </remarks>
public static void SetPickupAmmoAmountScaler(float p0)
{
Function.Call((Hash)0xE620FD3512A04F18, p0);
}

/// <summary>
/// Returns the current ammo type of the specified ped&apos;s specified weapon.<br />MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.<br />Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7FEAD38B326B9F74<br />
/// </para>
/// </remarks>
public static uint GetPedAmmoTypeFromWeapon(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<uint>((Hash)0x7FEAD38B326B9F74, ped, weaponHash);
}

/// <summary>
/// Returns the base/default ammo type of the specified ped&apos;s specified weapon.<br />Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF489B44DD5AF4BD9<br />
/// </para>
/// </remarks>
public static uint GetPedOriginalAmmoTypeFromWeapon(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<uint>((Hash)0xF489B44DD5AF4BD9, ped, weaponHash);
}

/// <summary>
/// Pass ped. Pass address of Vector3.<br />The coord will be put into the Vector3.<br />The return will determine whether there was a coord found or not.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x6C4D0409BA1A2BC2<br />
/// </para>
/// </remarks>
public static bool GetPedLastWeaponImpactCoord(int /* Ped */ ped, ref Vector3 coords)
{
var nativeAssistPointerVar0 = coords;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0x6C4D0409BA1A2BC2, ped, &nativeAssistPointerVar0);
}
coords = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// p1/gadgetHash was always 0xFBAB5776 (&quot;GADGET_PARACHUTE&quot;).<br />p2 is always true.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD0D7B1E680ED4A1A<br />
/// </para>
/// </remarks>
public static void SetPedGadget(int /* Ped */ ped, uint gadgetHash, bool p2)
{
Function.Call((Hash)0xD0D7B1E680ED4A1A, ped, gadgetHash, p2);
}

/// <summary>
/// gadgetHash - was always 0xFBAB5776 (&quot;GADGET_PARACHUTE&quot;).
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF731332072F5156C<br />
/// </para>
/// </remarks>
public static bool GetIsPedGadgetEquipped(int /* Ped */ ped, uint gadgetHash)
{
return Function.Call<bool>((Hash)0xF731332072F5156C, ped, gadgetHash);
}

/// <summary>
/// Returns the hash of the weapon. <br /><br />            var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);<br />            sub_27D3(num7);<br />            switch (num7)<br />            {<br />                case 0x24B17070:<br /><br />Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?<br /><br />-------------------------------------------------------------------------<br /><br />The difference is that GET_SELECTED_PED_WEAPON simply returns the ped&apos;s current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0A6DB4965674D243<br />
/// </para>
/// </remarks>
public static uint GetSelectedPedWeapon(int /* Ped */ ped)
{
return Function.Call<uint>((Hash)0x0A6DB4965674D243, ped);
}

/// <summary>
///              WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC4BD125DE7611E4<br />
/// </para>
/// </remarks>
public static void ExplodeProjectiles(int /* Ped */ ped, uint weaponHash, bool p2)
{
Function.Call((Hash)0xFC4BD125DE7611E4, ped, weaponHash, p2);
}

/// <summary>
/// If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xFC52E0F37E446528<br />
/// </para>
/// </remarks>
public static void RemoveAllProjectilesOfType(uint weaponHash, bool explode)
{
Function.Call((Hash)0xFC52E0F37E446528, weaponHash, explode);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x840F03E9041E2C9C<br />
/// </para>
/// </remarks>
public static float GetLockonDistanceOfCurrentPedWeapon(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x840F03E9041E2C9C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x814C9D19DFD69679<br />
/// </para>
/// </remarks>
public static float GetMaxRangeOfCurrentPedWeapon(int /* Ped */ ped)
{
return Function.Call<float>((Hash)0x814C9D19DFD69679, ped);
}

/// <summary>
/// Fourth Parameter = unsure, almost always -1
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x717C8481234E3B88<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static bool HasVehicleGotProjectileAttached(int /* Ped */ driver, int /* Vehicle */ vehicle, uint weaponHash, int /* bug: Any */ p3)
{
return Function.Call<bool>((Hash)0x717C8481234E3B88, driver, vehicle, weaponHash, p3);
}

/// <summary>
/// Full list of weapons &amp; components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD966D51AA5B28BB9<br />
/// </para>
/// </remarks>
public static void GiveWeaponComponentToPed(int /* Ped */ ped, uint weaponHash, uint componentHash)
{
Function.Call((Hash)0xD966D51AA5B28BB9, ped, weaponHash, componentHash);
}

/// <summary>
/// Full list of weapons &amp; components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1E8BE90C74FB4C09<br />
/// </para>
/// </remarks>
public static void RemoveWeaponComponentFromPed(int /* Ped */ ped, uint weaponHash, uint componentHash)
{
Function.Call((Hash)0x1E8BE90C74FB4C09, ped, weaponHash, componentHash);
}

/// <summary>
/// Full list of weapons &amp; components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xC593212475FAE340<br />
/// </para>
/// </remarks>
public static bool HasPedGotWeaponComponent(int /* Ped */ ped, uint weaponHash, uint componentHash)
{
return Function.Call<bool>((Hash)0xC593212475FAE340, ped, weaponHash, componentHash);
}

/// <summary>
/// Full list of weapons &amp; components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x0D78DE0572D3969E<br />
/// </para>
/// </remarks>
public static bool IsPedWeaponComponentActive(int /* Ped */ ped, uint weaponHash, uint componentHash)
{
return Function.Call<bool>((Hash)0x0D78DE0572D3969E, ped, weaponHash, componentHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8C0D57EA686FAD87<br />
/// </para>
/// </remarks>
public static bool RefillAmmoInstantly(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x8C0D57EA686FAD87, ped);
}

/// <summary>
/// Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x20AE33F3AC9C0033<br />
/// </para>
/// </remarks>
public static bool MakePedReload(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x20AE33F3AC9C0033, ped);
}

/// <summary>
/// Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.<br /><br />REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5443438F033E29C3<br />
/// </para>
/// </remarks>
public static void RequestWeaponAsset(uint weaponHash, int p1, int p2)
{
Function.Call((Hash)0x5443438F033E29C3, weaponHash, p1, p2);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x36E353271F0E90EE<br />
/// </para>
/// </remarks>
public static bool HasWeaponAssetLoaded(uint weaponHash)
{
return Function.Call<bool>((Hash)0x36E353271F0E90EE, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xAA08EF13F341C8FC<br />
/// </para>
/// </remarks>
public static void RemoveWeaponAsset(uint weaponHash)
{
Function.Call((Hash)0xAA08EF13F341C8FC, weaponHash);
}

/// <summary>
/// Now has 8 params.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x9541D3CF0D398F36<br />There were parameter(s) that was labeled as <b>Any</b>, and these had been written as <c>int</c> by generator.
/// </para>
/// </remarks>
public static int CreateWeaponObject(uint weaponHash, int ammoCount, float x, float y, float z, bool showWorldModel, float scale, int /* bug: Any */ p7, int /* bug: Any */ p8, int /* bug: Any */ p9)
{
return Function.Call<int>((Hash)0x9541D3CF0D398F36, weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9);
}

/// <summary>
/// componentHash:<br />(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)<br />${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x33E179436C0B31DB<br />
/// </para>
/// </remarks>
public static void GiveWeaponComponentToWeaponObject(int /* Object */ weaponObject, uint componentHash)
{
Function.Call((Hash)0x33E179436C0B31DB, weaponObject, componentHash);
}

/// <summary>
/// see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons &amp; components
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF7D82B0D66777611<br />
/// </para>
/// </remarks>
public static void RemoveWeaponComponentFromWeaponObject(int /* Object */ @object, uint componentHash)
{
Function.Call((Hash)0xF7D82B0D66777611, @object, componentHash);
}

/// <summary>
/// see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons &amp; components
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x76A18844E743BF91<br />
/// </para>
/// </remarks>
public static bool HasWeaponGotWeaponComponent(int /* Object */ weapon, uint componentHash)
{
return Function.Call<bool>((Hash)0x76A18844E743BF91, weapon, componentHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB1FA61371AF7C4B7<br />
/// </para>
/// </remarks>
public static void GiveWeaponObjectToPed(int /* Object */ weaponObject, int /* Ped */ ped)
{
Function.Call((Hash)0xB1FA61371AF7C4B7, weaponObject, ped);
}

/// <summary>
/// Full list of weapons &amp; components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5CEE3DF569CECAB0<br />
/// </para>
/// </remarks>
public static bool DoesWeaponTakeWeaponComponent(uint weaponHash, uint componentHash)
{
return Function.Call<bool>((Hash)0x5CEE3DF569CECAB0, weaponHash, componentHash);
}

/// <summary>
/// Drops the current weapon and returns the object<br /><br />Unknown behavior when unarmed.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCAE1DC9A0E22A16D<br />
/// </para>
/// </remarks>
public static int GetWeaponObjectFromPed(int /* Ped */ ped, bool p1)
{
return Function.Call<int>((Hash)0xCAE1DC9A0E22A16D, ped, p1);
}

/// <summary>
/// Gives the specified loadout to the specified ped. <br />Loadouts are defined in common.rpf\data\ai\loadouts.meta
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x68F8BE6AF5CDF8A6<br />
/// </para>
/// </remarks>
public static void GiveLoadoutToPed(int /* Ped */ ped, uint loadoutHash)
{
Function.Call((Hash)0x68F8BE6AF5CDF8A6, ped, loadoutHash);
}

/// <summary>
/// tintIndex can be the following:<br /><br />0 - Normal<br />1 - Green<br />2 - Gold<br />3 - Pink<br />4 - Army<br />5 - LSPD<br />6 - Orange<br />7 - Platinum<br />Full list of weapons, components &amp; tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x50969B9B89ED5738<br />
/// </para>
/// </remarks>
public static void SetPedWeaponTintIndex(int /* Ped */ ped, uint weaponHash, int tintIndex)
{
Function.Call((Hash)0x50969B9B89ED5738, ped, weaponHash, tintIndex);
}

/// <summary>
/// Full list of weapons, components &amp; tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x2B9EEDC07BD06B9F<br />
/// </para>
/// </remarks>
public static int GetPedWeaponTintIndex(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<int>((Hash)0x2B9EEDC07BD06B9F, ped, weaponHash);
}

/// <summary>
/// Full list of weapons, components &amp; tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xF827589017D4E4A9<br />
/// </para>
/// </remarks>
public static void SetWeaponObjectTintIndex(int /* Object */ weapon, int tintIndex)
{
Function.Call((Hash)0xF827589017D4E4A9, weapon, tintIndex);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD183314F7CD2E57<br />
/// </para>
/// </remarks>
public static int GetWeaponObjectTintIndex(int /* Object */ weapon)
{
return Function.Call<int>((Hash)0xCD183314F7CD2E57, weapon);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5DCF6C5CAB2E9BF7<br />
/// </para>
/// </remarks>
public static int GetWeaponTintCount(uint weaponHash)
{
return Function.Call<int>((Hash)0x5DCF6C5CAB2E9BF7, weaponHash);
}

/// <summary>
/// Colors:<br />0 = Gray<br />1 = Dark Gray<br />2 = Black<br />3 = White<br />4 = Blue<br />5 = Cyan<br />6 = Aqua<br />7 = Cool Blue<br />8 = Dark Blue<br />9 = Royal Blue<br />10 = Plum<br />11 = Dark Purple<br />12 = Purple<br />13 = Red<br />14 = Wine Red<br />15 = Magenta<br />16 = Pink<br />17 = Salmon<br />18 = Hot Pink<br />19 = Rust Orange<br />20 = Brown<br />21 = Earth<br />22 = Orange<br />23 = Light Orange<br />24 = Dark Yellow<br />25 = Yellow<br />26 = Light Brown<br />27 = Lime Green<br />28 = Olive<br />29 = Moss<br />30 = Turquoise<br />31 = Dark Green<br />Full list of weapons, components, tint indexes &amp; weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x9FE5633880ECD8ED<br />
/// </para>
/// </remarks>
public static void SetPedWeaponComponentTintIndex(int /* Ped */ ped, uint weaponHash, uint camoComponentHash, int colorIndex)
{
Function.Call((Hash)0x9FE5633880ECD8ED, ped, weaponHash, camoComponentHash, colorIndex);
}

/// <summary>
/// Returns -1 if camoComponentHash is invalid/not attached to the weapon.<br />Full list of weapons, components, tint indexes &amp; weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xF0A60040BE558F2D<br />
/// </para>
/// </remarks>
public static int GetPedWeaponComponentTintIndex(int /* Ped */ ped, uint weaponHash, uint camoComponentHash)
{
return Function.Call<int>((Hash)0xF0A60040BE558F2D, ped, weaponHash, camoComponentHash);
}

/// <summary>
/// Colors:<br />0 = Gray<br />1 = Dark Gray<br />2 = Black<br />3 = White<br />4 = Blue<br />5 = Cyan<br />6 = Aqua<br />7 = Cool Blue<br />8 = Dark Blue<br />9 = Royal Blue<br />10 = Plum<br />11 = Dark Purple<br />12 = Purple<br />13 = Red<br />14 = Wine Red<br />15 = Magenta<br />16 = Pink<br />17 = Salmon<br />18 = Hot Pink<br />19 = Rust Orange<br />20 = Brown<br />21 = Earth<br />22 = Orange<br />23 = Light Orange<br />24 = Dark Yellow<br />25 = Yellow<br />26 = Light Brown<br />27 = Lime Green<br />28 = Olive<br />29 = Moss<br />30 = Turquoise<br />31 = Dark Green<br />Full list of weapons, components, tint indexes &amp; weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x5DA825A85D0EA6E6<br />
/// </para>
/// </remarks>
public static void SetWeaponObjectComponentTintIndex(int /* Object */ weaponObject, uint camoComponentHash, int colorIndex)
{
Function.Call((Hash)0x5DA825A85D0EA6E6, weaponObject, camoComponentHash, colorIndex);
}

/// <summary>
/// Returns -1 if camoComponentHash is invalid/not attached to the weapon object.<br />Full list of weapons, components, tint indexes &amp; weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xB3EA4FEABF41464B<br />
/// </para>
/// </remarks>
public static int GetWeaponObjectComponentTintIndex(int /* Object */ weaponObject, uint camoComponentHash)
{
return Function.Call<int>((Hash)0xB3EA4FEABF41464B, weaponObject, camoComponentHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xA2C9AC24B4061285<br />
/// </para>
/// </remarks>
public static int GetPedWeaponCamoIndex(int /* Ped */ ped, uint weaponHash)
{
return Function.Call<int>((Hash)0xA2C9AC24B4061285, ped, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0x977CA98939E82E4B<br />
/// </para>
/// </remarks>
public static void SetWeaponObjectCamoIndex(int /* Object */ weaponObject, int p1)
{
Function.Call((Hash)0x977CA98939E82E4B, weaponObject, p1);
}

/// <summary>
/// struct WeaponHudStatsData<br />{<br />    BYTE hudDamage; // 0x0000<br />    char _0x0001[0x7]; // 0x0001<br />    BYTE hudSpeed; // 0x0008<br />    char _0x0009[0x7]; // 0x0009<br />    BYTE hudCapacity; // 0x0010<br />    char _0x0011[0x7]; // 0x0011<br />    BYTE hudAccuracy; // 0x0018<br />    char _0x0019[0x7]; // 0x0019<br />    BYTE hudRange; // 0x0020<br />};<br /><br />Usage:<br /><br />WeaponHudStatsData data;<br />if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&amp;data))<br />{<br />    // BYTE damagePercentage = data.hudDamage and so on<br />}<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xD92C739EE34C9EBA<br />
/// </para>
/// </remarks>
public static bool GetWeaponHudStats(uint weaponHash, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0xD92C739EE34C9EBA, weaponHash, outData);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB3CAF387AE12E9F8<br />
/// </para>
/// </remarks>
public static bool GetWeaponComponentHudStats(uint componentHash, int /* bug: structure */ outData)
{
return Function.Call<bool>((Hash)0xB3CAF387AE12E9F8, componentHash, outData);
}

/// <summary>
/// This native does not return damages of weapons from the melee and explosive group.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3133B907D8B32053<br />
/// </para>
/// </remarks>
public static float GetWeaponDamage(uint weaponHash, uint componentHash)
{
return Function.Call<float>((Hash)0x3133B907D8B32053, weaponHash, componentHash);
}

/// <summary>
/// // Returns the size of the default weapon component clip.<br /><br />Use it like this:<br /><br />char cClipSize[32];<br />Hash cur;<br />if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &amp;cur, 1))<br />{<br />    if (WEAPON::IS_WEAPON_VALID(cur))<br />    {<br />        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);<br />        sprintf_s(cClipSize, &quot;ClipSize: %.d&quot;, iClipSize);<br />        vDrawString(cClipSize, 0.5f, 0.5f);<br />    }<br />}<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x583BE370B1EC6EB4<br />
/// </para>
/// </remarks>
public static int GetWeaponClipSize(uint weaponHash)
{
return Function.Call<int>((Hash)0x583BE370B1EC6EB4, weaponHash);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1290<br />
/// <b>Native ID:</b> 0x065D2AACAD8CF7A4<br />
/// </para>
/// </remarks>
public static float GetWeaponTimeBetweenShots(uint weaponHash)
{
return Function.Call<float>((Hash)0x065D2AACAD8CF7A4, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x8378627201D5497D<br />
/// </para>
/// </remarks>
public static void SetPedChanceOfFiringBlanks(int /* Ped */ ped, float xBias, float yBias)
{
Function.Call((Hash)0x8378627201D5497D, ped, xBias, yBias);
}

/// <summary>
/// Returns handle of the projectile.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xB4C8D77C80C0421E<br />
/// </para>
/// </remarks>
public static int SetPedShootOrdnanceWeapon(int /* Ped */ ped, float p1)
{
return Function.Call<int>((Hash)0xB4C8D77C80C0421E, ped, p1);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x48164DBB970AC3F0<br />
/// </para>
/// </remarks>
public static void RequestWeaponHighDetailModel(int /* Entity */ weaponObject)
{
Function.Call((Hash)0x48164DBB970AC3F0, weaponObject);
}

/// <summary>
/// Changes the weapon damage output by the given multiplier value. Must be run every frame.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 505<br />
/// <b>Native ID:</b> 0x4757F00BC6323CFE<br />
/// </para>
/// </remarks>
public static void SetWeaponDamageModifier(uint weaponHash, float damageMultiplier)
{
Function.Call((Hash)0x4757F00BC6323CFE, weaponHash, damageMultiplier);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0x4AE5AC8B852D642C<br />
/// </para>
/// </remarks>
public static void SetWeaponAoeModifier(uint weaponHash, float multiplier)
{
Function.Call((Hash)0x4AE5AC8B852D642C, weaponHash, multiplier);
}

/// <summary>
/// ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat(&quot;vehicle_weapon_mine_slick&quot;), 1.0);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2372<br />
/// <b>Native ID:</b> 0xE6D2CEDD370FF98E<br />
/// </para>
/// </remarks>
public static void SetWeaponEffectDurationModifier(uint p0, float p1)
{
Function.Call((Hash)0xE6D2CEDD370FF98E, p0, p1);
}

/// <summary>
/// This native returns a true or false value.<br /><br />Ped ped = The ped whose weapon you want to check.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x65F0C5AE05943EC7<br />
/// </para>
/// </remarks>
public static bool IsPedCurrentWeaponSilenced(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x65F0C5AE05943EC7, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4B7620C47217126C<br />
/// </para>
/// </remarks>
public static bool IsFlashLightOn(int /* Ped */ ped)
{
return Function.Call<bool>((Hash)0x4B7620C47217126C, ped);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCEA66DAD478CD39B<br />
/// </para>
/// </remarks>
public static bool SetFlashLightFadeDistance(float distance)
{
return Function.Call<bool>((Hash)0xCEA66DAD478CD39B, distance);
}

/// <summary>
/// Enables/disables flashlight on ped&apos;s weapon.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 2060<br />
/// <b>Native ID:</b> 0x988DB6FE9B3AC000<br />
/// </para>
/// </remarks>
public static void SetFlashLightActiveHistory(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0x988DB6FE9B3AC000, ped, toggle);
}

/// <summary>
/// Changes the selected ped aiming animation style. <br />Note : You must use GET_HASH_KEY!<br /><br />Strings to use with GET_HASH_KEY :<br /><br />    &quot;Ballistic&quot;,<br />    &quot;Default&quot;,<br />  &quot;Fat&quot;,<br />  &quot;Female&quot;,<br />   &quot;FirstPerson&quot;,<br />  &quot;FirstPersonAiming&quot;,<br />    &quot;FirstPersonFranklin&quot;,<br />  &quot;FirstPersonFranklinAiming&quot;,<br />    &quot;FirstPersonFranklinRNG&quot;,<br />   &quot;FirstPersonFranklinScope&quot;,<br /> &quot;FirstPersonMPFemale&quot;,<br />  &quot;FirstPersonMichael&quot;,<br />   &quot;FirstPersonMichaelAiming&quot;,<br /> &quot;FirstPersonMichaelRNG&quot;,<br />    &quot;FirstPersonMichaelScope&quot;,<br />  &quot;FirstPersonRNG&quot;,<br />   &quot;FirstPersonScope&quot;,<br /> &quot;FirstPersonTrevor&quot;,<br />    &quot;FirstPersonTrevorAiming&quot;,<br />  &quot;FirstPersonTrevorRNG&quot;,<br /> &quot;FirstPersonTrevorScope&quot;,<br />   &quot;Franklin&quot;,<br /> &quot;Gang&quot;,<br /> &quot;Gang1H&quot;,<br />   &quot;GangFemale&quot;,<br />   &quot;Hillbilly&quot;,<br />    &quot;MP_F_Freemode&quot;,<br />    &quot;Michael&quot;,<br />  &quot;SuperFat&quot;,<br /> &quot;Trevor&quot;
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x1055AC3A667F09D9<br />
/// </para>
/// </remarks>
public static void SetWeaponAnimationOverride(int /* Ped */ ped, uint animStyle)
{
Function.Call((Hash)0x1055AC3A667F09D9, ped, animStyle);
}

/// <summary>
/// enum class eDamageType<br />{<br />	UNKNOWN = 0,<br />	NONE = 1,<br />	MELEE = 2,<br />	BULLET = 3,<br />	BULLET_RUBBER = 4,<br />	EXPLOSIVE = 5,<br />	FIRE = 6,<br />	COLLISION = 7,<br />	FALL = 8,<br />	DROWN = 9,<br />	ELECTRIC = 10,<br />	BARBED_WIRE = 11,<br />	FIRE_EXTINGUISHER = 12,<br />	SMOKE = 13,<br />	WATER_CANNON = 14,<br />	TRANQUILIZER = 15,<br />};<br /><br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x3BE0BB12D25FB305<br />
/// </para>
/// </remarks>
public static int GetWeaponDamageType(uint weaponHash)
{
return Function.Call<int>((Hash)0x3BE0BB12D25FB305, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xE4DCEC7FD5B739A5<br />
/// </para>
/// </remarks>
public static void SetEqippedWeaponStartSpinningAtFullSpeed(int /* Ped */ ped)
{
Function.Call((Hash)0xE4DCEC7FD5B739A5, ped);
}

/// <summary>
/// this returns if you can use the weapon while using a parachute<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBC7BE5ABC0879F74<br />
/// </para>
/// </remarks>
public static bool CanUseWeaponOnParachute(uint weaponHash)
{
return Function.Call<bool>((Hash)0xBC7BE5ABC0879F74, weaponHash);
}

/// <summary>
/// Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie&apos;s rockets) are also used by yachts.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x91EF34584710BE99<br />
/// </para>
/// </remarks>
public static int CreateAirDefenceSphere(float x, float y, float z, float radius, float p4, float p5, float p6, uint weaponHash)
{
return Function.Call<int>((Hash)0x91EF34584710BE99, x, y, z, radius, p4, p5, p6, weaponHash);
}

/// <summary>
/// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1011<br />
/// <b>Native ID:</b> 0x9DA58CDBF6BDBC08<br />
/// </para>
/// </remarks>
public static int CreateAirDefenceAngledArea(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float radius, uint weaponHash)
{
return Function.Call<int>((Hash)0x9DA58CDBF6BDBC08, p0, p1, p2, p3, p4, p5, p6, p7, p8, radius, weaponHash);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x0ABF535877897560<br />
/// </para>
/// </remarks>
public static bool RemoveAirDefenceSphere(int zoneId)
{
return Function.Call<bool>((Hash)0x0ABF535877897560, zoneId);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x1E45B34ADEBEE48E<br />
/// </para>
/// </remarks>
public static void RemoveAllAirDefenceSpheres()
{
Function.Call((Hash)0x1E45B34ADEBEE48E);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0xECDC202B25E5CF48<br />
/// </para>
/// </remarks>
public static void SetPlayerTargettableForAirDefenceSphere(int /* Player */ player, int zoneId, bool enable)
{
Function.Call((Hash)0xECDC202B25E5CF48, player, zoneId, enable);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xDAB963831DBFD3F4<br />
/// </para>
/// </remarks>
public static bool IsAirDefenceSphereInArea(float x, float y, float z, float radius, ref int outZoneId)
{
var nativeAssistPointerVar0 = outZoneId;
bool retVal;
unsafe {
retVal = Function.Call<bool>((Hash)0xDAB963831DBFD3F4, x, y, z, radius, &nativeAssistPointerVar0);
}
outZoneId = nativeAssistPointerVar0;
return retVal;
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 573<br />
/// <b>Native ID:</b> 0x44F1012B69313374<br />
/// </para>
/// </remarks>
public static void FireAirDefenceSphereWeaponAtPosition(int zoneId, float x, float y, float z)
{
Function.Call((Hash)0x44F1012B69313374, zoneId, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 678<br />
/// <b>Native ID:</b> 0xCD79A550999D7D4F<br />
/// </para>
/// </remarks>
public static bool DoesAirDefenceSphereExist(int zoneId)
{
return Function.Call<bool>((Hash)0xCD79A550999D7D4F, zoneId);
}

/// <summary>
/// Disables selecting the given weapon. Ped isn&apos;t forced to put the gun away. However you can&apos;t reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.<br />Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xB4771B9AAF4E68E4<br />
/// </para>
/// </remarks>
public static void SetCanPedSelectInventoryWeapon(int /* Ped */ ped, uint weaponHash, bool toggle)
{
Function.Call((Hash)0xB4771B9AAF4E68E4, ped, weaponHash, toggle);
}

/// <summary>
/// Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 1103<br />
/// <b>Native ID:</b> 0xEFF296097FF1E509<br />
/// </para>
/// </remarks>
public static void SetCanPedSelectAllWeapons(int /* Ped */ ped, bool toggle)
{
Function.Call((Hash)0xEFF296097FF1E509, ped, toggle);
}

#endregion
#region ZONE
/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x27040C25DE6CB2F4<br />
/// </para>
/// </remarks>
public static int GetZoneAtCoords(float x, float y, float z)
{
return Function.Call<int>((Hash)0x27040C25DE6CB2F4, x, y, z);
}

/// <summary>
/// &apos;zoneName&apos; corresponds to an entry in &apos;popzone.ipl&apos;.<br /><br />AIRP = Los Santos International Airport<br />ALAMO = Alamo Sea<br />ALTA = Alta<br />ARMYB = Fort Zancudo<br />BANHAMC = Banham Canyon Dr<br />BANNING = Banning<br />BEACH = Vespucci Beach<br />BHAMCA = Banham Canyon<br />BRADP = Braddock Pass<br />BRADT = Braddock Tunnel<br />BURTON = Burton<br />CALAFB = Calafia Bridge<br />CANNY = Raton Canyon<br />CCREAK = Cassidy Creek<br />CHAMH = Chamberlain Hills<br />CHIL = Vinewood Hills<br />CHU = Chumash<br />CMSW = Chiliad Mountain State Wilderness<br />CYPRE = Cypress Flats<br />DAVIS = Davis<br />DELBE = Del Perro Beach<br />DELPE = Del Perro<br />DELSOL = La Puerta<br />DESRT = Grand Senora Desert<br />DOWNT = Downtown<br />DTVINE = Downtown Vinewood<br />EAST_V = East Vinewood<br />EBURO = El Burro Heights<br />ELGORL = El Gordo Lighthouse<br />ELYSIAN = Elysian Island<br />GALFISH = Galilee<br />GOLF = GWC and Golfing Society<br />GRAPES = Grapeseed<br />GREATC = Great Chaparral<br />HARMO = Harmony<br />HAWICK = Hawick<br />HORS = Vinewood Racetrack<br />HUMLAB = Humane Labs and Research<br />JAIL = Bolingbroke Penitentiary<br />KOREAT = Little Seoul<br />LACT = Land Act Reservoir<br />LAGO = Lago Zancudo<br />LDAM = Land Act Dam<br />LEGSQU = Legion Square<br />LMESA = La Mesa<br />LOSPUER = La Puerta<br />MIRR = Mirror Park<br />MORN = Morningwood<br />MOVIE = Richards Majestic<br />MTCHIL = Mount Chiliad<br />MTGORDO = Mount Gordo<br />MTJOSE = Mount Josiah<br />MURRI = Murrieta Heights<br />NCHU = North Chumash<br />NOOSE = N.O.O.S.E<br />OCEANA = Pacific Ocean<br />PALCOV = Paleto Cove<br />PALETO = Paleto Bay<br />PALFOR = Paleto Forest<br />PALHIGH = Palomino Highlands<br />PALMPOW = Palmer-Taylor Power Station<br />PBLUFF = Pacific Bluffs<br />PBOX = Pillbox Hill<br />PROCOB = Procopio Beach<br />RANCHO = Rancho<br />RGLEN = Richman Glen<br />RICHM = Richman<br />ROCKF = Rockford Hills<br />RTRAK = Redwood Lights Track<br />SANAND = San Andreas<br />SANCHIA = San Chianski Mountain Range<br />SANDY = Sandy Shores<br />SKID = Mission Row<br />SLAB = Stab City<br />STAD = Maze Bank Arena<br />STRAW = Strawberry<br />TATAMO = Tataviam Mountains<br />TERMINA = Terminal<br />TEXTI = Textile City<br />TONGVAH = Tongva Hills<br />TONGVAV = Tongva Valley<br />VCANA = Vespucci Canals<br />VESP = Vespucci<br />VINE = Vinewood<br />WINDF = Ron Alternates Wind Farm<br />WVINE = West Vinewood<br />ZANCUDO = Zancudo River<br />ZP_ORT = Port of South Los Santos<br />ZQ_UAR = Davis Quartz<br /><br />Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x98CD1D2934B76CC1<br />
/// </para>
/// </remarks>
public static int GetZoneFromNameId(string zoneName)
{
return Function.Call<int>((Hash)0x98CD1D2934B76CC1, zoneName);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x4334BC40AA0CB4BB<br />
/// </para>
/// </remarks>
public static int GetZonePopschedule(int zoneId)
{
return Function.Call<int>((Hash)0x4334BC40AA0CB4BB, zoneId);
}

/// <summary>
/// AIRP = Los Santos International Airport<br />ALAMO = Alamo Sea<br />ALTA = Alta<br />ARMYB = Fort Zancudo<br />BANHAMC = Banham Canyon Dr<br />BANNING = Banning<br />BEACH = Vespucci Beach<br />BHAMCA = Banham Canyon<br />BRADP = Braddock Pass<br />BRADT = Braddock Tunnel<br />BURTON = Burton<br />CALAFB = Calafia Bridge<br />CANNY = Raton Canyon<br />CCREAK = Cassidy Creek<br />CHAMH = Chamberlain Hills<br />CHIL = Vinewood Hills<br />CHU = Chumash<br />CMSW = Chiliad Mountain State Wilderness<br />CYPRE = Cypress Flats<br />DAVIS = Davis<br />DELBE = Del Perro Beach<br />DELPE = Del Perro<br />DELSOL = La Puerta<br />DESRT = Grand Senora Desert<br />DOWNT = Downtown<br />DTVINE = Downtown Vinewood<br />EAST_V = East Vinewood<br />EBURO = El Burro Heights<br />ELGORL = El Gordo Lighthouse<br />ELYSIAN = Elysian Island<br />GALFISH = Galilee<br />GOLF = GWC and Golfing Society<br />GRAPES = Grapeseed<br />GREATC = Great Chaparral<br />HARMO = Harmony<br />HAWICK = Hawick<br />HORS = Vinewood Racetrack<br />HUMLAB = Humane Labs and Research<br />JAIL = Bolingbroke Penitentiary<br />KOREAT = Little Seoul<br />LACT = Land Act Reservoir<br />LAGO = Lago Zancudo<br />LDAM = Land Act Dam<br />LEGSQU = Legion Square<br />LMESA = La Mesa<br />LOSPUER = La Puerta<br />MIRR = Mirror Park<br />MORN = Morningwood<br />MOVIE = Richards Majestic<br />MTCHIL = Mount Chiliad<br />MTGORDO = Mount Gordo<br />MTJOSE = Mount Josiah<br />MURRI = Murrieta Heights<br />NCHU = North Chumash<br />NOOSE = N.O.O.S.E<br />OCEANA = Pacific Ocean<br />PALCOV = Paleto Cove<br />PALETO = Paleto Bay<br />PALFOR = Paleto Forest<br />PALHIGH = Palomino Highlands<br />PALMPOW = Palmer-Taylor Power Station<br />PBLUFF = Pacific Bluffs<br />PBOX = Pillbox Hill<br />PROCOB = Procopio Beach<br />RANCHO = Rancho<br />RGLEN = Richman Glen<br />RICHM = Richman<br />ROCKF = Rockford Hills<br />RTRAK = Redwood Lights Track<br />SANAND = San Andreas<br />SANCHIA = San Chianski Mountain Range<br />SANDY = Sandy Shores<br />SKID = Mission Row<br />SLAB = Stab City<br />STAD = Maze Bank Arena<br />STRAW = Strawberry<br />TATAMO = Tataviam Mountains<br />TERMINA = Terminal<br />TEXTI = Textile City<br />TONGVAH = Tongva Hills<br />TONGVAV = Tongva Valley<br />VCANA = Vespucci Canals<br />VESP = Vespucci<br />VINE = Vinewood<br />WINDF = Ron Alternates Wind Farm<br />WVINE = West Vinewood<br />ZANCUDO = Zancudo River<br />ZP_ORT = Port of South Los Santos<br />ZQ_UAR = Davis Quartz<br /><br />Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xCD90657D4C30E1CA<br />
/// </para>
/// </remarks>
public static string GetNameOfZone(float x, float y, float z)
{
return Function.Call<string>((Hash)0xCD90657D4C30E1CA, x, y, z);
}

/// <summary>
/// <i>No description available.</i>
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0xBA5ECEEA120E5611<br />
/// </para>
/// </remarks>
public static void SetZoneEnabled(int zoneId, bool toggle)
{
Function.Call((Hash)0xBA5ECEEA120E5611, zoneId, toggle);
}

/// <summary>
/// cellphone range 1- 5 used for signal bar in iFruit phone
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F7B268D15BA0739<br />
/// </para>
/// </remarks>
public static int GetZoneScumminess(int zoneId)
{
return Function.Call<int>((Hash)0x5F7B268D15BA0739, zoneId);
}

/// <summary>
/// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.<br /><br />Modified example from &quot;am_imp_exp.c4&quot;, line 6406:<br />/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));<br />etc.<br />*/<br />ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);<br />STREAMING::REQUEST_MODEL(vehicleHash);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5F7D596BAC2E7777<br />
/// </para>
/// </remarks>
public static void OverridePopscheduleVehicleModel(int scheduleId, uint vehicleHash)
{
Function.Call((Hash)0x5F7D596BAC2E7777, scheduleId, vehicleHash);
}

/// <summary>
/// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.<br /><br />Modified example from &quot;am_imp_exp.c4&quot;, line 6418:<br />/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));<br />etc.<br />*/<br />STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);<br />ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x5C0DE367AA0D911C<br />
/// </para>
/// </remarks>
public static void ClearPopscheduleOverrideVehicleModel(int scheduleId)
{
Function.Call((Hash)0x5C0DE367AA0D911C, scheduleId);
}

/// <summary>
/// Returns a hash representing which part of the map the given coords are located.<br /><br />Possible return values:<br />(Hash of) city -&gt; -289320599<br />(Hash of) countryside -&gt; 2072609373<br /><br />C# Example :<br /><br />Ped player = Game.Player.Character;<br />Hash h = Function.Call&lt;Hash&gt;(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
/// </summary>
/// <remarks>
/// <para>
/// <b>From Build:</b> 323<br />
/// <b>Native ID:</b> 0x7EE64D51E8498728<br />
/// </para>
/// </remarks>
public static uint GetHashOfMapAreaAtCoords(float x, float y, float z)
{
return Function.Call<uint>((Hash)0x7EE64D51E8498728, x, y, z);
}

#endregion
}
